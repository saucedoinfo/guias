{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Mi coleccion de guias para el crecimiento IT. \u00b6 Estas guias son una recopilaci\u00f3n de notas, comentarios y/o post que recopilo de diferentes plataformas: Manz Platzi Youtube Udemy Blogs, webs, etc Los cuales sirven para estudiar, repasar o practicar en el mundo del dise\u00f1o y desarrollo. Las fuentes originales del contenido se encuentra al final de cada guia Disfruta y cosecha el dia ! Este proyecto esta creado con Mkdocs y usa el tema Material for MkDocs","title":"Home"},{"location":"#mi-coleccion-de-guias-para-el-crecimiento-it","text":"Estas guias son una recopilaci\u00f3n de notas, comentarios y/o post que recopilo de diferentes plataformas: Manz Platzi Youtube Udemy Blogs, webs, etc Los cuales sirven para estudiar, repasar o practicar en el mundo del dise\u00f1o y desarrollo. Las fuentes originales del contenido se encuentra al final de cada guia Disfruta y cosecha el dia ! Este proyecto esta creado con Mkdocs y usa el tema Material for MkDocs","title":"Mi coleccion de guias para el crecimiento IT."},{"location":"about/","text":"Sobre este proyecto \u00b6 Creador: Fernando S. Saucedo Sistema - https://www.mkdocs.org/ Tema: - https://github.com/squidfunk/mkdocs-material","title":"Acerca de"},{"location":"about/#sobre-este-proyecto","text":"Creador: Fernando S. Saucedo Sistema - https://www.mkdocs.org/ Tema: - https://github.com/squidfunk/mkdocs-material","title":"Sobre este proyecto"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/01-introduccion/","text":"Introduccion \u00b6 Historia del Bitcoin \u00b6 Bitcoin y Criptomonedas: Econom\u00eda Digital \u00b6 Hola, mi nombre es Angela Ocando y voy a ser tu profesora en este curso de Econom\u00eda Digital con Bitcoin y Criptomonedas. Soy parte del equipo de Success en Platzi como Student Advocate y esta es una de mis pasiones. Comenc\u00e9 a interesarme y aprender de este ecosistema desde finales de 2016; desde entonces el mercado me ha ense\u00f1ado grandes lecciones que quiero compartir contigo. Bitcoin es la primera criptomoneda o activo financiero digital descentralizado de la historia que permite realizar transacciones de forma segura, privada y sin intermediarios alrededor del mundo \u00bfQu\u00e9 significa esto? En las pr\u00f3ximas clases te lo cuento. Nadie sabe con certeza la identidad del creador o creadores de Bitcoin. Satoshi Nakamoto es el pseud\u00f3nimo que fue utilizado por la persona o el grupo de personas que dise\u00f1aron y crearon el ecosistema Bitcoin. Lo \u00fanico que se conoce de Satoshi Nakamoto son sus datos publicados en P2PFoundation : Hombre de nacionalidad japonesa y 45 a\u00f1os de edad (5 de abril de 1975). \u00bfPor qu\u00e9 fue creado Bitcoin? \u00b6 En 2008 el mundo presenci\u00f3 una de las crisis financieras m\u00e1s importantes de la historia, causando inestabilidad en los mercados y el sistema financiero a partir de las decisiones y medidas tomadas por los gobiernos y entidades bancarias. A inicios de 2009, todo cambi\u00f3; el Bitcoin fue presentado al mundo a trav\u00e9s de la tecnolog\u00eda Blockchain: un sistema que permite la emisi\u00f3n controlada de las monedas digitales, adem\u00e1s de funcionar como un libro p\u00fablico que registra cada una de las transacciones realizadas, lo que asegura que cada moneda solo pueda ocuparse una vez. De esa forma, el esquema de seguridad est\u00e1 garantizado, pues cada una de estas transacciones son realizadas por medio de una red descentralizada de ordenadores y no existe ente gubernamental o intermediario entre los participantes. Historia del Bitcoin \u00b6 Previo al bitcoin existieron varias iniciativas para poder crear un registro descentralizado de un activo digital, sin embargo ninguna logr\u00f3 ser exitosa debido a problemas de seguridad y usabilidad. A mediados de 2008 fue registrado el dominio bitcoin.org , pero no fue hasta el 3 de enero de 2009 d\u00f3nde sali\u00f3 el primer documento que explicar\u00eda el funcionamiento del cripto ecosistema. Este mismo d\u00eda se min\u00f3 el primer bloque de Bitcoin, generando entonces los primeros 50 Bitcoins de la historia y dando inicio a lo que se convertir\u00eda en una alternativa financiera en el mundo algunos a\u00f1os despu\u00e9s. Durante su primer a\u00f1o de creaci\u00f3n muy pocas personas sab\u00edan sobre el Bitcoin, tambi\u00e9n denominado como BTC en el sistema financiero, y su cotizaci\u00f3n fue pautada antes de finalizar el 2009 en menos de 1 centavo de d\u00f3lar considerando el coste de energ\u00eda requerido por un computador para poder resolver un bloque de minado, y generar bitcoins a partir de ello. No fue hasta el 22 de mayo de 2010 que se realiz\u00f3 el primer pago en bitcoins en la compra de dos pizzas por 10.000 BTC, hecho que quedar\u00eda marcado en la historia y que hoy se celebra cada a\u00f1o como el \"Bitcoin Pizza Day\" teniendo en cuenta que la cotizaci\u00f3n de esta moneda en mayo de 2020 supera los 8000 USD por unidad. Por lo tanto 10.000 BTC representan una cantidad superior a los 80 millones de d\u00f3lares americanos. El precio de un bitcoin se determina a partir de las principales fuerzas de mercado: la oferta y la demanda. Durante los primeros a\u00f1os la cotizaci\u00f3n del precio no vari\u00f3 en gran medida, pero s\u00ed aument\u00f3 su reconocimiento. En 2011 finalmente super\u00f3 1 d\u00f3lar americano (USD) de precio durante el primer trimestre, iniciando a partir de all\u00ed picos de volatilidad, pues en s\u00f3lo unos meses super\u00f3 los 10 USD por bitcoin y cay\u00f3 nuevamente a 2 USD para final de a\u00f1o. A partir de all\u00ed, el mundo comenz\u00f3 a conocer m\u00e1s sobre Bitcoin a trav\u00e9s de eventos fundamentales , sus beneficios y tambi\u00e9n la volatilidad en los precios. Pas\u00f3 a convertirse en el tiempo no s\u00f3lo en una moneda digital sino tambi\u00e9n en un activo financiero importante de gran rentabilidad y detr\u00e1s de ello en un ecosistema con cientos de proyectos consolidados sobre la tecnolog\u00eda blockchain llev\u00e1ndolo a superar en 2017 un precio cercano a los 20.000 USD. Resumen En efecto, el bitcoin y las criptomonedas han llegado para quedarse marcando un antes y un despu\u00e9s en las econom\u00edas del mundo. En la pr\u00f3xima clase entenderemos un poco m\u00e1s del aspecto t\u00e9cnico del Bitcoin, y c\u00f3mo ciertas caracter\u00edsticas pueden afectar su precio de forma positiva en el tiempo, adem\u00e1s de los beneficios y ventajas del cripto activo. \u00bfQu\u00e9 es Bitcoin? \u00b6 A diferencia del dinero tradicional, bitcoin es completamente virtual, no existen monedas f\u00edsicas ni tangibles. Bitcoin es un sistema Peer-to-Peer o sistema de pares distribuidos. Es decir, no existe un ente o servidor central que tenga control o del que dependa el ecosistema. Los bitcoins se crean a trav\u00e9s de la miner\u00eda, un protocolo de recompensas por la resoluci\u00f3n de problemas matem\u00e1ticos complejos, que a su vez procesan todas las transacciones y movimientos de la red. Cada cierto tiempo, un conjunto de ordenadores o mineros consiguen validar las transacciones y a cambio son recompensados con bitcoins o fracciones de bitcoins, por lo que la miner\u00eda en esencia descentraliza la emisi\u00f3n de criptomonedas, siendo todos los mineros parte del proceso sin la necesidad de contar con la autorizaci\u00f3n de bancos centrales o limitantes gubernamentales. Cualquier persona que participa en la red Bitcoin posee una billetera electr\u00f3nica o wallet que contiene un par de llaves o c\u00f3digos criptogr\u00e1ficos: la llave p\u00fablica y la llave privada. Las llaves p\u00fablicas funcionan como direcci\u00f3n para que los participantes de la red, puedan enviar y recibir bitcoin o fracciones de bitcoin, adem\u00e1s no tienen ninguna informaci\u00f3n espec\u00edfica sobre el usuario remitente o receptor. Estas llaves son una secuencia aleatoria de n\u00fameros y letras creadas por el mismo ecosistema y a su vez son un c\u00f3digo \u00fanico en la red. Una cadena de bloques es un libro de transacciones distribuidas, es decir aunque en esencia se cre\u00f3 para que Bitcoin fuese un sistema digital financiero seguro, tambi\u00e9n es posible aplicarlo a otros sistemas. Su objetivo es registrar todas las transacciones, compartido y distribuido en distintos lugares de la red y del mundo. Esta s\u00f3lo podr\u00e1 ser modificada bajo el consenso de la mayor\u00eda de las personas participantes del ecosistema, adem\u00e1s de que no puede ser borrado ning\u00fan tipo de informaci\u00f3n. Esto lo convierte en un sistema seguro, debido a que la informaci\u00f3n o registro se encuentra descentralizada y dispersa en el mundo, por lo que un hacker no podr\u00e1 acceder a la informaci\u00f3n y modificar el sistema en s\u00ed mismo. Una vez realizada una transacci\u00f3n, no se valida de forma inmediata. Primero, pasa a ser parte de la cadena de bloques y luego de ello cada cierto tiempo estos bloques son verificados y validados por los mineros permitiendo as\u00ed que se realicen las transacciones. Aunque la red de Bitcoin es privada y ning\u00fan usuario comparte su identidad todas las transacciones quedan registradas en la blockchain o cadena de bloques de esa forma se mantiene la seguridad e integridad del ecosistema. Una de las caracter\u00edsticas m\u00e1s interesantes del Bitcoin es su escasez, contrario a lo que ocurre con el dinero tradicional que no tiene l\u00edmites. As\u00ed lo defini\u00f3 Satoshi Nakamoto desde su creaci\u00f3n; Bitcoin s\u00f3lo tendr\u00e1 21 millones de unidades, es decir en su protocolo cada vez ir\u00e1 incrementando la complejidad de resoluci\u00f3n de bloques, y por tanto la recompensa. La cantidad o escasez de un activo en particular es de alto inter\u00e9s para los inversores, pues el hecho de que bitcoin se limite a 21 millones promueve a los participantes de la red a su acumulaci\u00f3n, pues esto en el tiempo provocar\u00e1 una expectativa del aumento del precio del cripto activo financiero. Resumen Bitcoin naci\u00f3 con la idea de descentralizar el dinero tal como lo conocemos hoy d\u00eda, eliminando la necesidad de la presencia de instituciones financieras en las transacciones. Esta soluci\u00f3n ha demostrado en la pr\u00e1ctica ser funcional y v\u00e1lida para la realizaci\u00f3n de transacciones y su adopci\u00f3n e inter\u00e9s en el mundo est\u00e1 creciendo de forma exponencial. \u00bfQu\u00e9 son criptomonedas? \u00b6 Bitcoin fue la primera criptomoneda creada con el protocolo Blockchain, sin embargo, a partir de esta tecnolog\u00eda se pueden crear nuevas criptomonedas diferentes al bitcoin con nuevas caracter\u00edsticas y propiedades, aunque con los mismos principios de uso de la red Peer-to-peer descentralizada y segura. Piensa que Bitcoin es Facebook y Blockchain es Internet. Las Altcoins o criptomonedas alternativas comenzaron a crearse en 2011 producto del incremento de su popularidad. Una de las primeras altcoin creadas fue Litecoin. Al d\u00eda de hoy, existen m\u00e1s de 1000 criptomonedas y constantemente se crean nuevos proyectos, aunque los casos de \u00e9xito no lleguen a esa cantidad inicial. En el TOP 10 de criptomonedas de 2020, se encuentran: Bitcoin Ethereum Ripple Tether Bitcoin Cash Bitcoin SV Litecoin Binance Coin EOS Tezos Puedes ver las criptomonedas m\u00e1s importantes con todos sus detalles en Coinmarketcap . Hay cuatro t\u00e9rminos com\u00fanmente usados para categorizar las altcoins que tienen propiedades similares o espec\u00edficas: Monedas de Privacidad: Altcoins con la finalidad de poder proporcionar transacciones privadas. Ejemplo: Monero, Zcash, Dash, etc. Monedas estables o Stablecoins: ancladas al valor de una moneda fiduciaria con la finalidad de disminuir el riesgo de inversi\u00f3n debido a la volatilidad en el cripto ecosistema manteniendo su precio estable en el tiempo. Ejemplo: Tether, USD Coin, etc. Tokens de Exchanges: Altcoins creadas por los exchanges o intercambios con la finalidad de ser usada en sus plataformas de trading y servicios. Ejemplo: Binance Coin, KuCoin, etc. Monedas digitales del Banco Central (CBDC): Altcoin o criptomoneda creada y respaldada por un banco central o entidad gubernamental. Ejemplo: El Banco Central de Inglaterra anunci\u00f3 el lanzamiento de su CBDC. Experiencias similares se est\u00e1n dando en China, Francia, USA, etc. Con esto vimos que existe un gran ecosistema de criptomonedas m\u00e1s all\u00e1 de Bitcoin. Cada d\u00eda se crean muchas m\u00e1s de ellas, y se manejan grandes cantidades de dinero en este mercado. Bitcoin y Criptomonedas en la Era Digital \u00b6 La adopci\u00f3n de las criptomonedas ha ido en crecimiento durante los \u00faltimos a\u00f1os, principalmente por la volatilidad en los precios de este activo y los grandes beneficios o p\u00e9rdidas para muchos inversionistas. Sin embargo, el Bitcoin y criptomonedas como activos financieros han significado un importante auxilio u opci\u00f3n financiera para pa\u00edses con problemas econ\u00f3micos como Argentina y Venezuela, lo que ha contribuido a la adopci\u00f3n del ecosistema. Como bitcoin fue creada luego de la crisis financiera m\u00e1s importante registrada en la historia en 2008, su protocolo est\u00e1 dise\u00f1ado para ser una opci\u00f3n ideal para sobrellevar las crisis econ\u00f3micas. Uno de los pa\u00edses con mayor adopci\u00f3n y volumen de transacciones diarias en todo el continente americano es Venezuela. Este pa\u00eds, ha sido sometido durante m\u00e1s de una d\u00e9cada a un estricto control cambiario, y otras medidas gubernamentales que llevaron al pa\u00eds a registrar los mayores niveles de inflaci\u00f3n del mundo entero, por lo que los ciudadanos se encuentran restringidos a nivel monetario en muchos aspectos debido a las pol\u00edticas tomadas por el gobierno nacional. Venezuela sin embargo, encontr\u00f3 una alternativa de sistema monetario en el bitcoin, acogiendo al ecosistema de las criptomonedas como una alternativa de resguardo, inversi\u00f3n, env\u00edo de remesas y usabilidad para sobrellevar la crisis econ\u00f3mica. En el siguiente gr\u00e1fico podemos ver el crecimiento exponencial de la adopci\u00f3n del Bitcoin en Venezuela a trav\u00e9s de Localbitcoins. Fuente: CoinDance Volumen Semanal Localbitcoins VES Argentina por su parte cuenta con un escenario similar, aunque no tan grave. Sin embargo, la inflaci\u00f3n va en aumento continuo y las medidas gubernamentales se fortalecen cada vez m\u00e1s dejando al ciudadano con menos opciones. Coin.dance nos muestra como el volumen de las transacciones en dicho pa\u00eds crecen de forma exponencial y se convierten pues las criptomonedas en un modo de ahorro, inversi\u00f3n y m\u00e9todo de pago para los argentinos. En el siguiente gr\u00e1fico podemos ver el crecimiento exponencial de la adopci\u00f3n del Bitcoin en Argentina a trav\u00e9s de Localbitcoins. Fuente: CoinDance Volumen Semanal Localbitcoins ARS En efecto las criptomonedas demuestran cada vez m\u00e1s su poder de usabilidad respecto al sistema financiero tradicional en situaciones econ\u00f3micas no tan favorables, a trav\u00e9s de sus propiedades y fortalezas como tecnolog\u00eda y ecosistema financiero digital. Sin importar las limitaciones gubernamentales, Bitcoin ha demostrado ser una alternativa incre\u00edble al sistema financiero tradicional en condiciones econ\u00f3micas no tan favorables, teniendo en cuenta que para ser parte de la red el proceso es privado, descentralizado y sin limitantes. Sin embargo, es importante destacar que para ello debes primero conocer las bases y fundamentos y estar preparado ante cualquier eventualidad. Ventajas y desventajas del Bitcoin y Criptomonedas \u00b6 Ahora que ya conocemos el ecosistema de las criptomonedas y su funcionamiento, podemos exponer las ventajas y desventajas de su adopci\u00f3n. Ventajas del Bitcoin y Criptomonedas \u00b6 La seguridad y transparencia del Bitcoin es muy alta, tomando en cuenta su protocolo y arquitectura, que fue creado para eliminar o no permitir los intentos de fraude o violaci\u00f3n de seguridad en el ecosistema. Es global y descentralizado, cualquier persona con los conocimientos m\u00ednimos necesarios puede acceder y disfrutar sus beneficios. Bajos costos transaccionales, e inmediatez de acuerdo al cripto activo. Por lo que enviar dinero a cualquier parte del mundo es efectivo. La emisi\u00f3n del bitcoin es limitada, no hay control sobre ello y as\u00ed fue descrito en su protocolo de creaci\u00f3n. La adopci\u00f3n del bitcoin y las criptomonedas va en aumento, y actualmente existen decenas de miles de comercios en el mundo que las aceptan como m\u00e9todo de pago. Desventajas del Bitcoin y Criptomonedas \u00b6 El ecosistema en s\u00ed mismo es seguro, aunque la implementaci\u00f3n y uso dependen del usuario, por lo que es importante el entendimiento de los conceptos para llevar a cabo de forma exitosa las transacciones. El uso o gesti\u00f3n de las billeteras y transacciones dependen de los conocimientos del usuario y un error en la implementaci\u00f3n puede llevar a p\u00e9rdidas significativas de dinero. La gran volatilidad en los precios supone en principio una limitante para los usuarios, pues implica grandes beneficios o grandes p\u00e9rdidas, aumentando el miedo a la gran fluctuaci\u00f3n. En el siguiente gr\u00e1fico, podremos ver algunas ventajas de las caracter\u00edsticas del Bitcoin respecto al oro y el dinero tradicional: Resumen La econom\u00eda global se est\u00e1 adaptando a las nuevas oportunidades tecnol\u00f3gicas que est\u00e1n naciendo, y las criptomonedas como m\u00e9todo de pago son parte de ello. En este primer bloque, hemos aprendido los fundamentos y propiedades del Bitcoin y las criptomonedas, ejemplos y casos de uso del ecosistema, ventajas y desventajas. Ahora, estamos preparados para profundizar y aprender c\u00f3mo ser parte de la red de Bitcoin y criptomonedas, aprendiendo a adquirirlas, crear nuestras propias billeteras y c\u00f3mo generar beneficios a trav\u00e9s del cripto mercado. Fuente: Curso de Econom\u00eda Digital: Bitcoin y Criptomonedas por Angela Ocando","title":"Introduccion"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/01-introduccion/#introduccion","text":"","title":"Introduccion"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/01-introduccion/#historia-del-bitcoin","text":"","title":"Historia del Bitcoin"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/01-introduccion/#bitcoin-y-criptomonedas-economia-digital","text":"Hola, mi nombre es Angela Ocando y voy a ser tu profesora en este curso de Econom\u00eda Digital con Bitcoin y Criptomonedas. Soy parte del equipo de Success en Platzi como Student Advocate y esta es una de mis pasiones. Comenc\u00e9 a interesarme y aprender de este ecosistema desde finales de 2016; desde entonces el mercado me ha ense\u00f1ado grandes lecciones que quiero compartir contigo. Bitcoin es la primera criptomoneda o activo financiero digital descentralizado de la historia que permite realizar transacciones de forma segura, privada y sin intermediarios alrededor del mundo \u00bfQu\u00e9 significa esto? En las pr\u00f3ximas clases te lo cuento. Nadie sabe con certeza la identidad del creador o creadores de Bitcoin. Satoshi Nakamoto es el pseud\u00f3nimo que fue utilizado por la persona o el grupo de personas que dise\u00f1aron y crearon el ecosistema Bitcoin. Lo \u00fanico que se conoce de Satoshi Nakamoto son sus datos publicados en P2PFoundation : Hombre de nacionalidad japonesa y 45 a\u00f1os de edad (5 de abril de 1975).","title":"Bitcoin y Criptomonedas: Econom\u00eda Digital"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/01-introduccion/#por-que-fue-creado-bitcoin","text":"En 2008 el mundo presenci\u00f3 una de las crisis financieras m\u00e1s importantes de la historia, causando inestabilidad en los mercados y el sistema financiero a partir de las decisiones y medidas tomadas por los gobiernos y entidades bancarias. A inicios de 2009, todo cambi\u00f3; el Bitcoin fue presentado al mundo a trav\u00e9s de la tecnolog\u00eda Blockchain: un sistema que permite la emisi\u00f3n controlada de las monedas digitales, adem\u00e1s de funcionar como un libro p\u00fablico que registra cada una de las transacciones realizadas, lo que asegura que cada moneda solo pueda ocuparse una vez. De esa forma, el esquema de seguridad est\u00e1 garantizado, pues cada una de estas transacciones son realizadas por medio de una red descentralizada de ordenadores y no existe ente gubernamental o intermediario entre los participantes.","title":"\u00bfPor qu\u00e9 fue creado Bitcoin?"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/01-introduccion/#historia-del-bitcoin_1","text":"Previo al bitcoin existieron varias iniciativas para poder crear un registro descentralizado de un activo digital, sin embargo ninguna logr\u00f3 ser exitosa debido a problemas de seguridad y usabilidad. A mediados de 2008 fue registrado el dominio bitcoin.org , pero no fue hasta el 3 de enero de 2009 d\u00f3nde sali\u00f3 el primer documento que explicar\u00eda el funcionamiento del cripto ecosistema. Este mismo d\u00eda se min\u00f3 el primer bloque de Bitcoin, generando entonces los primeros 50 Bitcoins de la historia y dando inicio a lo que se convertir\u00eda en una alternativa financiera en el mundo algunos a\u00f1os despu\u00e9s. Durante su primer a\u00f1o de creaci\u00f3n muy pocas personas sab\u00edan sobre el Bitcoin, tambi\u00e9n denominado como BTC en el sistema financiero, y su cotizaci\u00f3n fue pautada antes de finalizar el 2009 en menos de 1 centavo de d\u00f3lar considerando el coste de energ\u00eda requerido por un computador para poder resolver un bloque de minado, y generar bitcoins a partir de ello. No fue hasta el 22 de mayo de 2010 que se realiz\u00f3 el primer pago en bitcoins en la compra de dos pizzas por 10.000 BTC, hecho que quedar\u00eda marcado en la historia y que hoy se celebra cada a\u00f1o como el \"Bitcoin Pizza Day\" teniendo en cuenta que la cotizaci\u00f3n de esta moneda en mayo de 2020 supera los 8000 USD por unidad. Por lo tanto 10.000 BTC representan una cantidad superior a los 80 millones de d\u00f3lares americanos. El precio de un bitcoin se determina a partir de las principales fuerzas de mercado: la oferta y la demanda. Durante los primeros a\u00f1os la cotizaci\u00f3n del precio no vari\u00f3 en gran medida, pero s\u00ed aument\u00f3 su reconocimiento. En 2011 finalmente super\u00f3 1 d\u00f3lar americano (USD) de precio durante el primer trimestre, iniciando a partir de all\u00ed picos de volatilidad, pues en s\u00f3lo unos meses super\u00f3 los 10 USD por bitcoin y cay\u00f3 nuevamente a 2 USD para final de a\u00f1o. A partir de all\u00ed, el mundo comenz\u00f3 a conocer m\u00e1s sobre Bitcoin a trav\u00e9s de eventos fundamentales , sus beneficios y tambi\u00e9n la volatilidad en los precios. Pas\u00f3 a convertirse en el tiempo no s\u00f3lo en una moneda digital sino tambi\u00e9n en un activo financiero importante de gran rentabilidad y detr\u00e1s de ello en un ecosistema con cientos de proyectos consolidados sobre la tecnolog\u00eda blockchain llev\u00e1ndolo a superar en 2017 un precio cercano a los 20.000 USD. Resumen En efecto, el bitcoin y las criptomonedas han llegado para quedarse marcando un antes y un despu\u00e9s en las econom\u00edas del mundo. En la pr\u00f3xima clase entenderemos un poco m\u00e1s del aspecto t\u00e9cnico del Bitcoin, y c\u00f3mo ciertas caracter\u00edsticas pueden afectar su precio de forma positiva en el tiempo, adem\u00e1s de los beneficios y ventajas del cripto activo.","title":"Historia del Bitcoin"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/01-introduccion/#que-es-bitcoin","text":"A diferencia del dinero tradicional, bitcoin es completamente virtual, no existen monedas f\u00edsicas ni tangibles. Bitcoin es un sistema Peer-to-Peer o sistema de pares distribuidos. Es decir, no existe un ente o servidor central que tenga control o del que dependa el ecosistema. Los bitcoins se crean a trav\u00e9s de la miner\u00eda, un protocolo de recompensas por la resoluci\u00f3n de problemas matem\u00e1ticos complejos, que a su vez procesan todas las transacciones y movimientos de la red. Cada cierto tiempo, un conjunto de ordenadores o mineros consiguen validar las transacciones y a cambio son recompensados con bitcoins o fracciones de bitcoins, por lo que la miner\u00eda en esencia descentraliza la emisi\u00f3n de criptomonedas, siendo todos los mineros parte del proceso sin la necesidad de contar con la autorizaci\u00f3n de bancos centrales o limitantes gubernamentales. Cualquier persona que participa en la red Bitcoin posee una billetera electr\u00f3nica o wallet que contiene un par de llaves o c\u00f3digos criptogr\u00e1ficos: la llave p\u00fablica y la llave privada. Las llaves p\u00fablicas funcionan como direcci\u00f3n para que los participantes de la red, puedan enviar y recibir bitcoin o fracciones de bitcoin, adem\u00e1s no tienen ninguna informaci\u00f3n espec\u00edfica sobre el usuario remitente o receptor. Estas llaves son una secuencia aleatoria de n\u00fameros y letras creadas por el mismo ecosistema y a su vez son un c\u00f3digo \u00fanico en la red. Una cadena de bloques es un libro de transacciones distribuidas, es decir aunque en esencia se cre\u00f3 para que Bitcoin fuese un sistema digital financiero seguro, tambi\u00e9n es posible aplicarlo a otros sistemas. Su objetivo es registrar todas las transacciones, compartido y distribuido en distintos lugares de la red y del mundo. Esta s\u00f3lo podr\u00e1 ser modificada bajo el consenso de la mayor\u00eda de las personas participantes del ecosistema, adem\u00e1s de que no puede ser borrado ning\u00fan tipo de informaci\u00f3n. Esto lo convierte en un sistema seguro, debido a que la informaci\u00f3n o registro se encuentra descentralizada y dispersa en el mundo, por lo que un hacker no podr\u00e1 acceder a la informaci\u00f3n y modificar el sistema en s\u00ed mismo. Una vez realizada una transacci\u00f3n, no se valida de forma inmediata. Primero, pasa a ser parte de la cadena de bloques y luego de ello cada cierto tiempo estos bloques son verificados y validados por los mineros permitiendo as\u00ed que se realicen las transacciones. Aunque la red de Bitcoin es privada y ning\u00fan usuario comparte su identidad todas las transacciones quedan registradas en la blockchain o cadena de bloques de esa forma se mantiene la seguridad e integridad del ecosistema. Una de las caracter\u00edsticas m\u00e1s interesantes del Bitcoin es su escasez, contrario a lo que ocurre con el dinero tradicional que no tiene l\u00edmites. As\u00ed lo defini\u00f3 Satoshi Nakamoto desde su creaci\u00f3n; Bitcoin s\u00f3lo tendr\u00e1 21 millones de unidades, es decir en su protocolo cada vez ir\u00e1 incrementando la complejidad de resoluci\u00f3n de bloques, y por tanto la recompensa. La cantidad o escasez de un activo en particular es de alto inter\u00e9s para los inversores, pues el hecho de que bitcoin se limite a 21 millones promueve a los participantes de la red a su acumulaci\u00f3n, pues esto en el tiempo provocar\u00e1 una expectativa del aumento del precio del cripto activo financiero. Resumen Bitcoin naci\u00f3 con la idea de descentralizar el dinero tal como lo conocemos hoy d\u00eda, eliminando la necesidad de la presencia de instituciones financieras en las transacciones. Esta soluci\u00f3n ha demostrado en la pr\u00e1ctica ser funcional y v\u00e1lida para la realizaci\u00f3n de transacciones y su adopci\u00f3n e inter\u00e9s en el mundo est\u00e1 creciendo de forma exponencial.","title":"\u00bfQu\u00e9 es Bitcoin?"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/01-introduccion/#que-son-criptomonedas","text":"Bitcoin fue la primera criptomoneda creada con el protocolo Blockchain, sin embargo, a partir de esta tecnolog\u00eda se pueden crear nuevas criptomonedas diferentes al bitcoin con nuevas caracter\u00edsticas y propiedades, aunque con los mismos principios de uso de la red Peer-to-peer descentralizada y segura. Piensa que Bitcoin es Facebook y Blockchain es Internet. Las Altcoins o criptomonedas alternativas comenzaron a crearse en 2011 producto del incremento de su popularidad. Una de las primeras altcoin creadas fue Litecoin. Al d\u00eda de hoy, existen m\u00e1s de 1000 criptomonedas y constantemente se crean nuevos proyectos, aunque los casos de \u00e9xito no lleguen a esa cantidad inicial. En el TOP 10 de criptomonedas de 2020, se encuentran: Bitcoin Ethereum Ripple Tether Bitcoin Cash Bitcoin SV Litecoin Binance Coin EOS Tezos Puedes ver las criptomonedas m\u00e1s importantes con todos sus detalles en Coinmarketcap . Hay cuatro t\u00e9rminos com\u00fanmente usados para categorizar las altcoins que tienen propiedades similares o espec\u00edficas: Monedas de Privacidad: Altcoins con la finalidad de poder proporcionar transacciones privadas. Ejemplo: Monero, Zcash, Dash, etc. Monedas estables o Stablecoins: ancladas al valor de una moneda fiduciaria con la finalidad de disminuir el riesgo de inversi\u00f3n debido a la volatilidad en el cripto ecosistema manteniendo su precio estable en el tiempo. Ejemplo: Tether, USD Coin, etc. Tokens de Exchanges: Altcoins creadas por los exchanges o intercambios con la finalidad de ser usada en sus plataformas de trading y servicios. Ejemplo: Binance Coin, KuCoin, etc. Monedas digitales del Banco Central (CBDC): Altcoin o criptomoneda creada y respaldada por un banco central o entidad gubernamental. Ejemplo: El Banco Central de Inglaterra anunci\u00f3 el lanzamiento de su CBDC. Experiencias similares se est\u00e1n dando en China, Francia, USA, etc. Con esto vimos que existe un gran ecosistema de criptomonedas m\u00e1s all\u00e1 de Bitcoin. Cada d\u00eda se crean muchas m\u00e1s de ellas, y se manejan grandes cantidades de dinero en este mercado.","title":"\u00bfQu\u00e9 son criptomonedas?"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/01-introduccion/#bitcoin-y-criptomonedas-en-la-era-digital","text":"La adopci\u00f3n de las criptomonedas ha ido en crecimiento durante los \u00faltimos a\u00f1os, principalmente por la volatilidad en los precios de este activo y los grandes beneficios o p\u00e9rdidas para muchos inversionistas. Sin embargo, el Bitcoin y criptomonedas como activos financieros han significado un importante auxilio u opci\u00f3n financiera para pa\u00edses con problemas econ\u00f3micos como Argentina y Venezuela, lo que ha contribuido a la adopci\u00f3n del ecosistema. Como bitcoin fue creada luego de la crisis financiera m\u00e1s importante registrada en la historia en 2008, su protocolo est\u00e1 dise\u00f1ado para ser una opci\u00f3n ideal para sobrellevar las crisis econ\u00f3micas. Uno de los pa\u00edses con mayor adopci\u00f3n y volumen de transacciones diarias en todo el continente americano es Venezuela. Este pa\u00eds, ha sido sometido durante m\u00e1s de una d\u00e9cada a un estricto control cambiario, y otras medidas gubernamentales que llevaron al pa\u00eds a registrar los mayores niveles de inflaci\u00f3n del mundo entero, por lo que los ciudadanos se encuentran restringidos a nivel monetario en muchos aspectos debido a las pol\u00edticas tomadas por el gobierno nacional. Venezuela sin embargo, encontr\u00f3 una alternativa de sistema monetario en el bitcoin, acogiendo al ecosistema de las criptomonedas como una alternativa de resguardo, inversi\u00f3n, env\u00edo de remesas y usabilidad para sobrellevar la crisis econ\u00f3mica. En el siguiente gr\u00e1fico podemos ver el crecimiento exponencial de la adopci\u00f3n del Bitcoin en Venezuela a trav\u00e9s de Localbitcoins. Fuente: CoinDance Volumen Semanal Localbitcoins VES Argentina por su parte cuenta con un escenario similar, aunque no tan grave. Sin embargo, la inflaci\u00f3n va en aumento continuo y las medidas gubernamentales se fortalecen cada vez m\u00e1s dejando al ciudadano con menos opciones. Coin.dance nos muestra como el volumen de las transacciones en dicho pa\u00eds crecen de forma exponencial y se convierten pues las criptomonedas en un modo de ahorro, inversi\u00f3n y m\u00e9todo de pago para los argentinos. En el siguiente gr\u00e1fico podemos ver el crecimiento exponencial de la adopci\u00f3n del Bitcoin en Argentina a trav\u00e9s de Localbitcoins. Fuente: CoinDance Volumen Semanal Localbitcoins ARS En efecto las criptomonedas demuestran cada vez m\u00e1s su poder de usabilidad respecto al sistema financiero tradicional en situaciones econ\u00f3micas no tan favorables, a trav\u00e9s de sus propiedades y fortalezas como tecnolog\u00eda y ecosistema financiero digital. Sin importar las limitaciones gubernamentales, Bitcoin ha demostrado ser una alternativa incre\u00edble al sistema financiero tradicional en condiciones econ\u00f3micas no tan favorables, teniendo en cuenta que para ser parte de la red el proceso es privado, descentralizado y sin limitantes. Sin embargo, es importante destacar que para ello debes primero conocer las bases y fundamentos y estar preparado ante cualquier eventualidad.","title":"Bitcoin y Criptomonedas en la Era Digital"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/01-introduccion/#ventajas-y-desventajas-del-bitcoin-y-criptomonedas","text":"Ahora que ya conocemos el ecosistema de las criptomonedas y su funcionamiento, podemos exponer las ventajas y desventajas de su adopci\u00f3n.","title":"Ventajas y desventajas del Bitcoin y Criptomonedas"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/01-introduccion/#ventajas-del-bitcoin-y-criptomonedas","text":"La seguridad y transparencia del Bitcoin es muy alta, tomando en cuenta su protocolo y arquitectura, que fue creado para eliminar o no permitir los intentos de fraude o violaci\u00f3n de seguridad en el ecosistema. Es global y descentralizado, cualquier persona con los conocimientos m\u00ednimos necesarios puede acceder y disfrutar sus beneficios. Bajos costos transaccionales, e inmediatez de acuerdo al cripto activo. Por lo que enviar dinero a cualquier parte del mundo es efectivo. La emisi\u00f3n del bitcoin es limitada, no hay control sobre ello y as\u00ed fue descrito en su protocolo de creaci\u00f3n. La adopci\u00f3n del bitcoin y las criptomonedas va en aumento, y actualmente existen decenas de miles de comercios en el mundo que las aceptan como m\u00e9todo de pago.","title":"Ventajas del Bitcoin y Criptomonedas"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/01-introduccion/#desventajas-del-bitcoin-y-criptomonedas","text":"El ecosistema en s\u00ed mismo es seguro, aunque la implementaci\u00f3n y uso dependen del usuario, por lo que es importante el entendimiento de los conceptos para llevar a cabo de forma exitosa las transacciones. El uso o gesti\u00f3n de las billeteras y transacciones dependen de los conocimientos del usuario y un error en la implementaci\u00f3n puede llevar a p\u00e9rdidas significativas de dinero. La gran volatilidad en los precios supone en principio una limitante para los usuarios, pues implica grandes beneficios o grandes p\u00e9rdidas, aumentando el miedo a la gran fluctuaci\u00f3n. En el siguiente gr\u00e1fico, podremos ver algunas ventajas de las caracter\u00edsticas del Bitcoin respecto al oro y el dinero tradicional: Resumen La econom\u00eda global se est\u00e1 adaptando a las nuevas oportunidades tecnol\u00f3gicas que est\u00e1n naciendo, y las criptomonedas como m\u00e9todo de pago son parte de ello. En este primer bloque, hemos aprendido los fundamentos y propiedades del Bitcoin y las criptomonedas, ejemplos y casos de uso del ecosistema, ventajas y desventajas. Ahora, estamos preparados para profundizar y aprender c\u00f3mo ser parte de la red de Bitcoin y criptomonedas, aprendiendo a adquirirlas, crear nuestras propias billeteras y c\u00f3mo generar beneficios a trav\u00e9s del cripto mercado. Fuente: Curso de Econom\u00eda Digital: Bitcoin y Criptomonedas por Angela Ocando","title":"Desventajas del Bitcoin y Criptomonedas"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/02-economia-digital/","text":"Econom\u00eda digital \u00b6 \u00bfC\u00f3mo comprar Bitcoin y Criptomonedas? \u00b6 Bitcoin es unas de las inversiones del momento, en Latinoam\u00e9rica a diferencia de Estados Unidos no hay una soluci\u00f3n 100% efectiva para comprar Bitcoin. En este art\u00edculo conocer\u00e1s las diferentes opciones, el proceso para adquirir bitcoins y algunos consejos a la hora de comprar. \u200b Comprar Bitcoin en Latinoam\u00e9rica con Binance \u00b6 \u200b \u200b Binance es una plataforma de inversi\u00f3n online, y una billetera en donde podemos almacenar nuestras criptomonedas de forma segura en el corto plazo. Recordemos que con las billeteras online no tenemos acceso a las claves privadas, pues pertenecen directamente al Exchange por lo que nunca ser\u00e1 buena idea almacenar nuestro dinero por mucho tiempo en este tipo de billeteras, para ello tenemos otras opciones m\u00e1s seguras y que nos brindan control absoluto sobre nuestros cripto activos en el largo plazo. \u200b El registro en Binance es bastante sencillo, sin embargo, el proceso de verificaci\u00f3n de tu cuenta podr\u00eda tardar un poco. Por lo que te invitamos a ser paciente y si el proceso llegase a extenderse, contactar al equipo de soporte para que pueda ayudarte lo m\u00e1s pronto posible. \u200b \u200b \u200b Una vez completado el registro y activaci\u00f3n de tu cuenta, as\u00ed como la verificaci\u00f3n de la misma ya podr\u00e1s tener acceso a la interfaz de la plataforma y podr\u00e1s recibir, enviar dinero, as\u00ed como adquirir y vender tus criptomonedas. \u200b Utilizaremos la Plataforma P2B de Binance para adquirir Bitcoin desde latinoam\u00e9rica. \u200b \u200b Selecciona la pesta\u00f1a Comprar y BTC. Selecciona el m\u00e9todo de pago que quieras, por ejemplo \"Transferencia Bancaria\" y tu moneda. \u200b Luego de ello selecciona la oferta que se adapte a tus intereses y necesidades. \u200b Transfiere el dinero directamente al vendedor. Aseg\u00farate de realizar la transferencia de acuerdo con la informaci\u00f3n de pago proporcionada por el vendedor, dentro del l\u00edmite de tiempo de pago. Es recomendable utilizar el chat para comunicarse con el vendedor. \u200b Aseg\u00farate de que has enviado el dinero al vendedor y luego haz clic en \"Transferido, siguiente\" \u200b Haz clic en Confirmar. Por favor, no pulses este bot\u00f3n si no has realizado ninguna transacci\u00f3n. Esto va en contra de la Pol\u00edtica de transacciones de usuarios P2P. \u200b El estado de la orden se actualizar\u00e1 a ''En proceso de liberaci\u00f3n'' \u200b \u00a1Felicidades! Has completado un intercambio y tus bitcoins est\u00e1n en la billetera \u200b Comprar Bitcoin en M\u00e9xico con Bitso \u00b6 \u200b Comprar Bitcoin en M\u00e9xico es bastante sencillo con la plataforma de intercambio de Bitso . \u200b \u200b Con Bitso comienzas creando una cuenta. Recomendaci\u00f3n: Ingresar correctamente todos los datos personales que exijan sobre todo el CURP. \u200b \u200b Una vez creada la cuenta pasar\u00e1s por un proceso de verificaci\u00f3n de n\u00famero de tel\u00e9fono celular. \u200b Al final el proceso de verificaci\u00f3n llegar\u00e1s al panel del sitio de Bitso donde podr\u00e1s ver la informaci\u00f3n general de tu cuenta y tendr\u00e1s la opci\u00f3n de \"Fondear\" tu cuenta en Bitso con pesos mexicanos. \u200b \u200b La verdad la plataforma de Bitso es bastante elaborada a nivel gr\u00e1fico, me gusta mucho. \u200b Antes de comprar Bitcoin debes fondear la cuenta, ellos ofrecen varios m\u00e9todos para fondear tu cuenta de manera instant\u00e1nea en la mayor\u00eda de los casos. \u200b \u200b Al seleccionar un m\u00e9todo de pago te aparecer\u00e1 un mensaje de confirmaci\u00f3n con datos para realizar la transacci\u00f3n. \u200b \u200b Ya con pesos mexicanos en tu cuenta deber\u00e1s intercambiar pesos a Bitcoin a trav\u00e9s de la opci\u00f3n \"Convertir\". \u200b \u200b En esta opci\u00f3n colocas la cantidad de pesos mexicanos que deseas convertir a Bitcoin y Bitso autom\u00e1ticamente te informar\u00e1 cu\u00e1ntos bitcoins recibir\u00e1s. \u200b Comprar Bitcoin desde cualquier parte de Latinoam\u00e9rica con Localbitcoins.com \u00b6 \u200b Localbitcoins es una opci\u00f3n mundial , muy f\u00e1cil de usar pero no tan segura en todos los casos. Pero no te preocupes, ac\u00e1 te dir\u00e9 como evitar estafas a trav\u00e9s de Localbitcoins con algunas recomendaciones. \u200b Localbitcoins funciona similar a un servicio de anuncios clasificados, donde una persona sube un anuncio pero el servicio como tal no tiene nada que ver con el vendedor. La diferencia en Localbitcoins es que hay ciertos procesos de verificaci\u00f3n que agregan una capa de seguridad a la transacci\u00f3n. \u200b \u200b Registrarse es bastante sencillo y el proceso de verificaci\u00f3n a\u00fan m\u00e1s, te recomiendo tener tu pasaporte a la mano para el proceso de verificaci\u00f3n en l\u00ednea. \u200b \u200b En el proceso de verificaci\u00f3n te pedir\u00e1 verificar tu n\u00famero de tel\u00e9fono y tu identidad. Recomendaci\u00f3n: Al momento de verificar tu identidad te pedir\u00e1 subir una foto de tu pasaporte o c\u00e9dula/tarjeta de identidad, usa tu pasaporte en la medida de lo posible y adem\u00e1s deja la ventana o la pesta\u00f1a del navegador abierta porque el proceso puede tardar. \u200b Podr\u00edas comprar sin verificar la cuenta, pero los vendedores m\u00e1s confiables podr\u00edan no estar disponible porque restringen los intercambios para cuentas verificadas. Tambi\u00e9n podr\u00eda afectar la cantidad m\u00ednima o m\u00e1xima de Bitcoin que puedes comprarle a un vendedor. \u200b Una vez est\u00e9 verificada la cuenta puedes proceder a buscar un anuncio que se adapte a la cantidad de dinero que quieras invertir en bitcoin. \u200b \u200b En el campo Amount debes ingresar la cantidad que deseas invertir sin espacios, comas, puntos. Luego la moneda y el pa\u00eds. Por defecto detecta en que pa\u00eds te encuentras. En caso de que no, puedes seleccionar el pa\u00eds y la moneda con la cual deseas realizar la transacci\u00f3n. \u200b \u200b Podr\u00e1s observar todos los anuncios que se adaptan a lo que est\u00e1s buscando, en este caso anuncios para comprar de manera online 30 mil pesos colombianos en bitcoins. \u200b Algo importante a resaltar es que cada vendedor coloca el precio que desee as\u00ed que podr\u00e1s ver diferencias de precios. \u200b \u200b Al analizar el listado de anuncios podr\u00e1s encontrar, qui\u00e9n es el vendedor , el m\u00e9todo de pago que est\u00e1 utilizando, por lo general es un banco, el precio en tu moneda local por cada Bitcoin y los l\u00edmites de una transacci\u00f3n , es decir cu\u00e1nto puedes comprar como m\u00ednimo y como m\u00e1ximo respectivamente. Recomendaci\u00f3n: NO usar PayPal, Webmoney, Skrill o cualquier sistema online de pago de ese estilo porque son muy susceptibles a fraudes. \u200b \u200b En la informaci\u00f3n del trader podr\u00e1s ver, el nombre de usuario, la cantidad de transacciones y el % de feedback positivo de sus transacciones. Si est\u00e1 al 100% significa que el 100% de sus compras o ventas han sido satisfactoria. \u200b Tambi\u00e9n puedes ver un indicador verde que indica en cu\u00e1ntos minutos responde a partir del momento que se abra una orden de compra. \u200b Algo importante a tener en cuenta es el perfil del vendedor. Puedes ingresar al perfil haciendo clic en el nombre de usuario, all\u00ed podr\u00e1s ver la informaci\u00f3n del vendedor y con cu\u00e1ntos \"partners\" ha hecho transacciones, es importante que los n\u00fameros sean grandes, eso indicar\u00eda m\u00e1s actividad en la plataforma. Tambi\u00e9n tener en cuenta que la identidad est\u00e9 verificada. \u200b \u200b Al momento de seleccionar un anuncio veremos m\u00e1s informaci\u00f3n del anuncio y un formulario donde podemos indicar la cantidad de dinero a invertir, lo que se recibir\u00e1 en BTC y un campo de texto donde uno puede dejar un mensaje para el vendedor. Recomendaci\u00f3n: Si est\u00e1s comprando por transferencia bancaria, indicar en el campo de texto que banco deseas usar para agilizar la compra . \u200b \u200b Es importante verificar qu\u00e9 bancos o m\u00e9todo de pago recibe el anunciante, algunas veces en la descripci\u00f3n en la parte de la derecha deja un tel\u00e9fono celular, cada vez que puedas puedes escribir por Whatsapp o llamar para tener m\u00e1s informaci\u00f3n. \u200b Una vez enviada el trade aparecer\u00e1 un chat, debes esperar a que el vendedor te responda con la informaci\u00f3n para pagar. \u200b \u200b Si pagas por transferencia bancaria debes tomar un screenshot y subirlo al chat. Es importante siempre marcar como pagada la orden que abras. \u200b Cuando abres una compra en Localbitcoins la cantidad que decides comprar se bloquea para el vendedor, es una medida de seguridad. \u200b Consideraciones finales \u00b6 \u200b Tanto Binance como Bitso y Localbitcoins cuentan con wallets, no necesitas abrir o instalar alguna wallet para poder comprar. Solo necesitar\u00e1s una wallet cuando retires Bitcoin de alguno de estos servicios. \u200b Si tienes dudas en alg\u00fan servicio no temas en usar el sistema de soporte, algunos son un poco lento pero al final recibir\u00e1s una respuesta que aclara tus dudas o si deseas puedes dejar tu duda ac\u00e1 en el art\u00edculo y en la medida de lo posible te responder\u00e9 con la soluci\u00f3n. \u200b NO olvides activar 2FA o autenticaci\u00f3n de dos pasos para todas las cuentas que tengas en estos servicios. \u200b Recomendaci\u00f3n final, investiga bien los costos para retirar BTC desde estos servicios as\u00ed evitar\u00e1s perder dinero a la hora de retirar BTC de tu cuenta. Billeteras y Tipos de Billeteras \u00b6 Antes de pensar en adquirir criptomonedas, es muy importante entender c\u00f3mo podemos almacenarlas, en d\u00f3nde y qu\u00e9 medio es m\u00e1s seguro de acuerdo a tus objetivos e intereses. \u00bfQu\u00e9 es una billetera? \u00b6 Las billeteras o wallets son software o programas que te permiten almacenar, enviar y recibir Bitcoin y criptomonedas. Su funci\u00f3n es almacenar las claves privadas necesarias para proteger el saldo y transacciones registradas en una clave p\u00fablica en la blockchain. Sin embargo, existen varios tipos de billeteras y es muy importante identificar cu\u00e1l es m\u00e1s adecuada para ti. Tipos de Wallets \u00b6 Billeteras de Escritorio: Las billeteras de escritorio est\u00e1n disponibles en la mayor\u00eda de sistemas operativos, incluyendo Windows, Linux, y Mac. Adem\u00e1s de ello son billeteras con un nivel de seguridad muy alto, ya que s\u00f3lo se puede acceder a ella a trav\u00e9s del dispositivo en el que fue instalado el software. Tambi\u00e9n proporcionan una serie de letras y n\u00fameros despu\u00e9s de su instalaci\u00f3n que son de utilidad si llegase a ocurrir alg\u00fan problema con tu dispositivo, por lo que es muy importante que guardes con sumo cuidado este c\u00f3digo pues con ello podr\u00e1s reinstalar nuevamente tu billetera sin perder el acceso a tu direcci\u00f3n de Bitcoin y por tanto a tu dinero. Algunas billeteras de escritorio que puedes probar son: Electrum Bitpay * Billeteras de Hardware: Las billeteras de hardware incrementan el nivel de seguridad pues las claves privadas son almacenadas en una memoria USB o un dispositivo espec\u00edficamente dise\u00f1ado. Ejemplo: Ledger Nano, Trezor, etc. Este tipo de billeteras permite a los usuarios conectar la memoria USB a cualquier dispositivo, iniciar sesi\u00f3n, realizar transacciones y desconectar nuevamente, manteniendo nuestro dinero seguro. Es importante, por tanto, mantener los USB a salvo, adem\u00e1s de seguir el m\u00e9todo de respaldo correspondiente. Algunas billeteras de hardware que puedes probar son: Ledger Trezor * Billeteras App M\u00f3viles: Su funcionalidad y nivel de seguridad es similar al de las billeteras de escritorio. Sin embargo, en este caso se ejecutan en forma de aplicaci\u00f3n en tu tel\u00e9fono celular. Tambi\u00e9n su funcionamiento es m\u00e1s accesible, pues tienes a la mano la posibilidad de ingresar a tu direcci\u00f3n, realizar transacciones. Es muy importante, adem\u00e1s, respaldar muy bien la seguridad de tu dispositivo m\u00f3vil, pues un tercero podr\u00eda tener acceso a tu dinero si no cuentas con una buena gesti\u00f3n de seguridad. Algunas billeteras m\u00f3viles que puedes probar son: MyCelium Bitcoin Wallet Coin Wallet * Billeteras En L\u00ednea: Estas billeteras son propiedad de los exchanges o casas de cambio en su mayor\u00eda, por lo que s\u00f3lo requerimos correo electr\u00f3nico y contrase\u00f1a para crear y acceder a ellas. En algunos casos, necesitas un proceso de verificaci\u00f3n m\u00e1s complejo para poder validar tus datos y agregar una capa de seguridad, como el env\u00edo de tus documentos personales. Puedes acceder a ellas desde cualquier lugar y dispositivo con acceso a internet. Es importante contar con un buen protocolo de seguridad porque no tenemos un control total sobre ellas, teniendo en cuenta que son propiedad de los exchanges. Algunas billeteras en l\u00ednea que puedes probar son: Blockchain Coinbase Ahora que conoces cuales son los tipos de billeteras, si tu objetivo es adquirir criptomonedas pero te gustar\u00eda ver varias opciones de intercambios para adquirir bitcoin sin importar el lugar en el que te encuentres, en Buy Bitcoin WorldWide puedes escoger tu pa\u00eds de residencia adem\u00e1s del m\u00e9todo de pago que te gustar\u00eda usar y encontrar\u00e1s varias opciones adem\u00e1s de toda la informaci\u00f3n al respecto. \u00bfC\u00f3mo usar una Billetera? \u00b6 En la clase anterior, te contamos acerca de los tipos de billeteras de bitcoin, su nivel de seguridad de acuerdo a tus objetivos e intereses y nuestras recomendaciones. Una billetera o Wallet de bitcoin es el lugar en el que podemos gestionar nuestros activos criptogr\u00e1ficos. Funciona como una cuenta bancaria, en donde puedes guardar tu dinero, enviar y recibir transacciones. Sin embargo, no funciona como una entidad bancaria tradicional pues es un sistema descentralizado por lo que el proceso de registro es mucho m\u00e1s sencillo, as\u00ed como su accesibilidad. Una billetera de bitcoin cuenta con dos elementos: La clave o direcci\u00f3n p\u00fablica La clave o direcci\u00f3n privada La clave o direcci\u00f3n p\u00fablica es el c\u00f3digo que podemos compartir a los dem\u00e1s usuarios para que puedan enviar dinero de forma exitosa a nuestra billetera, sin el riesgo de que puedan extraer nuestros fondos. A trav\u00e9s de ella podemos recibir, consultar, y ver nuestros estados de cuenta. La clave privada en cambio es un c\u00f3digo que no podemos compartir con nadie, pues podr\u00edan con ella acceder a nuestros fondos y extraer nuestro dinero. Es de suma importancia guardarla en un lugar seguro y privado que nos asegure el control absoluto sobre nuestros cripto activos. Realizando una transacci\u00f3n en una billetera online (Binance) \u00b6 Binance es una plataforma de inversi\u00f3n online, y una billetera en donde podemos almacenar nuestras criptomonedas de forma segura en el corto plazo. Recordemos que con las billeteras online no tenemos acceso a las claves privadas, pues pertenecen directamente al Exchange por lo que nunca ser\u00e1 buena idea almacenar nuestro dinero por mucho tiempo en este tipo de billeteras, para ello tenemos otras opciones m\u00e1s seguras y que nos brindan control absoluto sobre nuestros cripto activos en el largo plazo. Registrarse en Binance \u00b6 El registro en Binance es bastante sencillo, sin embargo, el proceso de verificaci\u00f3n de tu cuenta podr\u00eda tardar un poco. Por lo que te invitamos a ser paciente y si el proceso llegase a extenderse, contactar al equipo de soporte para que pueda ayudarte lo m\u00e1s pronto posible. Una vez completado el registro y activaci\u00f3n de tu cuenta, as\u00ed como la verificaci\u00f3n de la misma ya podr\u00e1s tener acceso a la interfaz de la plataforma y podr\u00e1s recibir, enviar dinero, as\u00ed como adquirir y vender tus criptomonedas. Para depositar tendr\u00e1s un panel con toda la informaci\u00f3n, si tomamos la opci\u00f3n de dep\u00f3sito en BTC encontraremos nuestra clave p\u00fablica con la que las personas pueden enviar dinero a nuestra billetera. Adem\u00e1s de nuestro historial de transacciones recientes. Para retirar de igual forma tendr\u00e1s un panel, y en \u00e9l solo tendr\u00e1s que seleccionar la criptomoneda de tu preferencia para enviar el dinero respectivo, suponiendo que queremos enviar bitcoin, ingresar la direcci\u00f3n de BTC del destinatario, as\u00ed como la cantidad de bitcoin o satoshis a enviar. Luego, llegar\u00e1 un correo electr\u00f3nico de confirmaci\u00f3n para terminar de validar la transacci\u00f3n y que el Exchange pueda procesarla, para que entre a la red y pueda llegar a nuestro destinatario. Resumen Enviar y recibir bitcoins o criptomonedas es un proceso sencillo, sin tantas restricciones como una entidad bancaria tradicional y accesibilidad para todas las personas. De acuerdo a nuestro inter\u00e9s u objetivo de inversi\u00f3n siempre tendremos opciones de billeteras y herramientas para almacenar, enviar, y realizar transacciones con nuestras criptomonedas. Almacenamiento y Seguridad \u00b6 El buen uso y almacenamiento de tus bitcoins y criptomonedas es fundamental, pues, aunque el ecosistema es muy seguro, un mal uso del mismo puede llevarnos a perder nuestro dinero. Para ello es muy importante seguir protocolos de seguridad que nos garanticen el control de nuestras criptomonedas. Resumen La seguridad del control sobre tus bitcoin y criptomonedas dependen de ti. Sin importar con cual tipo de billetera cuentes, siempre respalda tus datos e informaci\u00f3n. Es muy importante mantener una copia de tus nombres de usuario, correo electr\u00f3nico y contrase\u00f1as en un lugar seguro, recuerda que tus contrase\u00f1as deben ser lo m\u00e1s complicadas posibles, no repetirse y usar un gestor de contrase\u00f1as es una herramienta incre\u00edble para mantener la seguridad de tus criptomonedas. Plataforma de Inversi\u00f3n \u00b6 El inter\u00e9s de inversi\u00f3n en el Bitcoin y criptomonedas ha crecido de forma exponencial en el tiempo, debido a las fluctuaciones del precio adem\u00e1s de la volatilidad suscitada desde sus inicios. Convirti\u00e9ndose por tanto en una incre\u00edble oportunidad para generar beneficios, con los conocimientos, medidas y entrenamiento necesario. Por lo tanto, es fundamental saber qu\u00e9 plataformas de inversi\u00f3n cuentan con los requisitos y caracter\u00edsticas necesarias para almacenar cierto porcentaje de nuestro dinero e invertir en criptomonedas. Las mejores plataformas de inversi\u00f3n de criptomonedas son aquellas que ofrecen variedad de criptomonedas, comisiones bajas, liquidez, se encuentren reguladas por organismos de mercados financieros, adem\u00e1s de una interfaz din\u00e1mica de an\u00e1lisis, operaciones y almacenamiento. Binance \u00b6 Es considerada la mejor plataforma de inversi\u00f3n de criptomonedas del mundo, adem\u00e1s de brindar la opci\u00f3n de operar con apalancamiento y contar con muchas opciones para los inversores. Una de las primeras en liquidez y volumen adem\u00e1s de una gran cantidad de cripto activos financieros como opci\u00f3n de inversi\u00f3n, comisiones bajas, garant\u00edas de seguridad superior a otros exchanges, y muchas otras caracter\u00edsticas que la ubican en el top. Bitfinex \u00b6 Una de las plataformas pioneras de inversi\u00f3n en criptomonedas, fundada desde el 2012 y de las m\u00e1s relevantes del mercado. Cuenta con una gran cantidad de cripto activos financieros, as\u00ed como gran liquidez y volumen. Su interfaz gr\u00e1fica es de agrado para los usuarios al ser completamente personalizable, permitiendo la configuraci\u00f3n de funciones y herramientas de inversi\u00f3n, haciendo por tanto la experiencia del inversor sencilla y satisfactoria. Coinbase \u00b6 Si bien no es una plataforma enfocada en trading, es uno de los proveedores m\u00e1s relevantes en el mercado de las criptomonedas desde el 2012. Est\u00e1 disponible en m\u00e1s de 30 pa\u00edses considerado uno de los portales m\u00e1s seguros para adquirir criptomonedas. Aunque no tiene una gran variedad de opciones de activos criptogr\u00e1ficos puedes comerciar con los cripto activos m\u00e1s populares, adem\u00e1s funciona como monedero digital web. Kucoin \u00b6 Si bien es una plataforma de inversi\u00f3n con pocos a\u00f1os en el mercado, ha demostrado ser una de las m\u00e1s relevantes brindando a sus usuarios la posibilidad de tener un portafolio de inversi\u00f3n en el corto plazo bastante distribuido debido a la amplia cantidad de cripto activos. Adem\u00e1s de ello, su interfaz es f\u00e1cil e intuitiva contando con buena liquidez y bajo costo en comisiones transaccionales y un atractivo sistema de recompensas a trav\u00e9s de su moneda base. Bitmex \u00b6 Es la plataforma de inversi\u00f3n de criptomonedas con apalancamiento con m\u00e1s a\u00f1os en el mercado. En ella tienes la opci\u00f3n de operar hasta 100 veces con tu capital de inversi\u00f3n por transacci\u00f3n, sin embargo, no cuenta con posibilidad de operar muchos cripto activos, y su enfoque est\u00e1 principalmente en operar sobre bitcoin en ambas direcciones del precio, dando a los inversores la posibilidad de aprovechar todas las oportunidades de fluctuaci\u00f3n en el precio en el corto plazo. Es importante destacar que operar con apalancamiento en las criptomonedas implica un riesgo enorme sobre tu capital de inversi\u00f3n, por lo que no es una opci\u00f3n v\u00e1lida o recomendada para los inversores principiantes. \u00bfQu\u00e9 son satoshis? \u00b6 Bitcoin - Divisa | Divisa \u2013 Bitcoin \u00b6 Debido a la cotizaci\u00f3n del precio del Bitcoin, adquirir una unidad no es accesible para todas las personas. Sin embargo, podemos adquirir una fracci\u00f3n y obtener el equivalente en divisas debido a la capacidad de divisi\u00f3n que cada bitcoin tiene gracias al protocolo inicial definido por Satoshi Nakamoto. \u00bfQu\u00e9 es un Satoshi? \u00b6 Un satoshi es la medida m\u00ednima en la que se puede fragmentar un bitcoin, as\u00ed pues 1 bitcoin es equivalente a 100 millones de satoshis, expresado a la inversa entonces 1 satoshi equivale a 0,00000001 BTC y el nombre est\u00e1 asociado al creador del bitcoin: Satoshi Nakamoto, qui\u00e9n defini\u00f3 as\u00ed las reglas en el protocolo inicial del BTC. Es de suma importancia conocer c\u00f3mo hacer las conversiones de bitcoin a d\u00f3lares y viceversa, pues de esa forma evitaremos transacciones con cantidades err\u00f3neas que podr\u00edan incurrir en p\u00e9rdidas de dinero. Existen herramientas que nos ayudan con el c\u00e1lculo necesario a partir de la cotizaci\u00f3n actual del precio. Una de las m\u00e1s relevantes es la Calculadora de Criptomonedas de CoinmarketCap d\u00f3nde podr\u00e1s obtener de forma autom\u00e1tica el cambio de divisas a satoshis, e incluso realizar el c\u00e1lculo a partir de otras criptomonedas. Divisas a Bitcoin (D\u00f3lares a Satoshis) \u00b6 Puedes adquirir 100 USD en bitcoins, y para ello s\u00f3lo debes tener la cotizaci\u00f3n actual del precio. Suponiendo que el precio promedio actual es de 9000 USD el equivalente en bitcoin ser\u00eda 0.011 BTC correspondiente a 1.111.111 satoshis. Es decir, s\u00f3lo tomamos el valor en USD y al dividirlo sobre el precio actual del cripto activo podremos obtener el equivalente en BTC para realizar de forma exitosa nuestras transacciones correspondientes. Bitcoin a Divisas (Satoshis a D\u00f3lares) \u00b6 Si cuentas con 0.1 BTC y deseas por tanto convertirlo a USD o d\u00f3lares americanos, s\u00f3lo debes contar con el precio de la cotizaci\u00f3n actual. Suponiendo que el precio promedio actual es de 9000 USD el equivalente de 0.1 BTC es de 900 USD. Es decir, s\u00f3lo tomamos la cantidad de bitcoins o satoshis correspondientes y lo multiplicamos por el precio actual del criptoactivo para conocer el equivalente en d\u00f3lares americanos. Resumen Bitcoin es el padre de las criptomonedas, por lo tanto, todas ellas determinan su valor en referencia al bitcoin. De esta forma entender el funcionamiento de los satoshis nos ayudar\u00e1 a entender el valor que se les asigna a las criptomonedas y as\u00ed gestionar nuestras transacciones en el mercado de forma exitosa. Fuente: Curso de Econom\u00eda Digital: Bitcoin y Criptomonedas por Angela Ocando","title":"Econom\u00eda digital"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/02-economia-digital/#economia-digital","text":"","title":"Econom\u00eda digital"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/02-economia-digital/#como-comprar-bitcoin-y-criptomonedas","text":"Bitcoin es unas de las inversiones del momento, en Latinoam\u00e9rica a diferencia de Estados Unidos no hay una soluci\u00f3n 100% efectiva para comprar Bitcoin. En este art\u00edculo conocer\u00e1s las diferentes opciones, el proceso para adquirir bitcoins y algunos consejos a la hora de comprar. \u200b","title":"\u00bfC\u00f3mo comprar Bitcoin y Criptomonedas?"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/02-economia-digital/#comprar-bitcoin-en-latinoamerica-con-binance","text":"\u200b \u200b Binance es una plataforma de inversi\u00f3n online, y una billetera en donde podemos almacenar nuestras criptomonedas de forma segura en el corto plazo. Recordemos que con las billeteras online no tenemos acceso a las claves privadas, pues pertenecen directamente al Exchange por lo que nunca ser\u00e1 buena idea almacenar nuestro dinero por mucho tiempo en este tipo de billeteras, para ello tenemos otras opciones m\u00e1s seguras y que nos brindan control absoluto sobre nuestros cripto activos en el largo plazo. \u200b El registro en Binance es bastante sencillo, sin embargo, el proceso de verificaci\u00f3n de tu cuenta podr\u00eda tardar un poco. Por lo que te invitamos a ser paciente y si el proceso llegase a extenderse, contactar al equipo de soporte para que pueda ayudarte lo m\u00e1s pronto posible. \u200b \u200b \u200b Una vez completado el registro y activaci\u00f3n de tu cuenta, as\u00ed como la verificaci\u00f3n de la misma ya podr\u00e1s tener acceso a la interfaz de la plataforma y podr\u00e1s recibir, enviar dinero, as\u00ed como adquirir y vender tus criptomonedas. \u200b Utilizaremos la Plataforma P2B de Binance para adquirir Bitcoin desde latinoam\u00e9rica. \u200b \u200b Selecciona la pesta\u00f1a Comprar y BTC. Selecciona el m\u00e9todo de pago que quieras, por ejemplo \"Transferencia Bancaria\" y tu moneda. \u200b Luego de ello selecciona la oferta que se adapte a tus intereses y necesidades. \u200b Transfiere el dinero directamente al vendedor. Aseg\u00farate de realizar la transferencia de acuerdo con la informaci\u00f3n de pago proporcionada por el vendedor, dentro del l\u00edmite de tiempo de pago. Es recomendable utilizar el chat para comunicarse con el vendedor. \u200b Aseg\u00farate de que has enviado el dinero al vendedor y luego haz clic en \"Transferido, siguiente\" \u200b Haz clic en Confirmar. Por favor, no pulses este bot\u00f3n si no has realizado ninguna transacci\u00f3n. Esto va en contra de la Pol\u00edtica de transacciones de usuarios P2P. \u200b El estado de la orden se actualizar\u00e1 a ''En proceso de liberaci\u00f3n'' \u200b \u00a1Felicidades! Has completado un intercambio y tus bitcoins est\u00e1n en la billetera \u200b","title":"Comprar Bitcoin en Latinoam\u00e9rica con Binance"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/02-economia-digital/#comprar-bitcoin-en-mexico-con-bitso","text":"\u200b Comprar Bitcoin en M\u00e9xico es bastante sencillo con la plataforma de intercambio de Bitso . \u200b \u200b Con Bitso comienzas creando una cuenta. Recomendaci\u00f3n: Ingresar correctamente todos los datos personales que exijan sobre todo el CURP. \u200b \u200b Una vez creada la cuenta pasar\u00e1s por un proceso de verificaci\u00f3n de n\u00famero de tel\u00e9fono celular. \u200b Al final el proceso de verificaci\u00f3n llegar\u00e1s al panel del sitio de Bitso donde podr\u00e1s ver la informaci\u00f3n general de tu cuenta y tendr\u00e1s la opci\u00f3n de \"Fondear\" tu cuenta en Bitso con pesos mexicanos. \u200b \u200b La verdad la plataforma de Bitso es bastante elaborada a nivel gr\u00e1fico, me gusta mucho. \u200b Antes de comprar Bitcoin debes fondear la cuenta, ellos ofrecen varios m\u00e9todos para fondear tu cuenta de manera instant\u00e1nea en la mayor\u00eda de los casos. \u200b \u200b Al seleccionar un m\u00e9todo de pago te aparecer\u00e1 un mensaje de confirmaci\u00f3n con datos para realizar la transacci\u00f3n. \u200b \u200b Ya con pesos mexicanos en tu cuenta deber\u00e1s intercambiar pesos a Bitcoin a trav\u00e9s de la opci\u00f3n \"Convertir\". \u200b \u200b En esta opci\u00f3n colocas la cantidad de pesos mexicanos que deseas convertir a Bitcoin y Bitso autom\u00e1ticamente te informar\u00e1 cu\u00e1ntos bitcoins recibir\u00e1s. \u200b","title":"Comprar Bitcoin en M\u00e9xico con Bitso"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/02-economia-digital/#comprar-bitcoin-desde-cualquier-parte-de-latinoamerica-con-localbitcoinscom","text":"\u200b Localbitcoins es una opci\u00f3n mundial , muy f\u00e1cil de usar pero no tan segura en todos los casos. Pero no te preocupes, ac\u00e1 te dir\u00e9 como evitar estafas a trav\u00e9s de Localbitcoins con algunas recomendaciones. \u200b Localbitcoins funciona similar a un servicio de anuncios clasificados, donde una persona sube un anuncio pero el servicio como tal no tiene nada que ver con el vendedor. La diferencia en Localbitcoins es que hay ciertos procesos de verificaci\u00f3n que agregan una capa de seguridad a la transacci\u00f3n. \u200b \u200b Registrarse es bastante sencillo y el proceso de verificaci\u00f3n a\u00fan m\u00e1s, te recomiendo tener tu pasaporte a la mano para el proceso de verificaci\u00f3n en l\u00ednea. \u200b \u200b En el proceso de verificaci\u00f3n te pedir\u00e1 verificar tu n\u00famero de tel\u00e9fono y tu identidad. Recomendaci\u00f3n: Al momento de verificar tu identidad te pedir\u00e1 subir una foto de tu pasaporte o c\u00e9dula/tarjeta de identidad, usa tu pasaporte en la medida de lo posible y adem\u00e1s deja la ventana o la pesta\u00f1a del navegador abierta porque el proceso puede tardar. \u200b Podr\u00edas comprar sin verificar la cuenta, pero los vendedores m\u00e1s confiables podr\u00edan no estar disponible porque restringen los intercambios para cuentas verificadas. Tambi\u00e9n podr\u00eda afectar la cantidad m\u00ednima o m\u00e1xima de Bitcoin que puedes comprarle a un vendedor. \u200b Una vez est\u00e9 verificada la cuenta puedes proceder a buscar un anuncio que se adapte a la cantidad de dinero que quieras invertir en bitcoin. \u200b \u200b En el campo Amount debes ingresar la cantidad que deseas invertir sin espacios, comas, puntos. Luego la moneda y el pa\u00eds. Por defecto detecta en que pa\u00eds te encuentras. En caso de que no, puedes seleccionar el pa\u00eds y la moneda con la cual deseas realizar la transacci\u00f3n. \u200b \u200b Podr\u00e1s observar todos los anuncios que se adaptan a lo que est\u00e1s buscando, en este caso anuncios para comprar de manera online 30 mil pesos colombianos en bitcoins. \u200b Algo importante a resaltar es que cada vendedor coloca el precio que desee as\u00ed que podr\u00e1s ver diferencias de precios. \u200b \u200b Al analizar el listado de anuncios podr\u00e1s encontrar, qui\u00e9n es el vendedor , el m\u00e9todo de pago que est\u00e1 utilizando, por lo general es un banco, el precio en tu moneda local por cada Bitcoin y los l\u00edmites de una transacci\u00f3n , es decir cu\u00e1nto puedes comprar como m\u00ednimo y como m\u00e1ximo respectivamente. Recomendaci\u00f3n: NO usar PayPal, Webmoney, Skrill o cualquier sistema online de pago de ese estilo porque son muy susceptibles a fraudes. \u200b \u200b En la informaci\u00f3n del trader podr\u00e1s ver, el nombre de usuario, la cantidad de transacciones y el % de feedback positivo de sus transacciones. Si est\u00e1 al 100% significa que el 100% de sus compras o ventas han sido satisfactoria. \u200b Tambi\u00e9n puedes ver un indicador verde que indica en cu\u00e1ntos minutos responde a partir del momento que se abra una orden de compra. \u200b Algo importante a tener en cuenta es el perfil del vendedor. Puedes ingresar al perfil haciendo clic en el nombre de usuario, all\u00ed podr\u00e1s ver la informaci\u00f3n del vendedor y con cu\u00e1ntos \"partners\" ha hecho transacciones, es importante que los n\u00fameros sean grandes, eso indicar\u00eda m\u00e1s actividad en la plataforma. Tambi\u00e9n tener en cuenta que la identidad est\u00e9 verificada. \u200b \u200b Al momento de seleccionar un anuncio veremos m\u00e1s informaci\u00f3n del anuncio y un formulario donde podemos indicar la cantidad de dinero a invertir, lo que se recibir\u00e1 en BTC y un campo de texto donde uno puede dejar un mensaje para el vendedor. Recomendaci\u00f3n: Si est\u00e1s comprando por transferencia bancaria, indicar en el campo de texto que banco deseas usar para agilizar la compra . \u200b \u200b Es importante verificar qu\u00e9 bancos o m\u00e9todo de pago recibe el anunciante, algunas veces en la descripci\u00f3n en la parte de la derecha deja un tel\u00e9fono celular, cada vez que puedas puedes escribir por Whatsapp o llamar para tener m\u00e1s informaci\u00f3n. \u200b Una vez enviada el trade aparecer\u00e1 un chat, debes esperar a que el vendedor te responda con la informaci\u00f3n para pagar. \u200b \u200b Si pagas por transferencia bancaria debes tomar un screenshot y subirlo al chat. Es importante siempre marcar como pagada la orden que abras. \u200b Cuando abres una compra en Localbitcoins la cantidad que decides comprar se bloquea para el vendedor, es una medida de seguridad. \u200b","title":"Comprar Bitcoin desde cualquier parte de Latinoam\u00e9rica con Localbitcoins.com"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/02-economia-digital/#consideraciones-finales","text":"\u200b Tanto Binance como Bitso y Localbitcoins cuentan con wallets, no necesitas abrir o instalar alguna wallet para poder comprar. Solo necesitar\u00e1s una wallet cuando retires Bitcoin de alguno de estos servicios. \u200b Si tienes dudas en alg\u00fan servicio no temas en usar el sistema de soporte, algunos son un poco lento pero al final recibir\u00e1s una respuesta que aclara tus dudas o si deseas puedes dejar tu duda ac\u00e1 en el art\u00edculo y en la medida de lo posible te responder\u00e9 con la soluci\u00f3n. \u200b NO olvides activar 2FA o autenticaci\u00f3n de dos pasos para todas las cuentas que tengas en estos servicios. \u200b Recomendaci\u00f3n final, investiga bien los costos para retirar BTC desde estos servicios as\u00ed evitar\u00e1s perder dinero a la hora de retirar BTC de tu cuenta.","title":"Consideraciones finales"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/02-economia-digital/#billeteras-y-tipos-de-billeteras","text":"Antes de pensar en adquirir criptomonedas, es muy importante entender c\u00f3mo podemos almacenarlas, en d\u00f3nde y qu\u00e9 medio es m\u00e1s seguro de acuerdo a tus objetivos e intereses.","title":"Billeteras y Tipos de Billeteras"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/02-economia-digital/#que-es-una-billetera","text":"Las billeteras o wallets son software o programas que te permiten almacenar, enviar y recibir Bitcoin y criptomonedas. Su funci\u00f3n es almacenar las claves privadas necesarias para proteger el saldo y transacciones registradas en una clave p\u00fablica en la blockchain. Sin embargo, existen varios tipos de billeteras y es muy importante identificar cu\u00e1l es m\u00e1s adecuada para ti.","title":"\u00bfQu\u00e9 es una billetera?"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/02-economia-digital/#tipos-de-wallets","text":"Billeteras de Escritorio: Las billeteras de escritorio est\u00e1n disponibles en la mayor\u00eda de sistemas operativos, incluyendo Windows, Linux, y Mac. Adem\u00e1s de ello son billeteras con un nivel de seguridad muy alto, ya que s\u00f3lo se puede acceder a ella a trav\u00e9s del dispositivo en el que fue instalado el software. Tambi\u00e9n proporcionan una serie de letras y n\u00fameros despu\u00e9s de su instalaci\u00f3n que son de utilidad si llegase a ocurrir alg\u00fan problema con tu dispositivo, por lo que es muy importante que guardes con sumo cuidado este c\u00f3digo pues con ello podr\u00e1s reinstalar nuevamente tu billetera sin perder el acceso a tu direcci\u00f3n de Bitcoin y por tanto a tu dinero. Algunas billeteras de escritorio que puedes probar son: Electrum Bitpay * Billeteras de Hardware: Las billeteras de hardware incrementan el nivel de seguridad pues las claves privadas son almacenadas en una memoria USB o un dispositivo espec\u00edficamente dise\u00f1ado. Ejemplo: Ledger Nano, Trezor, etc. Este tipo de billeteras permite a los usuarios conectar la memoria USB a cualquier dispositivo, iniciar sesi\u00f3n, realizar transacciones y desconectar nuevamente, manteniendo nuestro dinero seguro. Es importante, por tanto, mantener los USB a salvo, adem\u00e1s de seguir el m\u00e9todo de respaldo correspondiente. Algunas billeteras de hardware que puedes probar son: Ledger Trezor * Billeteras App M\u00f3viles: Su funcionalidad y nivel de seguridad es similar al de las billeteras de escritorio. Sin embargo, en este caso se ejecutan en forma de aplicaci\u00f3n en tu tel\u00e9fono celular. Tambi\u00e9n su funcionamiento es m\u00e1s accesible, pues tienes a la mano la posibilidad de ingresar a tu direcci\u00f3n, realizar transacciones. Es muy importante, adem\u00e1s, respaldar muy bien la seguridad de tu dispositivo m\u00f3vil, pues un tercero podr\u00eda tener acceso a tu dinero si no cuentas con una buena gesti\u00f3n de seguridad. Algunas billeteras m\u00f3viles que puedes probar son: MyCelium Bitcoin Wallet Coin Wallet * Billeteras En L\u00ednea: Estas billeteras son propiedad de los exchanges o casas de cambio en su mayor\u00eda, por lo que s\u00f3lo requerimos correo electr\u00f3nico y contrase\u00f1a para crear y acceder a ellas. En algunos casos, necesitas un proceso de verificaci\u00f3n m\u00e1s complejo para poder validar tus datos y agregar una capa de seguridad, como el env\u00edo de tus documentos personales. Puedes acceder a ellas desde cualquier lugar y dispositivo con acceso a internet. Es importante contar con un buen protocolo de seguridad porque no tenemos un control total sobre ellas, teniendo en cuenta que son propiedad de los exchanges. Algunas billeteras en l\u00ednea que puedes probar son: Blockchain Coinbase Ahora que conoces cuales son los tipos de billeteras, si tu objetivo es adquirir criptomonedas pero te gustar\u00eda ver varias opciones de intercambios para adquirir bitcoin sin importar el lugar en el que te encuentres, en Buy Bitcoin WorldWide puedes escoger tu pa\u00eds de residencia adem\u00e1s del m\u00e9todo de pago que te gustar\u00eda usar y encontrar\u00e1s varias opciones adem\u00e1s de toda la informaci\u00f3n al respecto.","title":"Tipos de Wallets"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/02-economia-digital/#como-usar-una-billetera","text":"En la clase anterior, te contamos acerca de los tipos de billeteras de bitcoin, su nivel de seguridad de acuerdo a tus objetivos e intereses y nuestras recomendaciones. Una billetera o Wallet de bitcoin es el lugar en el que podemos gestionar nuestros activos criptogr\u00e1ficos. Funciona como una cuenta bancaria, en donde puedes guardar tu dinero, enviar y recibir transacciones. Sin embargo, no funciona como una entidad bancaria tradicional pues es un sistema descentralizado por lo que el proceso de registro es mucho m\u00e1s sencillo, as\u00ed como su accesibilidad. Una billetera de bitcoin cuenta con dos elementos: La clave o direcci\u00f3n p\u00fablica La clave o direcci\u00f3n privada La clave o direcci\u00f3n p\u00fablica es el c\u00f3digo que podemos compartir a los dem\u00e1s usuarios para que puedan enviar dinero de forma exitosa a nuestra billetera, sin el riesgo de que puedan extraer nuestros fondos. A trav\u00e9s de ella podemos recibir, consultar, y ver nuestros estados de cuenta. La clave privada en cambio es un c\u00f3digo que no podemos compartir con nadie, pues podr\u00edan con ella acceder a nuestros fondos y extraer nuestro dinero. Es de suma importancia guardarla en un lugar seguro y privado que nos asegure el control absoluto sobre nuestros cripto activos.","title":"\u00bfC\u00f3mo usar una Billetera?"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/02-economia-digital/#realizando-una-transaccion-en-una-billetera-online-binance","text":"Binance es una plataforma de inversi\u00f3n online, y una billetera en donde podemos almacenar nuestras criptomonedas de forma segura en el corto plazo. Recordemos que con las billeteras online no tenemos acceso a las claves privadas, pues pertenecen directamente al Exchange por lo que nunca ser\u00e1 buena idea almacenar nuestro dinero por mucho tiempo en este tipo de billeteras, para ello tenemos otras opciones m\u00e1s seguras y que nos brindan control absoluto sobre nuestros cripto activos en el largo plazo.","title":"Realizando una transacci\u00f3n en una billetera online (Binance)"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/02-economia-digital/#registrarse-en-binance","text":"El registro en Binance es bastante sencillo, sin embargo, el proceso de verificaci\u00f3n de tu cuenta podr\u00eda tardar un poco. Por lo que te invitamos a ser paciente y si el proceso llegase a extenderse, contactar al equipo de soporte para que pueda ayudarte lo m\u00e1s pronto posible. Una vez completado el registro y activaci\u00f3n de tu cuenta, as\u00ed como la verificaci\u00f3n de la misma ya podr\u00e1s tener acceso a la interfaz de la plataforma y podr\u00e1s recibir, enviar dinero, as\u00ed como adquirir y vender tus criptomonedas. Para depositar tendr\u00e1s un panel con toda la informaci\u00f3n, si tomamos la opci\u00f3n de dep\u00f3sito en BTC encontraremos nuestra clave p\u00fablica con la que las personas pueden enviar dinero a nuestra billetera. Adem\u00e1s de nuestro historial de transacciones recientes. Para retirar de igual forma tendr\u00e1s un panel, y en \u00e9l solo tendr\u00e1s que seleccionar la criptomoneda de tu preferencia para enviar el dinero respectivo, suponiendo que queremos enviar bitcoin, ingresar la direcci\u00f3n de BTC del destinatario, as\u00ed como la cantidad de bitcoin o satoshis a enviar. Luego, llegar\u00e1 un correo electr\u00f3nico de confirmaci\u00f3n para terminar de validar la transacci\u00f3n y que el Exchange pueda procesarla, para que entre a la red y pueda llegar a nuestro destinatario. Resumen Enviar y recibir bitcoins o criptomonedas es un proceso sencillo, sin tantas restricciones como una entidad bancaria tradicional y accesibilidad para todas las personas. De acuerdo a nuestro inter\u00e9s u objetivo de inversi\u00f3n siempre tendremos opciones de billeteras y herramientas para almacenar, enviar, y realizar transacciones con nuestras criptomonedas.","title":"Registrarse en Binance"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/02-economia-digital/#almacenamiento-y-seguridad","text":"El buen uso y almacenamiento de tus bitcoins y criptomonedas es fundamental, pues, aunque el ecosistema es muy seguro, un mal uso del mismo puede llevarnos a perder nuestro dinero. Para ello es muy importante seguir protocolos de seguridad que nos garanticen el control de nuestras criptomonedas. Resumen La seguridad del control sobre tus bitcoin y criptomonedas dependen de ti. Sin importar con cual tipo de billetera cuentes, siempre respalda tus datos e informaci\u00f3n. Es muy importante mantener una copia de tus nombres de usuario, correo electr\u00f3nico y contrase\u00f1as en un lugar seguro, recuerda que tus contrase\u00f1as deben ser lo m\u00e1s complicadas posibles, no repetirse y usar un gestor de contrase\u00f1as es una herramienta incre\u00edble para mantener la seguridad de tus criptomonedas.","title":"Almacenamiento y Seguridad"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/02-economia-digital/#plataforma-de-inversion","text":"El inter\u00e9s de inversi\u00f3n en el Bitcoin y criptomonedas ha crecido de forma exponencial en el tiempo, debido a las fluctuaciones del precio adem\u00e1s de la volatilidad suscitada desde sus inicios. Convirti\u00e9ndose por tanto en una incre\u00edble oportunidad para generar beneficios, con los conocimientos, medidas y entrenamiento necesario. Por lo tanto, es fundamental saber qu\u00e9 plataformas de inversi\u00f3n cuentan con los requisitos y caracter\u00edsticas necesarias para almacenar cierto porcentaje de nuestro dinero e invertir en criptomonedas. Las mejores plataformas de inversi\u00f3n de criptomonedas son aquellas que ofrecen variedad de criptomonedas, comisiones bajas, liquidez, se encuentren reguladas por organismos de mercados financieros, adem\u00e1s de una interfaz din\u00e1mica de an\u00e1lisis, operaciones y almacenamiento.","title":"Plataforma de Inversi\u00f3n"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/02-economia-digital/#binance","text":"Es considerada la mejor plataforma de inversi\u00f3n de criptomonedas del mundo, adem\u00e1s de brindar la opci\u00f3n de operar con apalancamiento y contar con muchas opciones para los inversores. Una de las primeras en liquidez y volumen adem\u00e1s de una gran cantidad de cripto activos financieros como opci\u00f3n de inversi\u00f3n, comisiones bajas, garant\u00edas de seguridad superior a otros exchanges, y muchas otras caracter\u00edsticas que la ubican en el top.","title":"Binance"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/02-economia-digital/#bitfinex","text":"Una de las plataformas pioneras de inversi\u00f3n en criptomonedas, fundada desde el 2012 y de las m\u00e1s relevantes del mercado. Cuenta con una gran cantidad de cripto activos financieros, as\u00ed como gran liquidez y volumen. Su interfaz gr\u00e1fica es de agrado para los usuarios al ser completamente personalizable, permitiendo la configuraci\u00f3n de funciones y herramientas de inversi\u00f3n, haciendo por tanto la experiencia del inversor sencilla y satisfactoria.","title":"Bitfinex"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/02-economia-digital/#coinbase","text":"Si bien no es una plataforma enfocada en trading, es uno de los proveedores m\u00e1s relevantes en el mercado de las criptomonedas desde el 2012. Est\u00e1 disponible en m\u00e1s de 30 pa\u00edses considerado uno de los portales m\u00e1s seguros para adquirir criptomonedas. Aunque no tiene una gran variedad de opciones de activos criptogr\u00e1ficos puedes comerciar con los cripto activos m\u00e1s populares, adem\u00e1s funciona como monedero digital web.","title":"Coinbase"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/02-economia-digital/#kucoin","text":"Si bien es una plataforma de inversi\u00f3n con pocos a\u00f1os en el mercado, ha demostrado ser una de las m\u00e1s relevantes brindando a sus usuarios la posibilidad de tener un portafolio de inversi\u00f3n en el corto plazo bastante distribuido debido a la amplia cantidad de cripto activos. Adem\u00e1s de ello, su interfaz es f\u00e1cil e intuitiva contando con buena liquidez y bajo costo en comisiones transaccionales y un atractivo sistema de recompensas a trav\u00e9s de su moneda base.","title":"Kucoin"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/02-economia-digital/#bitmex","text":"Es la plataforma de inversi\u00f3n de criptomonedas con apalancamiento con m\u00e1s a\u00f1os en el mercado. En ella tienes la opci\u00f3n de operar hasta 100 veces con tu capital de inversi\u00f3n por transacci\u00f3n, sin embargo, no cuenta con posibilidad de operar muchos cripto activos, y su enfoque est\u00e1 principalmente en operar sobre bitcoin en ambas direcciones del precio, dando a los inversores la posibilidad de aprovechar todas las oportunidades de fluctuaci\u00f3n en el precio en el corto plazo. Es importante destacar que operar con apalancamiento en las criptomonedas implica un riesgo enorme sobre tu capital de inversi\u00f3n, por lo que no es una opci\u00f3n v\u00e1lida o recomendada para los inversores principiantes.","title":"Bitmex"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/02-economia-digital/#que-son-satoshis","text":"","title":"\u00bfQu\u00e9 son satoshis?"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/02-economia-digital/#bitcoin-divisa-divisa-bitcoin","text":"Debido a la cotizaci\u00f3n del precio del Bitcoin, adquirir una unidad no es accesible para todas las personas. Sin embargo, podemos adquirir una fracci\u00f3n y obtener el equivalente en divisas debido a la capacidad de divisi\u00f3n que cada bitcoin tiene gracias al protocolo inicial definido por Satoshi Nakamoto.","title":"Bitcoin - Divisa | Divisa \u2013 Bitcoin"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/02-economia-digital/#que-es-un-satoshi","text":"Un satoshi es la medida m\u00ednima en la que se puede fragmentar un bitcoin, as\u00ed pues 1 bitcoin es equivalente a 100 millones de satoshis, expresado a la inversa entonces 1 satoshi equivale a 0,00000001 BTC y el nombre est\u00e1 asociado al creador del bitcoin: Satoshi Nakamoto, qui\u00e9n defini\u00f3 as\u00ed las reglas en el protocolo inicial del BTC. Es de suma importancia conocer c\u00f3mo hacer las conversiones de bitcoin a d\u00f3lares y viceversa, pues de esa forma evitaremos transacciones con cantidades err\u00f3neas que podr\u00edan incurrir en p\u00e9rdidas de dinero. Existen herramientas que nos ayudan con el c\u00e1lculo necesario a partir de la cotizaci\u00f3n actual del precio. Una de las m\u00e1s relevantes es la Calculadora de Criptomonedas de CoinmarketCap d\u00f3nde podr\u00e1s obtener de forma autom\u00e1tica el cambio de divisas a satoshis, e incluso realizar el c\u00e1lculo a partir de otras criptomonedas.","title":"\u00bfQu\u00e9 es un Satoshi?"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/02-economia-digital/#divisas-a-bitcoin-dolares-a-satoshis","text":"Puedes adquirir 100 USD en bitcoins, y para ello s\u00f3lo debes tener la cotizaci\u00f3n actual del precio. Suponiendo que el precio promedio actual es de 9000 USD el equivalente en bitcoin ser\u00eda 0.011 BTC correspondiente a 1.111.111 satoshis. Es decir, s\u00f3lo tomamos el valor en USD y al dividirlo sobre el precio actual del cripto activo podremos obtener el equivalente en BTC para realizar de forma exitosa nuestras transacciones correspondientes.","title":"Divisas a Bitcoin (D\u00f3lares a Satoshis)"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/02-economia-digital/#bitcoin-a-divisas-satoshis-a-dolares","text":"Si cuentas con 0.1 BTC y deseas por tanto convertirlo a USD o d\u00f3lares americanos, s\u00f3lo debes contar con el precio de la cotizaci\u00f3n actual. Suponiendo que el precio promedio actual es de 9000 USD el equivalente de 0.1 BTC es de 900 USD. Es decir, s\u00f3lo tomamos la cantidad de bitcoins o satoshis correspondientes y lo multiplicamos por el precio actual del criptoactivo para conocer el equivalente en d\u00f3lares americanos. Resumen Bitcoin es el padre de las criptomonedas, por lo tanto, todas ellas determinan su valor en referencia al bitcoin. De esta forma entender el funcionamiento de los satoshis nos ayudar\u00e1 a entender el valor que se les asigna a las criptomonedas y as\u00ed gestionar nuestras transacciones en el mercado de forma exitosa. Fuente: Curso de Econom\u00eda Digital: Bitcoin y Criptomonedas por Angela Ocando","title":"Bitcoin a Divisas (Satoshis a D\u00f3lares)"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/03-activos-financieros/","text":"Activos financieros \u00b6 \u00bfEs Bitcoin un activo financiero? \u00b6 Un activo financiero es un bien o propiedad legal que otorga beneficios o ganancias futuras a quien lo adquiere y pueden ser emitidas por cualquier empresa, o ente gubernamental. Adem\u00e1s de ello, debe cumplir con ciertas caracter\u00edsticas: Debe ser rentable en el tiempo, es decir generar beneficios sobre la toma de decisiones por adquirir el activo. La posibilidad de incurrir en p\u00e9rdidas sobre el capital de inversi\u00f3n. Mientras mayor sea el riesgo, tambi\u00e9n ser\u00e1 la mayor la rentabilidad. Capacidad para convertir el activo financiero en moneda local sin sufrir p\u00e9rdidas en la transacci\u00f3n realizada. Si bien Bitcoin cumple con algunas de estas caracter\u00edsticas, no es considerado un activo financiero legal debido a su protocolo inicial. Es decir, no posee un organismo de control similar a un Banco Central o marco jur\u00eddico que lo respalde, es por ello que tampoco se considera un activo financiero autorizado para cotizar en las bolsas de valores. \u00bfPor qu\u00e9 Bitcoin no cumple con la definici\u00f3n de Activo Financiero? \u00b6 No es una moneda en curso legal en el mundo, aunque su adopci\u00f3n aumenta cada vez m\u00e1s. No es equivalente a dinero local, pues este cambio se enfrenta constantemente a las fluctuaciones constantes de su valor en el mercado. A\u00fan no es un medio de pago tradicional en el mundo, o con una aceptaci\u00f3n regida por marcos legales. Sin embargo, esta criptomoneda ha soportado varias crisis de liquidez y jur\u00eddicas en los mercados financieros, sorprendiendo as\u00ed a la econom\u00eda mundial gracias a su r\u00e1pido crecimiento y valorizaci\u00f3n. 2020 en particular, quedar\u00e1 en la historia como el a\u00f1o en que los mercados financieros sufrieron su peor ca\u00edda desde los a\u00f1os 90 y por primera vez en el mundo el petr\u00f3leo tuvo precios negativos. En momentos de tanta incertidumbre sobre el panorama econ\u00f3mico mundial, Bitcoin ha demostrado ser el activo con mayor firmeza respecto a la situaci\u00f3n actual, actuando incluso como refugio econ\u00f3mico adem\u00e1s del oro. A pesar de los cambios abruptos en la cotizaci\u00f3n de los precios, el volumen diario de negociaci\u00f3n ha ido aumentando en el tiempo, mostrando por tanto el inter\u00e9s de los inversionistas en los cripto activos. Fuente: Coinmarketcap Total Market Capitalization Si bien, el futuro de las criptomonedas es incierto las transacciones cobran cada d\u00eda m\u00e1s relevancia, la adopci\u00f3n del cripto ecosistema va en incremento, y los gobiernos comienzan a notar, regular, y aceptarlo como medio de pago siendo el caso de Jap\u00f3n, Suiza, Venezuela, etc. El nuevo mundo digital se presenta como un gran escenario para las criptomonedas. Llegando a ser una gran alternativa para complementar los sistemas de pago tradicionales y que en un futuro cercano pueda llegar a ser parte de la cotidianidad de las pr\u00f3ximas generaciones. Las criptomonedas definitivamente llegaron para quedarse. \u00b6 Evoluci\u00f3n del Precio de Bitcoin y Criptomonedas \u00b6 Cronolog\u00eda del Bitcoin \u00b6 Veamos c\u00f3mo ha sido su evoluci\u00f3n desde su creaci\u00f3n, resaltando los eventos m\u00e1s importantes. 2009: Nacimiento \u00b6 Nace Bitcoin, y se genera el \"Bloque G\u00e9nesis\" o primer bloque de minado por 50 BTC. Durante ese a\u00f1o se registran las primeras transacciones a nivel global. 2010: Primeras transacciones \u00b6 El 22 de mayo de 2010 Laszlo Hanyecz pag\u00f3 10.000 BTC por un par de pizzas , siendo una de las primeras transacciones en utilizar el cripto activo como m\u00e9todo de pago. Adem\u00e1s super\u00f3 por primera vez los 10 centavos de USD. 2011: El Bitcoin supera la cotizaci\u00f3n del d\u00f3lar \u00b6 Bitcoin logra lo imposible y alcanza 1 USD de cotizaci\u00f3n, dando inicio a un gran inter\u00e9s por las criptomonedas y al alto nivel de volatilidad en la fluctuaci\u00f3n del precio del activo, superando los 20 USD a mediados de a\u00f1o, pero debido a preocupaciones sobre la falta de marcos legales sobre este nuevo sistema monetario y la no consolidaci\u00f3n de un mecanismo de comercio su cotizaci\u00f3n cae a valores m\u00ednimos regresando nuevamente a 2 USD. 2012: Nacimiento de la Fundaci\u00f3n Bitcoin \u00b6 Naci\u00f3 la Fundaci\u00f3n Bitcoin, una organizaci\u00f3n sin fines de lucro, para promover el crecimiento de esta moneda digital. Su misi\u00f3n era estandarizar, proteger y promover el protocolo de c\u00f3digo abierto. Su cotizaci\u00f3n creci\u00f3 lentamente durante ese a\u00f1o. Adem\u00e1s, BitPay anuncia que m\u00e1s de 1.000 plataformas aceptan Bitcoin como m\u00e9todo de pago. 2013: Crecimiento exponencial del Bitcoin \u00b6 Coinbase anuncia un incremento considerable del volumen de transacci\u00f3n en su plataforma durante el primer trimestre del a\u00f1o, y entidades financieras comienzan a prestar su atenci\u00f3n a la criptomoneda. Crece de forma exponencial durante un a\u00f1o, iniciando en 20 USD promedio de cotizaci\u00f3n y alcanzando los casi 1.000 USD antes de finalizar el 2013. Para este momento, Bitcoin ya contaba con una gran comunidad que lo respaldaba como proyecto y tecnolog\u00eda. 2014: Bitcoin como medio de pago e inestabilidad de su valor \u00b6 Este a\u00f1o Bitcoin comienza a ser aceptado como medio de pago y como activo de inversi\u00f3n. Empresas como Microsoft comienzan a aceptarlo como m\u00e9todo de pago. El gran impacto en la volatilidad de los precios comienza a hacerse m\u00e1s notable iniciando el a\u00f1o en un precio cercano a los 1.000 USD y culminando debajo de los 400 USD. 2015: Problemas de seguridad relacionados con Bitcoin \u00b6 Ese a\u00f1o se informa de varios ataques cibern\u00e9ticos y el robo de Bitcoin de varias compa\u00f1\u00edas de pagos. Se procede al cambio en los sistemas inform\u00e1ticos para dotar de mayor seguridad a la red de comercio. Afectando en efecto al precio, pues fue un a\u00f1o de crecimiento lento con ca\u00eddas a principios de a\u00f1o y aumento progresivo hasta alcanzar nuevamente los 500 USD para final de a\u00f1o. 2016: Aceptaci\u00f3n del Bitcoin por entidades gubernamentales \u00b6 Jap\u00f3n decide legalizar Bitcoin como medio de pago, ning\u00fan gobierno hab\u00eda hecho hasta el momento y durante ese a\u00f1o comenzaron a existir a nivel mundial cerca de 500 cajeros autom\u00e1ticos de Bitcoin. Su cotizaci\u00f3n se mantiene en crecimiento lento pero constante iniciando el a\u00f1o en cerca de 400 USD y finalizando sobre los 900 USD. 2017 El m\u00e1ximo hist\u00f3rico en el valor del Bitcoin \u00b6 Este es quiz\u00e1 uno de los a\u00f1os m\u00e1s importantes para el bitcoin y las criptomonedas, comenz\u00f3 a crecer r\u00e1pidamente y su evoluci\u00f3n dej\u00f3 at\u00f3nitos a todos los inversores adem\u00e1s de atraer la atenci\u00f3n de millones de personas en el mundo. El gobierno de Rusia anuncia la legalizaci\u00f3n y adopci\u00f3n del cripto activo, y tras varios eventos pol\u00edticos econ\u00f3micos durante el primer trimestre del a\u00f1o (Brexit, Trump como presidente de USA, etc.) Bitcoin ya hab\u00eda superado el m\u00e1ximo hist\u00f3rico de 1.000 USD y comienza el camino de crecimiento impensable, iniciando por romper la barrera de los 2.000 USD a mediados del mayo superando al oro en su cotizaci\u00f3n. El FOMO Se intensifica y Bitcoin registra los 19.900 USD antes de culminar el a\u00f1o registr\u00e1ndose como el m\u00e1ximo hist\u00f3rico de las criptomonedas, mostrando al mundo su potencial de crecimiento. Ballenas vs. Retail \u00b6 Las criptomonedas se han convertido en uno de los instrumentos financieros m\u00e1s importantes de la \u00faltima d\u00e9cada debido a su incre\u00edble volatilidad y fluctuaci\u00f3n en los precios, llamando la atenci\u00f3n de inversionistas tanto novatos como profesionales. Si bien el acceso al ecosistema de los cripto activos es f\u00e1cil, muy pocas logran alcanzar el \u00e9xito como inversionistas o especuladores. En especial en un mercado con tan poco tiempo, recorrido e historia de precios; elevando la dificultad para alcanzar la consistencia o rentabilidad. \u00bfQu\u00e9 son Ballenas y Traders Retail? \u00b6 Las ballenas son inversionistas con alto poder adquisitivo y amplio recorrido en el mundo de las inversiones, conociendo por tanto los patrones de funcionamiento de los activos financieros, y elevando as\u00ed las probabilidades de \u00e9xito en sus transacciones. Debido al gran volumen de negociaci\u00f3n, las ballenas pueden afectar en gran medida el comportamiento del precio de un cripto activo. En los mercados financieros tradicionales al ser centralizados no hay acceso para que todas las personas puedan divisar las transacciones realizadas. Sin embargo, en el ecosistema de las criptomonedas existen herramientas que nos permiten ver los movimientos de las ballenas, ayud\u00e1ndonos a entender cu\u00e1les son sus intereses en un cripto activo en particular y as\u00ed accionar en mayor probabilidad a favor del movimiento del precio. Los retail traders, en cambio, son inversionistas individuales o minoristas y buscan generar rentabilidad a partir de sus movimientos en el cripto mercado. En conjunto su volumen de negociaci\u00f3n es muy bajo y suelen tener una mentalidad de inversi\u00f3n de corto plazo lo que los lleva a tener una baja diversificaci\u00f3n y gran aversi\u00f3n al riesgo por lo tanto muy pocos logran alcanzar el \u00e9xito en el mundo de las inversiones. Una herramienta que nos ayudar\u00e1 a entender y tener un primer acercamiento con las transacciones es WhaleAlert , detallando cada una de las transacciones para identificar en qu\u00e9 cripto activo est\u00e1n interesados, qu\u00e9 cantidad de dinero est\u00e1n invirtiendo y en qu\u00e9 direcci\u00f3n se est\u00e1n moviendo. Fuente: WhaleAlert BitInfoCharts \u00b6 Esta herramienta nos permite visualizar la distribuci\u00f3n de riquezas en Bitcoin, y podemos ver como de los 18 millones de bitcoins minados hasta el momento menos de 200 mil direcciones de bitcoin en el mundo cuentan con m\u00e1s del 80% de la totalidad del activo financiero. Fuente: BitInfoCharts Bitcoin Rich List Resumen Si bien alcanzar la rentabilidad en el ecosistema de las criptomonedas no es tarea sencilla, tampoco es imposible. Es muy importante entender que, aunque no seamos ballenas nada nos detiene a pensar y actuar como ellas, siguiendo el camino correcto de aprendizaje y realizando las pr\u00e1cticas adecuadas que nos permitan avanzar en el tiempo, y generar rentabilidades a partir de ello. Tipos de Inversores \u00b6 Un inversionista especula a partir de la fluctuaci\u00f3n de los precios de un activo financiero de forma profesional. Esto quiere decir que requiere mucha disciplina y conocimiento para llevar a cabo esta actividad adem\u00e1s de una estrategia o metodolog\u00eda definida. Existen diferentes tipos de inversores, y esto depender\u00e1 de los objetivos e intereses de cada persona. Tipos de Inversores \u00b6 Inversor Intrad\u00eda \u00b6 Su objetivo es aprovechar micro movimientos del precio en temporalidades bajas, de esa forma puede abrir varias y cerrar operaciones en un mismo d\u00eda, buscando beneficios peque\u00f1os que sumen al final de la jornada. Los inversores que operan bajo esta t\u00e9cnica suelen enfocarse en la acci\u00f3n del precio por encima del potencial del cripto activo en el largo plazo. Adem\u00e1s, los inversionistas profesionales, cuentan con sistemas automatizados que les permiten gestionar su portafolios y optimizar sus procesos. Inversor Swing \u00b6 Su objetivo es aprovechar los movimientos tendenciales en temporalidades medias, y sostener operaciones durante d\u00edas e incluso semanas, buscando beneficios considerables, pero en menor medida pues su enfoque no es visualizar el mercado en todo momento sino aprovechar los grandes movimientos. Una buena diversificaci\u00f3n y gesti\u00f3n de riesgo es prioridad para un inversor de este perfil, adem\u00e1s de enfocarse en el potencial de mediano plazo del cripto activo. Inversor de Largo Plazo \u00b6 Un inversor de largo plazo, estudia el potencial del activo financiero en el tiempo. Su enfoque no se encuentra en puntos medios del precio sino en que pueda perdurar y generar beneficios pasados los meses e incluso a\u00f1os adem\u00e1s de diversificar su portafolio e ir agregando activos que incrementen el valor de su capital. \u00bfCu\u00e1l perfil elegir? \u00b6 El objetivo principal de cualquier inversor es generar beneficios, comprando y vendiendo cripto activos o viceversa. El principal problema radica en que la mayor\u00eda de las personas est\u00e1n enfocadas en encontrar beneficios en el corto plazo, y esto no est\u00e1 directamente relacionado con el tipo de inversor sino con la mentalidad err\u00f3nea. Pero el mercado siempre est\u00e1 ah\u00ed para recordarte que esto no es un juego, es una profesi\u00f3n en la que debemos contar con un plan, metas, y estrategia. As\u00ed que \u00bfcu\u00e1l perfil debo elegir? Elige un perfil que se adapte a tu personalidad, as\u00ed como tus objetivos e intereses con el cripto mercado, sin embargo, cada uno de ellos requiere una enorme cantidad de tiempo, estudio, herramientas, disciplina, enfoque y estrategia que nos permita ser consistentes. Portafolios de Inversi\u00f3n \u00b6 Dependiendo de la aversi\u00f3n al riesgo que puedan tomar los inversores, podemos distinguir entre varios tipos de portafolios de inversi\u00f3n, pues debido a la volatilidad del Bitcoin y las Altcoins es muy importante distribuir bien nuestro dinero. Adem\u00e1s, debemos tener en cuenta que lo \u00fanico que podemos controlar en las inversiones son las p\u00e9rdidas, nadie sabe con certeza cu\u00e1l ser\u00e1 el beneficio total al ingresar a una transacci\u00f3n, son s\u00f3lo probabilidades al margen. Portafolio de Inversi\u00f3n Conservador \u00b6 Un portafolio de inversi\u00f3n conservador minimiza al m\u00e1ximo las posibles p\u00e9rdidas, a cambio de obtener beneficios consistentes en el tiempo y en el peor de los casos la p\u00e9rdida total no suponga un gran da\u00f1o al capital inicial. La diversificaci\u00f3n en este tipo de portafolios es clave, pero tambi\u00e9n los cripto activos, por lo que las mejores opciones siempre ser\u00e1n cripto activos s\u00f3lidos y con trayectoria en el tiempo adem\u00e1s de un nivel de volatilidad normal respecto al ecosistema, que no suponga cada transacci\u00f3n m\u00e1s de 1% de riesgo sobre capital total y de una posible proyecci\u00f3n de beneficio que supere al menos tres veces el riesgo. Estas pueden adaptarse a cualquier tipo de inversor, y es el perfil de portafolio de riesgo m\u00e1s recomendado. Al ser el trading una profesi\u00f3n se buscan resultados consistentes en el tiempo y una buena gesti\u00f3n de riesgo siempre elevar\u00e1 las probabilidades para alcanzarlo. Portafolio de Inversi\u00f3n Moderado \u00b6 En un portafolio de inversi\u00f3n moderado dentro de un marco l\u00f3gico el objetivo es alcanzar una rentabilidad atractiva asociada a un riesgo moderado. Es decir, la aversi\u00f3n al riesgo aumenta por transacci\u00f3n sin embargo la relaci\u00f3n beneficio riesgo debe mantenerse o superar al perfil de riesgo conservador. En este tipo de portafolios podemos empezar a distribuir nuestro capital para comenzar a incluir cripto activos con mayor nivel de volatilidad, sin olvidar que la gesti\u00f3n de riesgo siempre debe ser protagonista en cada una de nuestras transacciones adapt\u00e1ndose al tipo de perfil inversor que queramos desempe\u00f1ar. De igual forma, un portafolio de inversi\u00f3n moderado no debe bajo ninguna circunstancia ser llevado por un inversor novato. Portafolio de Inversi\u00f3n Agresivo \u00b6 Inversores experimentados, con gran recorrido y conocimientos crean este tipo de portafolios. En la mayor\u00eda de los casos con herramientas automatizadas que les permiten controlar a detalle la aversi\u00f3n al riesgo y tambi\u00e9n el sesgo emocional. Adem\u00e1s de ello una diversificaci\u00f3n amplia, as\u00ed como cripto activos con mayor nivel de volatilidad. Normalmente son portafolios con un perfil de inversor de intrad\u00eda o corto plazo pues el nivel de riesgo es bastante amplio respecto al capital inicial y el objetivo principal es aprovechar la mayor cantidad de movimientos en el mercado para generar en mayor probabilidad m\u00e1s beneficios a partir de ello. Resumen Las posibilidades en el mundo de las inversiones son enormes, sin embargo, los inversores con mayor tiempo y trayectoria siempre seguir\u00e1n un perfil de riesgo y portafolio conservador. Recuerda que tus proyecciones sin importar tu perfil deben ser siempre a largo plazo, en una profesi\u00f3n de tantos caminos siempre debemos pensar de forma objetiva y sistem\u00e1tica para que nuestro capital pueda perdurar en el tiempo y ser consistente de igual forma. \u00bfQu\u00e9 es CoinMarketCap? \u00b6 CoinMarketCap es una de las herramientas m\u00e1s importantes para los cripto inversores, pues en ella encontramos toda la informaci\u00f3n b\u00e1sica y relevante del mercado. Desde capitalizaci\u00f3n, precio actual de todas las criptomonedas, volumen, gr\u00e1ficos, hist\u00f3rico de precio, ranking de todas las criptomonedas existentes, y m\u00e1s. Ranking de criptomonedas \u00b6 Algunas de las caracter\u00edsticas que encontramos al ingresar a la plataforma son: Market Cap (Capitalizaci\u00f3n de Mercado): Es decir la cantidad total de d\u00f3lares americanos o capitalizaci\u00f3n que tiene bitcoin y cada una de las criptomonedas. Price (Precio): La cotizaci\u00f3n actual en d\u00f3lares americanos de cada criptomoneda, promediando el precio de todas las plataformas de inversi\u00f3n. Volume (Volumen): La cantidad de dinero que ha tenido movimiento en las \u00faltimas 24 horas en d\u00f3lares americanos de cada una de las criptomonedas. Circulating Supply (Cantidad en Circulaci\u00f3n): El n\u00famero de monedas que se encuentran en circulaci\u00f3n hasta el momento, es decir de los 21 millones de BTC que van a existir hoy s\u00f3lo se han minado 18 millones BTC en promedio. Change 24h (Cambio del precio): El resultado de la \u00faltima fluctuaci\u00f3n del precio en las \u00faltimas 24 horas en t\u00e9rminos porcentuales. Es decir, podemos ver si el precio de la criptomoneda en particular ha aumentado su cotizaci\u00f3n respecto al d\u00eda anterior o viceversa. Price Graph 7D (Gr\u00e1fico del Precio): Un gr\u00e1fico general del precio en la \u00faltima semana, sin ahondar en muchos detalles. Fuente: Top 100 Cryptocurrencies Coinmarketcap Informaci\u00f3n Relevante de Cada Criptomoneda \u00b6 Desde la interfaz principal de CoinMarketCap podemos ir al panel individual de cada una de las criptomonedas para ver m\u00e1s detalles e informaci\u00f3n. Tendremos acceso al sitio web de cada criptomoneda con toda la informaci\u00f3n t\u00e9cnica y relevante. Es muy importante siempre validar esta informaci\u00f3n cuando nos encontremos buscando cripto activos para agregar a nuestros portafolios de largo plazo. Adem\u00e1s del explorador de bloques o transacciones, foros, acceso al c\u00f3digo fuente y toda la documentaci\u00f3n t\u00e9cnica (White paper) con todos los detalles del proyecto y su protocolo de creaci\u00f3n. Tenemos acceso tambi\u00e9n, a divisar nuevamente la capitalizaci\u00f3n total, cambios de precio, volumen, cantidad en circulaci\u00f3n y el l\u00edmite de emisi\u00f3n de cada criptomoneda. De igual forma, al hist\u00f3rico de precios en la parte inferior, redes sociales, herramientas, noticias, e incluso en qu\u00e9 plataformas de inversi\u00f3n podemos comerciar y adquirir la criptomoneda en particular. Por lo tanto, en un solo lugar encontramos toda la informaci\u00f3n relevante necesaria que nos ayudar\u00e1 a complementar nuestra decisi\u00f3n de sumar o no un cripto activo a nuestros portafolios de inversi\u00f3n seg\u00fan sea el caso. Fuente: Bitcoin Coinmarketcap Criptomonedas con Mayor Movimiento \u00b6 Otra de las herramientas m\u00e1s importantes dentro de CoinMarketCap para los inversionistas es poder divisar las criptomonedas con mayor movimiento en las \u00faltimas 24 horas e incluso en la \u00faltima semana. Para inversionistas de corto mediano plazo, esta herramienta es de absoluta relevancia porque pueden entender qu\u00e9 criptomonedas cuentan con el volumen y potencial suficiente para realizar fluctuaciones de alto impacto en el mercado. Cabe destacar que no es una herramienta absoluta, y tampoco existe una herramienta absoluta en el mundo de las inversiones. La consistencia se alcanza a partir de un conjunto de herramientas y fundamentos basados en probabilidades con resultados en el tiempo. Fuente: CoinMarketCap Gainers \u2013 Losers Resumen CoinMarketCap es una de las herramientas m\u00e1s completas para inversores de criptomonedas, y ser\u00e1 un complemento ideal para poder estudiar a detalle cada cripto activo. Si bien no es una herramienta absoluta y su uso exclusivo no nos indica oportunidades de inversi\u00f3n, s\u00ed que es una gran fuente de informaci\u00f3n para entender los fundamentos del ecosistema cripto. Si tu inter\u00e9s es convertirte en un inversor de criptomonedas, recuerda que en Platzi tenemos el Curso de Introducci\u00f3n al Trading de Criptomonedas y all\u00ed podr\u00e1s entender todo el aspecto t\u00e9cnico y principios b\u00e1sicos que un inversor necesita para comenzar en el mundo de las inversiones y crear resultados a partir de ello. Fuente: Curso de Econom\u00eda Digital: Bitcoin y Criptomonedas por Angela Ocando","title":"Activos financieros"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/03-activos-financieros/#activos-financieros","text":"","title":"Activos financieros"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/03-activos-financieros/#es-bitcoin-un-activo-financiero","text":"Un activo financiero es un bien o propiedad legal que otorga beneficios o ganancias futuras a quien lo adquiere y pueden ser emitidas por cualquier empresa, o ente gubernamental. Adem\u00e1s de ello, debe cumplir con ciertas caracter\u00edsticas: Debe ser rentable en el tiempo, es decir generar beneficios sobre la toma de decisiones por adquirir el activo. La posibilidad de incurrir en p\u00e9rdidas sobre el capital de inversi\u00f3n. Mientras mayor sea el riesgo, tambi\u00e9n ser\u00e1 la mayor la rentabilidad. Capacidad para convertir el activo financiero en moneda local sin sufrir p\u00e9rdidas en la transacci\u00f3n realizada. Si bien Bitcoin cumple con algunas de estas caracter\u00edsticas, no es considerado un activo financiero legal debido a su protocolo inicial. Es decir, no posee un organismo de control similar a un Banco Central o marco jur\u00eddico que lo respalde, es por ello que tampoco se considera un activo financiero autorizado para cotizar en las bolsas de valores.","title":"\u00bfEs Bitcoin un activo financiero?"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/03-activos-financieros/#por-que-bitcoin-no-cumple-con-la-definicion-de-activo-financiero","text":"No es una moneda en curso legal en el mundo, aunque su adopci\u00f3n aumenta cada vez m\u00e1s. No es equivalente a dinero local, pues este cambio se enfrenta constantemente a las fluctuaciones constantes de su valor en el mercado. A\u00fan no es un medio de pago tradicional en el mundo, o con una aceptaci\u00f3n regida por marcos legales. Sin embargo, esta criptomoneda ha soportado varias crisis de liquidez y jur\u00eddicas en los mercados financieros, sorprendiendo as\u00ed a la econom\u00eda mundial gracias a su r\u00e1pido crecimiento y valorizaci\u00f3n. 2020 en particular, quedar\u00e1 en la historia como el a\u00f1o en que los mercados financieros sufrieron su peor ca\u00edda desde los a\u00f1os 90 y por primera vez en el mundo el petr\u00f3leo tuvo precios negativos. En momentos de tanta incertidumbre sobre el panorama econ\u00f3mico mundial, Bitcoin ha demostrado ser el activo con mayor firmeza respecto a la situaci\u00f3n actual, actuando incluso como refugio econ\u00f3mico adem\u00e1s del oro. A pesar de los cambios abruptos en la cotizaci\u00f3n de los precios, el volumen diario de negociaci\u00f3n ha ido aumentando en el tiempo, mostrando por tanto el inter\u00e9s de los inversionistas en los cripto activos. Fuente: Coinmarketcap Total Market Capitalization Si bien, el futuro de las criptomonedas es incierto las transacciones cobran cada d\u00eda m\u00e1s relevancia, la adopci\u00f3n del cripto ecosistema va en incremento, y los gobiernos comienzan a notar, regular, y aceptarlo como medio de pago siendo el caso de Jap\u00f3n, Suiza, Venezuela, etc.","title":"\u00bfPor qu\u00e9 Bitcoin no cumple con la definici\u00f3n de Activo Financiero?"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/03-activos-financieros/#el-nuevo-mundo-digital-se-presenta-como-un-gran-escenario-para-las-criptomonedas-llegando-a-ser-una-gran-alternativa-para-complementar-los-sistemas-de-pago-tradicionales-y-que-en-un-futuro-cercano-pueda-llegar-a-ser-parte-de-la-cotidianidad-de-las-proximas-generaciones-las-criptomonedas-definitivamente-llegaron-para-quedarse","text":"","title":"El nuevo mundo digital se presenta como un gran escenario para las criptomonedas. Llegando a ser una gran alternativa para complementar los sistemas de pago tradicionales y que en un futuro cercano pueda llegar a ser parte de la cotidianidad de las pr\u00f3ximas generaciones. Las criptomonedas definitivamente llegaron para quedarse."},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/03-activos-financieros/#evolucion-del-precio-de-bitcoin-y-criptomonedas","text":"","title":"Evoluci\u00f3n del Precio de Bitcoin y Criptomonedas"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/03-activos-financieros/#cronologia-del-bitcoin","text":"Veamos c\u00f3mo ha sido su evoluci\u00f3n desde su creaci\u00f3n, resaltando los eventos m\u00e1s importantes.","title":"Cronolog\u00eda del Bitcoin"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/03-activos-financieros/#2009-nacimiento","text":"Nace Bitcoin, y se genera el \"Bloque G\u00e9nesis\" o primer bloque de minado por 50 BTC. Durante ese a\u00f1o se registran las primeras transacciones a nivel global.","title":"2009: Nacimiento"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/03-activos-financieros/#2010-primeras-transacciones","text":"El 22 de mayo de 2010 Laszlo Hanyecz pag\u00f3 10.000 BTC por un par de pizzas , siendo una de las primeras transacciones en utilizar el cripto activo como m\u00e9todo de pago. Adem\u00e1s super\u00f3 por primera vez los 10 centavos de USD.","title":"2010: Primeras transacciones"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/03-activos-financieros/#2011-el-bitcoin-supera-la-cotizacion-del-dolar","text":"Bitcoin logra lo imposible y alcanza 1 USD de cotizaci\u00f3n, dando inicio a un gran inter\u00e9s por las criptomonedas y al alto nivel de volatilidad en la fluctuaci\u00f3n del precio del activo, superando los 20 USD a mediados de a\u00f1o, pero debido a preocupaciones sobre la falta de marcos legales sobre este nuevo sistema monetario y la no consolidaci\u00f3n de un mecanismo de comercio su cotizaci\u00f3n cae a valores m\u00ednimos regresando nuevamente a 2 USD.","title":"2011: El Bitcoin supera la cotizaci\u00f3n del d\u00f3lar"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/03-activos-financieros/#2012-nacimiento-de-la-fundacion-bitcoin","text":"Naci\u00f3 la Fundaci\u00f3n Bitcoin, una organizaci\u00f3n sin fines de lucro, para promover el crecimiento de esta moneda digital. Su misi\u00f3n era estandarizar, proteger y promover el protocolo de c\u00f3digo abierto. Su cotizaci\u00f3n creci\u00f3 lentamente durante ese a\u00f1o. Adem\u00e1s, BitPay anuncia que m\u00e1s de 1.000 plataformas aceptan Bitcoin como m\u00e9todo de pago.","title":"2012: Nacimiento de la Fundaci\u00f3n Bitcoin"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/03-activos-financieros/#2013-crecimiento-exponencial-del-bitcoin","text":"Coinbase anuncia un incremento considerable del volumen de transacci\u00f3n en su plataforma durante el primer trimestre del a\u00f1o, y entidades financieras comienzan a prestar su atenci\u00f3n a la criptomoneda. Crece de forma exponencial durante un a\u00f1o, iniciando en 20 USD promedio de cotizaci\u00f3n y alcanzando los casi 1.000 USD antes de finalizar el 2013. Para este momento, Bitcoin ya contaba con una gran comunidad que lo respaldaba como proyecto y tecnolog\u00eda.","title":"2013: Crecimiento exponencial del Bitcoin"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/03-activos-financieros/#2014-bitcoin-como-medio-de-pago-e-inestabilidad-de-su-valor","text":"Este a\u00f1o Bitcoin comienza a ser aceptado como medio de pago y como activo de inversi\u00f3n. Empresas como Microsoft comienzan a aceptarlo como m\u00e9todo de pago. El gran impacto en la volatilidad de los precios comienza a hacerse m\u00e1s notable iniciando el a\u00f1o en un precio cercano a los 1.000 USD y culminando debajo de los 400 USD.","title":"2014: Bitcoin como medio de pago e inestabilidad de su valor"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/03-activos-financieros/#2015-problemas-de-seguridad-relacionados-con-bitcoin","text":"Ese a\u00f1o se informa de varios ataques cibern\u00e9ticos y el robo de Bitcoin de varias compa\u00f1\u00edas de pagos. Se procede al cambio en los sistemas inform\u00e1ticos para dotar de mayor seguridad a la red de comercio. Afectando en efecto al precio, pues fue un a\u00f1o de crecimiento lento con ca\u00eddas a principios de a\u00f1o y aumento progresivo hasta alcanzar nuevamente los 500 USD para final de a\u00f1o.","title":"2015: Problemas de seguridad relacionados con Bitcoin"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/03-activos-financieros/#2016-aceptacion-del-bitcoin-por-entidades-gubernamentales","text":"Jap\u00f3n decide legalizar Bitcoin como medio de pago, ning\u00fan gobierno hab\u00eda hecho hasta el momento y durante ese a\u00f1o comenzaron a existir a nivel mundial cerca de 500 cajeros autom\u00e1ticos de Bitcoin. Su cotizaci\u00f3n se mantiene en crecimiento lento pero constante iniciando el a\u00f1o en cerca de 400 USD y finalizando sobre los 900 USD.","title":"2016: Aceptaci\u00f3n del Bitcoin por entidades gubernamentales"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/03-activos-financieros/#2017-el-maximo-historico-en-el-valor-del-bitcoin","text":"Este es quiz\u00e1 uno de los a\u00f1os m\u00e1s importantes para el bitcoin y las criptomonedas, comenz\u00f3 a crecer r\u00e1pidamente y su evoluci\u00f3n dej\u00f3 at\u00f3nitos a todos los inversores adem\u00e1s de atraer la atenci\u00f3n de millones de personas en el mundo. El gobierno de Rusia anuncia la legalizaci\u00f3n y adopci\u00f3n del cripto activo, y tras varios eventos pol\u00edticos econ\u00f3micos durante el primer trimestre del a\u00f1o (Brexit, Trump como presidente de USA, etc.) Bitcoin ya hab\u00eda superado el m\u00e1ximo hist\u00f3rico de 1.000 USD y comienza el camino de crecimiento impensable, iniciando por romper la barrera de los 2.000 USD a mediados del mayo superando al oro en su cotizaci\u00f3n. El FOMO Se intensifica y Bitcoin registra los 19.900 USD antes de culminar el a\u00f1o registr\u00e1ndose como el m\u00e1ximo hist\u00f3rico de las criptomonedas, mostrando al mundo su potencial de crecimiento.","title":"2017 El m\u00e1ximo hist\u00f3rico en el valor del Bitcoin"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/03-activos-financieros/#ballenas-vs-retail","text":"Las criptomonedas se han convertido en uno de los instrumentos financieros m\u00e1s importantes de la \u00faltima d\u00e9cada debido a su incre\u00edble volatilidad y fluctuaci\u00f3n en los precios, llamando la atenci\u00f3n de inversionistas tanto novatos como profesionales. Si bien el acceso al ecosistema de los cripto activos es f\u00e1cil, muy pocas logran alcanzar el \u00e9xito como inversionistas o especuladores. En especial en un mercado con tan poco tiempo, recorrido e historia de precios; elevando la dificultad para alcanzar la consistencia o rentabilidad.","title":"Ballenas vs. Retail"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/03-activos-financieros/#que-son-ballenas-y-traders-retail","text":"Las ballenas son inversionistas con alto poder adquisitivo y amplio recorrido en el mundo de las inversiones, conociendo por tanto los patrones de funcionamiento de los activos financieros, y elevando as\u00ed las probabilidades de \u00e9xito en sus transacciones. Debido al gran volumen de negociaci\u00f3n, las ballenas pueden afectar en gran medida el comportamiento del precio de un cripto activo. En los mercados financieros tradicionales al ser centralizados no hay acceso para que todas las personas puedan divisar las transacciones realizadas. Sin embargo, en el ecosistema de las criptomonedas existen herramientas que nos permiten ver los movimientos de las ballenas, ayud\u00e1ndonos a entender cu\u00e1les son sus intereses en un cripto activo en particular y as\u00ed accionar en mayor probabilidad a favor del movimiento del precio. Los retail traders, en cambio, son inversionistas individuales o minoristas y buscan generar rentabilidad a partir de sus movimientos en el cripto mercado. En conjunto su volumen de negociaci\u00f3n es muy bajo y suelen tener una mentalidad de inversi\u00f3n de corto plazo lo que los lleva a tener una baja diversificaci\u00f3n y gran aversi\u00f3n al riesgo por lo tanto muy pocos logran alcanzar el \u00e9xito en el mundo de las inversiones. Una herramienta que nos ayudar\u00e1 a entender y tener un primer acercamiento con las transacciones es WhaleAlert , detallando cada una de las transacciones para identificar en qu\u00e9 cripto activo est\u00e1n interesados, qu\u00e9 cantidad de dinero est\u00e1n invirtiendo y en qu\u00e9 direcci\u00f3n se est\u00e1n moviendo. Fuente: WhaleAlert","title":"\u00bfQu\u00e9 son Ballenas y Traders Retail?"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/03-activos-financieros/#bitinfocharts","text":"Esta herramienta nos permite visualizar la distribuci\u00f3n de riquezas en Bitcoin, y podemos ver como de los 18 millones de bitcoins minados hasta el momento menos de 200 mil direcciones de bitcoin en el mundo cuentan con m\u00e1s del 80% de la totalidad del activo financiero. Fuente: BitInfoCharts Bitcoin Rich List Resumen Si bien alcanzar la rentabilidad en el ecosistema de las criptomonedas no es tarea sencilla, tampoco es imposible. Es muy importante entender que, aunque no seamos ballenas nada nos detiene a pensar y actuar como ellas, siguiendo el camino correcto de aprendizaje y realizando las pr\u00e1cticas adecuadas que nos permitan avanzar en el tiempo, y generar rentabilidades a partir de ello.","title":"BitInfoCharts"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/03-activos-financieros/#tipos-de-inversores","text":"Un inversionista especula a partir de la fluctuaci\u00f3n de los precios de un activo financiero de forma profesional. Esto quiere decir que requiere mucha disciplina y conocimiento para llevar a cabo esta actividad adem\u00e1s de una estrategia o metodolog\u00eda definida. Existen diferentes tipos de inversores, y esto depender\u00e1 de los objetivos e intereses de cada persona.","title":"Tipos de Inversores"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/03-activos-financieros/#tipos-de-inversores_1","text":"","title":"Tipos de Inversores"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/03-activos-financieros/#inversor-intradia","text":"Su objetivo es aprovechar micro movimientos del precio en temporalidades bajas, de esa forma puede abrir varias y cerrar operaciones en un mismo d\u00eda, buscando beneficios peque\u00f1os que sumen al final de la jornada. Los inversores que operan bajo esta t\u00e9cnica suelen enfocarse en la acci\u00f3n del precio por encima del potencial del cripto activo en el largo plazo. Adem\u00e1s, los inversionistas profesionales, cuentan con sistemas automatizados que les permiten gestionar su portafolios y optimizar sus procesos.","title":"Inversor Intrad\u00eda"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/03-activos-financieros/#inversor-swing","text":"Su objetivo es aprovechar los movimientos tendenciales en temporalidades medias, y sostener operaciones durante d\u00edas e incluso semanas, buscando beneficios considerables, pero en menor medida pues su enfoque no es visualizar el mercado en todo momento sino aprovechar los grandes movimientos. Una buena diversificaci\u00f3n y gesti\u00f3n de riesgo es prioridad para un inversor de este perfil, adem\u00e1s de enfocarse en el potencial de mediano plazo del cripto activo.","title":"Inversor Swing"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/03-activos-financieros/#inversor-de-largo-plazo","text":"Un inversor de largo plazo, estudia el potencial del activo financiero en el tiempo. Su enfoque no se encuentra en puntos medios del precio sino en que pueda perdurar y generar beneficios pasados los meses e incluso a\u00f1os adem\u00e1s de diversificar su portafolio e ir agregando activos que incrementen el valor de su capital.","title":"Inversor de Largo Plazo"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/03-activos-financieros/#cual-perfil-elegir","text":"El objetivo principal de cualquier inversor es generar beneficios, comprando y vendiendo cripto activos o viceversa. El principal problema radica en que la mayor\u00eda de las personas est\u00e1n enfocadas en encontrar beneficios en el corto plazo, y esto no est\u00e1 directamente relacionado con el tipo de inversor sino con la mentalidad err\u00f3nea. Pero el mercado siempre est\u00e1 ah\u00ed para recordarte que esto no es un juego, es una profesi\u00f3n en la que debemos contar con un plan, metas, y estrategia. As\u00ed que \u00bfcu\u00e1l perfil debo elegir? Elige un perfil que se adapte a tu personalidad, as\u00ed como tus objetivos e intereses con el cripto mercado, sin embargo, cada uno de ellos requiere una enorme cantidad de tiempo, estudio, herramientas, disciplina, enfoque y estrategia que nos permita ser consistentes.","title":"\u00bfCu\u00e1l perfil elegir?"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/03-activos-financieros/#portafolios-de-inversion","text":"Dependiendo de la aversi\u00f3n al riesgo que puedan tomar los inversores, podemos distinguir entre varios tipos de portafolios de inversi\u00f3n, pues debido a la volatilidad del Bitcoin y las Altcoins es muy importante distribuir bien nuestro dinero. Adem\u00e1s, debemos tener en cuenta que lo \u00fanico que podemos controlar en las inversiones son las p\u00e9rdidas, nadie sabe con certeza cu\u00e1l ser\u00e1 el beneficio total al ingresar a una transacci\u00f3n, son s\u00f3lo probabilidades al margen.","title":"Portafolios de Inversi\u00f3n"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/03-activos-financieros/#portafolio-de-inversion-conservador","text":"Un portafolio de inversi\u00f3n conservador minimiza al m\u00e1ximo las posibles p\u00e9rdidas, a cambio de obtener beneficios consistentes en el tiempo y en el peor de los casos la p\u00e9rdida total no suponga un gran da\u00f1o al capital inicial. La diversificaci\u00f3n en este tipo de portafolios es clave, pero tambi\u00e9n los cripto activos, por lo que las mejores opciones siempre ser\u00e1n cripto activos s\u00f3lidos y con trayectoria en el tiempo adem\u00e1s de un nivel de volatilidad normal respecto al ecosistema, que no suponga cada transacci\u00f3n m\u00e1s de 1% de riesgo sobre capital total y de una posible proyecci\u00f3n de beneficio que supere al menos tres veces el riesgo. Estas pueden adaptarse a cualquier tipo de inversor, y es el perfil de portafolio de riesgo m\u00e1s recomendado. Al ser el trading una profesi\u00f3n se buscan resultados consistentes en el tiempo y una buena gesti\u00f3n de riesgo siempre elevar\u00e1 las probabilidades para alcanzarlo.","title":"Portafolio de Inversi\u00f3n Conservador"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/03-activos-financieros/#portafolio-de-inversion-moderado","text":"En un portafolio de inversi\u00f3n moderado dentro de un marco l\u00f3gico el objetivo es alcanzar una rentabilidad atractiva asociada a un riesgo moderado. Es decir, la aversi\u00f3n al riesgo aumenta por transacci\u00f3n sin embargo la relaci\u00f3n beneficio riesgo debe mantenerse o superar al perfil de riesgo conservador. En este tipo de portafolios podemos empezar a distribuir nuestro capital para comenzar a incluir cripto activos con mayor nivel de volatilidad, sin olvidar que la gesti\u00f3n de riesgo siempre debe ser protagonista en cada una de nuestras transacciones adapt\u00e1ndose al tipo de perfil inversor que queramos desempe\u00f1ar. De igual forma, un portafolio de inversi\u00f3n moderado no debe bajo ninguna circunstancia ser llevado por un inversor novato.","title":"Portafolio de Inversi\u00f3n Moderado"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/03-activos-financieros/#portafolio-de-inversion-agresivo","text":"Inversores experimentados, con gran recorrido y conocimientos crean este tipo de portafolios. En la mayor\u00eda de los casos con herramientas automatizadas que les permiten controlar a detalle la aversi\u00f3n al riesgo y tambi\u00e9n el sesgo emocional. Adem\u00e1s de ello una diversificaci\u00f3n amplia, as\u00ed como cripto activos con mayor nivel de volatilidad. Normalmente son portafolios con un perfil de inversor de intrad\u00eda o corto plazo pues el nivel de riesgo es bastante amplio respecto al capital inicial y el objetivo principal es aprovechar la mayor cantidad de movimientos en el mercado para generar en mayor probabilidad m\u00e1s beneficios a partir de ello. Resumen Las posibilidades en el mundo de las inversiones son enormes, sin embargo, los inversores con mayor tiempo y trayectoria siempre seguir\u00e1n un perfil de riesgo y portafolio conservador. Recuerda que tus proyecciones sin importar tu perfil deben ser siempre a largo plazo, en una profesi\u00f3n de tantos caminos siempre debemos pensar de forma objetiva y sistem\u00e1tica para que nuestro capital pueda perdurar en el tiempo y ser consistente de igual forma.","title":"Portafolio de Inversi\u00f3n Agresivo"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/03-activos-financieros/#que-es-coinmarketcap","text":"CoinMarketCap es una de las herramientas m\u00e1s importantes para los cripto inversores, pues en ella encontramos toda la informaci\u00f3n b\u00e1sica y relevante del mercado. Desde capitalizaci\u00f3n, precio actual de todas las criptomonedas, volumen, gr\u00e1ficos, hist\u00f3rico de precio, ranking de todas las criptomonedas existentes, y m\u00e1s.","title":"\u00bfQu\u00e9 es CoinMarketCap?"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/03-activos-financieros/#ranking-de-criptomonedas","text":"Algunas de las caracter\u00edsticas que encontramos al ingresar a la plataforma son: Market Cap (Capitalizaci\u00f3n de Mercado): Es decir la cantidad total de d\u00f3lares americanos o capitalizaci\u00f3n que tiene bitcoin y cada una de las criptomonedas. Price (Precio): La cotizaci\u00f3n actual en d\u00f3lares americanos de cada criptomoneda, promediando el precio de todas las plataformas de inversi\u00f3n. Volume (Volumen): La cantidad de dinero que ha tenido movimiento en las \u00faltimas 24 horas en d\u00f3lares americanos de cada una de las criptomonedas. Circulating Supply (Cantidad en Circulaci\u00f3n): El n\u00famero de monedas que se encuentran en circulaci\u00f3n hasta el momento, es decir de los 21 millones de BTC que van a existir hoy s\u00f3lo se han minado 18 millones BTC en promedio. Change 24h (Cambio del precio): El resultado de la \u00faltima fluctuaci\u00f3n del precio en las \u00faltimas 24 horas en t\u00e9rminos porcentuales. Es decir, podemos ver si el precio de la criptomoneda en particular ha aumentado su cotizaci\u00f3n respecto al d\u00eda anterior o viceversa. Price Graph 7D (Gr\u00e1fico del Precio): Un gr\u00e1fico general del precio en la \u00faltima semana, sin ahondar en muchos detalles. Fuente: Top 100 Cryptocurrencies Coinmarketcap","title":"Ranking de criptomonedas"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/03-activos-financieros/#informacion-relevante-de-cada-criptomoneda","text":"Desde la interfaz principal de CoinMarketCap podemos ir al panel individual de cada una de las criptomonedas para ver m\u00e1s detalles e informaci\u00f3n. Tendremos acceso al sitio web de cada criptomoneda con toda la informaci\u00f3n t\u00e9cnica y relevante. Es muy importante siempre validar esta informaci\u00f3n cuando nos encontremos buscando cripto activos para agregar a nuestros portafolios de largo plazo. Adem\u00e1s del explorador de bloques o transacciones, foros, acceso al c\u00f3digo fuente y toda la documentaci\u00f3n t\u00e9cnica (White paper) con todos los detalles del proyecto y su protocolo de creaci\u00f3n. Tenemos acceso tambi\u00e9n, a divisar nuevamente la capitalizaci\u00f3n total, cambios de precio, volumen, cantidad en circulaci\u00f3n y el l\u00edmite de emisi\u00f3n de cada criptomoneda. De igual forma, al hist\u00f3rico de precios en la parte inferior, redes sociales, herramientas, noticias, e incluso en qu\u00e9 plataformas de inversi\u00f3n podemos comerciar y adquirir la criptomoneda en particular. Por lo tanto, en un solo lugar encontramos toda la informaci\u00f3n relevante necesaria que nos ayudar\u00e1 a complementar nuestra decisi\u00f3n de sumar o no un cripto activo a nuestros portafolios de inversi\u00f3n seg\u00fan sea el caso. Fuente: Bitcoin Coinmarketcap","title":"Informaci\u00f3n Relevante de Cada Criptomoneda"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/03-activos-financieros/#criptomonedas-con-mayor-movimiento","text":"Otra de las herramientas m\u00e1s importantes dentro de CoinMarketCap para los inversionistas es poder divisar las criptomonedas con mayor movimiento en las \u00faltimas 24 horas e incluso en la \u00faltima semana. Para inversionistas de corto mediano plazo, esta herramienta es de absoluta relevancia porque pueden entender qu\u00e9 criptomonedas cuentan con el volumen y potencial suficiente para realizar fluctuaciones de alto impacto en el mercado. Cabe destacar que no es una herramienta absoluta, y tampoco existe una herramienta absoluta en el mundo de las inversiones. La consistencia se alcanza a partir de un conjunto de herramientas y fundamentos basados en probabilidades con resultados en el tiempo. Fuente: CoinMarketCap Gainers \u2013 Losers Resumen CoinMarketCap es una de las herramientas m\u00e1s completas para inversores de criptomonedas, y ser\u00e1 un complemento ideal para poder estudiar a detalle cada cripto activo. Si bien no es una herramienta absoluta y su uso exclusivo no nos indica oportunidades de inversi\u00f3n, s\u00ed que es una gran fuente de informaci\u00f3n para entender los fundamentos del ecosistema cripto. Si tu inter\u00e9s es convertirte en un inversor de criptomonedas, recuerda que en Platzi tenemos el Curso de Introducci\u00f3n al Trading de Criptomonedas y all\u00ed podr\u00e1s entender todo el aspecto t\u00e9cnico y principios b\u00e1sicos que un inversor necesita para comenzar en el mundo de las inversiones y crear resultados a partir de ello. Fuente: Curso de Econom\u00eda Digital: Bitcoin y Criptomonedas por Angela Ocando","title":"Criptomonedas con Mayor Movimiento"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/04-conclusion/","text":"Conclusi\u00f3n \u00b6 Gesti\u00f3n de Riesgo + Regla 90/90/90 \u00b6 El capital de inversi\u00f3n es la herramienta principal de un inversor, y que perdure en el tiempo, as\u00ed como logre ser consistente su crecimiento es el principal objetivo. Sin embargo, muchos inversores principiantes ingresan al ecosistema sin medir el riesgo y se enfrentan a dolorosas p\u00e9rdidas debido a ello. En el mercado de las criptomonedas la volatilidad de los precios es el principal temor de los inversores, pues todos los activos financieros representan un riesgo inicial. Para ello, nuestro pilar fundamental debe ser preservar nuestro capital en el tiempo y esto s\u00f3lo es posible a trav\u00e9s de una gesti\u00f3n de riesgo adecuada. Gesti\u00f3n de Riesgo \u00b6 Lo \u00fanico que podemos controlar en el mundo de las inversiones son las p\u00e9rdidas. Preservar tu capital y alcanzar la rentabilidad es totalmente posible siempre y cuando entiendas que debemos seguir una estrategia met\u00f3dica y completa sin dejar nada al azar. Gestionar el riesgo implica contar con una serie de reglas y herramientas que nos permitan controlar cada una de nuestras transacciones, desde el porcentaje de inversi\u00f3n, aversi\u00f3n al riesgo, proyecci\u00f3n de beneficio respecto a la p\u00e9rdida, etc. Lo m\u00e1s importante en cuanto ingreses al mundo de las inversiones es que entiendas que es un proceso que tomar\u00e1 tiempo, piensa siempre en resultados de largo plazo, pues, esto te permitir\u00e1 pensar de forma objetiva. Regla del 90/90/90 \u00b6 S\u00ed, es dif\u00edcil de comprender, tambi\u00e9n puede ser duro leerlo pues la mayor\u00eda de los inversores principiantes buscan resultados exponenciales inmediatos o en el corto plazo, pero justo esta mentalidad es la que lleva a todos a ser parte de las estad\u00edsticas que nos muestran las plataformas de inversi\u00f3n. Ser inversor requiere tiempo de estudio, disciplina, una metodolog\u00eda comprobada en el tiempo, gesti\u00f3n monetaria, pero tambi\u00e9n gesti\u00f3n emocional y mucha paciencia para continuar avanzando. Seguir el camino correcto de aprendizaje nos llevar\u00e1 a salir de las estad\u00edsticas y ser parte de la minor\u00eda que logra generar resultados incre\u00edbles y consistentes en el tiempo. Algunas recomendaciones para que gestiones tu riesgo y puedas preservar tu capital son: No arriesgues m\u00e1s de 1% de tu capital de inversi\u00f3n por transacci\u00f3n. No expongas tu capital de inversi\u00f3n a m\u00e1s de 3% de riesgo diario. Nunca olvides proteger tu operaci\u00f3n con un Stop Loss. Siempre busca una proyecci\u00f3n de beneficio superior a tres veces la p\u00e9rdida de tu operaci\u00f3n. Lleva siempre una bit\u00e1cora de trading en d\u00f3nde registres cada una de tus operaciones. Opera de forma objetiva, si sientes que est\u00e1s siendo impulsado por emociones, al\u00e9jate del mercado. Ten en cuenta que ni el inversor m\u00e1s experimentado es inmune a las p\u00e9rdidas. Siempre estar\u00e1n presentes, pero tu objetivo es que sean siempre de la misma medida y puedas ser consistente al final de un per\u00edodo de tiempo. Siempre sigue tu plan e instrucciones, no dejes nada al azar. No permitas que la avaricia y el exceso de confianza se apoderen de tu operativa. Gesti\u00f3n de Emociones \u00b6 Uno de los factores m\u00e1s relevantes e importantes en el mundo de las inversiones es el control de emociones, los inversionistas principiantes dan por sentado la posibilidad de que los sesgos emocionales controlen nuestros procesos y puedan llevarnos a tomar malas decisiones que incurran en la p\u00e9rdida de nuestro dinero. Las emociones m\u00e1s importantes a las que se enfrenta un inversor son: \u00b6 Miedo \u00b6 El miedo a perder es una de las emociones m\u00e1s comunes en los inversores, y es normal que est\u00e9 presente, pero en este ecosistema debemos controlar el sentimiento pues podr\u00eda detenernos a tomar oportunidades de inversi\u00f3n, tomar beneficios parciales r\u00e1pidamente, etc. Una forma de controlarlo es contar con una estrategia o plan de inversi\u00f3n con reglas trazadas que no nos permita improvisar y dejar que las emociones salgan a flote, sino que accionemos s\u00f3lo si las condiciones de nuestro plan se cumplen en un activo financiero espec\u00edfico permiti\u00e9ndonos operar siempre de forma objetiva. Avaricia \u00b6 El inter\u00e9s por generar beneficios inmediatos es muy com\u00fan en los inversores principiantes, llevando a la mayor\u00eda a tomar decisiones equivocadas y ser parte de las estad\u00edsticas de fracaso. Es por ello que el enfoque principal durante estas clases siempre ha sido indicarte que esta mentalidad es equivocada pues para poder ser consistentes debemos siempre entender que es un proceso de aprendizaje que tomar\u00e1 tiempo, adem\u00e1s de una serie de pasos met\u00f3dicos que debemos seguir para alcanzar el \u00e9xito. Si el mundo de las inversiones fuese tan sencillo, y con resultados tempranos, como espera la mayor\u00eda, las estad\u00edsticas ser\u00edan distintas y s\u00f3lo el 10% perder\u00eda su dinero, pero en la clase anterior ya aprendimos lo contrario. Sigue tu plan de trading y cuida siempre tu capital. Esperanza \u00b6 Esperar cambiar los resultados de un momento a otro, luego de haber seguido un camino err\u00f3neo impulsado por sesgos emocionales es otra de las emociones m\u00e1s comunes en los inversores principiantes. Olvidando por completo las reglas y estrategia para esperar recuperar todo su capital en una sola operaci\u00f3n. No, no es as\u00ed como funciona. No hay forma de predecir al 100% los futuros movimientos de los activos financieros, incluso los inversores m\u00e1s experimentados entienden esto, es por ello que nunca operan bajo emociones y siempre siguen una metodolog\u00eda y plan trazado pues as\u00ed elevan las probabilidades a favor y logran ser consistentes en el tiempo. Desconocimiento \u00b6 Aprender una o dos herramientas no ser\u00e1 suficiente para triunfar en las inversiones de cripto activos, adem\u00e1s de ello unos pocos meses de aprendizaje no ser\u00e1n suficientes. Sin embargo, si ser\u00e1 el inicio de un gran camino y con resultados incre\u00edbles una vez superadas todas las etapas de aprendizaje. Nuestro principal objetivo es aprender de cada uno de nuestros fallos, tomar decisiones de inversi\u00f3n objetivas a partir nuestra estrategia de inversi\u00f3n, gestionar nuestras emociones y siempre proteger nuestro capital. Estos fundamentos nos permitir\u00e1n seguir el camino correcto de aprendizaje y alcanzar la consistencia en el mundo de las inversiones de criptomonedas. Resumen Conclusi\u00f3n \u00b6 El ecosistema de las criptomonedas es apasionante, y definitivamente llegaron para quedarse. Su potencial de crecimiento en el tiempo es prometedor, y para ello debemos estar preparados. \u00a1Felicidades por llegar a la \u00faltima clase! Antes de ir al examen, me encantar\u00eda mostrarte los procesos de aprendizaje de un inversor. El camino en el mundo de las criptomonedas apenas comienza, pero el futuro es prometedor. Recuerda enfocarte siempre en el proceso de aprendizaje y pensar como ballena a\u00fan sin serlo, en el cripto ecosistema todo es posible, con la actitud correcta. Fuente: Curso de Econom\u00eda Digital: Bitcoin y Criptomonedas por Angela Ocando","title":"Conclusion"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/04-conclusion/#conclusion","text":"","title":"Conclusi\u00f3n"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/04-conclusion/#gestion-de-riesgo-regla-909090","text":"El capital de inversi\u00f3n es la herramienta principal de un inversor, y que perdure en el tiempo, as\u00ed como logre ser consistente su crecimiento es el principal objetivo. Sin embargo, muchos inversores principiantes ingresan al ecosistema sin medir el riesgo y se enfrentan a dolorosas p\u00e9rdidas debido a ello. En el mercado de las criptomonedas la volatilidad de los precios es el principal temor de los inversores, pues todos los activos financieros representan un riesgo inicial. Para ello, nuestro pilar fundamental debe ser preservar nuestro capital en el tiempo y esto s\u00f3lo es posible a trav\u00e9s de una gesti\u00f3n de riesgo adecuada.","title":"Gesti\u00f3n de Riesgo + Regla 90/90/90"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/04-conclusion/#gestion-de-riesgo","text":"Lo \u00fanico que podemos controlar en el mundo de las inversiones son las p\u00e9rdidas. Preservar tu capital y alcanzar la rentabilidad es totalmente posible siempre y cuando entiendas que debemos seguir una estrategia met\u00f3dica y completa sin dejar nada al azar. Gestionar el riesgo implica contar con una serie de reglas y herramientas que nos permitan controlar cada una de nuestras transacciones, desde el porcentaje de inversi\u00f3n, aversi\u00f3n al riesgo, proyecci\u00f3n de beneficio respecto a la p\u00e9rdida, etc. Lo m\u00e1s importante en cuanto ingreses al mundo de las inversiones es que entiendas que es un proceso que tomar\u00e1 tiempo, piensa siempre en resultados de largo plazo, pues, esto te permitir\u00e1 pensar de forma objetiva.","title":"Gesti\u00f3n de Riesgo"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/04-conclusion/#regla-del-909090","text":"S\u00ed, es dif\u00edcil de comprender, tambi\u00e9n puede ser duro leerlo pues la mayor\u00eda de los inversores principiantes buscan resultados exponenciales inmediatos o en el corto plazo, pero justo esta mentalidad es la que lleva a todos a ser parte de las estad\u00edsticas que nos muestran las plataformas de inversi\u00f3n. Ser inversor requiere tiempo de estudio, disciplina, una metodolog\u00eda comprobada en el tiempo, gesti\u00f3n monetaria, pero tambi\u00e9n gesti\u00f3n emocional y mucha paciencia para continuar avanzando. Seguir el camino correcto de aprendizaje nos llevar\u00e1 a salir de las estad\u00edsticas y ser parte de la minor\u00eda que logra generar resultados incre\u00edbles y consistentes en el tiempo. Algunas recomendaciones para que gestiones tu riesgo y puedas preservar tu capital son: No arriesgues m\u00e1s de 1% de tu capital de inversi\u00f3n por transacci\u00f3n. No expongas tu capital de inversi\u00f3n a m\u00e1s de 3% de riesgo diario. Nunca olvides proteger tu operaci\u00f3n con un Stop Loss. Siempre busca una proyecci\u00f3n de beneficio superior a tres veces la p\u00e9rdida de tu operaci\u00f3n. Lleva siempre una bit\u00e1cora de trading en d\u00f3nde registres cada una de tus operaciones. Opera de forma objetiva, si sientes que est\u00e1s siendo impulsado por emociones, al\u00e9jate del mercado. Ten en cuenta que ni el inversor m\u00e1s experimentado es inmune a las p\u00e9rdidas. Siempre estar\u00e1n presentes, pero tu objetivo es que sean siempre de la misma medida y puedas ser consistente al final de un per\u00edodo de tiempo. Siempre sigue tu plan e instrucciones, no dejes nada al azar. No permitas que la avaricia y el exceso de confianza se apoderen de tu operativa.","title":"Regla del 90/90/90"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/04-conclusion/#gestion-de-emociones","text":"Uno de los factores m\u00e1s relevantes e importantes en el mundo de las inversiones es el control de emociones, los inversionistas principiantes dan por sentado la posibilidad de que los sesgos emocionales controlen nuestros procesos y puedan llevarnos a tomar malas decisiones que incurran en la p\u00e9rdida de nuestro dinero.","title":"Gesti\u00f3n de Emociones"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/04-conclusion/#las-emociones-mas-importantes-a-las-que-se-enfrenta-un-inversor-son","text":"","title":"Las emociones m\u00e1s importantes a las que se enfrenta un inversor son:"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/04-conclusion/#miedo","text":"El miedo a perder es una de las emociones m\u00e1s comunes en los inversores, y es normal que est\u00e9 presente, pero en este ecosistema debemos controlar el sentimiento pues podr\u00eda detenernos a tomar oportunidades de inversi\u00f3n, tomar beneficios parciales r\u00e1pidamente, etc. Una forma de controlarlo es contar con una estrategia o plan de inversi\u00f3n con reglas trazadas que no nos permita improvisar y dejar que las emociones salgan a flote, sino que accionemos s\u00f3lo si las condiciones de nuestro plan se cumplen en un activo financiero espec\u00edfico permiti\u00e9ndonos operar siempre de forma objetiva.","title":"Miedo"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/04-conclusion/#avaricia","text":"El inter\u00e9s por generar beneficios inmediatos es muy com\u00fan en los inversores principiantes, llevando a la mayor\u00eda a tomar decisiones equivocadas y ser parte de las estad\u00edsticas de fracaso. Es por ello que el enfoque principal durante estas clases siempre ha sido indicarte que esta mentalidad es equivocada pues para poder ser consistentes debemos siempre entender que es un proceso de aprendizaje que tomar\u00e1 tiempo, adem\u00e1s de una serie de pasos met\u00f3dicos que debemos seguir para alcanzar el \u00e9xito. Si el mundo de las inversiones fuese tan sencillo, y con resultados tempranos, como espera la mayor\u00eda, las estad\u00edsticas ser\u00edan distintas y s\u00f3lo el 10% perder\u00eda su dinero, pero en la clase anterior ya aprendimos lo contrario. Sigue tu plan de trading y cuida siempre tu capital.","title":"Avaricia"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/04-conclusion/#esperanza","text":"Esperar cambiar los resultados de un momento a otro, luego de haber seguido un camino err\u00f3neo impulsado por sesgos emocionales es otra de las emociones m\u00e1s comunes en los inversores principiantes. Olvidando por completo las reglas y estrategia para esperar recuperar todo su capital en una sola operaci\u00f3n. No, no es as\u00ed como funciona. No hay forma de predecir al 100% los futuros movimientos de los activos financieros, incluso los inversores m\u00e1s experimentados entienden esto, es por ello que nunca operan bajo emociones y siempre siguen una metodolog\u00eda y plan trazado pues as\u00ed elevan las probabilidades a favor y logran ser consistentes en el tiempo.","title":"Esperanza"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/04-conclusion/#desconocimiento","text":"Aprender una o dos herramientas no ser\u00e1 suficiente para triunfar en las inversiones de cripto activos, adem\u00e1s de ello unos pocos meses de aprendizaje no ser\u00e1n suficientes. Sin embargo, si ser\u00e1 el inicio de un gran camino y con resultados incre\u00edbles una vez superadas todas las etapas de aprendizaje. Nuestro principal objetivo es aprender de cada uno de nuestros fallos, tomar decisiones de inversi\u00f3n objetivas a partir nuestra estrategia de inversi\u00f3n, gestionar nuestras emociones y siempre proteger nuestro capital. Estos fundamentos nos permitir\u00e1n seguir el camino correcto de aprendizaje y alcanzar la consistencia en el mundo de las inversiones de criptomonedas. Resumen","title":"Desconocimiento"},{"location":"criptomonedas/economia_digital_bitcoin_y_criptomonedas/04-conclusion/#conclusion_1","text":"El ecosistema de las criptomonedas es apasionante, y definitivamente llegaron para quedarse. Su potencial de crecimiento en el tiempo es prometedor, y para ello debemos estar preparados. \u00a1Felicidades por llegar a la \u00faltima clase! Antes de ir al examen, me encantar\u00eda mostrarte los procesos de aprendizaje de un inversor. El camino en el mundo de las criptomonedas apenas comienza, pero el futuro es prometedor. Recuerda enfocarte siempre en el proceso de aprendizaje y pensar como ballena a\u00fan sin serlo, en el cripto ecosistema todo es posible, con la actitud correcta. Fuente: Curso de Econom\u00eda Digital: Bitcoin y Criptomonedas por Angela Ocando","title":"Conclusi\u00f3n"},{"location":"desarrollo/css/01-introduccion_a_CSS/","text":"Introducci\u00f3n a CSS \u00b6 \u00bfQu\u00e9 es CSS? \u00b6 Si te gusta el mundo del dise\u00f1o web o tienes curiosidad por empezar en este \u00e1mbito, probablemente ya habr\u00e1s escuchado el t\u00e9rmino CSS . Se trata de una tecnolog\u00eda utilizada para dotar de cualidades visuales y est\u00e9ticas a una p\u00e1gina web. Si nunca has tocado esta materia, comprobar\u00e1s que se trata de una forma anal\u00edtica, l\u00f3gica y casi matem\u00e1tica de crear p\u00e1ginas web, pero gracias a ella podemos simplificar la creaci\u00f3n de p\u00e1ginas y conseguir exactamente lo que buscamos. La curva de aprendizaje de CSS suele ser sencilla ( puede ser algo compleja si nunca has programado o eres totalmente ajeno a estas tem\u00e1ticas ), pero a medida que cometes errores y vas practicando, tu capacidad para escribir c\u00f3digo CSS mejora de forma exponencial, permiti\u00e9ndonos avanzar a un ritmo cada vez m\u00e1s veloz. \u00bfQu\u00e9 es realmente CSS? \u00b6 Antes de comenzar, debes tener claro un concepto clave: una p\u00e1gina web es realmente un documento de texto . En dicho documento se escribe c\u00f3digo HTML , con el que se que crea el contenido de una web. Por otro lado, existe el c\u00f3digo CSS , que unido al c\u00f3digo HTML permite darle forma, color, posici\u00f3n ( y otras caracter\u00edsticas visuales ) a una p\u00e1gina. En resumen, se trata de un idioma como podr\u00eda ser el ingl\u00e9s o el alem\u00e1n, que los navegadores web como Chrome o Firefox conocen y pueden entender. Nuestro objetivo como dise\u00f1adores y programadores web es precisamente ese: aprender el idioma. Las siglas CSS ( Cascading Style Sheets ) significan \u00abHojas de estilo en cascada\u00bb y parten de un concepto simple pero muy potente: aplicar estilos (colores, formas, m\u00e1rgenes, etc...) a uno o varios documentos ( generalmente documentos HTML, p\u00e1ginas webs ) de forma masiva. Se le denomina estilos en cascada porque se aplican de arriba a abajo ( siguiendo un patr\u00f3n denominado herencia que trataremos m\u00e1s adelante ) y en el caso de existir ambig\u00fcedad, se siguen una serie de normas para resolverla. La idea de CSS es la de utilizar el concepto de separaci\u00f3n de presentaci\u00f3n y contenido , intentando que los documentos HTML incluyan s\u00f3lo informaci\u00f3n y datos, relativos al significado de la informaci\u00f3n a transmitir ( el contenido ), y todos los aspectos relacionados con el estilo (dise\u00f1o, colores, formas, etc...) se encuentren en un documento CSS independiente ( la presentaci\u00f3n ). De esta forma, se puede unificar todo lo relativo al dise\u00f1o visual en un solo documento CSS , y con ello, varias ventajas: Si necesitamos hacer modificaciones visuales lo hacemos en un s\u00f3lo lugar y no tenemos que editar todos los documentos HTML en cuesti\u00f3n por separado. Se reduce la duplicaci\u00f3n de estilos en diferentes lugares, por lo que es m\u00e1s f\u00e1cil de organizar y hacer cambios. Adem\u00e1s, al final la informaci\u00f3n a transmitir es considerablemente menor (las p\u00e1ginas se descargan m\u00e1s r\u00e1pido). Es m\u00e1s f\u00e1cil crear versiones diferentes de presentaci\u00f3n para otros tipos de dispositivos: tablets, smartphones o dispositivos m\u00f3viles, etc... \u00bfC\u00f3mo usar CSS? \u00b6 Antes de comenzar a trabajar con CSS hay que conocer las diferentes formas para incluir estilos en nuestros documentos HTML , ya que hay varias, cada una con sus particularidades y diferencias. En principio, tenemos tres formas diferentes de hacerlo, siendo la primera la m\u00e1s com\u00fan y la \u00faltima la menos habitual: Nombre M\u00e9todo Descripci\u00f3n CSS Externo Etiqueta <link> El c\u00f3digo se escribe en un archivo .css a parte. M\u00e9todo m\u00e1s habitual . CSS Interno Etiqueta <style> El c\u00f3digo se escribe en una etiqueta <style> en el documento HTML. Estilos en l\u00ednea Atributo style=\"...\" El c\u00f3digo se escribe en un atributo HTML de una etiqueta. Veamos cada una de ellas detalladamente: Enlace a CSS externo (link) \u00b6 En la cabecera de nuestro documento HTML, m\u00e1s concretamente en el bloque <head></head> , podemos incluir una etiqueta <link> con la que establecemos una relaci\u00f3n entre el documento actual y el archivo CSS que indicamos en el atributo href : <link rel=\"stylesheet\" href=\"index.css\" /> De esta forma, los navegadores sabr\u00e1n que deben aplicar los estilos que se encuentren en el archivo index.css . Se aconseja escribir esta l\u00ednea lo antes posible ( sobre todo, antes de los scripts ), obligando as\u00ed al navegador a aplicar los estilos cuanto antes y eliminar la falsa percepci\u00f3n visual de que la p\u00e1gina est\u00e1 en blanco y no ha sido cargada por completo. Esta es la manera recomendada de utilizar estilos CSS en nuestros documentos. Incluir CSS en el HTML (style) \u00b6 Otra de las formas habituales que existen para incluir estilos CSS en nuestra p\u00e1gina es la de a\u00f1adirlos directamente en el documento HTML, a trav\u00e9s de una etiqueta <style> que contendr\u00e1 el c\u00f3digo CSS: <!DOCTYPE html> <html> <head> <title>T\u00edtulo de la p\u00e1gina</title> <style> div { background: hotpink; color: white; } </style> </head> ... </html> Este sistema puede servirnos en ciertos casos particulares, pero hay que darle prioridad al m\u00e9todo anterior ( CSS externo ), ya que incluyendo el c\u00f3digo CSS en el interior del archivo HTML arruinamos la posibilidad de tener el c\u00f3digo CSS en un documento a parte, pudiendo reutilizarlo y enlazarlo desde otros documentos HTML mediante la etiqueta <link> . Aunque no es obligatorio, es muy com\u00fan que las etiquetas <style> se encuentren en la cabecera <head> del documento HTML, ya que antiguamente era la \u00fanica forma de hacerlo. Estilos en l\u00ednea (atributo style) \u00b6 Por \u00faltimo, la tercera forma de aplicar estilos en un documento HTML es hacerlo directamente, a trav\u00e9s del atributo style de la propia etiqueta donde queramos aplicar el estilo: <p>\u00a1Hola <span style=\"color:red\">amigo lector</span>!</p> De la misma forma que en el m\u00e9todo anterior, se recomienda no utilizarse salvo casos muy espec\u00edficos, ya que los estilos se asocian a la etiqueta en cuesti\u00f3n y no pueden reutilizarse. Sin embargo, es una opci\u00f3n que puede venir bien en algunos casos. Consejo : Si quieres comenzar a hacer pruebas r\u00e1pidas con HTML, CSS y Javascript puedes utilizar CodePen , una plataforma web que te permite crear contenido HTML, CSS y Javascript, previsualizando al vuelo el resultado del documento final, sin necesidad editores. Estructura de CSS \u00b6 Al igual que los documentos HTML, los documentos CSS son archivos de texto donde se escribe una serie de \u00f3rdenes y el cliente (navegador) las interpreta y aplica a los documentos HTML asociados. Sintaxis b\u00e1sica \u00b6 La estructura CSS se basa en reglas que tienen el siguiente formato: Selector : El selector es el elemento HTML que vamos a seleccionar del documento para aplicarle un estilo concreto. Por ejemplo, el elemento p . Realmente, esto es mucho m\u00e1s complejo, pero ya dedicaremos una serie de cap\u00edtulos exclusivamente a este tema. Propiedad : La propiedad es una de las diferentes caracter\u00edsticas que brinda el lenguaje CSS e iremos aprendiendo. Valor : Cada propiedad CSS tiene una serie de valores concretos, con los que tendr\u00e1 uno u otro comportamiento. Con todo esto le iremos indicamos al navegador que, para cada etiqueta (selector especificado) debe aplicar las reglas (propiedad y valor) indicadas. Vamos a verlo con un ejemplo para afianzar conceptos. Supongamos que este es el c\u00f3digo HTML: <!DOCTYPE html> <html> <head> <title>T\u00edtulo de p\u00e1gina</title> <link rel=\"stylesheet\" href=\"index.css\" /> </head> <body> <div id=\"first\"> <p>P\u00e1rrafo</p> </div> <div id=\"second\"> <span>Capa</span> </div> </body> </html> Y adem\u00e1s, por otro lado, este ser\u00eda el c\u00f3digo CSS del archivo index.css : p { color: red; /* Color de texto rojo */ } De esta forma, a todas las etiquetas <p> se le aplicar\u00e1 el estilo especificado: el color rojo . Truco : Se pueden incluir comentarios entre los caracteres /* y */ , los cuales ser\u00e1n ignorados por el navegador y pueden ser utilizados por legibilidad y para documentar nuestros documentos CSS. Sin embargo, esto es s\u00f3lo un ejemplo muy sencillo. Se pueden aplicar muchas m\u00e1s reglas ( no s\u00f3lo el color del ejemplo ), consiguiendo as\u00ed un conjunto de estilos para la etiqueta indicada en el selector. Cada una de estas reglas se terminar\u00e1 con el car\u00e1cter punto y coma ( ; ). En el siguiente esquema se puede ver las diferentes partes del c\u00f3digo CSS con sus respectivos nombres: Truco : El \u00faltimo ; de un selector ( en naranja ) no es obligatorio y se puede omitir. Adem\u00e1s, tambi\u00e9n se pueden especificar agrupaciones de etiquetas, clases de etiquetas o cosas m\u00e1s complejas, pero eso lo veremos m\u00e1s adelante. De momento, vamos a centrarnos en las diferentes reglas que podemos utilizar. Un buen consejo, para hacer m\u00e1s legible nuestro c\u00f3digo CSS, es utilizar la siguiente estructura visual ( indentar el c\u00f3digo mediante espacios, con una propiedad por l\u00ednea ). Es una buena pr\u00e1ctica, indispensable a la larga, que nos facilitar\u00e1 la lectura del c\u00f3digo: Esto mejora sustancialmente la legibilidad del c\u00f3digo y se considera un convenio a utilizar para evitar la complejidad de entender el c\u00f3digo que no se encuentre correctamente indentado. M\u00e1s adelante, en un cap\u00edtulo dedicado expresamente a ello, veremos que la estructura CSS puede ser m\u00e1s compleja, pero de momento trabajaremos con el esquema simplificado. Minificar CSS \u00b6 Normalmente, cuando el desarrollador escribe c\u00f3digo ( y no s\u00f3lo CSS, sino tambi\u00e9n HTML o Javascript ), lucha en todo momento con varios factores clave, que podr\u00edamos delimitar en los siguientes: Funcionamiento : El c\u00f3digo debe estar bien escrito para funcionar correctamente. Adem\u00e1s, se debe garantizar el correcto funcionamiento en diferentes navegadores, diferentes sistemas operativos ( incluyendo dispositivos de escritorio, m\u00f3viles y/o tablets ), los cuales suelen/pueden tener algunas diferencias entre ellos. Legibilidad : Correcta indentaci\u00f3n o colocaci\u00f3n de las diferentes partes del c\u00f3digo, facilitando la legibilidad por humanos, favoreciendo la velocidad de modificaci\u00f3n e introducci\u00f3n de cambios ( mantenibilidad ). Tama\u00f1o : Cuanto m\u00e1s texto tenga un archivo CSS , HTML o Javascript ( espacios, l\u00edneas en blanco, comentarios, c\u00f3digo no usado... ), m\u00e1s grande ser\u00e1 el tama\u00f1o final del archivo, por lo que m\u00e1s tiempo tardar\u00e1 en descargarse y procesarse por el navegador. Rendimiento : Cuanto m\u00e1s costosas sean las operaciones que vamos a obligar a hacer al navegador, m\u00e1s tardar\u00e1 en procesarse y por lo tanto, m\u00e1s tiempo tardar\u00e1 en pintar y renderizar ( dibujar ) la p\u00e1gina. \u00bfQu\u00e9 es la minificaci\u00f3n? \u00b6 La minificaci\u00f3n ( en ingl\u00e9s, Uglify o Minification ) es la acci\u00f3n de eliminar car\u00e1cteres o comentarios de nuestro c\u00f3digo, con el objetivo de reducir su tama\u00f1o total, y por lo tanto, descargarlos m\u00e1s r\u00e1pido. En archivos CSS muy grandes esto suele influir de forma considerable, por lo que es una buena pr\u00e1ctica utilizar herramientas de minificaci\u00f3n y reducir el tama\u00f1o del archivo CSS condensando toda su informaci\u00f3n, eliminando espacios, retornos de carro, etc... Haciendo esto, conseguiremos que el archivo ocupe menos, pero a cambio, perderemos legibilidad. Por esta raz\u00f3n, es habitual conservar los archivos CSS originales ( sin minificar ) para trabajar con ellos, y generar los archivos reducidos con herramientas automaticas. Hay que tener en cuenta que el proceso de minification es un paso totalmente opcional, por lo que no es obligado realizarlo, pero se considera una buena pr\u00e1ctica de optimizaci\u00f3n. Veamos un ejemplo de un mismo archivo CSS con su contenido sin minificar y minificado: Ejemplo de c\u00f3digo CSS legible (index.css) : 96 bytes #main { background-color: black; color: white; padding: 16px; border: 2px solid blue; } Ejemplo de c\u00f3digo CSS minificado (index.min.css) : 75 bytes #main{background-color:#000;color:#fff;padding:16px;border:2px solid #00f;} Como se puede ver, el tama\u00f1o y la legibilidad del archivo CSS se reduce considerablemente. Ser\u00eda perjudicial trabajar con c\u00f3digo del segundo ejemplo, por lo que se suele mantener un archivo legible ( el primero ) para realizar modificaciones y trabajar con \u00e9l, y luego, de forma opcional, un archivo con la informaci\u00f3n minificada ( el segundo ) que ser\u00e1 el que se utilice finalmente en nuestro proyecto cuando est\u00e9 terminado. En resumen, el primer archivo es el c\u00f3digo para humanos , el que debemos mantener y trabajar con \u00e9l. El segundo archivo es el c\u00f3digo para el navegador , que no se debe modificar directamente por humanos y que se debe generar a partir del primero. Herramientas de minificaci\u00f3n \u00b6 Existen m\u00faltiples herramientas para minificar c\u00f3digo CSS. Algunas de ellas, incluso se encargan de analizar el c\u00f3digo y, no s\u00f3lo minificarlo, sino adem\u00e1s suprimir propiedades repetidas, eliminar propiedades o valores in\u00fatiles, etc. Veamos algunas de las m\u00e1s populares: Herramienta Modalidad Caracter\u00edsticas CSS Nano PostCSS Para automatizar desde terminal o desde PostCSS. Clean CSS NodeJS/NPM Para automatizar desde terminal. CSS Compressor Online Opciones variadas: grado de compresi\u00f3n, optimizaciones... CSSO NodeJS/NPM Optimizador de CSS (clean, compress and restructuring) Sqwish NodeJS/NPM Compresor de CSS basado en Node YUI Compressor Java Compresor CSS hist\u00f3rico de Yahoo Navegadores web \u00b6 Los navegadores web ( tambi\u00e9n llamados clientes ) son esos programas que utilizamos para acceder a Internet y visualizar p\u00e1ginas en nuestros dispositivos. Todos los usuarios conocen al menos uno o varios navegadores web, aunque sea los m\u00e1s populares como Google Chrome o Mozilla Firefox . Sin embargo, existen muchos m\u00e1s. Para ser un buen dise\u00f1ador o desarrollador web es recomendable conocer bien el ecosistema de navegadores existente y sus caracter\u00edsticas, que no son pocas. Ecosistema de navegadores \u00b6 En un mundo ideal, todas las p\u00e1ginas webs se ver\u00edan correctamente y de la misma forma en todos los navegadores web disponibles, sin embargo, y una de las cosas que m\u00e1s llama la atenci\u00f3n del dise\u00f1o web cuando estamos empezando, es que no s\u00f3lo debemos construir una web correctamente, sino que adem\u00e1s debemos ser conscientes de los navegadores m\u00e1s utilizados , as\u00ed como de sus carencias y virtudes. En un principio, el consorcio W3C se encarga de definir unas especificaciones y \u00abnormas\u00bb de recomendaci\u00f3n, para que posteriormente, las compa\u00f1\u00edas desarrolladoras de navegadores web las sigan y puedan crear un navegador correctamente. Pero como no estamos en un mundo perfecto ( y el tiempo es un recurso limitado ), dichas compa\u00f1\u00edas establecen prioridades, desarrollan caracter\u00edsticas antes que otras, e incluso algunas caracter\u00edsticas deciden no implementarlas por razones espec\u00edficas o internas. Las compa\u00f1\u00edas m\u00e1s comprometidas con sus navegadores web, tienen a disposici\u00f3n de los dise\u00f1adores, programadores y entusiastas, una especie de diario cronol\u00f3gico, donde mencionan su hoja de ruta con las caracter\u00edsticas que van implementando, descartando o sus planes de futuro, as\u00ed como informaci\u00f3n adicional sobre el tema en cuesti\u00f3n: Responsables Producto P\u00e1gina de estado de desarrollo del navegador Microsoft Navegador Microsoft Edge Edge Platform Status (Proyecto open source) Motor Webkit Webkit Feature Status Fundaci\u00f3n Mozilla Navegador Mozilla Firefox Firefox Platform Status Google Navegador Google Chrome Chrome Platform Status Adem\u00e1s, existe una secci\u00f3n donde podemos comparar caracter\u00edsticas respecto a navegadores en CanIUse . Historia de los navegadores \u00b6 Si echamos un vistazo atr\u00e1s, la historia de los navegadores ha variado much\u00edsimo. Quiz\u00e1s, el cambio m\u00e1s importante en los \u00faltimos 10 a\u00f1os ha sido el reemplazo de Internet Explorer , como navegador m\u00e1s popular, a Google Chrome . Antiguamente, Internet Explorer fue un navegador que se hab\u00eda estancado y no implementaba nuevas caracter\u00edsticas y funcionalidades, al contrario que sus competidores. Pero adem\u00e1s, para empeorar la situaci\u00f3n, era el navegador m\u00e1s utilizado por los usuarios, debido al liderazgo de Windows como sistema operativo. Esto imped\u00eda que las nuevas tecnolog\u00edas webs se adoptaran y frenaba su avance. Por suerte, esto ha ido cambiando a lo largo de los a\u00f1os y la situaci\u00f3n hoy en d\u00eda es bastante diferente. A continuaci\u00f3n se puede ver la evoluci\u00f3n de los navegadores m\u00e1s populares durante esta \u00faltima d\u00e9cada ( desde 2009 hasta 2016 ). Vemos que los navegadores m\u00e1s perjudicados son Internet Explorer y Mozilla Firefox, mientras que Chrome ha experimentado un incremento muy grande. Safari tambi\u00e9n ha experimentado un ligero incremento, probablemente debido al \u00e9xito de dispositivos como iPhone o iPad. Como toda estad\u00edstica, debe ser tomada con precauci\u00f3n porque existen sesgos en sus datos. Esta estad\u00edstica ha sido extra\u00edda de Global StatCounter . Tambi\u00e9n puedes echar un vistazo a algunas estad\u00edsticas m\u00e1s en w3counter , aunque quiz\u00e1s la m\u00e1s interesante y adecuada sea CanIUse: Usage table , donde podemos encontrar los navegadores m\u00e1s utilizados, separado por versiones y mostrado con porcentajes. Navegadores actuales \u00b6 A continuaci\u00f3n, tenemos una lista de la rama de los 5 navegadores m\u00e1s populares , que son aquellos que tienen una cuota de mercado considerable. Algunos de estos navegadores tienen varias versiones diferentes, como por ejemplo, versiones beta ( con funcionalidades a\u00fan no existentes en la versi\u00f3n oficial ) o versiones de desarrollador ( orientadas para el uso de programadores o dise\u00f1adores ). Responsables Navegador web Prop\u00f3sito Motor Notas URL Google Chrome Uso habitual Blink URL Google Chrome beta Early-adopters Blink URL Google Canary Chrome Desarrollador Blink URL Google Chromium Open Source Blink URL Mozilla Firefox Uso habitual Quantum URL Mozilla Firefox beta Early-adopters Quantum URL Mozilla Firefox Dev Edition Desarrollador Quantum URL Mozilla Firefox Nightly Desarrollador Quantum URL Microsoft Edge Uso habitual Blink URL Microsoft Internet Explorer Uso habitual Trident S\u00f3lo Windows URL Opera Opera Uso habitual Blink URL Opera Opera beta Early-adopters Blink URL Opera Opera developer Desarrollador Blink URL Opera Opera Neon Early-adopters Blink URL Apple Safari Uso habitual Webkit S\u00f3lo Apple URL Apple Safari Tech Preview Desarrollador Webkit S\u00f3lo Apple URL Versiones de los navegadores \u00b6 Es tambi\u00e9n muy importante conocer la versi\u00f3n del navegador que utiliza la mayor\u00eda de nuestro p\u00fablico ( datos que se pueden obtener con herramientas como Google Analytics, por ejemplo ), ya que de una versi\u00f3n a otra se a\u00f1aden nuevas caracter\u00edsticas y funcionalidades, de las cuales los usuarios de las versiones anteriores no podr\u00e1n disfrutar. En la herramienta CanIUse se muestra, a lo largo de las columnas de cada navegador, si las funcionalidades est\u00e1n implementadas en la versi\u00f3n concreta del mismo, o cuando empezar\u00e1n a funcionar: Es por tanto, l\u00f3gico pensar, que si tenemos un alto porcentaje de usuarios que utilizan una versi\u00f3n de un navegador que no soporta la funcionalidad que queremos utilizar, haya que buscar alternativas o abstenerse a utilizarla hasta que ese porcentaje se reduzca. Por suerte, desde hace ya bastante tiempo los navegadores han comenzado a implementar una estrategia de actualizaci\u00f3n silenciosa ( en ingl\u00e9s los denominan evergreen browser ), con la cu\u00e1l consigues que el usuario tenga siempre el navegador actualizado a la \u00faltima versi\u00f3n ( si tiene acceso a Internet, claro ), ya que el grueso de los usuarios no suele actualizar manualmente la versi\u00f3n de su navegador, y esto hac\u00eda que existiera una gran cuota de usuarios con navegadores sin actualizar. Otros navegadores \u00b6 A continuaci\u00f3n, tenemos una lista de otros navegadores menores, que no superan una cuota de mercado a nivel global de un 1%, pero que pueden ser interesantes en el futuro, para casos particulares o podr\u00edan experimentar un aumento de su cuota en los pr\u00f3ximos a\u00f1os: Responsables Navegador web Prop\u00f3sito Motor Basado en URL Tor Project Tor Navegaci\u00f3n an\u00f3nima Gecko Firefox URL Vivaldi Tech Vivaldi Early-adopters Blink URL Brave Soft Brave Privacidad Blink URL Yandex Yandex Browser Uso habitual Blink URL David Rosca QupZilla Uso habitual Qt WebEngine URL Maxthon Int Maxthon Uso habitual Trident/Webkit URL Fenrir Inc Sleipnir Uso habitual Blink URL SM Project SeaMonkey Uso habitual Gecko Mozilla AS URL Chris Dywan Midori Uso habitual Webkit URL Comodo Grou Comodo Dragon Uso habitual Blink Chromium URL Avant Force Avant Uso habitual Trident/Gecko URL M. Patocka Links Navegador de texto - URL Thomas Dickey Lynx Navegador de texto - URL Akinori Ito w3m Navegador de texto - URL P. Baudis Elinks Navegador de texto - URL Existen muchos m\u00e1s navegadores, esto s\u00f3lo es una lista de los que he considerado m\u00e1s relevantes. Niveles de CSS y prefijos \u00b6 El lenguaje CSS es una especificaci\u00f3n desarrollada y mantenida por el World Wide Web Consortium (W3C), una comunidad internacional que se encarga de desarrollar est\u00e1ndares para asegurar el crecimiento y la neutralidad de la web, independiz\u00e1ndolo de tecnolog\u00edas propietarias e intentando aunar esfuerzos para satisfacer la demanda de caracter\u00edsticas \u00fatiles e interesantes. En el consorcio participan y colaboran pr\u00e1cticamente casi todas las empresas relacionadas con Internet, como por ejemplo Apple, Adobe, Akamai, Cisco, Google, Facebook, HP, Intel, LG, Microsoft, Nokia, Twitter, Yahoo, entre muchos otros . Desde hace algunos a\u00f1os, la comunidad WHATWG participa tambi\u00e9n en el desarrollo y evoluci\u00f3n de especificaciones como las de HTML , DOM u otras tecnolog\u00edas relacionadas. Niveles CSS] \u00b6 A lo largo de su historia, CSS ha ido evolucionado en diferentes versiones denominados niveles : Nivel A\u00f1o Descripci\u00f3n CSS1 1996 Propiedades de fuente, colores, alineaci\u00f3n, etc... CSS2 1998 Propiedades de posicionamiento, tipos de medios, etc... CSS2.1 2005 Corrige errores de CSS2 y modifica ciertas propiedades CSS3 2011 Inicio de caracter\u00edsticas de CSS como m\u00f3dulos separados Desde 2011, la especificaci\u00f3n CSS comienza a evolucionar separando sus nuevas funcionalidades en peque\u00f1os m\u00f3dulos , favoreciendo su implementaci\u00f3n en navegadores. Si se desea informaci\u00f3n m\u00e1s t\u00e9cnica, se puede consultar la evoluci\u00f3n de los diferentes m\u00f3dulos relacionados con CSS en la p\u00e1gina web del consorcio W3C. Prefijos \u00b6 Algunas de las propiedades que veremos no est\u00e1n definidas por completo, s\u00f3lo son borradores o pueden variar en la especificaci\u00f3n definitiva, por lo que los navegadores las implementan utilizando una serie de vendor prefixes ( prefijos por navegador ), que facilitan la segmentaci\u00f3n de funcionalidades. De esta forma, podemos utilizar varios prefijos para asegurarnos que aunque dichas funcionalidades tengan un comportamiento o sintaxis diferente en cada navegador, podemos hacer referencia a cada una de ellas por separado: div { transform: ... /* Navegadores que implementan especificaci\u00f3n oficial */ -webkit-transform: ... /* Versiones antiguas de Chrome (Motor WebKit) */ -moz-transform: ... /* Versiones antiguas de Firefox (Motor Gecko) */ -ms-transform: ... /* Versiones antiguas de IE (Motor Trident) */ -o-transform: ... /* Versiones antiguas de Opera (Motor Presto) */ } En el ejemplo anterior, la propiedad transform se refiere a los navegadores que tengan implementada la especificaci\u00f3n definitiva por completo e ignorar\u00e1 el resto de propiedades. Por otro lado, otro navegador ( o el mismo en una versi\u00f3n m\u00e1s antigua ) puede tener implementada una versi\u00f3n anterior a la definitiva, por lo que har\u00e1 caso a las propiedades con un prefijo concreto. Debido al ritmo y la r\u00e1pida velocidad de Internet en estas cuestiones, es muy complicado obtener una lista de funcionalidades implementadas en cada navegador, algo que puede variar incluso en cuesti\u00f3n de semanas. Aconsejo utilizar la p\u00e1gina Can I Use , una web colaborativa para saber el estado actual, previo e incluso futuro de las propiedades CSS o elementos HTML en cada navegador. En esta p\u00e1gina se puede buscar, a trav\u00e9s de un buscador y de forma r\u00e1pida y c\u00f3moda, el estado de ciertas caracter\u00edsticas por parte de las diferentes versiones de los navegadores. Actualmente, los vendor prefixes est\u00e1n en proceso de desaparecer. Las principales compa\u00f1\u00edas de navegadores han optado por favorecer el uso de flags en el navegador del usuario para activar o desactivar opciones experimentales o crear especificaciones m\u00e1s peque\u00f1as y breves que puedan ser estables mucho m\u00e1s r\u00e1pido. Por esta raz\u00f3n, se aconseja utilizar vendor prefixes solo cuando necesitas soporte espec\u00edfico en navegadores muy antiguos. En el caso de querer utilizar vendor prefixes *, recomiendo encarecidamente utilizar sistemas como autoprefixer ( el m\u00e1s popular, que forma parte de PostCSS ) o prefix-free que a\u00f1aden de forma autom\u00e1tica y transparente los prefijos, bas\u00e1ndose en informaci\u00f3n de herramientas como Can I Use . Busca extensiones en el editor que utilices o la opci\u00f3n para activarlas, ya que te ahorrar\u00e1 mucho tiempo y te permitir\u00e1 tener un c\u00f3digo m\u00e1s legible y modular al no tener que repetir c\u00f3digo. Herencia en CSS \u00b6 Otro detalle que hay que dejar claro antes de empezar es el concepto de herencia ( y el concepto de cascada , que veremos m\u00e1s adelante ), pues son los que m\u00e1s problemas suelen dar y los que, sin lugar a dudas, mayor frustraci\u00f3n acarrean cuando no comprendemos lo que est\u00e1 pasando. Concepto de herencia \u00b6 En primer lugar, debemos saber que algunas propiedades CSS se heredan desde los elementos padres a los elementos hijos, modificando el valor que tienen por defecto: body { color: green; /* Color de texto verde */ } En el ejemplo anterior, aplicamos a la etiqueta HTML <body> el color de texto verde . En principio, esta propiedad aplicar\u00e1 dicho color a los textos que est\u00e9n dentro de dicha etiqueta <body> . Sin embargo, si tenemos m\u00e1s etiquetas dentro, como por ejemplo una etiqueta <div> con texto en su interior, si no tenemos aplicada una propiedad color a dicho elemento, veremos que tambi\u00e9n aparece en color verde. Esto ocurre porque la propiedad color es una de las propiedades CSS que, en el caso de no tener valor espec\u00edfico, hereda el valor de su elemento padre . Ojo, porque esto no ocurre si lo hacemos con otras propiedades CSS, como por ejemplo, con los bordes de un elemento HTML: body { border-width: 2px; border-style: solid; border-color: red; } Si esta propiedad aplicara herencia, todos los elementos HTML situados en el interior de <body> tendr\u00edan un borde rojo, comportamiento que no suele ser el deseado. Por esa raz\u00f3n, la herencia no ocurre con todas las propiedades CSS, sino s\u00f3lo con algunas propiedades como color o font , donde si suele ser deseable. Valores especiales \u00b6 Adem\u00e1s de los valores habituales de cada propiedad CSS, tambi\u00e9n podemos aplicar ciertos valores especiales que son comunes a todas las propiedades existentes. Con estos valores modificamos el comportamiento de la herencia en dicha propiedad: Valor Significado inherit Hereda el valor de la propiedad del elemento padre. initial Establece el valor que ten\u00eda la propiedad inicialmente. unset Combinaci\u00f3n de las dos anteriores: Hereda el valor de la propiedad del elemento padre, y en caso de no existir, su valor inicial. Veamos, por ejemplo, el siguiente ejemplo para forzar la herencia en una propiedad que no la aplica por defecto: body { border-width: 2px; border-style: solid; border-color: red; } div { border: inherit; } Si tenemos un elemento <div> dentro del <body> , el primero heredar\u00e1 los estilos del elemento <body> , ya que le hemos especificado el valor inherit en la propiedad border . Cascada en CSS \u00b6 Adem\u00e1s de la herencia, otro de los conceptos m\u00e1s importantes de CSS es el concepto de cascada . Este concepto es un poco m\u00e1s avanzado, por lo que se debe conocer bien el tema de selectores CSS y dominar algo de CSS para comprenderlo en su totalidad, por lo que si no es el caso se puede posponer para una lectura posterior. Antes de continuar, supongamos que nos encontramos ante el siguiente escenario: .sandbox pre { margin: 0; overflow: auto; max-height: var(--height, auto); } <div>Texto del elemento</div> <style> div { color: red; padding: 8px } div { color: blue; background-color: grey } </style> En este caso, \u00bfcu\u00e1l de las dos reglas prevalece, si tenemos en cuenta que se refieren al mismo elemento y est\u00e1n al mismo nivel? La respuesta es muy f\u00e1cil: Prevalece siempre la \u00faltima regla definida, la cu\u00e1l mezcla y sobreescribe las propiedades anteriores. En el caso anterior, el resultado final ( computado ) ser\u00eda el siguiente: div { color: blue; /* Se sobreescribe la \u00faltima */ padding: 8px; background-color: grey; } Sin embargo, puede ocurrir que en determinados casos no est\u00e9 tan claro cu\u00e1l es el estilo que deber\u00eda sobreescribir a los anteriores. Ah\u00ed es cuando entra en juego el concepto de cascada en CSS , que es el que se encarga de eliminar la ambig\u00fcedad y determinar el que tiene prioridad. Supongamos el siguiente caso: .sandbox pre { margin: 0; overflow: auto; max-height: var(--height, auto); } <div id=\"nombre\" class=\"clase\">Texto del elemento</div> <style> div { color: red; } #nombre { color: blue; } .clase { color: green; } </style> Tenemos un elemento HTML <div id=\"nombre\" class=\"clase\"> que encaja con los tres bloques del ejemplo anterior. \u00bfC\u00f3mo sabe CSS que estilo aplicar? \u00bfCu\u00e1l tiene prioridad sobre los dem\u00e1s? Aqu\u00ed es donde entra en acci\u00f3n el concepto de cascada en CSS . Cascada CSS \u00b6 Para saber que bloque de estilos tiene prioridad, CSS analiza ( por orden ) tres conceptos clave del c\u00f3digo CSS: su importancia , la especificidad y su orden . Veamos en que se basa cada uno de ellos. Importancia \u00b6 La importancia de un c\u00f3digo CSS se determina dependiendo de las hojas de estilo donde est\u00e1 colocado. Generalmente, no necesitaremos preocuparnos de este factor, pero siempre es una buena idea conocer como funciona. Existen varios tipos de hojas de estilo, de menor a mayor importancia: Tipo de CSS Descripci\u00f3n Definido por Agente de usuario Son los estilos CSS que aplica el navegador por defecto. Navegador CSS de usuario Son los estilos CSS que a\u00f1ade el usuario, por razones espec\u00edficas. Usuario CSS de autor Son los estilos CSS que coloca el autor de la p\u00e1gina. Desarrollador Aunque no es recomendable utilizarlo frecuentemente ( puede convertirse en una mala costumbre ), se puede a\u00f1adir al final de cada regla el texto !important , consiguiendo que la regla en cuesti\u00f3n tenga prioridad sobre las dem\u00e1s, independientemente del nivel o la altura a la que est\u00e9n: .sandbox pre { margin: 0; overflow: auto; max-height: var(--height, auto); } <div>Texto del elemento</div> <style> div { color: red !important; padding: 8px } div { color: blue; background-color: grey } </style> El resultado final de este c\u00f3digo CSS ser\u00eda: div { color: red; padding: 8px; background-color: grey } Nota : En el caso de que una misma propiedad del CSS de usuario y una propiedad del CSS de autor tuvieran !important , como caso excepcional tendr\u00eda prioridad la del CSS de usuario sobre la del CSS de autor. Especificidad \u00b6 En segundo caso, y si la importancia no elimina la ambig\u00fcedad, se pasa a determinar la especificidad de los selectores CSS. Para ello, se sigue un c\u00e1lculo matem\u00e1tico basado en 4 componentes: A , B , C , D . Componente Descripci\u00f3n Componente A N\u00famero de estilos aplicados mediante un atributo style . Componente B N\u00famero de veces que aparece un id en el selector. Componente C N\u00famero de veces que aparece una clase , pseudoclase o atributo en el selector. Componente D N\u00famero de veces que aparece un elemento o un pseudoelementos en el selector. Para saber si un bloque de CSS es m\u00e1s espec\u00edfico que otro ( y por lo tanto, tiene prioridad ) s\u00f3lo hay que calcular sus componentes. Se ordenan teniendo en cuenta los valores de cada componente, de izquierda a derecha. Veamos algunos ejemplos, ordenados de menor a mayor especificidad : div { ... } /* Especificidad: 0,0,0,1 */ div div { ... } /* Especificidad: 0,0,0,2 */ #pagina div { ... } /* Especificidad: 0,1,0,1 */ #pagina div:hover { ... } /* Especificidad: 0,1,1,1 */ #pagina div:hover a { ... } /* Especificidad: 0,1,1,2 */ #pagina .sel:hover>a { ... } /* Especificidad: 0,1,2,1 */ En keegan.st tienes una excelente calculadora de especificidad CSS donde podr\u00e1s calcular la especificidad de un selector CSS r\u00e1pida y c\u00f3modamente. Orden \u00b6 En CSS, es posible crear m\u00faltiples reglas CSS para definir un mismo concepto. En este caso, la que prevalece ante todas las dem\u00e1s depende de ciertos factores, como es la \u00abaltura\u00bb a la que est\u00e1 colocada la regla: El CSS embebido en un elemento HTML es el que tiene mayor precedencia, por lo que siempre ser\u00e1 el que tenga prioridad sobre otras reglas CSS. En segundo lugar, el CSS interno definido a trav\u00e9s de bloques style en el propio documento HTML ser\u00e1 el siguiente a tener en cuenta en orden de prioridad. Por \u00faltimo, los documentos CSS externos son la tercera opci\u00f3n de prioridad a la hora de tomar en cuenta las reglas CSS. Teniendo esto en cuenta, hay que recordar que las propiedades que prevalecer\u00e1n ser\u00e1n las que est\u00e9n en \u00faltimo lugar, siempre respetando la prioridad de la lista anterior. Variables CSS \u00b6 Quiz\u00e1s lo desconozcas, ya que es una caracter\u00edstica moderna que no estaba presente en las primeras versiones de CSS, pero existe una forma nativa de guardar valores a trav\u00e9s de \u00ab variables CSS \u00bb. Estas variables CSS no exist\u00edan hace a\u00f1os, y de hecho, fue una de las razones por las que se popularizaron preprocesadores como LESS o Sass , que s\u00ed las incorporaban. Sin embargo, las denominadas variables CSS realmente no son variables, sino que solemos denominarlas as\u00ed por su parecido con la programaci\u00f3n y porque es m\u00e1s f\u00e1cil comprender r\u00e1pidamente lo que son, pero tienen sus diferencias. La forma oficial de llamarlas es custom properties ( propiedades personalizadas ). CSS Custom Properties \u00b6 Las CSS Custom Properties ( muchas veces conocidas por variables CSS ) son un mecanismo de CSS que permite dar un valor personalizado a las propiedades. El objetivo principal suele ser evitar escribir m\u00faltiples veces ese valor, y en su lugar, ponerle un nombre m\u00e1s l\u00f3gico y f\u00e1cil de recordar, que har\u00e1 referencia al valor real. De esta forma, si necesitamos cambiar el valor en alg\u00fan momento, podemos hacerlo en esa propiedad personalizada y no en m\u00faltiples partes del documento, donde nos podr\u00edamos equivocar al a\u00f1adir el mismo valor o incluso hacer mucho m\u00e1s dif\u00edcil de mantener el c\u00f3digo. Definir una variable CSS \u00b6 Para definir una custom property haremos uso de los dos guiones -- previos al nombre que queramos utilizar. Adem\u00e1s, debemos fijarnos en el elemento que definimos la variable, en este ejemplo la pseudoclase :root : :root { --background-color: black; } Hay varios detalles que comentar sobre este fragmento de c\u00f3digo: En primer lugar, la pseudoclase :root hace referencia al elemento ra\u00edz del documento, o lo que es lo mismo, al elemento <html> . La diferencia de utilizar html o :root como selector es que este \u00faltimo tiene algo m\u00e1s de especificidad CSS . Mientras que html tiene 001 , :root tendr\u00eda 010 . Al colocarla en :root estamos definiendo que la custom property estar\u00e1 definida para el \u00e1mbito de esa etiqueta <html> ( o cualquier elemento hijo ), es decir, a todo el documento. Sin embargo, ya veremos que podemos aplicar estas variables s\u00f3lo a partes concretas del DOM de nuestra p\u00e1gina. Nota : Las custom properties se suelen agrupar en las primeras l\u00edneas de un bloque CSS, separ\u00e1ndolas por un espacio de otras propiedades est\u00e1ndar. Esto facilita la lectura del c\u00f3digo. Utilizar una variable CSS \u00b6 A la hora de utilizar una custom property , hay que utilizarla dentro de la expresi\u00f3n var() : .element { background: var(--background-color); } En este caso estamos aplicando a la propiedad background el valor que contiene --background-color para el elemento .element . Esto \u00faltimo es muy importante entenderlo, ya que una custom property puede tener diferentes valores dependiendo del \u00e1mbito en el que se encuentra. Adem\u00e1s, es muy recomendable que la expresi\u00f3n var() tenga dos par\u00e1metros . El primero de ellos, la custom property en cuesti\u00f3n, el segundo de ellos, el valor por defecto en el caso de que esa propiedad no est\u00e9 definida en el \u00e1mbito actual: .element { background: var(--background-color, blue); } En nuestro caso, el elemento con clase element tendr\u00e1 siempre el color de fondo negro, pero podr\u00eda adoptar el color azul si la custom property no se hubiera declarado. \u00c1mbito de las custom properties \u00b6 El ejemplo anterior es muy b\u00e1sico y puede que no se aprecie el detalle de los \u00e1mbitos con las custom properties , as\u00ed que vamos a verlo con un ejemplo m\u00e1s espec\u00edfico. Observa el marcado HTML del siguiente ejemplo, donde tenemos tres elementos con clase child , los dos primeros dentro de parent y el tercero fuera: .sandbox pre { margin: 0; overflow: auto; max-height: var(--height, auto); } <div class=\"parent\"> <div class=\"first child\">First child</div> <div class=\"second child\">Second child</div> </div> <div class=\"third child\">Third child</div> <style> .parent { --background-color: black; color: white; } .first { --background-color: purple; } .child { background: var(--background-color, blue); } </style> Sin embargo, ahora estamos definiendo la variable --background-color en diferentes \u00e1mbitos: Los dos primeros elementos .child tomar\u00e1n color negro, ya que se le aplica a .parent ( e hijos ). El primer elemento .child se sobreescribe con color p\u00farpura, ya que se le aplica a .first . El tercer elemento no tendr\u00e1 ninguna variable definida, por lo que tomar\u00e1 color azul. Esto nos permite mucha flexibilidad y potencia a la hora de utilizar custom properties en CSS, ya que son tremendamente \u00fatiles y vers\u00e1tiles, permiti\u00e9ndonos utilizar incluso la cascada de CSS a nuestro favor. Las custom properties tienen un buen soporte en navegadores en la actualidad, a excepci\u00f3n, como siempre, de Internet Explorer. Si necesitaras soporte para IE11, quiz\u00e1s podr\u00eda venirte bien el polifyll ie11CustomProperties . Diferencia con Sass/LESS \u00b6 Tambi\u00e9n es importante mencionar que las variables CSS no funcionan exactamente igual que las variables Sass o las variables LESS ( en general, las variables de preprocesadores ). Sass * y LESS , al igual que muchos otros preprocesadores de CSS, no trabajan directamente en el navegador, sino en una capa previa ( capa de preprocesamiento ). Por lo tanto, muchas tareas se realizan antes de llegar al navegador. Es el caso de las variables Sass/LESS , por ejemplo. Dichas variables son le\u00eddas por Sass o LESS y convertidas a CSS \u00abplano\u00bb ( sin variables ): /* En Sass/LESS las variables se declaran en el top */ $var: #fff; .parent { background: $var; /* Ser\u00e1 #fff */ } .parent .element { $var: #888; } .element { background: $var; /* Ser\u00e1 #fff */ } Es por eso que no deben tomarse las custom properties como equivalente de las variables SCSS o variables LESS , ya que tienen matices diferentes. Variables CSS desde Javascript \u00b6 Existen varias formas de manipular estilos CSS desde Javascript, ya sea directamente a trav\u00e9s de la propiedad .style del elemento en cuesti\u00f3n, o utilizando la funci\u00f3n global de cada p\u00e1gina .getComputedStyle() , que devuelve los estilos computados por el navegador. Sin embargo, en esta ocasi\u00f3n nos centraremos en una serie de m\u00e9todos de ayuda que nos hacen la vida m\u00e1s f\u00e1cil, ya que podemos establecer, obtener y/o eliminar propiedades CSS ( custom properties inclu\u00eddas ) de un elemento de forma muy sencilla. Observen el siguiente m\u00e9todo mediante el cu\u00e1l a\u00f1adimos ( o modificamos ) la propiedad border de un elemento del DOM de nuestro HTML: const element = document.querySelector(\".element\"); element.style.setProperty(\"border\", \"2px solid red\"); Al igual que lo hacemos con una propiedad CSS, lo podr\u00edamos hacer con una custom property , la cu\u00e1l quedar\u00eda a\u00f1adida en el atributo HTML style del elemento. Los m\u00e9todos de ayuda que tenemos para modificar propiedades son los siguientes: M\u00e9todo Descripci\u00f3n .setProperty(``name,``value,``priority) A\u00f1ade/cambia el valor de una propiedad CSS. .getPropertyValue(``name) Obtiene el valor de una propiedad CSS. .getPropertyPriority(``name) Devuelve important si tiene prioridad. .removeProperty(``name) Elimina una propiedad CSS de un elemento. El m\u00e9todo que hemos visto anteriormente es .style.setProperty() , con el cu\u00e1l podemos a\u00f1adir ( o modificar ) un valor a una propiedad. Adem\u00e1s, si establecemos el tercer par\u00e1metro con el important , ser\u00eda equivalente a a\u00f1adirle el !important al valor de la propiedad. Por otro lado, tenemos el m\u00e9todo opuesto .style.getPropertyValue() mediante el cu\u00e1l podemos obtener el valor de una propiedad concreta o el m\u00e9todo .style.getPropertyPriority() , con el cu\u00e1l te devuelve el string important si lo tiene definido. Por \u00faltimo, el m\u00e9todo .style.removeProperty() como su propio nombre indica, elimina una propiedad de un elemento. Nota : Ten en cuenta que estas propiedades solo funcionan si los estilos CSS o custom properties han sido definidas a trav\u00e9s del atributo style de CSS o con estos mismos m\u00e9todos ( que lo hacen por la misma v\u00eda ). Fuente: Lenguaje de CSS por Manz","title":"Introducci\u00f3n a CSS"},{"location":"desarrollo/css/01-introduccion_a_CSS/#introduccion-a-css","text":"","title":"Introducci\u00f3n a CSS"},{"location":"desarrollo/css/01-introduccion_a_CSS/#que-es-css","text":"Si te gusta el mundo del dise\u00f1o web o tienes curiosidad por empezar en este \u00e1mbito, probablemente ya habr\u00e1s escuchado el t\u00e9rmino CSS . Se trata de una tecnolog\u00eda utilizada para dotar de cualidades visuales y est\u00e9ticas a una p\u00e1gina web. Si nunca has tocado esta materia, comprobar\u00e1s que se trata de una forma anal\u00edtica, l\u00f3gica y casi matem\u00e1tica de crear p\u00e1ginas web, pero gracias a ella podemos simplificar la creaci\u00f3n de p\u00e1ginas y conseguir exactamente lo que buscamos. La curva de aprendizaje de CSS suele ser sencilla ( puede ser algo compleja si nunca has programado o eres totalmente ajeno a estas tem\u00e1ticas ), pero a medida que cometes errores y vas practicando, tu capacidad para escribir c\u00f3digo CSS mejora de forma exponencial, permiti\u00e9ndonos avanzar a un ritmo cada vez m\u00e1s veloz.","title":"\u00bfQu\u00e9 es CSS?"},{"location":"desarrollo/css/01-introduccion_a_CSS/#que-es-realmente-css","text":"Antes de comenzar, debes tener claro un concepto clave: una p\u00e1gina web es realmente un documento de texto . En dicho documento se escribe c\u00f3digo HTML , con el que se que crea el contenido de una web. Por otro lado, existe el c\u00f3digo CSS , que unido al c\u00f3digo HTML permite darle forma, color, posici\u00f3n ( y otras caracter\u00edsticas visuales ) a una p\u00e1gina. En resumen, se trata de un idioma como podr\u00eda ser el ingl\u00e9s o el alem\u00e1n, que los navegadores web como Chrome o Firefox conocen y pueden entender. Nuestro objetivo como dise\u00f1adores y programadores web es precisamente ese: aprender el idioma. Las siglas CSS ( Cascading Style Sheets ) significan \u00abHojas de estilo en cascada\u00bb y parten de un concepto simple pero muy potente: aplicar estilos (colores, formas, m\u00e1rgenes, etc...) a uno o varios documentos ( generalmente documentos HTML, p\u00e1ginas webs ) de forma masiva. Se le denomina estilos en cascada porque se aplican de arriba a abajo ( siguiendo un patr\u00f3n denominado herencia que trataremos m\u00e1s adelante ) y en el caso de existir ambig\u00fcedad, se siguen una serie de normas para resolverla. La idea de CSS es la de utilizar el concepto de separaci\u00f3n de presentaci\u00f3n y contenido , intentando que los documentos HTML incluyan s\u00f3lo informaci\u00f3n y datos, relativos al significado de la informaci\u00f3n a transmitir ( el contenido ), y todos los aspectos relacionados con el estilo (dise\u00f1o, colores, formas, etc...) se encuentren en un documento CSS independiente ( la presentaci\u00f3n ). De esta forma, se puede unificar todo lo relativo al dise\u00f1o visual en un solo documento CSS , y con ello, varias ventajas: Si necesitamos hacer modificaciones visuales lo hacemos en un s\u00f3lo lugar y no tenemos que editar todos los documentos HTML en cuesti\u00f3n por separado. Se reduce la duplicaci\u00f3n de estilos en diferentes lugares, por lo que es m\u00e1s f\u00e1cil de organizar y hacer cambios. Adem\u00e1s, al final la informaci\u00f3n a transmitir es considerablemente menor (las p\u00e1ginas se descargan m\u00e1s r\u00e1pido). Es m\u00e1s f\u00e1cil crear versiones diferentes de presentaci\u00f3n para otros tipos de dispositivos: tablets, smartphones o dispositivos m\u00f3viles, etc...","title":"\u00bfQu\u00e9 es realmente CSS?"},{"location":"desarrollo/css/01-introduccion_a_CSS/#como-usar-css","text":"Antes de comenzar a trabajar con CSS hay que conocer las diferentes formas para incluir estilos en nuestros documentos HTML , ya que hay varias, cada una con sus particularidades y diferencias. En principio, tenemos tres formas diferentes de hacerlo, siendo la primera la m\u00e1s com\u00fan y la \u00faltima la menos habitual: Nombre M\u00e9todo Descripci\u00f3n CSS Externo Etiqueta <link> El c\u00f3digo se escribe en un archivo .css a parte. M\u00e9todo m\u00e1s habitual . CSS Interno Etiqueta <style> El c\u00f3digo se escribe en una etiqueta <style> en el documento HTML. Estilos en l\u00ednea Atributo style=\"...\" El c\u00f3digo se escribe en un atributo HTML de una etiqueta. Veamos cada una de ellas detalladamente:","title":"\u00bfC\u00f3mo usar CSS?"},{"location":"desarrollo/css/01-introduccion_a_CSS/#enlace-a-css-externo-link","text":"En la cabecera de nuestro documento HTML, m\u00e1s concretamente en el bloque <head></head> , podemos incluir una etiqueta <link> con la que establecemos una relaci\u00f3n entre el documento actual y el archivo CSS que indicamos en el atributo href : <link rel=\"stylesheet\" href=\"index.css\" /> De esta forma, los navegadores sabr\u00e1n que deben aplicar los estilos que se encuentren en el archivo index.css . Se aconseja escribir esta l\u00ednea lo antes posible ( sobre todo, antes de los scripts ), obligando as\u00ed al navegador a aplicar los estilos cuanto antes y eliminar la falsa percepci\u00f3n visual de que la p\u00e1gina est\u00e1 en blanco y no ha sido cargada por completo. Esta es la manera recomendada de utilizar estilos CSS en nuestros documentos.","title":"Enlace a CSS externo (link)"},{"location":"desarrollo/css/01-introduccion_a_CSS/#incluir-css-en-el-html-style","text":"Otra de las formas habituales que existen para incluir estilos CSS en nuestra p\u00e1gina es la de a\u00f1adirlos directamente en el documento HTML, a trav\u00e9s de una etiqueta <style> que contendr\u00e1 el c\u00f3digo CSS: <!DOCTYPE html> <html> <head> <title>T\u00edtulo de la p\u00e1gina</title> <style> div { background: hotpink; color: white; } </style> </head> ... </html> Este sistema puede servirnos en ciertos casos particulares, pero hay que darle prioridad al m\u00e9todo anterior ( CSS externo ), ya que incluyendo el c\u00f3digo CSS en el interior del archivo HTML arruinamos la posibilidad de tener el c\u00f3digo CSS en un documento a parte, pudiendo reutilizarlo y enlazarlo desde otros documentos HTML mediante la etiqueta <link> . Aunque no es obligatorio, es muy com\u00fan que las etiquetas <style> se encuentren en la cabecera <head> del documento HTML, ya que antiguamente era la \u00fanica forma de hacerlo.","title":"Incluir CSS en el HTML (style)"},{"location":"desarrollo/css/01-introduccion_a_CSS/#estilos-en-linea-atributo-style","text":"Por \u00faltimo, la tercera forma de aplicar estilos en un documento HTML es hacerlo directamente, a trav\u00e9s del atributo style de la propia etiqueta donde queramos aplicar el estilo: <p>\u00a1Hola <span style=\"color:red\">amigo lector</span>!</p> De la misma forma que en el m\u00e9todo anterior, se recomienda no utilizarse salvo casos muy espec\u00edficos, ya que los estilos se asocian a la etiqueta en cuesti\u00f3n y no pueden reutilizarse. Sin embargo, es una opci\u00f3n que puede venir bien en algunos casos. Consejo : Si quieres comenzar a hacer pruebas r\u00e1pidas con HTML, CSS y Javascript puedes utilizar CodePen , una plataforma web que te permite crear contenido HTML, CSS y Javascript, previsualizando al vuelo el resultado del documento final, sin necesidad editores.","title":"Estilos en l\u00ednea (atributo style)"},{"location":"desarrollo/css/01-introduccion_a_CSS/#estructura-de-css","text":"Al igual que los documentos HTML, los documentos CSS son archivos de texto donde se escribe una serie de \u00f3rdenes y el cliente (navegador) las interpreta y aplica a los documentos HTML asociados.","title":"Estructura de CSS"},{"location":"desarrollo/css/01-introduccion_a_CSS/#sintaxis-basica","text":"La estructura CSS se basa en reglas que tienen el siguiente formato: Selector : El selector es el elemento HTML que vamos a seleccionar del documento para aplicarle un estilo concreto. Por ejemplo, el elemento p . Realmente, esto es mucho m\u00e1s complejo, pero ya dedicaremos una serie de cap\u00edtulos exclusivamente a este tema. Propiedad : La propiedad es una de las diferentes caracter\u00edsticas que brinda el lenguaje CSS e iremos aprendiendo. Valor : Cada propiedad CSS tiene una serie de valores concretos, con los que tendr\u00e1 uno u otro comportamiento. Con todo esto le iremos indicamos al navegador que, para cada etiqueta (selector especificado) debe aplicar las reglas (propiedad y valor) indicadas. Vamos a verlo con un ejemplo para afianzar conceptos. Supongamos que este es el c\u00f3digo HTML: <!DOCTYPE html> <html> <head> <title>T\u00edtulo de p\u00e1gina</title> <link rel=\"stylesheet\" href=\"index.css\" /> </head> <body> <div id=\"first\"> <p>P\u00e1rrafo</p> </div> <div id=\"second\"> <span>Capa</span> </div> </body> </html> Y adem\u00e1s, por otro lado, este ser\u00eda el c\u00f3digo CSS del archivo index.css : p { color: red; /* Color de texto rojo */ } De esta forma, a todas las etiquetas <p> se le aplicar\u00e1 el estilo especificado: el color rojo . Truco : Se pueden incluir comentarios entre los caracteres /* y */ , los cuales ser\u00e1n ignorados por el navegador y pueden ser utilizados por legibilidad y para documentar nuestros documentos CSS. Sin embargo, esto es s\u00f3lo un ejemplo muy sencillo. Se pueden aplicar muchas m\u00e1s reglas ( no s\u00f3lo el color del ejemplo ), consiguiendo as\u00ed un conjunto de estilos para la etiqueta indicada en el selector. Cada una de estas reglas se terminar\u00e1 con el car\u00e1cter punto y coma ( ; ). En el siguiente esquema se puede ver las diferentes partes del c\u00f3digo CSS con sus respectivos nombres: Truco : El \u00faltimo ; de un selector ( en naranja ) no es obligatorio y se puede omitir. Adem\u00e1s, tambi\u00e9n se pueden especificar agrupaciones de etiquetas, clases de etiquetas o cosas m\u00e1s complejas, pero eso lo veremos m\u00e1s adelante. De momento, vamos a centrarnos en las diferentes reglas que podemos utilizar. Un buen consejo, para hacer m\u00e1s legible nuestro c\u00f3digo CSS, es utilizar la siguiente estructura visual ( indentar el c\u00f3digo mediante espacios, con una propiedad por l\u00ednea ). Es una buena pr\u00e1ctica, indispensable a la larga, que nos facilitar\u00e1 la lectura del c\u00f3digo: Esto mejora sustancialmente la legibilidad del c\u00f3digo y se considera un convenio a utilizar para evitar la complejidad de entender el c\u00f3digo que no se encuentre correctamente indentado. M\u00e1s adelante, en un cap\u00edtulo dedicado expresamente a ello, veremos que la estructura CSS puede ser m\u00e1s compleja, pero de momento trabajaremos con el esquema simplificado.","title":"Sintaxis b\u00e1sica"},{"location":"desarrollo/css/01-introduccion_a_CSS/#minificar-css","text":"Normalmente, cuando el desarrollador escribe c\u00f3digo ( y no s\u00f3lo CSS, sino tambi\u00e9n HTML o Javascript ), lucha en todo momento con varios factores clave, que podr\u00edamos delimitar en los siguientes: Funcionamiento : El c\u00f3digo debe estar bien escrito para funcionar correctamente. Adem\u00e1s, se debe garantizar el correcto funcionamiento en diferentes navegadores, diferentes sistemas operativos ( incluyendo dispositivos de escritorio, m\u00f3viles y/o tablets ), los cuales suelen/pueden tener algunas diferencias entre ellos. Legibilidad : Correcta indentaci\u00f3n o colocaci\u00f3n de las diferentes partes del c\u00f3digo, facilitando la legibilidad por humanos, favoreciendo la velocidad de modificaci\u00f3n e introducci\u00f3n de cambios ( mantenibilidad ). Tama\u00f1o : Cuanto m\u00e1s texto tenga un archivo CSS , HTML o Javascript ( espacios, l\u00edneas en blanco, comentarios, c\u00f3digo no usado... ), m\u00e1s grande ser\u00e1 el tama\u00f1o final del archivo, por lo que m\u00e1s tiempo tardar\u00e1 en descargarse y procesarse por el navegador. Rendimiento : Cuanto m\u00e1s costosas sean las operaciones que vamos a obligar a hacer al navegador, m\u00e1s tardar\u00e1 en procesarse y por lo tanto, m\u00e1s tiempo tardar\u00e1 en pintar y renderizar ( dibujar ) la p\u00e1gina.","title":"Minificar CSS"},{"location":"desarrollo/css/01-introduccion_a_CSS/#que-es-la-minificacion","text":"La minificaci\u00f3n ( en ingl\u00e9s, Uglify o Minification ) es la acci\u00f3n de eliminar car\u00e1cteres o comentarios de nuestro c\u00f3digo, con el objetivo de reducir su tama\u00f1o total, y por lo tanto, descargarlos m\u00e1s r\u00e1pido. En archivos CSS muy grandes esto suele influir de forma considerable, por lo que es una buena pr\u00e1ctica utilizar herramientas de minificaci\u00f3n y reducir el tama\u00f1o del archivo CSS condensando toda su informaci\u00f3n, eliminando espacios, retornos de carro, etc... Haciendo esto, conseguiremos que el archivo ocupe menos, pero a cambio, perderemos legibilidad. Por esta raz\u00f3n, es habitual conservar los archivos CSS originales ( sin minificar ) para trabajar con ellos, y generar los archivos reducidos con herramientas automaticas. Hay que tener en cuenta que el proceso de minification es un paso totalmente opcional, por lo que no es obligado realizarlo, pero se considera una buena pr\u00e1ctica de optimizaci\u00f3n. Veamos un ejemplo de un mismo archivo CSS con su contenido sin minificar y minificado: Ejemplo de c\u00f3digo CSS legible (index.css) : 96 bytes #main { background-color: black; color: white; padding: 16px; border: 2px solid blue; } Ejemplo de c\u00f3digo CSS minificado (index.min.css) : 75 bytes #main{background-color:#000;color:#fff;padding:16px;border:2px solid #00f;} Como se puede ver, el tama\u00f1o y la legibilidad del archivo CSS se reduce considerablemente. Ser\u00eda perjudicial trabajar con c\u00f3digo del segundo ejemplo, por lo que se suele mantener un archivo legible ( el primero ) para realizar modificaciones y trabajar con \u00e9l, y luego, de forma opcional, un archivo con la informaci\u00f3n minificada ( el segundo ) que ser\u00e1 el que se utilice finalmente en nuestro proyecto cuando est\u00e9 terminado. En resumen, el primer archivo es el c\u00f3digo para humanos , el que debemos mantener y trabajar con \u00e9l. El segundo archivo es el c\u00f3digo para el navegador , que no se debe modificar directamente por humanos y que se debe generar a partir del primero.","title":"\u00bfQu\u00e9 es la minificaci\u00f3n?"},{"location":"desarrollo/css/01-introduccion_a_CSS/#herramientas-de-minificacion","text":"Existen m\u00faltiples herramientas para minificar c\u00f3digo CSS. Algunas de ellas, incluso se encargan de analizar el c\u00f3digo y, no s\u00f3lo minificarlo, sino adem\u00e1s suprimir propiedades repetidas, eliminar propiedades o valores in\u00fatiles, etc. Veamos algunas de las m\u00e1s populares: Herramienta Modalidad Caracter\u00edsticas CSS Nano PostCSS Para automatizar desde terminal o desde PostCSS. Clean CSS NodeJS/NPM Para automatizar desde terminal. CSS Compressor Online Opciones variadas: grado de compresi\u00f3n, optimizaciones... CSSO NodeJS/NPM Optimizador de CSS (clean, compress and restructuring) Sqwish NodeJS/NPM Compresor de CSS basado en Node YUI Compressor Java Compresor CSS hist\u00f3rico de Yahoo","title":"Herramientas de minificaci\u00f3n"},{"location":"desarrollo/css/01-introduccion_a_CSS/#navegadores-web","text":"Los navegadores web ( tambi\u00e9n llamados clientes ) son esos programas que utilizamos para acceder a Internet y visualizar p\u00e1ginas en nuestros dispositivos. Todos los usuarios conocen al menos uno o varios navegadores web, aunque sea los m\u00e1s populares como Google Chrome o Mozilla Firefox . Sin embargo, existen muchos m\u00e1s. Para ser un buen dise\u00f1ador o desarrollador web es recomendable conocer bien el ecosistema de navegadores existente y sus caracter\u00edsticas, que no son pocas.","title":"Navegadores web"},{"location":"desarrollo/css/01-introduccion_a_CSS/#ecosistema-de-navegadores","text":"En un mundo ideal, todas las p\u00e1ginas webs se ver\u00edan correctamente y de la misma forma en todos los navegadores web disponibles, sin embargo, y una de las cosas que m\u00e1s llama la atenci\u00f3n del dise\u00f1o web cuando estamos empezando, es que no s\u00f3lo debemos construir una web correctamente, sino que adem\u00e1s debemos ser conscientes de los navegadores m\u00e1s utilizados , as\u00ed como de sus carencias y virtudes. En un principio, el consorcio W3C se encarga de definir unas especificaciones y \u00abnormas\u00bb de recomendaci\u00f3n, para que posteriormente, las compa\u00f1\u00edas desarrolladoras de navegadores web las sigan y puedan crear un navegador correctamente. Pero como no estamos en un mundo perfecto ( y el tiempo es un recurso limitado ), dichas compa\u00f1\u00edas establecen prioridades, desarrollan caracter\u00edsticas antes que otras, e incluso algunas caracter\u00edsticas deciden no implementarlas por razones espec\u00edficas o internas. Las compa\u00f1\u00edas m\u00e1s comprometidas con sus navegadores web, tienen a disposici\u00f3n de los dise\u00f1adores, programadores y entusiastas, una especie de diario cronol\u00f3gico, donde mencionan su hoja de ruta con las caracter\u00edsticas que van implementando, descartando o sus planes de futuro, as\u00ed como informaci\u00f3n adicional sobre el tema en cuesti\u00f3n: Responsables Producto P\u00e1gina de estado de desarrollo del navegador Microsoft Navegador Microsoft Edge Edge Platform Status (Proyecto open source) Motor Webkit Webkit Feature Status Fundaci\u00f3n Mozilla Navegador Mozilla Firefox Firefox Platform Status Google Navegador Google Chrome Chrome Platform Status Adem\u00e1s, existe una secci\u00f3n donde podemos comparar caracter\u00edsticas respecto a navegadores en CanIUse .","title":"Ecosistema de navegadores"},{"location":"desarrollo/css/01-introduccion_a_CSS/#historia-de-los-navegadores","text":"Si echamos un vistazo atr\u00e1s, la historia de los navegadores ha variado much\u00edsimo. Quiz\u00e1s, el cambio m\u00e1s importante en los \u00faltimos 10 a\u00f1os ha sido el reemplazo de Internet Explorer , como navegador m\u00e1s popular, a Google Chrome . Antiguamente, Internet Explorer fue un navegador que se hab\u00eda estancado y no implementaba nuevas caracter\u00edsticas y funcionalidades, al contrario que sus competidores. Pero adem\u00e1s, para empeorar la situaci\u00f3n, era el navegador m\u00e1s utilizado por los usuarios, debido al liderazgo de Windows como sistema operativo. Esto imped\u00eda que las nuevas tecnolog\u00edas webs se adoptaran y frenaba su avance. Por suerte, esto ha ido cambiando a lo largo de los a\u00f1os y la situaci\u00f3n hoy en d\u00eda es bastante diferente. A continuaci\u00f3n se puede ver la evoluci\u00f3n de los navegadores m\u00e1s populares durante esta \u00faltima d\u00e9cada ( desde 2009 hasta 2016 ). Vemos que los navegadores m\u00e1s perjudicados son Internet Explorer y Mozilla Firefox, mientras que Chrome ha experimentado un incremento muy grande. Safari tambi\u00e9n ha experimentado un ligero incremento, probablemente debido al \u00e9xito de dispositivos como iPhone o iPad. Como toda estad\u00edstica, debe ser tomada con precauci\u00f3n porque existen sesgos en sus datos. Esta estad\u00edstica ha sido extra\u00edda de Global StatCounter . Tambi\u00e9n puedes echar un vistazo a algunas estad\u00edsticas m\u00e1s en w3counter , aunque quiz\u00e1s la m\u00e1s interesante y adecuada sea CanIUse: Usage table , donde podemos encontrar los navegadores m\u00e1s utilizados, separado por versiones y mostrado con porcentajes.","title":"Historia de los navegadores"},{"location":"desarrollo/css/01-introduccion_a_CSS/#navegadores-actuales","text":"A continuaci\u00f3n, tenemos una lista de la rama de los 5 navegadores m\u00e1s populares , que son aquellos que tienen una cuota de mercado considerable. Algunos de estos navegadores tienen varias versiones diferentes, como por ejemplo, versiones beta ( con funcionalidades a\u00fan no existentes en la versi\u00f3n oficial ) o versiones de desarrollador ( orientadas para el uso de programadores o dise\u00f1adores ). Responsables Navegador web Prop\u00f3sito Motor Notas URL Google Chrome Uso habitual Blink URL Google Chrome beta Early-adopters Blink URL Google Canary Chrome Desarrollador Blink URL Google Chromium Open Source Blink URL Mozilla Firefox Uso habitual Quantum URL Mozilla Firefox beta Early-adopters Quantum URL Mozilla Firefox Dev Edition Desarrollador Quantum URL Mozilla Firefox Nightly Desarrollador Quantum URL Microsoft Edge Uso habitual Blink URL Microsoft Internet Explorer Uso habitual Trident S\u00f3lo Windows URL Opera Opera Uso habitual Blink URL Opera Opera beta Early-adopters Blink URL Opera Opera developer Desarrollador Blink URL Opera Opera Neon Early-adopters Blink URL Apple Safari Uso habitual Webkit S\u00f3lo Apple URL Apple Safari Tech Preview Desarrollador Webkit S\u00f3lo Apple URL","title":"Navegadores actuales"},{"location":"desarrollo/css/01-introduccion_a_CSS/#versiones-de-los-navegadores","text":"Es tambi\u00e9n muy importante conocer la versi\u00f3n del navegador que utiliza la mayor\u00eda de nuestro p\u00fablico ( datos que se pueden obtener con herramientas como Google Analytics, por ejemplo ), ya que de una versi\u00f3n a otra se a\u00f1aden nuevas caracter\u00edsticas y funcionalidades, de las cuales los usuarios de las versiones anteriores no podr\u00e1n disfrutar. En la herramienta CanIUse se muestra, a lo largo de las columnas de cada navegador, si las funcionalidades est\u00e1n implementadas en la versi\u00f3n concreta del mismo, o cuando empezar\u00e1n a funcionar: Es por tanto, l\u00f3gico pensar, que si tenemos un alto porcentaje de usuarios que utilizan una versi\u00f3n de un navegador que no soporta la funcionalidad que queremos utilizar, haya que buscar alternativas o abstenerse a utilizarla hasta que ese porcentaje se reduzca. Por suerte, desde hace ya bastante tiempo los navegadores han comenzado a implementar una estrategia de actualizaci\u00f3n silenciosa ( en ingl\u00e9s los denominan evergreen browser ), con la cu\u00e1l consigues que el usuario tenga siempre el navegador actualizado a la \u00faltima versi\u00f3n ( si tiene acceso a Internet, claro ), ya que el grueso de los usuarios no suele actualizar manualmente la versi\u00f3n de su navegador, y esto hac\u00eda que existiera una gran cuota de usuarios con navegadores sin actualizar.","title":"Versiones de los navegadores"},{"location":"desarrollo/css/01-introduccion_a_CSS/#otros-navegadores","text":"A continuaci\u00f3n, tenemos una lista de otros navegadores menores, que no superan una cuota de mercado a nivel global de un 1%, pero que pueden ser interesantes en el futuro, para casos particulares o podr\u00edan experimentar un aumento de su cuota en los pr\u00f3ximos a\u00f1os: Responsables Navegador web Prop\u00f3sito Motor Basado en URL Tor Project Tor Navegaci\u00f3n an\u00f3nima Gecko Firefox URL Vivaldi Tech Vivaldi Early-adopters Blink URL Brave Soft Brave Privacidad Blink URL Yandex Yandex Browser Uso habitual Blink URL David Rosca QupZilla Uso habitual Qt WebEngine URL Maxthon Int Maxthon Uso habitual Trident/Webkit URL Fenrir Inc Sleipnir Uso habitual Blink URL SM Project SeaMonkey Uso habitual Gecko Mozilla AS URL Chris Dywan Midori Uso habitual Webkit URL Comodo Grou Comodo Dragon Uso habitual Blink Chromium URL Avant Force Avant Uso habitual Trident/Gecko URL M. Patocka Links Navegador de texto - URL Thomas Dickey Lynx Navegador de texto - URL Akinori Ito w3m Navegador de texto - URL P. Baudis Elinks Navegador de texto - URL Existen muchos m\u00e1s navegadores, esto s\u00f3lo es una lista de los que he considerado m\u00e1s relevantes.","title":"Otros navegadores"},{"location":"desarrollo/css/01-introduccion_a_CSS/#niveles-de-css-y-prefijos","text":"El lenguaje CSS es una especificaci\u00f3n desarrollada y mantenida por el World Wide Web Consortium (W3C), una comunidad internacional que se encarga de desarrollar est\u00e1ndares para asegurar el crecimiento y la neutralidad de la web, independiz\u00e1ndolo de tecnolog\u00edas propietarias e intentando aunar esfuerzos para satisfacer la demanda de caracter\u00edsticas \u00fatiles e interesantes. En el consorcio participan y colaboran pr\u00e1cticamente casi todas las empresas relacionadas con Internet, como por ejemplo Apple, Adobe, Akamai, Cisco, Google, Facebook, HP, Intel, LG, Microsoft, Nokia, Twitter, Yahoo, entre muchos otros . Desde hace algunos a\u00f1os, la comunidad WHATWG participa tambi\u00e9n en el desarrollo y evoluci\u00f3n de especificaciones como las de HTML , DOM u otras tecnolog\u00edas relacionadas.","title":"Niveles de CSS y prefijos"},{"location":"desarrollo/css/01-introduccion_a_CSS/#niveles-css","text":"A lo largo de su historia, CSS ha ido evolucionado en diferentes versiones denominados niveles : Nivel A\u00f1o Descripci\u00f3n CSS1 1996 Propiedades de fuente, colores, alineaci\u00f3n, etc... CSS2 1998 Propiedades de posicionamiento, tipos de medios, etc... CSS2.1 2005 Corrige errores de CSS2 y modifica ciertas propiedades CSS3 2011 Inicio de caracter\u00edsticas de CSS como m\u00f3dulos separados Desde 2011, la especificaci\u00f3n CSS comienza a evolucionar separando sus nuevas funcionalidades en peque\u00f1os m\u00f3dulos , favoreciendo su implementaci\u00f3n en navegadores. Si se desea informaci\u00f3n m\u00e1s t\u00e9cnica, se puede consultar la evoluci\u00f3n de los diferentes m\u00f3dulos relacionados con CSS en la p\u00e1gina web del consorcio W3C.","title":"Niveles CSS]"},{"location":"desarrollo/css/01-introduccion_a_CSS/#prefijos","text":"Algunas de las propiedades que veremos no est\u00e1n definidas por completo, s\u00f3lo son borradores o pueden variar en la especificaci\u00f3n definitiva, por lo que los navegadores las implementan utilizando una serie de vendor prefixes ( prefijos por navegador ), que facilitan la segmentaci\u00f3n de funcionalidades. De esta forma, podemos utilizar varios prefijos para asegurarnos que aunque dichas funcionalidades tengan un comportamiento o sintaxis diferente en cada navegador, podemos hacer referencia a cada una de ellas por separado: div { transform: ... /* Navegadores que implementan especificaci\u00f3n oficial */ -webkit-transform: ... /* Versiones antiguas de Chrome (Motor WebKit) */ -moz-transform: ... /* Versiones antiguas de Firefox (Motor Gecko) */ -ms-transform: ... /* Versiones antiguas de IE (Motor Trident) */ -o-transform: ... /* Versiones antiguas de Opera (Motor Presto) */ } En el ejemplo anterior, la propiedad transform se refiere a los navegadores que tengan implementada la especificaci\u00f3n definitiva por completo e ignorar\u00e1 el resto de propiedades. Por otro lado, otro navegador ( o el mismo en una versi\u00f3n m\u00e1s antigua ) puede tener implementada una versi\u00f3n anterior a la definitiva, por lo que har\u00e1 caso a las propiedades con un prefijo concreto. Debido al ritmo y la r\u00e1pida velocidad de Internet en estas cuestiones, es muy complicado obtener una lista de funcionalidades implementadas en cada navegador, algo que puede variar incluso en cuesti\u00f3n de semanas. Aconsejo utilizar la p\u00e1gina Can I Use , una web colaborativa para saber el estado actual, previo e incluso futuro de las propiedades CSS o elementos HTML en cada navegador. En esta p\u00e1gina se puede buscar, a trav\u00e9s de un buscador y de forma r\u00e1pida y c\u00f3moda, el estado de ciertas caracter\u00edsticas por parte de las diferentes versiones de los navegadores. Actualmente, los vendor prefixes est\u00e1n en proceso de desaparecer. Las principales compa\u00f1\u00edas de navegadores han optado por favorecer el uso de flags en el navegador del usuario para activar o desactivar opciones experimentales o crear especificaciones m\u00e1s peque\u00f1as y breves que puedan ser estables mucho m\u00e1s r\u00e1pido. Por esta raz\u00f3n, se aconseja utilizar vendor prefixes solo cuando necesitas soporte espec\u00edfico en navegadores muy antiguos. En el caso de querer utilizar vendor prefixes *, recomiendo encarecidamente utilizar sistemas como autoprefixer ( el m\u00e1s popular, que forma parte de PostCSS ) o prefix-free que a\u00f1aden de forma autom\u00e1tica y transparente los prefijos, bas\u00e1ndose en informaci\u00f3n de herramientas como Can I Use . Busca extensiones en el editor que utilices o la opci\u00f3n para activarlas, ya que te ahorrar\u00e1 mucho tiempo y te permitir\u00e1 tener un c\u00f3digo m\u00e1s legible y modular al no tener que repetir c\u00f3digo.","title":"Prefijos"},{"location":"desarrollo/css/01-introduccion_a_CSS/#herencia-en-css","text":"Otro detalle que hay que dejar claro antes de empezar es el concepto de herencia ( y el concepto de cascada , que veremos m\u00e1s adelante ), pues son los que m\u00e1s problemas suelen dar y los que, sin lugar a dudas, mayor frustraci\u00f3n acarrean cuando no comprendemos lo que est\u00e1 pasando.","title":"Herencia en CSS"},{"location":"desarrollo/css/01-introduccion_a_CSS/#concepto-de-herencia","text":"En primer lugar, debemos saber que algunas propiedades CSS se heredan desde los elementos padres a los elementos hijos, modificando el valor que tienen por defecto: body { color: green; /* Color de texto verde */ } En el ejemplo anterior, aplicamos a la etiqueta HTML <body> el color de texto verde . En principio, esta propiedad aplicar\u00e1 dicho color a los textos que est\u00e9n dentro de dicha etiqueta <body> . Sin embargo, si tenemos m\u00e1s etiquetas dentro, como por ejemplo una etiqueta <div> con texto en su interior, si no tenemos aplicada una propiedad color a dicho elemento, veremos que tambi\u00e9n aparece en color verde. Esto ocurre porque la propiedad color es una de las propiedades CSS que, en el caso de no tener valor espec\u00edfico, hereda el valor de su elemento padre . Ojo, porque esto no ocurre si lo hacemos con otras propiedades CSS, como por ejemplo, con los bordes de un elemento HTML: body { border-width: 2px; border-style: solid; border-color: red; } Si esta propiedad aplicara herencia, todos los elementos HTML situados en el interior de <body> tendr\u00edan un borde rojo, comportamiento que no suele ser el deseado. Por esa raz\u00f3n, la herencia no ocurre con todas las propiedades CSS, sino s\u00f3lo con algunas propiedades como color o font , donde si suele ser deseable.","title":"Concepto de herencia"},{"location":"desarrollo/css/01-introduccion_a_CSS/#valores-especiales","text":"Adem\u00e1s de los valores habituales de cada propiedad CSS, tambi\u00e9n podemos aplicar ciertos valores especiales que son comunes a todas las propiedades existentes. Con estos valores modificamos el comportamiento de la herencia en dicha propiedad: Valor Significado inherit Hereda el valor de la propiedad del elemento padre. initial Establece el valor que ten\u00eda la propiedad inicialmente. unset Combinaci\u00f3n de las dos anteriores: Hereda el valor de la propiedad del elemento padre, y en caso de no existir, su valor inicial. Veamos, por ejemplo, el siguiente ejemplo para forzar la herencia en una propiedad que no la aplica por defecto: body { border-width: 2px; border-style: solid; border-color: red; } div { border: inherit; } Si tenemos un elemento <div> dentro del <body> , el primero heredar\u00e1 los estilos del elemento <body> , ya que le hemos especificado el valor inherit en la propiedad border .","title":"Valores especiales"},{"location":"desarrollo/css/01-introduccion_a_CSS/#cascada-en-css","text":"Adem\u00e1s de la herencia, otro de los conceptos m\u00e1s importantes de CSS es el concepto de cascada . Este concepto es un poco m\u00e1s avanzado, por lo que se debe conocer bien el tema de selectores CSS y dominar algo de CSS para comprenderlo en su totalidad, por lo que si no es el caso se puede posponer para una lectura posterior. Antes de continuar, supongamos que nos encontramos ante el siguiente escenario: .sandbox pre { margin: 0; overflow: auto; max-height: var(--height, auto); } <div>Texto del elemento</div> <style> div { color: red; padding: 8px } div { color: blue; background-color: grey } </style> En este caso, \u00bfcu\u00e1l de las dos reglas prevalece, si tenemos en cuenta que se refieren al mismo elemento y est\u00e1n al mismo nivel? La respuesta es muy f\u00e1cil: Prevalece siempre la \u00faltima regla definida, la cu\u00e1l mezcla y sobreescribe las propiedades anteriores. En el caso anterior, el resultado final ( computado ) ser\u00eda el siguiente: div { color: blue; /* Se sobreescribe la \u00faltima */ padding: 8px; background-color: grey; } Sin embargo, puede ocurrir que en determinados casos no est\u00e9 tan claro cu\u00e1l es el estilo que deber\u00eda sobreescribir a los anteriores. Ah\u00ed es cuando entra en juego el concepto de cascada en CSS , que es el que se encarga de eliminar la ambig\u00fcedad y determinar el que tiene prioridad. Supongamos el siguiente caso: .sandbox pre { margin: 0; overflow: auto; max-height: var(--height, auto); } <div id=\"nombre\" class=\"clase\">Texto del elemento</div> <style> div { color: red; } #nombre { color: blue; } .clase { color: green; } </style> Tenemos un elemento HTML <div id=\"nombre\" class=\"clase\"> que encaja con los tres bloques del ejemplo anterior. \u00bfC\u00f3mo sabe CSS que estilo aplicar? \u00bfCu\u00e1l tiene prioridad sobre los dem\u00e1s? Aqu\u00ed es donde entra en acci\u00f3n el concepto de cascada en CSS .","title":"Cascada en CSS"},{"location":"desarrollo/css/01-introduccion_a_CSS/#cascada-css","text":"Para saber que bloque de estilos tiene prioridad, CSS analiza ( por orden ) tres conceptos clave del c\u00f3digo CSS: su importancia , la especificidad y su orden . Veamos en que se basa cada uno de ellos.","title":"Cascada CSS"},{"location":"desarrollo/css/01-introduccion_a_CSS/#importancia","text":"La importancia de un c\u00f3digo CSS se determina dependiendo de las hojas de estilo donde est\u00e1 colocado. Generalmente, no necesitaremos preocuparnos de este factor, pero siempre es una buena idea conocer como funciona. Existen varios tipos de hojas de estilo, de menor a mayor importancia: Tipo de CSS Descripci\u00f3n Definido por Agente de usuario Son los estilos CSS que aplica el navegador por defecto. Navegador CSS de usuario Son los estilos CSS que a\u00f1ade el usuario, por razones espec\u00edficas. Usuario CSS de autor Son los estilos CSS que coloca el autor de la p\u00e1gina. Desarrollador Aunque no es recomendable utilizarlo frecuentemente ( puede convertirse en una mala costumbre ), se puede a\u00f1adir al final de cada regla el texto !important , consiguiendo que la regla en cuesti\u00f3n tenga prioridad sobre las dem\u00e1s, independientemente del nivel o la altura a la que est\u00e9n: .sandbox pre { margin: 0; overflow: auto; max-height: var(--height, auto); } <div>Texto del elemento</div> <style> div { color: red !important; padding: 8px } div { color: blue; background-color: grey } </style> El resultado final de este c\u00f3digo CSS ser\u00eda: div { color: red; padding: 8px; background-color: grey } Nota : En el caso de que una misma propiedad del CSS de usuario y una propiedad del CSS de autor tuvieran !important , como caso excepcional tendr\u00eda prioridad la del CSS de usuario sobre la del CSS de autor.","title":"Importancia"},{"location":"desarrollo/css/01-introduccion_a_CSS/#especificidad","text":"En segundo caso, y si la importancia no elimina la ambig\u00fcedad, se pasa a determinar la especificidad de los selectores CSS. Para ello, se sigue un c\u00e1lculo matem\u00e1tico basado en 4 componentes: A , B , C , D . Componente Descripci\u00f3n Componente A N\u00famero de estilos aplicados mediante un atributo style . Componente B N\u00famero de veces que aparece un id en el selector. Componente C N\u00famero de veces que aparece una clase , pseudoclase o atributo en el selector. Componente D N\u00famero de veces que aparece un elemento o un pseudoelementos en el selector. Para saber si un bloque de CSS es m\u00e1s espec\u00edfico que otro ( y por lo tanto, tiene prioridad ) s\u00f3lo hay que calcular sus componentes. Se ordenan teniendo en cuenta los valores de cada componente, de izquierda a derecha. Veamos algunos ejemplos, ordenados de menor a mayor especificidad : div { ... } /* Especificidad: 0,0,0,1 */ div div { ... } /* Especificidad: 0,0,0,2 */ #pagina div { ... } /* Especificidad: 0,1,0,1 */ #pagina div:hover { ... } /* Especificidad: 0,1,1,1 */ #pagina div:hover a { ... } /* Especificidad: 0,1,1,2 */ #pagina .sel:hover>a { ... } /* Especificidad: 0,1,2,1 */ En keegan.st tienes una excelente calculadora de especificidad CSS donde podr\u00e1s calcular la especificidad de un selector CSS r\u00e1pida y c\u00f3modamente.","title":"Especificidad"},{"location":"desarrollo/css/01-introduccion_a_CSS/#orden","text":"En CSS, es posible crear m\u00faltiples reglas CSS para definir un mismo concepto. En este caso, la que prevalece ante todas las dem\u00e1s depende de ciertos factores, como es la \u00abaltura\u00bb a la que est\u00e1 colocada la regla: El CSS embebido en un elemento HTML es el que tiene mayor precedencia, por lo que siempre ser\u00e1 el que tenga prioridad sobre otras reglas CSS. En segundo lugar, el CSS interno definido a trav\u00e9s de bloques style en el propio documento HTML ser\u00e1 el siguiente a tener en cuenta en orden de prioridad. Por \u00faltimo, los documentos CSS externos son la tercera opci\u00f3n de prioridad a la hora de tomar en cuenta las reglas CSS. Teniendo esto en cuenta, hay que recordar que las propiedades que prevalecer\u00e1n ser\u00e1n las que est\u00e9n en \u00faltimo lugar, siempre respetando la prioridad de la lista anterior.","title":"Orden"},{"location":"desarrollo/css/01-introduccion_a_CSS/#variables-css","text":"Quiz\u00e1s lo desconozcas, ya que es una caracter\u00edstica moderna que no estaba presente en las primeras versiones de CSS, pero existe una forma nativa de guardar valores a trav\u00e9s de \u00ab variables CSS \u00bb. Estas variables CSS no exist\u00edan hace a\u00f1os, y de hecho, fue una de las razones por las que se popularizaron preprocesadores como LESS o Sass , que s\u00ed las incorporaban. Sin embargo, las denominadas variables CSS realmente no son variables, sino que solemos denominarlas as\u00ed por su parecido con la programaci\u00f3n y porque es m\u00e1s f\u00e1cil comprender r\u00e1pidamente lo que son, pero tienen sus diferencias. La forma oficial de llamarlas es custom properties ( propiedades personalizadas ).","title":"Variables CSS"},{"location":"desarrollo/css/01-introduccion_a_CSS/#css-custom-properties","text":"Las CSS Custom Properties ( muchas veces conocidas por variables CSS ) son un mecanismo de CSS que permite dar un valor personalizado a las propiedades. El objetivo principal suele ser evitar escribir m\u00faltiples veces ese valor, y en su lugar, ponerle un nombre m\u00e1s l\u00f3gico y f\u00e1cil de recordar, que har\u00e1 referencia al valor real. De esta forma, si necesitamos cambiar el valor en alg\u00fan momento, podemos hacerlo en esa propiedad personalizada y no en m\u00faltiples partes del documento, donde nos podr\u00edamos equivocar al a\u00f1adir el mismo valor o incluso hacer mucho m\u00e1s dif\u00edcil de mantener el c\u00f3digo.","title":"CSS Custom Properties"},{"location":"desarrollo/css/01-introduccion_a_CSS/#definir-una-variable-css","text":"Para definir una custom property haremos uso de los dos guiones -- previos al nombre que queramos utilizar. Adem\u00e1s, debemos fijarnos en el elemento que definimos la variable, en este ejemplo la pseudoclase :root : :root { --background-color: black; } Hay varios detalles que comentar sobre este fragmento de c\u00f3digo: En primer lugar, la pseudoclase :root hace referencia al elemento ra\u00edz del documento, o lo que es lo mismo, al elemento <html> . La diferencia de utilizar html o :root como selector es que este \u00faltimo tiene algo m\u00e1s de especificidad CSS . Mientras que html tiene 001 , :root tendr\u00eda 010 . Al colocarla en :root estamos definiendo que la custom property estar\u00e1 definida para el \u00e1mbito de esa etiqueta <html> ( o cualquier elemento hijo ), es decir, a todo el documento. Sin embargo, ya veremos que podemos aplicar estas variables s\u00f3lo a partes concretas del DOM de nuestra p\u00e1gina. Nota : Las custom properties se suelen agrupar en las primeras l\u00edneas de un bloque CSS, separ\u00e1ndolas por un espacio de otras propiedades est\u00e1ndar. Esto facilita la lectura del c\u00f3digo.","title":"Definir una variable CSS"},{"location":"desarrollo/css/01-introduccion_a_CSS/#utilizar-una-variable-css","text":"A la hora de utilizar una custom property , hay que utilizarla dentro de la expresi\u00f3n var() : .element { background: var(--background-color); } En este caso estamos aplicando a la propiedad background el valor que contiene --background-color para el elemento .element . Esto \u00faltimo es muy importante entenderlo, ya que una custom property puede tener diferentes valores dependiendo del \u00e1mbito en el que se encuentra. Adem\u00e1s, es muy recomendable que la expresi\u00f3n var() tenga dos par\u00e1metros . El primero de ellos, la custom property en cuesti\u00f3n, el segundo de ellos, el valor por defecto en el caso de que esa propiedad no est\u00e9 definida en el \u00e1mbito actual: .element { background: var(--background-color, blue); } En nuestro caso, el elemento con clase element tendr\u00e1 siempre el color de fondo negro, pero podr\u00eda adoptar el color azul si la custom property no se hubiera declarado.","title":"Utilizar una variable CSS"},{"location":"desarrollo/css/01-introduccion_a_CSS/#ambito-de-las-custom-properties","text":"El ejemplo anterior es muy b\u00e1sico y puede que no se aprecie el detalle de los \u00e1mbitos con las custom properties , as\u00ed que vamos a verlo con un ejemplo m\u00e1s espec\u00edfico. Observa el marcado HTML del siguiente ejemplo, donde tenemos tres elementos con clase child , los dos primeros dentro de parent y el tercero fuera: .sandbox pre { margin: 0; overflow: auto; max-height: var(--height, auto); } <div class=\"parent\"> <div class=\"first child\">First child</div> <div class=\"second child\">Second child</div> </div> <div class=\"third child\">Third child</div> <style> .parent { --background-color: black; color: white; } .first { --background-color: purple; } .child { background: var(--background-color, blue); } </style> Sin embargo, ahora estamos definiendo la variable --background-color en diferentes \u00e1mbitos: Los dos primeros elementos .child tomar\u00e1n color negro, ya que se le aplica a .parent ( e hijos ). El primer elemento .child se sobreescribe con color p\u00farpura, ya que se le aplica a .first . El tercer elemento no tendr\u00e1 ninguna variable definida, por lo que tomar\u00e1 color azul. Esto nos permite mucha flexibilidad y potencia a la hora de utilizar custom properties en CSS, ya que son tremendamente \u00fatiles y vers\u00e1tiles, permiti\u00e9ndonos utilizar incluso la cascada de CSS a nuestro favor. Las custom properties tienen un buen soporte en navegadores en la actualidad, a excepci\u00f3n, como siempre, de Internet Explorer. Si necesitaras soporte para IE11, quiz\u00e1s podr\u00eda venirte bien el polifyll ie11CustomProperties .","title":"\u00c1mbito de las custom properties"},{"location":"desarrollo/css/01-introduccion_a_CSS/#diferencia-con-sassless","text":"Tambi\u00e9n es importante mencionar que las variables CSS no funcionan exactamente igual que las variables Sass o las variables LESS ( en general, las variables de preprocesadores ). Sass * y LESS , al igual que muchos otros preprocesadores de CSS, no trabajan directamente en el navegador, sino en una capa previa ( capa de preprocesamiento ). Por lo tanto, muchas tareas se realizan antes de llegar al navegador. Es el caso de las variables Sass/LESS , por ejemplo. Dichas variables son le\u00eddas por Sass o LESS y convertidas a CSS \u00abplano\u00bb ( sin variables ): /* En Sass/LESS las variables se declaran en el top */ $var: #fff; .parent { background: $var; /* Ser\u00e1 #fff */ } .parent .element { $var: #888; } .element { background: $var; /* Ser\u00e1 #fff */ } Es por eso que no deben tomarse las custom properties como equivalente de las variables SCSS o variables LESS , ya que tienen matices diferentes.","title":"Diferencia con Sass/LESS"},{"location":"desarrollo/css/01-introduccion_a_CSS/#variables-css-desde-javascript","text":"Existen varias formas de manipular estilos CSS desde Javascript, ya sea directamente a trav\u00e9s de la propiedad .style del elemento en cuesti\u00f3n, o utilizando la funci\u00f3n global de cada p\u00e1gina .getComputedStyle() , que devuelve los estilos computados por el navegador. Sin embargo, en esta ocasi\u00f3n nos centraremos en una serie de m\u00e9todos de ayuda que nos hacen la vida m\u00e1s f\u00e1cil, ya que podemos establecer, obtener y/o eliminar propiedades CSS ( custom properties inclu\u00eddas ) de un elemento de forma muy sencilla. Observen el siguiente m\u00e9todo mediante el cu\u00e1l a\u00f1adimos ( o modificamos ) la propiedad border de un elemento del DOM de nuestro HTML: const element = document.querySelector(\".element\"); element.style.setProperty(\"border\", \"2px solid red\"); Al igual que lo hacemos con una propiedad CSS, lo podr\u00edamos hacer con una custom property , la cu\u00e1l quedar\u00eda a\u00f1adida en el atributo HTML style del elemento. Los m\u00e9todos de ayuda que tenemos para modificar propiedades son los siguientes: M\u00e9todo Descripci\u00f3n .setProperty(``name,``value,``priority) A\u00f1ade/cambia el valor de una propiedad CSS. .getPropertyValue(``name) Obtiene el valor de una propiedad CSS. .getPropertyPriority(``name) Devuelve important si tiene prioridad. .removeProperty(``name) Elimina una propiedad CSS de un elemento. El m\u00e9todo que hemos visto anteriormente es .style.setProperty() , con el cu\u00e1l podemos a\u00f1adir ( o modificar ) un valor a una propiedad. Adem\u00e1s, si establecemos el tercer par\u00e1metro con el important , ser\u00eda equivalente a a\u00f1adirle el !important al valor de la propiedad. Por otro lado, tenemos el m\u00e9todo opuesto .style.getPropertyValue() mediante el cu\u00e1l podemos obtener el valor de una propiedad concreta o el m\u00e9todo .style.getPropertyPriority() , con el cu\u00e1l te devuelve el string important si lo tiene definido. Por \u00faltimo, el m\u00e9todo .style.removeProperty() como su propio nombre indica, elimina una propiedad de un elemento. Nota : Ten en cuenta que estas propiedades solo funcionan si los estilos CSS o custom properties han sido definidas a trav\u00e9s del atributo style de CSS o con estos mismos m\u00e9todos ( que lo hacen por la misma v\u00eda ). Fuente: Lenguaje de CSS por Manz","title":"Variables CSS desde Javascript"},{"location":"desarrollo/css/02-modelo_de_cajas/","text":"Modelo de cajas \u00b6 Unidades CSS \u00b6 Antes de comenzar a utilizar propiedades que utilicen medidas, como por ejemplo width ( propiedad que sirve para establecer un ancho a un elemento concreto ), es conveniente conocer los tipos de unidades que pueden utilizarse en CSS para indicar un determinado tama\u00f1o . Existen varios tipos de unidades, vamos a desglosarlas en grupos y explicar cada una de ellas. M\u00e1s adelante veremos las propiedades de CSS que pueden utilizarlas. Unidades absolutas \u00b6 Las unidades absolutas son un tipo de medida fija que no cambia, que no depende de ning\u00fan otro factor. Son ideales en contextos donde las medidas no var\u00edan como pueden ser en medios impresos (documentos, impresiones, etc...), pero son unidades poco flexibles y adecuadas para la web actual, ya que no tienen la capacidad de adaptarse a diferentes resoluciones o pantallas, que es lo que tendemos a hacer hoy en d\u00eda. Sin embargo, el uso de la unidad px es muy recomendable para el desarrollador ( al menos en sus primeros pasos en el dise\u00f1o web ) ya que se trata de una unidad f\u00e1cil de comprender, muy conocida y que nos permitir\u00e1 afianzar conceptos a la vez que profundizamos en el dise\u00f1o web. Las diferentes unidades absolutas que pueden utilizarse en CSS son las siguientes ( de mayor a menor tama\u00f1o ): Unidad Significado Medida aproximada in Pulgadas 1in = 25.4mm cm Cent\u00edmetros 1cm = 10mm pc Picas 1pc = 4.23mm mm Mil\u00edmetros 1mm = 1mm pt Puntos 1pt = 0.35mm px P\u00edxels 1px = 0.26mm Q Cuarto de mm 1Q = 0.248mm Consejo : El punto ( pt ) es una medida que puede utilizarse para documentos CSS en los que se fija el tama\u00f1o de las fuentes en medios impresos. Unidades relativas \u00b6 Las unidades relativas son un tipo de medida m\u00e1s potente en CSS. Al contrario que las unidades absolutas, las unidades relativas dependen de alg\u00fan otro factor ( resoluci\u00f3n, densidad de pantalla, etc... ). Tienen una curva de aprendizaje m\u00e1s compleja, pero son las ideales para trabajar en dispositivos con diferentes tama\u00f1os, ya que son muy flexibles y vers\u00e1tiles: Unidad Significado Medida aproximada em \u00abM\u00bb 1em = tama\u00f1o de fuente establecida en navegador ex \u00abX\u00bb (~0.5em) 1ex = ~ mitad del tama\u00f1o de fuente del navegador ch \u00abzero width\u00bb 1ch = tama\u00f1o de ancho del cero ( 0 ) rem \u00abroot M\u00bb 1rem = tama\u00f1o fuente ra\u00edz % Porcentaje Relativa a herencia (contenedor padre) La unidad em se utiliza para hacer referencia al tama\u00f1o actual de la fuente que ha sido establecido en el navegador, que habitualmente es un valor aproximado de 16px . De esta forma, una cantidad de 1em ser\u00eda este tama\u00f1o establecido por el usuario, mientras que una cantidad de 2em ser\u00eda justo el doble y una cantidad de 0.5em ser\u00eda justo la mitad. Por otro lado, con 1ex establecemos la mitad del tama\u00f1o de la fuente, ya que 1ex = 0.5em . Realmente, la medida ex est\u00e1 basada en la altura de la x min\u00fascula , que es aproximadamente un poco m\u00e1s de la mitad de la fuente actual (depende de la tipograf\u00eda utilizada), o ch , que equivale al tama\u00f1o de ancho del 0 de la fuente actual, aunque en la pr\u00e1ctica es un tipo de unidad que no suele ser utilizada demasiado. Una unidad muy interesante y pr\u00e1ctica para tipograf\u00edas es la unidad rem ( root em ). Esta unidad es muy c\u00f3moda, ya que permite establecer un tama\u00f1o para el documento en general ( utilizando el elemento body o la pseudoclase :root ): body { font-size: 22px; /* Tama\u00f1o general */ } h1 { font-size: 2rem; /* El doble del tama\u00f1o general: 44px */ } h2 { font-size: 1rem; /* El mismo tama\u00f1o general: 22px */ } Posteriormente, podemos ir utilizando la unidad rem en ciertas partes del documento. Con esto, estamos indicando el factor de escala ( respecto al tama\u00f1o general que indicamos en el body ). En el ejemplo anterior, los elementos <h1> tendr\u00e1n 44 p\u00edxels de tama\u00f1o, ya que hemos establecido 2rem , que significa \u00abel doble que el tama\u00f1o general\u00bb. Por otro lado, los elementos <h2> tendr\u00edan el mismo tama\u00f1o: 22 p\u00edxels . Esto nos da una ventaja principal considerable: Si queremos cambiar el tama\u00f1o del texto en general, s\u00f3lo tenemos que cambiar el font-size del elemento body , puesto que el resto de unidades son factores de escalado y se modificar\u00e1n todas en consecuencia al cambio del body . Algo, sin duda, muy pr\u00e1ctico y f\u00e1cil de modificar. En general, en dise\u00f1o web, se recomienda utilizar unidades relativas siempre que sea posible, ya que son unidades mucho m\u00e1s flexibles. Truco : Cuando se especifican valores de unidades iguales a 0 , como por ejemplo 0px , 0em o 0% , podemos omitir las unidades y escribir simplemente 0 , ya que en este caso particular las undidades son redundantes y no aportan valor. Unidades flexibles (viewport) \u00b6 Existen unas unidades de \"nueva generaci\u00f3n\" que resultan muy \u00fatiles, porque dependen del viewport ( regi\u00f3n visible de la p\u00e1gina web en el navegador ). Con estas unidades podemos hacer referencia a un porcentaje concreto del tama\u00f1o espec\u00edfico que tengamos en la ventana del navegador, independientemente de si es redimensionado o no. Las unidades son las siguientes: Unidad Significado Medida aproximada vw viewport width 1vw = 1% ancho de navegador vh viewport height 1vh = 1% alto de navegador vmin viewport minimum 1vmin = 1% de alto o ancho (el m\u00ednimo) vmax viewport maximum 1vmax = 1% de alto o ancho (el m\u00e1ximo) La unidad vw hace referencia al ancho del viewport, mientras que vh hace referencia al alto. Por ejemplo, si utilizamos 100vw estaremos haciendo referencia al 100% del ancho del navegador, o sea, todo lo que se est\u00e1 viendo de ancho en pantalla, mientras que si indicamos 50vw estaremos haciendo referencia a la mitad del ancho del navegador. Por \u00faltimo tenemos vmin y vmax , que simplemente se utilizan para utilizar el porcentaje de ancho o alto del viewport, dependiendo cual sea m\u00e1s peque\u00f1o o m\u00e1s grande de los dos, lo que puede ser \u00fatil en algunas situaciones donde quieres flexibilidad con dise\u00f1os adaptables. Es interesante tener en cuenta que existen una serie de funciones para hacer c\u00e1lculos con unidades CSS. Son las funciones calc() , min() , max() o clamp() , entre otras. Las veremos m\u00e1s adelante, en el cap\u00edtulo de funciones CSS . Modelo de cajas \u00b6 Durante varios a\u00f1os, el denominado modelo de cajas fue una pesadilla para los desarrolladores web, puesto que se mostraba visualmente de forma diferente en Internet Explorer respecto a los dem\u00e1s navegadores. Por fortuna, todos los navegadores actuales ya interpretan de la misma forma el modelo de cajas, pero conviene aprender bien la diferencia para no ser como Internet Explorer. La representaci\u00f3n b\u00e1sica del modelo de cajas es la siguiente, donde podemos observar varios conceptos importantes a diferenciar: El borde ( border ). En negro, es el l\u00edmite que separa el interior del exterior del elemento. El m\u00e1rgen ( margin ). En naranja, es la parte exterior del elemento, por fuera del borde. El relleno ( padding ). En verde, es la parte interior del elemento, entre el contenido y el borde. El contenido ( en azul ). En azul, es la parte interior del elemento, excluyendo el relleno. Dimensiones (ancho y alto) \u00b6 Para dar tama\u00f1os espec\u00edficos a los diferentes elementos de un documento HTML, necesitaremos asignarles valores a las propiedades width (ancho) y height (alto). Propiedad Valor Significado width auto |size Tama\u00f1o de ancho de un elemento. height auto |size Tama\u00f1o de alto de un elemento. En el caso de utilizar el valor auto en las propiedades anteriores ( que es lo mismo que no indicarlas, ya que es el valor que tienen por defecto ), el navegador se encarga de calcular el ancho o alto necesario, dependiendo del contenido del elemento. Esto es algo que tambi\u00e9n puede variar, dependiendo del tipo de elemento que estemos usando, y que veremos m\u00e1s adelante, en el apartado de maquetaci\u00f3n. Hay que ser muy conscientes de que, sin indicar valores de ancho y alto para la caja, el elemento generalmente toma el tama\u00f1o que debe respecto a su contenido, mientras que si indicamos un ancho y alto concretos, estamos obligando a CSS tener un aspecto concreto y podemos obtener resultados similares al siguiente ( conocida broma de CSS ) si su contenido es m\u00e1s grande que el tama\u00f1o que hemos definido: Otra forma de lidiar con esto, es utilizar las propiedades hermanas de width : min-width y max-width y las propiedades hermanas de height : min-height y max-height . Con estas propiedades, en lugar de establecer un tama\u00f1o fijo, establecemos unos m\u00e1ximos y unos m\u00ednimos, donde el ancho o alto podr\u00eda variar entre esos valores. div { width: 800px; height: 400px; background: red; max-width: 500px; } En este caso, por ejemplo, a pesar de estar indicando un tama\u00f1o de 800px , le aplicamos un max-width de 500px , por lo que estamos limitando el elemento a un tama\u00f1o de ancho de 500 p\u00edxeles como m\u00e1ximo y nunca superar\u00e1 ese tama\u00f1o. Por un lado tenemos las propiedades de m\u00ednimos min-width y min-height , que por defecto tienen valor 0 , mientras que por otro lado, tenemos las propiedades de m\u00e1ximos max-width y max-height , que por defecto tienen valor none : Propiedad Valor Significado max-width none |size Ancho m\u00e1ximo que puede ocupar un elemento. min-width 0 |size Ancho m\u00ednimo que puede ocupar un elemento. max-height none |size Alto m\u00e1ximo que puede ocupar un elemento. min-height 0 |size Alto m\u00ednimo que puede ocupar un elemento. Zonas de un elemento \u00b6 Antes de continuar, es importante saber que en CSS existen ciertas palabras clave para hacer referencia a una zona u orientaci\u00f3n concreta sobre un elemento. Son conceptos muy sencillos y pr\u00e1cticamente l\u00f3gicos, por lo que no tendr\u00e1s ning\u00fan problema en comprenderlos. Son los siguientes: Top : Se refiere a la parte superior del elemento. Left : Se refiere a la parte izquierda del elemento. Right : Se refiere a la parte derecha del elemento. Bottom : Se refiere a la parte inferior del elemento. Center : En algunos casos se puede especificar el valor center para referirse a la posici\u00f3n central entre los extremos horizontales o verticales. Estas palabras clave las utilizaremos muy a menudo en diferentes propiedades CSS para hacer referencia a una zona particular. Desbordamiento \u00b6 Volvamos a pensar en la situaci\u00f3n de la imagen anterior: Damos un tama\u00f1o de ancho y alto a un elemento HTML, pero su contenido de texto es tan grande que no cabe dentro de ese elemento. \u00bfQu\u00e9 ocurrir\u00eda? Probablemente lo que vimos en la imagen: el contenido se desbordar\u00eda. Podemos modificar ese comportamiento con la propiedad de CSS overflow , o con alguna de sus propiedades espec\u00edficas overflow-x o overflow-y : Propiedad Valor Significado overflow visible | hidden | scroll | auto Establece el comportamiento de desbordamiento. overflow-x visible | hidden | scroll | auto Establece el desbordamiento s\u00f3lo para el eje X ( horizontal ). overflow-y visible | hidden | scroll | auto Establece el desbordamiento s\u00f3lo para el eje Y ( vertical ). Dichas propiedades pueden tomar varios valores, donde visible es el valor que tiene por defecto, que permite que haya desbordamiento. Otras opciones son las siguientes, donde no se permite desbordamiento : Valor \u00bfQu\u00e9 ocurre si se desborda el contenedor? \u00bfDesbordamiento? visible Se muestra el contenido que sobresale ( comportamiento por defecto ) S\u00ed hidden Se oculta el contenido que sobresale. No scroll Se colocan barras de desplazamiento (horizontales y verticales). No auto Se colocan barras de desplazamiento (s\u00f3lo las necesarias). No Nota : CSS3 a\u00f1ade las propiedades overflow-x y overflow-y para cada eje individual, que antiguamente solo era posible hacerlo con overflow para ambos ejes. Estas propiedades son \u00fatiles cuando no quieres mostrar alguna barra de desplazamiento, habitualmente, la barra de desplazamiento horizontal. M\u00e1rgenes y rellenos \u00b6 En el modelo de cajas, los m\u00e1rgenes ( margin ) son los espacios exteriores de un elemento. El espacio que hay entre el borde de un elemento y el borde de otros elementos adyacentes, es lo que se considera m\u00e1rgen. M\u00e1rgenes \u00b6 Dichos m\u00e1rgenes se pueden considerar en conjunto ( de forma general ) o de forma concreta en cada una de las zonas del elemento. Veamos primero las propiedades espec\u00edficas para cada zona: Propiedad |ValorSignificado :---|:---|:--- margin-top | auto |size|Establece un tama\u00f1o de margen superior. margin-left | auto |size|Establece un tama\u00f1o de margen a la izquierda. margin-right | auto |size|Establece un tama\u00f1o de margen a la derecha. margin-bottom | auto |size|Establece un tama\u00f1o de margen inferior. Podemos aplicar diferentes m\u00e1rgenes a cada zona de un elemento utilizando cada una de estas propiedades, o dejando al nevegador que lo haga de forma autom\u00e1tica indicando el valor auto . Truco : Existe un truco muy sencillo y pr\u00e1ctico para centrar un elemento en pantalla. Basta con aplicar un ancho fijo al contenedor, width:500px ( por ejemplo ) y luego aplicar un margin:auto . De esta forma, el navegador, al conocer el tama\u00f1o del elemento ( y por omisi\u00f3n, el resto del tama\u00f1o de la ventana ) se encarga de repartirlo equitativamente entre el margen izquierdo y el margen derecho, quedando centrado el elemento. Hay que recordar diferenciar bien los m\u00e1rgenes de los rellenos , puesto que no son la misma cosa. Los rellenos ( padding ) son los espacios que hay entre los bordes del elemento en cuesti\u00f3n y el contenido del elemento ( por la parte interior ). Mientras que los m\u00e1rgenes ( margin ) son los espacios que hay entre los bordes del elemento en cuesti\u00f3n y los bordes de otros elementos ( parte exterior ). Observese tambi\u00e9n el siguiente ejemplo para ilustrar el solapamiento de m\u00e1rgenes . Por defecto, si tenemos dos elementos adyacentes con, por ejemplo, margin: 20px cada uno, ese espacio de margen se solapar\u00e1 y tendremos 20px en total, y no 40px ( la suma de cada uno ) como podr\u00edamos pensar en un principio. Rellenos \u00b6 Al igual que con los m\u00e1rgenes, los rellenos tienen varias propiedades para indicar cada zona: Propiedad Valor Significado padding-top 0 |size Aplica un relleno interior en el espacio superior de un elemento. padding-left 0 |size Aplica un relleno interior en el espacio izquierdo de un elemento. padding-right 0 |size Aplica un relleno interior en el espacio derecho de un elemento. padding-bottom 0 |size Aplica un relleno interior en el espacio inferior de un elemento. Como se puede ver en la tabla, por defecto no hay relleno ( el relleno est\u00e1 a cero ), aunque puede modificarse tanto con las propiedades anteriores como la propiedad de atajo que veremos a continuaci\u00f3n. Atajo: Modelo de cajas \u00b6 Al igual que en otras propiedades de CSS, tambi\u00e9n existen atajos para los m\u00e1rgenes y los rellenos: Propiedad Valores Significado margin 1 par\u00e1metro. Aplica el mismo margen a todos los lados. 2 par\u00e1metros. Aplica margen top/bottom y left/right . 3 par\u00e1metros. Aplica margen top , left/right y bottom . 4 par\u00e1metros. Aplica margen top , right , bottom e left . Con las propiedades padding y border-width pasa exactamente lo mismo, actuando en relaci\u00f3n a los rellenos , en lugar de los m\u00e1rgenes en el primer caso, y en relaci\u00f3n al grosor del borde de un elemento en el segundo. !!!! Ojo Aunque al principio es muy tentador utilizar m\u00e1rgenes negativos para ajustar posiciones y colocar los elementos como queremos, se aconseja no utilizar dicha estrategia salvo para casos muy particulares, ya que a la larga es una mala pr\u00e1ctica que har\u00e1 que nuestro c\u00f3digo sea de peor calidad. Bordes CSS \u00b6 En CSS es posible especificar el aspecto que tendr\u00e1n los bordes de cualquier elemento, pudiendo incluso, dar valores distintos a las diferentes zonas predeterminadas del elemento (zona superior, izquierda, derecha o zona inferior). Las propiedades b\u00e1sicas existentes de los bordes en CSS son las siguientes: Propiedad Valor Significado border-color 1234 Especifica el color que se utilizar\u00e1 en el borde. border-width thin | medium | thick |size Especifica un tama\u00f1o predefinido para el grosor del borde. border-style 1234 none | style Define el estilo para el borde a utilizar (ver m\u00e1s adelante). En primer lugar, border-color establece el color del borde, de la misma forma que lo hicimos en apartados anteriores de colores. En segundo lugar, con border-width podemos establecer la anchura o grosor del borde utilizando tanto palabras clave predefinidas como un tama\u00f1o concreto con cualquier tipo de las unidades ya vistas. Estilos de borde \u00b6 Por \u00faltimo, con border-style podemos aplicar un estilo determinado al borde de un elemento. En estilo de borde podemos elegir cualquiera de las siguientes opciones: Valor Descripci\u00f3n hidden Oculto. Id\u00e9ntico al anterior salvo para conflictos con tablas. dotted Establece un borde basado en puntos. dashed Establece un borde basado en rayas (l\u00ednea discont\u00ednua). solid Establece un borde s\u00f3lido (l\u00ednea cont\u00ednua). double Establece un borde doble (dos l\u00edneas cont\u00ednuas). groove Establece un borde biselado con luz desde arriba. ridge Establece un borde biselado con luz desde abajo. Opuesto a groove . inset Establece un borde con profundidad \u00abhacia dentro\u00bb. outset Establece un borde con profundidad \u00abhacia fuera\u00bb. Opuesto a inset . Veamos un ejemplo sencillo: div { border-color: gray; border-width: 1px; border-style: dotted; } Sin embargo, el borde m\u00e1s frecuente suele ser solid , que no es m\u00e1s que un borde liso. Pueden utilizarse cualquiera de los estilos indicados en la tabla anterior. Veamos como se ver\u00edan los diferentes estilos de borde utilizando 10 p\u00edxels de grosor y color gris : Bordes m\u00faltiples (diferentes) \u00b6 Hasta ahora, s\u00f3lo hemos utilizado un par\u00e1metro en cada propiedad, lo que significa que se aplica el mismo valor para cada borde de un elemento ( borde superior, borde derecho, borde inferior y borde izquierdo ). Sin embargo, podemos especificar uno, dos, tres o cuatro par\u00e1metros, dependiendo de lo que queramos hacer: Propiedad Valor Significado border-color 1 par\u00e1metro. Aplica el mismo color a todos los bordes. 2 par\u00e1metros. Aplica al borde top/bottom , y al left/right . 3 par\u00e1metros. Aplica al top , al left/right y al bottom . 4 par\u00e1metros. Aplica al top , right , bottom y left . De la misma forma, podemos hacer exactamente lo mismo con las propiedades border-width ( respecto al ancho del borde ) y border-style ( respecto al estilo del borde ). Teniendo en cuenta esto, disponemos de mucha flexibilidad a la hora de especificar esquemas de bordes m\u00e1s complejos: div { border-color: red blue green; border-width: 2px 10px 5px; border-style: solid dotted solid; } En el ejemplo anterior hemos utilizado 3 par\u00e1metros, indicando un elemento con borde superior rojo s\u00f3lido de 2 p\u00edxeles de grosor, con borde izquierdo y derecho punteado azul de 10 p\u00edxeles de grosor y con un borde inferior verde s\u00f3lido de 5 p\u00edxeles de grosor. Atajo: Bordes \u00b6 Pero ya habremos visto que con tantas propiedades, para hacer algo relativamente sencillo, nos pueden quedar varias lineas de c\u00f3digo complejas y dif\u00edciles de leer. Al igual que con otras propiedades CSS, podemos utilizar la propiedad de atajo border , con la que podemos hacer un resumen y no necesitar utilizar las propiedades individuales por separado, realizando el proceso de forma m\u00e1s corta: Propiedad Valor Significado border size - style - color Propiedad de atajo para simplificar valores. Por ejemplo: div { border: 1px solid #000000; } As\u00ed pues, estamos aplicando un borde de 1 p\u00edxel de grosor, estilo s\u00f3lido y color negro a todos los bordes del elemento, ahorrando mucho espacio y escribi\u00e9ndolo todo en una sola propiedad. Consejo : Intenta organizarte y aplicar siempre los atajos si es posible. Ahorrar\u00e1s mucho espacio en el documento y simplificar\u00e1s la creaci\u00f3n de dise\u00f1os. El orden, aunque no es obligatorio, si es recomendable para mantener una cierta coherencia con el estilo de c\u00f3digo. Bordes espec\u00edficos \u00b6 Otra forma, quiz\u00e1s m\u00e1s intuitiva, es la de utilizar las propiedades de bordes espec\u00edficos ( por zonas ) y aplicar estilos combin\u00e1ndolos junto a la herencia de CSS . Para utilizarlas bastar\u00eda con indicarle la zona justo despu\u00e9s de border- : div { border-bottom-width: 2px; border-bottom-style: dotted; border-bottom-color: black; } Esto dibujar\u00eda s\u00f3lo un borde inferior negro de 2 p\u00edxeles de grosor y con estilo punteado. Ahora imaginemos que queremos un elemento con todos los bordes en rojo a 5 p\u00edxeles de grosor, salvo el borde superior, que lo queremos con un borde de 15 p\u00edxeles en color naranja. Podr\u00edamos hacer lo siguiente: div { border: 5px solid red; border-top-width: 15px; border-top-color: orange; border-top-style: solid; /* Esta propiedad no es necesaria (se hereda) */ } El ejemplo anterior conseguir\u00eda nuestro objetivo. La primera propiedad establece todos los bordes del elemento, sin embargo, las siguientes propiedades modifican s\u00f3lo el borde superior, cambi\u00e1ndolo a las caracter\u00edsticas indicadas. Recuerda que tambi\u00e9n existen atajos para estas propiedades de bordes en zonas concretas, lo que nos permite simplificar a\u00fan m\u00e1s el ejemplo anterior, haci\u00e9ndolo m\u00e1s f\u00e1cil de comprender: div { border: 5px solid red; border-top: 15px solid orange; } Ojo : Es muy importante entender como se est\u00e1 aplicando la herencia en los ejemplos anteriores, puesto que es una de las caracter\u00edsticas m\u00e1s complejas de dominar de CSS junto a la cascada. Por ejemplo, si colocaramos el border-top antes del border , este \u00faltimo sobreescribir\u00eda los valores de border-top y no funcionar\u00eda de la misma forma. Esquinas redondeadas \u00b6 CSS3 a\u00f1ade interesantes caracter\u00edsticas en materia de bordes, como la posibilidad de crear bordes con esquinas redondeadas , caracter\u00edstica que en versiones anteriores de CSS era muy complicado de lograr, necesitando recurrir al apoyo de im\u00e1genes gr\u00e1ficas. Por su parte, en CSS3 es realmente sencillo hacerlo mediante c\u00f3digo. Basta utilizar la propiedad border-radius , con la cual podr\u00e1s especificar un radio para el borde de las esquinas. Por defecto, este borde es de tama\u00f1o 0 , por lo que no hay borde redondeado. A medida que se aumenta este valor, el borde se redondea m\u00e1s. Una vez llegado a su m\u00e1ximo, no se apreciar\u00e1 ning\u00fan cambio. Hay varias formas de especificar el radio de las esquinas: Propiedad Valor Significado border-radius 1 par\u00e1metro. Aplica el radio a todas y cada una de las esquinas. 2 par\u00e1metros: top-left + bottom-right y a top-right + bottom-left . 3 par\u00e1metros: top-left , a top-right y bottom-left y a bottom-right . 4 par\u00e1metros. Orden de las agujas del reloj, empezando por top-left . El primer formato , un \u00fanico par\u00e1metro, aplica ese tama\u00f1o a todas las esquinas del borde. El segundo formato , con dos par\u00e1metros, aplica el primer valor, e1 , a las esquinas superior-izquierda e inferior-derecha, y el segundo valor, e2 , a las esquinas superior-derecha e inferior-izquierda. En el tercer formato , se aplica el par\u00e1metro e1 a la esquina superior-izquierda, el par\u00e1metro e2 a las esquinas superior-derecha e inferior-izquierda y el par\u00e1metro e3 a la esquina inferior-derecha. Y por \u00faltimo, en el cuarto formato , se aplica el tama\u00f1o de cada valor a cada esquina por separado, en el sentido de las agujas del reloj. O lo que es lo mismo, e1 a la esquina superior-izquierda, e2 a la esquina superior-derecha, e3 a la esquina inferior-derecha y e4 a la esquina inferior-izquierda. A modo de ejemplo te\u00f3rico, pueden ver un ejemplo de la aplicaci\u00f3n de varios formatos: div { border-radius: 25px; /* Formato con un par\u00e1metro */ border-radius: 25% 50%; /* Formato con dos par\u00e1metros */ border-radius: 50px 25px 10px; /* Formato con tres par\u00e1metros */ border-radius: 25px 0 15px 50px; /* Formato con cuatro par\u00e1metros */ } Esquinas irregulares \u00b6 Truco : Es posible diferenciar el radio horizontal del radio vertical de una esquina determinada, creando una esquina redondeada irregular. Para conseguirlo, no hay m\u00e1s que a\u00f1adir una barra ( / ) y repetir nuevamente el n\u00famero de par\u00e1metros escogido. De esta forma, los par\u00e1metros a la izquierda de la barra representan el radio horizontal, mientras que los que est\u00e1n a la derecha, representan el radio vertical. div { /* Usando el segundo formato */ border-radius: 5px 50px / 50px 15px; } Esquinas espec\u00edficas \u00b6 De la misma forma que hemos visto con anterioridad en otras propiedades CSS similares, tambi\u00e9n es posible especificar los valores de cada esquina mediante propiedades por separado: Propiedad Valor Significado border-top-left-radius Indica un radio para redondear la esquina top-left . border-top-right-radius Indica un radio para redondear la esquina top-right . border-bottom-left-radius Indica un radio para redondear la esquina bottom-left . border-bottom-right-radius Indica un radio para redondear la esquina bottom-right . Estas propiedades son ideales para aplicar junto a la herencia de CSS y sobreescribir valores espec\u00edficos. Bordes con im\u00e1genes \u00b6 Una de las limitaciones que ten\u00eda CSS, es que, si en lugar de utilizar los bordes de los que disponemos en CSS ( s\u00f3lidos, punteados, etc... ) quisieramos hacer algo un poco m\u00e1s complejo con im\u00e1genes, podr\u00eda volverse una tarea muy complicada. Por esa raz\u00f3n, CSS3 incorpor\u00f3 en su momento un sistema para crear bordes extensibles basados en una imagen de molde. La t\u00e9cnica 9-slice \u00b6 Dicho sistema se denomina 9-slice ( muy utilizado en videojuegos ) y se basa en delimitar una imagen trazando cuatro l\u00edneas ( en rojo ). Esto har\u00e1 que la imagen quede dividida en 9 fragmentos, donde el fragmento central es descartado y el resto es utilizado de molde para los bordes de un elemento: De esta forma, los fragmentos 1 , 3 , 7 y 9 se utilizar\u00e1n para las esquinas y los fragmentos 2 , 4 , 6 y 8 se utilizar\u00e1n para los bordes laterales, pudiendo expandirlos si se requiere y considera necesario con alguna de las propiedades que veremos a continuaci\u00f3n. Vamos a utilizar la siguiente imagen expandible ( a la izquierda ), que simula ser un antiguo carrete fotogr\u00e1fico, como imagen de borde. Las l\u00edneas rojas no forman parte de la imagen original, sino que se utilizan en este ejemplo para dejar claro cu\u00e1les ser\u00edan los l\u00edmites marcados con border-image-slice . Una vez hecho esto, conseguiremos el resultado de la imagen de la derecha, en el cu\u00e1l podremos ampliar el texto del elemento lo que queramos, que se adaptar\u00e1 solo a su contenido: Para ello, utilizaremos el siguiente c\u00f3digo CSS, donde antes que nada, establecemos un ancho al elemento con width y un border b\u00e1sico para que, en el caso de navegadores que no soporten border-image , tenga al menos un borde b\u00e1sico y nos sirva tambi\u00e9n como base a lo que vamos a hacer a continuaci\u00f3n: .borde { width: 200px; border: 42px solid black; border-image-width: 1; border-image-source: url(https://i.imgur.com/YC5PUl6.png); border-image-slice: 23%; border-image-repeat: round; } Para establecer los l\u00edmites y poder utilizar im\u00e1genes en los bordes, hemos hecho uso de las siguientes propiedades de CSS: Propiedad Valor Significado border-image-width 1 | | | auto Grosor de la imagen de borde. border-image-source none | url( imagen.png ) Imagen a utilizar de molde para el 9-slice. border-image-slice 100% | | | fill Tama\u00f1o de los bordes en la imagen. border-image-outset 0 | Tama\u00f1o en el que el borde crece hacia fuera. La propiedad border-image-width indica el tama\u00f1o que tendr\u00e1 el borde de la imagen. El tama\u00f1o puede ser indicado con unidades ( p\u00edxeles o porcentajes, por ejemplo ) o sin ellas, lo que lo tomar\u00e1 como m\u00faltiplo del tama\u00f1o indicado en border-width . En nuestro ejemplo, tanto indicarle un valor de 1 como dejarlo sin especificar, ser\u00eda decirle que el tama\u00f1o del borde de la imagen ser\u00e1 de 42px , pero por ejemplo, si indicamos border-image-width: 2 , le estaremos indicando que use un tama\u00f1o de 84px . Al igual que vimos en el apartado de margin se puede indicar 1, 2, 3 o 4 par\u00e1metros . Consejo: No olvides que hay que indicar tambi\u00e9n un border-width y un border-style para que el borde CSS est\u00e9 definido y se pueda visualizar. La propiedad border-image-source establece, mediante la expresi\u00f3n url() , la imagen que vamos a utilizar para crear nuestro borde con im\u00e1genes. Truco : \u00a1Como imagen de fondo puedes utilizar un gradiente de CSS , ya que internamente se interpretan como im\u00e1genes! La propiedad border-image-slice define la posici\u00f3n de las l\u00edneas divisorias de la imagen, o lo que es lo mismo, el tama\u00f1o de los bordes. Por defecto, el valor es de 100% ( tama\u00f1o de ancho completo de la imagen ), pero tambi\u00e9n podemos usar n\u00fameros sin unidad, que simbolizan p\u00edxeles de recorte. Se pueden especificar 1, 2, 3 \u00f3 4 par\u00e1metros. Por otro lado, el valor opcional fill sirve para indicar que quieres rellenar el elemento con el fondo del fragmento 5 , que por defecto es descartado. \u00datil en casos que quieras aprovechar el fondo. En nuestro caso, nos podr\u00eda valer tanto con 110 ( 110 p\u00edxeles de recorte ) como con 23% , ya que es m\u00e1s o menos la cantidad apropiada para establecer el l\u00edmite tanto de ancho como de alto. La propiedad border-image-outset establece el factor de crecimiento ( hacia fuera ) de la imagen. Muy \u00fatil para compensar la imagen si se extiende hasta el contenido. Usar con cuidado, ya que puede desplazar el contenido. Por defecto no tiene desplazamiento. Modo de repetici\u00f3n \u00b6 Habremos comprobado que en algunas ocasiones, el modo en que se repite la imagen de borde no es la apropiada, o al menos, no es la que m\u00e1s se adapta a nuestro caso espec\u00edfico. Este comportamiento se puede variar mediante la propiedad border-image-repeat : Propiedad Valor Significado border-image-repeat [ repetici\u00f3n en X e Y ] 1 par\u00e1metro. Comportamiento de repetici\u00f3n en ambos ejes. [ rep. en X ] [ rep. en Y ] 2 par\u00e1metros. Comportamiento de repetici\u00f3n por separado. Con dicha propiedad se establece como deben comportarse los fragmentos del borde y el tipo de repetici\u00f3n que deben efectuar. Se puede usar la modalidad de un par\u00e1metro en la que se aplica a todos los bordes, o la modalidad de dos par\u00e1metros donde estableces diferente comportamiento para los bordes horizontales y verticales. Esta propiedad puede tomar los siguientes valores: Valor Significado stretch Los bordes se estiran hasta rellenar el \u00e1rea. Es el valor por defecto. repeat Los bordes se repiten hasta rellenar el \u00e1rea. round Igual que repeat , pero estira los fragmentos individualmente hasta rellenar el \u00e1rea completa. space Igual que repeat , pero a\u00f1ade espacios hasta rellenar el \u00e1rea completa. Para verlo m\u00e1s claramente, echemos un vistazo a esta representaci\u00f3n visual del comportamiento de cada uno: Es importante recalcar los dos \u00faltimos valores ( round y space ) act\u00faan igual que repeat , pero con un comportamiento ligeramente diferente que nos puede interesar en el caso de que la zona repetida quede descompensada. Utilizando la imagen y c\u00f3digo CSS anterior, obtendr\u00edamos un resultado similar a este, que se adaptar\u00eda s\u00f3lo al contenido que escribamos dentro del elemento HTML con clase borde : Atajo: Bordes con im\u00e1genes \u00b6 Como suele ser costumbre, este tipo de propiedades tienen una propiedad para ahorrar espacio y escribirlo todo de una sola vez. En este caso, la sintaxis es la siguiente: div { /* border-image: <source> <slice> <width> <outset> <repeat> */ border-image: url(https://i.imgur.com/YC5PUl6.png) 23% 1 0 round; } Funciones CSS \u00b6 En CSS, muchas veces necesitaremos un sistema de apoyo para realizar operaciones m\u00e1s cercanas a un lenguaje de programaci\u00f3n que a un lenguaje de estilos, como pueden ser c\u00e1lculos o utilizar valores precalculados . Por esta raz\u00f3n, con el tiempo, se han ido a\u00f1adiendo mejoras, como las custom properties, un mecanismo similar a unas variables CSS . En este art\u00edculo vamos a ver algunas funciones CSS , que no son m\u00e1s que funciones de apoyo que podemos utilizar en CSS para realizar c\u00e1lculos u operaciones sencillas de una forma f\u00e1cil y sencilla, sin tener que abandonar CSS. Un resumen de las funciones CSS que veremos: Funci\u00f3n CSS Descripci\u00f3n calc() Permite calcular operaciones con unidades CSS como px , % , vw , vh u otras. min() Permite calcular el valor m\u00ednimo de las unidades indicadas. max() Permite calcular el valor m\u00e1ximo de las unidades indicadas. clamp() Permite calcular valores \u00abajustados\u00bb. Equivalente a max( MIN , min( VAL , MAX )) . attr() Permite obtener el valor de un atributo desde CSS. Valores calculados: Funci\u00f3n calc() \u00b6 Es posible que en algunas ocasiones necesitemos indicar valores precalculados por el navegador. Por ejemplo, la suma de dos valores que a priori desconocemos o no sabemos exactamente cuanto suman, pero que el navegador si deber\u00eda conocer. Esto es posible hacerlo con la funci\u00f3n calc() de CSS, como se muestra a continuaci\u00f3n: .elemento { width: calc(200px + 1em); height: 300px; background: blue; } Como se puede ver, se pueden usar operaciones como sumas ( + ), restas ( - ), multiplicaciones ( * ) o divisiones ( / ) que utilicen alguna de las unidades soportadas por CSS, como por ejemplo, n\u00fameros, dimensiones, porcentajes, tiempos, \u00e1ngulos, etc... Ten en cuenta que tambi\u00e9n se pueden anidar funciones calc() una dentro de otra. Resulta especialmente interesante su utilizaci\u00f3n junto a variables (custom properties CSS). Valor m\u00ednimo: Funci\u00f3n min() \u00b6 En algunas ocasiones, necesitaremos que en una propiedad se aplique un valor de varias posibilidades posibles. De dichas posibilidades, no sabremos exactamente cu\u00e1l necesitamos, pero si sabremos una de sus cualidades: es la m\u00e1s peque\u00f1a , es decir, necesitamos el valor m\u00ednimo. CSS permite realizar esto utilizando la funci\u00f3n min() que nos permite elegir el valor m\u00e1s peque\u00f1o de 2 o m\u00e1s posibilidades aplicadas por par\u00e1metro: .elemento { width: min(200px, 25%); height: 200px; background: red; } Esto aplicar\u00eda un width de 200px , siempre y cuando el 25% del elemento padre sea m\u00e1s grande de 200px . Todo este c\u00e1lculo, generalmente realizado en Javascript debido a su cualidad de l\u00f3gica de c\u00e1lculo, puede realizarse desde CSS si s\u00f3lo se utiliza exclusivamente para esta finalidad. Valor m\u00e1ximo: Funci\u00f3n max() \u00b6 De la misma forma que tenemos una funci\u00f3n min() , tambi\u00e9n tenemos una funci\u00f3n max() . Como podemos imaginar, dicha funci\u00f3n sirve para lo opuesto de la funci\u00f3n min() : obtener el valor m\u00e1ximo entre varias posibilidades. Observa el siguiente ejemplo, donde utilizamos m\u00e1s de 2 par\u00e1metros ( ambas funciones permiten m\u00faltiples valores, no necesariamente dos ): .elemento { width: max(200px - 100px, 25%, 14vw); height: 200px; background: red; } Observa que como se ve en el ejemplo en 200px - 100px , tanto en min() como en max() , puedes realizar operaciones directamente en su interior sin necesidad de utilizar la funci\u00f3n calc() . Valor ajustado: Funci\u00f3n clamp() \u00b6 Ahora pensemos en un caso que podr\u00edamos necesitar y que se puede volver algo poco legible. Imagina que necesitas obtener el valor m\u00ednimo Con la funci\u00f3n clamp() podemos realizar, de forma concisa la operaci\u00f3n max(MIN, min(VAL, MAX)) . Veamos un ejemplo: .elemento { width: max(100px, min(25%, 300px)); width: clamp(100px, 25%, 300px); height: 200px; background: red; } Observa que existen dos l\u00edneas con un width . Ambas l\u00edneas son equivalentes. El primer valor de clamp() ser\u00eda el valor m\u00ednimo , mientras que el tercero es el valor m\u00e1ximo . De esta forma, el navegador realiza lo siguiente: Obtiene el valor m\u00ednimo entre el segundo y tercer par\u00e1metro. Obtiene el valor m\u00e1ximo entre el primer par\u00e1metro y el resultado anterior. Utiliza el resultado de la operaci\u00f3n anterior en el width . El soporte en navegadores de estas 3 \u00faltimas funciones es el siguiente: Valor del atributo: Funci\u00f3n attr() \u00b6 Aunque no es de g\u00e9nero matem\u00e1tico como las anteriores, existe la funci\u00f3n CSS attr() , que es algo m\u00e1s particular, ya que permite obtener el valor de un atributo HTML y utilizarlo desde CSS, generalmente para temas de decoraci\u00f3n. Por ejemplo, observa el siguiente fragmento de c\u00f3digo: <div class=\"element\" data-author=\"Manz\"></div> <style> .element::before { content: attr(data-author); font-size: 22px; color: #444; } </style> Por medio de una pseudoclase CSS , utilizando la propiedad content , le pedimos al navegador que utilice el metadato del atributo data-author del elemento donde se le est\u00e1 aplicando el CSS para mostrarlo como contenido. Esta funci\u00f3n CSS es la m\u00e1s antigua y la mejor soportada en navegadores: Fuente: Lenguaje de CSS por Manz","title":"Modelo de cajas"},{"location":"desarrollo/css/02-modelo_de_cajas/#modelo-de-cajas","text":"","title":"Modelo de cajas"},{"location":"desarrollo/css/02-modelo_de_cajas/#unidades-css","text":"Antes de comenzar a utilizar propiedades que utilicen medidas, como por ejemplo width ( propiedad que sirve para establecer un ancho a un elemento concreto ), es conveniente conocer los tipos de unidades que pueden utilizarse en CSS para indicar un determinado tama\u00f1o . Existen varios tipos de unidades, vamos a desglosarlas en grupos y explicar cada una de ellas. M\u00e1s adelante veremos las propiedades de CSS que pueden utilizarlas.","title":"Unidades CSS"},{"location":"desarrollo/css/02-modelo_de_cajas/#unidades-absolutas","text":"Las unidades absolutas son un tipo de medida fija que no cambia, que no depende de ning\u00fan otro factor. Son ideales en contextos donde las medidas no var\u00edan como pueden ser en medios impresos (documentos, impresiones, etc...), pero son unidades poco flexibles y adecuadas para la web actual, ya que no tienen la capacidad de adaptarse a diferentes resoluciones o pantallas, que es lo que tendemos a hacer hoy en d\u00eda. Sin embargo, el uso de la unidad px es muy recomendable para el desarrollador ( al menos en sus primeros pasos en el dise\u00f1o web ) ya que se trata de una unidad f\u00e1cil de comprender, muy conocida y que nos permitir\u00e1 afianzar conceptos a la vez que profundizamos en el dise\u00f1o web. Las diferentes unidades absolutas que pueden utilizarse en CSS son las siguientes ( de mayor a menor tama\u00f1o ): Unidad Significado Medida aproximada in Pulgadas 1in = 25.4mm cm Cent\u00edmetros 1cm = 10mm pc Picas 1pc = 4.23mm mm Mil\u00edmetros 1mm = 1mm pt Puntos 1pt = 0.35mm px P\u00edxels 1px = 0.26mm Q Cuarto de mm 1Q = 0.248mm Consejo : El punto ( pt ) es una medida que puede utilizarse para documentos CSS en los que se fija el tama\u00f1o de las fuentes en medios impresos.","title":"Unidades absolutas"},{"location":"desarrollo/css/02-modelo_de_cajas/#unidades-relativas","text":"Las unidades relativas son un tipo de medida m\u00e1s potente en CSS. Al contrario que las unidades absolutas, las unidades relativas dependen de alg\u00fan otro factor ( resoluci\u00f3n, densidad de pantalla, etc... ). Tienen una curva de aprendizaje m\u00e1s compleja, pero son las ideales para trabajar en dispositivos con diferentes tama\u00f1os, ya que son muy flexibles y vers\u00e1tiles: Unidad Significado Medida aproximada em \u00abM\u00bb 1em = tama\u00f1o de fuente establecida en navegador ex \u00abX\u00bb (~0.5em) 1ex = ~ mitad del tama\u00f1o de fuente del navegador ch \u00abzero width\u00bb 1ch = tama\u00f1o de ancho del cero ( 0 ) rem \u00abroot M\u00bb 1rem = tama\u00f1o fuente ra\u00edz % Porcentaje Relativa a herencia (contenedor padre) La unidad em se utiliza para hacer referencia al tama\u00f1o actual de la fuente que ha sido establecido en el navegador, que habitualmente es un valor aproximado de 16px . De esta forma, una cantidad de 1em ser\u00eda este tama\u00f1o establecido por el usuario, mientras que una cantidad de 2em ser\u00eda justo el doble y una cantidad de 0.5em ser\u00eda justo la mitad. Por otro lado, con 1ex establecemos la mitad del tama\u00f1o de la fuente, ya que 1ex = 0.5em . Realmente, la medida ex est\u00e1 basada en la altura de la x min\u00fascula , que es aproximadamente un poco m\u00e1s de la mitad de la fuente actual (depende de la tipograf\u00eda utilizada), o ch , que equivale al tama\u00f1o de ancho del 0 de la fuente actual, aunque en la pr\u00e1ctica es un tipo de unidad que no suele ser utilizada demasiado. Una unidad muy interesante y pr\u00e1ctica para tipograf\u00edas es la unidad rem ( root em ). Esta unidad es muy c\u00f3moda, ya que permite establecer un tama\u00f1o para el documento en general ( utilizando el elemento body o la pseudoclase :root ): body { font-size: 22px; /* Tama\u00f1o general */ } h1 { font-size: 2rem; /* El doble del tama\u00f1o general: 44px */ } h2 { font-size: 1rem; /* El mismo tama\u00f1o general: 22px */ } Posteriormente, podemos ir utilizando la unidad rem en ciertas partes del documento. Con esto, estamos indicando el factor de escala ( respecto al tama\u00f1o general que indicamos en el body ). En el ejemplo anterior, los elementos <h1> tendr\u00e1n 44 p\u00edxels de tama\u00f1o, ya que hemos establecido 2rem , que significa \u00abel doble que el tama\u00f1o general\u00bb. Por otro lado, los elementos <h2> tendr\u00edan el mismo tama\u00f1o: 22 p\u00edxels . Esto nos da una ventaja principal considerable: Si queremos cambiar el tama\u00f1o del texto en general, s\u00f3lo tenemos que cambiar el font-size del elemento body , puesto que el resto de unidades son factores de escalado y se modificar\u00e1n todas en consecuencia al cambio del body . Algo, sin duda, muy pr\u00e1ctico y f\u00e1cil de modificar. En general, en dise\u00f1o web, se recomienda utilizar unidades relativas siempre que sea posible, ya que son unidades mucho m\u00e1s flexibles. Truco : Cuando se especifican valores de unidades iguales a 0 , como por ejemplo 0px , 0em o 0% , podemos omitir las unidades y escribir simplemente 0 , ya que en este caso particular las undidades son redundantes y no aportan valor.","title":"Unidades relativas"},{"location":"desarrollo/css/02-modelo_de_cajas/#unidades-flexibles-viewport","text":"Existen unas unidades de \"nueva generaci\u00f3n\" que resultan muy \u00fatiles, porque dependen del viewport ( regi\u00f3n visible de la p\u00e1gina web en el navegador ). Con estas unidades podemos hacer referencia a un porcentaje concreto del tama\u00f1o espec\u00edfico que tengamos en la ventana del navegador, independientemente de si es redimensionado o no. Las unidades son las siguientes: Unidad Significado Medida aproximada vw viewport width 1vw = 1% ancho de navegador vh viewport height 1vh = 1% alto de navegador vmin viewport minimum 1vmin = 1% de alto o ancho (el m\u00ednimo) vmax viewport maximum 1vmax = 1% de alto o ancho (el m\u00e1ximo) La unidad vw hace referencia al ancho del viewport, mientras que vh hace referencia al alto. Por ejemplo, si utilizamos 100vw estaremos haciendo referencia al 100% del ancho del navegador, o sea, todo lo que se est\u00e1 viendo de ancho en pantalla, mientras que si indicamos 50vw estaremos haciendo referencia a la mitad del ancho del navegador. Por \u00faltimo tenemos vmin y vmax , que simplemente se utilizan para utilizar el porcentaje de ancho o alto del viewport, dependiendo cual sea m\u00e1s peque\u00f1o o m\u00e1s grande de los dos, lo que puede ser \u00fatil en algunas situaciones donde quieres flexibilidad con dise\u00f1os adaptables. Es interesante tener en cuenta que existen una serie de funciones para hacer c\u00e1lculos con unidades CSS. Son las funciones calc() , min() , max() o clamp() , entre otras. Las veremos m\u00e1s adelante, en el cap\u00edtulo de funciones CSS .","title":"Unidades flexibles (viewport)"},{"location":"desarrollo/css/02-modelo_de_cajas/#modelo-de-cajas_1","text":"Durante varios a\u00f1os, el denominado modelo de cajas fue una pesadilla para los desarrolladores web, puesto que se mostraba visualmente de forma diferente en Internet Explorer respecto a los dem\u00e1s navegadores. Por fortuna, todos los navegadores actuales ya interpretan de la misma forma el modelo de cajas, pero conviene aprender bien la diferencia para no ser como Internet Explorer. La representaci\u00f3n b\u00e1sica del modelo de cajas es la siguiente, donde podemos observar varios conceptos importantes a diferenciar: El borde ( border ). En negro, es el l\u00edmite que separa el interior del exterior del elemento. El m\u00e1rgen ( margin ). En naranja, es la parte exterior del elemento, por fuera del borde. El relleno ( padding ). En verde, es la parte interior del elemento, entre el contenido y el borde. El contenido ( en azul ). En azul, es la parte interior del elemento, excluyendo el relleno.","title":"Modelo de cajas"},{"location":"desarrollo/css/02-modelo_de_cajas/#dimensiones-ancho-y-alto","text":"Para dar tama\u00f1os espec\u00edficos a los diferentes elementos de un documento HTML, necesitaremos asignarles valores a las propiedades width (ancho) y height (alto). Propiedad Valor Significado width auto |size Tama\u00f1o de ancho de un elemento. height auto |size Tama\u00f1o de alto de un elemento. En el caso de utilizar el valor auto en las propiedades anteriores ( que es lo mismo que no indicarlas, ya que es el valor que tienen por defecto ), el navegador se encarga de calcular el ancho o alto necesario, dependiendo del contenido del elemento. Esto es algo que tambi\u00e9n puede variar, dependiendo del tipo de elemento que estemos usando, y que veremos m\u00e1s adelante, en el apartado de maquetaci\u00f3n. Hay que ser muy conscientes de que, sin indicar valores de ancho y alto para la caja, el elemento generalmente toma el tama\u00f1o que debe respecto a su contenido, mientras que si indicamos un ancho y alto concretos, estamos obligando a CSS tener un aspecto concreto y podemos obtener resultados similares al siguiente ( conocida broma de CSS ) si su contenido es m\u00e1s grande que el tama\u00f1o que hemos definido: Otra forma de lidiar con esto, es utilizar las propiedades hermanas de width : min-width y max-width y las propiedades hermanas de height : min-height y max-height . Con estas propiedades, en lugar de establecer un tama\u00f1o fijo, establecemos unos m\u00e1ximos y unos m\u00ednimos, donde el ancho o alto podr\u00eda variar entre esos valores. div { width: 800px; height: 400px; background: red; max-width: 500px; } En este caso, por ejemplo, a pesar de estar indicando un tama\u00f1o de 800px , le aplicamos un max-width de 500px , por lo que estamos limitando el elemento a un tama\u00f1o de ancho de 500 p\u00edxeles como m\u00e1ximo y nunca superar\u00e1 ese tama\u00f1o. Por un lado tenemos las propiedades de m\u00ednimos min-width y min-height , que por defecto tienen valor 0 , mientras que por otro lado, tenemos las propiedades de m\u00e1ximos max-width y max-height , que por defecto tienen valor none : Propiedad Valor Significado max-width none |size Ancho m\u00e1ximo que puede ocupar un elemento. min-width 0 |size Ancho m\u00ednimo que puede ocupar un elemento. max-height none |size Alto m\u00e1ximo que puede ocupar un elemento. min-height 0 |size Alto m\u00ednimo que puede ocupar un elemento.","title":"Dimensiones (ancho y alto)"},{"location":"desarrollo/css/02-modelo_de_cajas/#zonas-de-un-elemento","text":"Antes de continuar, es importante saber que en CSS existen ciertas palabras clave para hacer referencia a una zona u orientaci\u00f3n concreta sobre un elemento. Son conceptos muy sencillos y pr\u00e1cticamente l\u00f3gicos, por lo que no tendr\u00e1s ning\u00fan problema en comprenderlos. Son los siguientes: Top : Se refiere a la parte superior del elemento. Left : Se refiere a la parte izquierda del elemento. Right : Se refiere a la parte derecha del elemento. Bottom : Se refiere a la parte inferior del elemento. Center : En algunos casos se puede especificar el valor center para referirse a la posici\u00f3n central entre los extremos horizontales o verticales. Estas palabras clave las utilizaremos muy a menudo en diferentes propiedades CSS para hacer referencia a una zona particular.","title":"Zonas de un elemento"},{"location":"desarrollo/css/02-modelo_de_cajas/#desbordamiento","text":"Volvamos a pensar en la situaci\u00f3n de la imagen anterior: Damos un tama\u00f1o de ancho y alto a un elemento HTML, pero su contenido de texto es tan grande que no cabe dentro de ese elemento. \u00bfQu\u00e9 ocurrir\u00eda? Probablemente lo que vimos en la imagen: el contenido se desbordar\u00eda. Podemos modificar ese comportamiento con la propiedad de CSS overflow , o con alguna de sus propiedades espec\u00edficas overflow-x o overflow-y : Propiedad Valor Significado overflow visible | hidden | scroll | auto Establece el comportamiento de desbordamiento. overflow-x visible | hidden | scroll | auto Establece el desbordamiento s\u00f3lo para el eje X ( horizontal ). overflow-y visible | hidden | scroll | auto Establece el desbordamiento s\u00f3lo para el eje Y ( vertical ). Dichas propiedades pueden tomar varios valores, donde visible es el valor que tiene por defecto, que permite que haya desbordamiento. Otras opciones son las siguientes, donde no se permite desbordamiento : Valor \u00bfQu\u00e9 ocurre si se desborda el contenedor? \u00bfDesbordamiento? visible Se muestra el contenido que sobresale ( comportamiento por defecto ) S\u00ed hidden Se oculta el contenido que sobresale. No scroll Se colocan barras de desplazamiento (horizontales y verticales). No auto Se colocan barras de desplazamiento (s\u00f3lo las necesarias). No Nota : CSS3 a\u00f1ade las propiedades overflow-x y overflow-y para cada eje individual, que antiguamente solo era posible hacerlo con overflow para ambos ejes. Estas propiedades son \u00fatiles cuando no quieres mostrar alguna barra de desplazamiento, habitualmente, la barra de desplazamiento horizontal.","title":"Desbordamiento"},{"location":"desarrollo/css/02-modelo_de_cajas/#margenes-y-rellenos","text":"En el modelo de cajas, los m\u00e1rgenes ( margin ) son los espacios exteriores de un elemento. El espacio que hay entre el borde de un elemento y el borde de otros elementos adyacentes, es lo que se considera m\u00e1rgen.","title":"M\u00e1rgenes y rellenos"},{"location":"desarrollo/css/02-modelo_de_cajas/#margenes","text":"Dichos m\u00e1rgenes se pueden considerar en conjunto ( de forma general ) o de forma concreta en cada una de las zonas del elemento. Veamos primero las propiedades espec\u00edficas para cada zona: Propiedad |ValorSignificado :---|:---|:--- margin-top | auto |size|Establece un tama\u00f1o de margen superior. margin-left | auto |size|Establece un tama\u00f1o de margen a la izquierda. margin-right | auto |size|Establece un tama\u00f1o de margen a la derecha. margin-bottom | auto |size|Establece un tama\u00f1o de margen inferior. Podemos aplicar diferentes m\u00e1rgenes a cada zona de un elemento utilizando cada una de estas propiedades, o dejando al nevegador que lo haga de forma autom\u00e1tica indicando el valor auto . Truco : Existe un truco muy sencillo y pr\u00e1ctico para centrar un elemento en pantalla. Basta con aplicar un ancho fijo al contenedor, width:500px ( por ejemplo ) y luego aplicar un margin:auto . De esta forma, el navegador, al conocer el tama\u00f1o del elemento ( y por omisi\u00f3n, el resto del tama\u00f1o de la ventana ) se encarga de repartirlo equitativamente entre el margen izquierdo y el margen derecho, quedando centrado el elemento. Hay que recordar diferenciar bien los m\u00e1rgenes de los rellenos , puesto que no son la misma cosa. Los rellenos ( padding ) son los espacios que hay entre los bordes del elemento en cuesti\u00f3n y el contenido del elemento ( por la parte interior ). Mientras que los m\u00e1rgenes ( margin ) son los espacios que hay entre los bordes del elemento en cuesti\u00f3n y los bordes de otros elementos ( parte exterior ). Observese tambi\u00e9n el siguiente ejemplo para ilustrar el solapamiento de m\u00e1rgenes . Por defecto, si tenemos dos elementos adyacentes con, por ejemplo, margin: 20px cada uno, ese espacio de margen se solapar\u00e1 y tendremos 20px en total, y no 40px ( la suma de cada uno ) como podr\u00edamos pensar en un principio.","title":"M\u00e1rgenes"},{"location":"desarrollo/css/02-modelo_de_cajas/#rellenos","text":"Al igual que con los m\u00e1rgenes, los rellenos tienen varias propiedades para indicar cada zona: Propiedad Valor Significado padding-top 0 |size Aplica un relleno interior en el espacio superior de un elemento. padding-left 0 |size Aplica un relleno interior en el espacio izquierdo de un elemento. padding-right 0 |size Aplica un relleno interior en el espacio derecho de un elemento. padding-bottom 0 |size Aplica un relleno interior en el espacio inferior de un elemento. Como se puede ver en la tabla, por defecto no hay relleno ( el relleno est\u00e1 a cero ), aunque puede modificarse tanto con las propiedades anteriores como la propiedad de atajo que veremos a continuaci\u00f3n.","title":"Rellenos"},{"location":"desarrollo/css/02-modelo_de_cajas/#atajo-modelo-de-cajas","text":"Al igual que en otras propiedades de CSS, tambi\u00e9n existen atajos para los m\u00e1rgenes y los rellenos: Propiedad Valores Significado margin 1 par\u00e1metro. Aplica el mismo margen a todos los lados. 2 par\u00e1metros. Aplica margen top/bottom y left/right . 3 par\u00e1metros. Aplica margen top , left/right y bottom . 4 par\u00e1metros. Aplica margen top , right , bottom e left . Con las propiedades padding y border-width pasa exactamente lo mismo, actuando en relaci\u00f3n a los rellenos , en lugar de los m\u00e1rgenes en el primer caso, y en relaci\u00f3n al grosor del borde de un elemento en el segundo. !!!! Ojo Aunque al principio es muy tentador utilizar m\u00e1rgenes negativos para ajustar posiciones y colocar los elementos como queremos, se aconseja no utilizar dicha estrategia salvo para casos muy particulares, ya que a la larga es una mala pr\u00e1ctica que har\u00e1 que nuestro c\u00f3digo sea de peor calidad.","title":"Atajo: Modelo de cajas"},{"location":"desarrollo/css/02-modelo_de_cajas/#bordes-css","text":"En CSS es posible especificar el aspecto que tendr\u00e1n los bordes de cualquier elemento, pudiendo incluso, dar valores distintos a las diferentes zonas predeterminadas del elemento (zona superior, izquierda, derecha o zona inferior). Las propiedades b\u00e1sicas existentes de los bordes en CSS son las siguientes: Propiedad Valor Significado border-color 1234 Especifica el color que se utilizar\u00e1 en el borde. border-width thin | medium | thick |size Especifica un tama\u00f1o predefinido para el grosor del borde. border-style 1234 none | style Define el estilo para el borde a utilizar (ver m\u00e1s adelante). En primer lugar, border-color establece el color del borde, de la misma forma que lo hicimos en apartados anteriores de colores. En segundo lugar, con border-width podemos establecer la anchura o grosor del borde utilizando tanto palabras clave predefinidas como un tama\u00f1o concreto con cualquier tipo de las unidades ya vistas.","title":"Bordes CSS"},{"location":"desarrollo/css/02-modelo_de_cajas/#estilos-de-borde","text":"Por \u00faltimo, con border-style podemos aplicar un estilo determinado al borde de un elemento. En estilo de borde podemos elegir cualquiera de las siguientes opciones: Valor Descripci\u00f3n hidden Oculto. Id\u00e9ntico al anterior salvo para conflictos con tablas. dotted Establece un borde basado en puntos. dashed Establece un borde basado en rayas (l\u00ednea discont\u00ednua). solid Establece un borde s\u00f3lido (l\u00ednea cont\u00ednua). double Establece un borde doble (dos l\u00edneas cont\u00ednuas). groove Establece un borde biselado con luz desde arriba. ridge Establece un borde biselado con luz desde abajo. Opuesto a groove . inset Establece un borde con profundidad \u00abhacia dentro\u00bb. outset Establece un borde con profundidad \u00abhacia fuera\u00bb. Opuesto a inset . Veamos un ejemplo sencillo: div { border-color: gray; border-width: 1px; border-style: dotted; } Sin embargo, el borde m\u00e1s frecuente suele ser solid , que no es m\u00e1s que un borde liso. Pueden utilizarse cualquiera de los estilos indicados en la tabla anterior. Veamos como se ver\u00edan los diferentes estilos de borde utilizando 10 p\u00edxels de grosor y color gris :","title":"Estilos de borde"},{"location":"desarrollo/css/02-modelo_de_cajas/#bordes-multiples-diferentes","text":"Hasta ahora, s\u00f3lo hemos utilizado un par\u00e1metro en cada propiedad, lo que significa que se aplica el mismo valor para cada borde de un elemento ( borde superior, borde derecho, borde inferior y borde izquierdo ). Sin embargo, podemos especificar uno, dos, tres o cuatro par\u00e1metros, dependiendo de lo que queramos hacer: Propiedad Valor Significado border-color 1 par\u00e1metro. Aplica el mismo color a todos los bordes. 2 par\u00e1metros. Aplica al borde top/bottom , y al left/right . 3 par\u00e1metros. Aplica al top , al left/right y al bottom . 4 par\u00e1metros. Aplica al top , right , bottom y left . De la misma forma, podemos hacer exactamente lo mismo con las propiedades border-width ( respecto al ancho del borde ) y border-style ( respecto al estilo del borde ). Teniendo en cuenta esto, disponemos de mucha flexibilidad a la hora de especificar esquemas de bordes m\u00e1s complejos: div { border-color: red blue green; border-width: 2px 10px 5px; border-style: solid dotted solid; } En el ejemplo anterior hemos utilizado 3 par\u00e1metros, indicando un elemento con borde superior rojo s\u00f3lido de 2 p\u00edxeles de grosor, con borde izquierdo y derecho punteado azul de 10 p\u00edxeles de grosor y con un borde inferior verde s\u00f3lido de 5 p\u00edxeles de grosor.","title":"Bordes m\u00faltiples (diferentes)"},{"location":"desarrollo/css/02-modelo_de_cajas/#atajo-bordes","text":"Pero ya habremos visto que con tantas propiedades, para hacer algo relativamente sencillo, nos pueden quedar varias lineas de c\u00f3digo complejas y dif\u00edciles de leer. Al igual que con otras propiedades CSS, podemos utilizar la propiedad de atajo border , con la que podemos hacer un resumen y no necesitar utilizar las propiedades individuales por separado, realizando el proceso de forma m\u00e1s corta: Propiedad Valor Significado border size - style - color Propiedad de atajo para simplificar valores. Por ejemplo: div { border: 1px solid #000000; } As\u00ed pues, estamos aplicando un borde de 1 p\u00edxel de grosor, estilo s\u00f3lido y color negro a todos los bordes del elemento, ahorrando mucho espacio y escribi\u00e9ndolo todo en una sola propiedad. Consejo : Intenta organizarte y aplicar siempre los atajos si es posible. Ahorrar\u00e1s mucho espacio en el documento y simplificar\u00e1s la creaci\u00f3n de dise\u00f1os. El orden, aunque no es obligatorio, si es recomendable para mantener una cierta coherencia con el estilo de c\u00f3digo.","title":"Atajo: Bordes"},{"location":"desarrollo/css/02-modelo_de_cajas/#bordes-especificos","text":"Otra forma, quiz\u00e1s m\u00e1s intuitiva, es la de utilizar las propiedades de bordes espec\u00edficos ( por zonas ) y aplicar estilos combin\u00e1ndolos junto a la herencia de CSS . Para utilizarlas bastar\u00eda con indicarle la zona justo despu\u00e9s de border- : div { border-bottom-width: 2px; border-bottom-style: dotted; border-bottom-color: black; } Esto dibujar\u00eda s\u00f3lo un borde inferior negro de 2 p\u00edxeles de grosor y con estilo punteado. Ahora imaginemos que queremos un elemento con todos los bordes en rojo a 5 p\u00edxeles de grosor, salvo el borde superior, que lo queremos con un borde de 15 p\u00edxeles en color naranja. Podr\u00edamos hacer lo siguiente: div { border: 5px solid red; border-top-width: 15px; border-top-color: orange; border-top-style: solid; /* Esta propiedad no es necesaria (se hereda) */ } El ejemplo anterior conseguir\u00eda nuestro objetivo. La primera propiedad establece todos los bordes del elemento, sin embargo, las siguientes propiedades modifican s\u00f3lo el borde superior, cambi\u00e1ndolo a las caracter\u00edsticas indicadas. Recuerda que tambi\u00e9n existen atajos para estas propiedades de bordes en zonas concretas, lo que nos permite simplificar a\u00fan m\u00e1s el ejemplo anterior, haci\u00e9ndolo m\u00e1s f\u00e1cil de comprender: div { border: 5px solid red; border-top: 15px solid orange; } Ojo : Es muy importante entender como se est\u00e1 aplicando la herencia en los ejemplos anteriores, puesto que es una de las caracter\u00edsticas m\u00e1s complejas de dominar de CSS junto a la cascada. Por ejemplo, si colocaramos el border-top antes del border , este \u00faltimo sobreescribir\u00eda los valores de border-top y no funcionar\u00eda de la misma forma.","title":"Bordes espec\u00edficos"},{"location":"desarrollo/css/02-modelo_de_cajas/#esquinas-redondeadas","text":"CSS3 a\u00f1ade interesantes caracter\u00edsticas en materia de bordes, como la posibilidad de crear bordes con esquinas redondeadas , caracter\u00edstica que en versiones anteriores de CSS era muy complicado de lograr, necesitando recurrir al apoyo de im\u00e1genes gr\u00e1ficas. Por su parte, en CSS3 es realmente sencillo hacerlo mediante c\u00f3digo. Basta utilizar la propiedad border-radius , con la cual podr\u00e1s especificar un radio para el borde de las esquinas. Por defecto, este borde es de tama\u00f1o 0 , por lo que no hay borde redondeado. A medida que se aumenta este valor, el borde se redondea m\u00e1s. Una vez llegado a su m\u00e1ximo, no se apreciar\u00e1 ning\u00fan cambio. Hay varias formas de especificar el radio de las esquinas: Propiedad Valor Significado border-radius 1 par\u00e1metro. Aplica el radio a todas y cada una de las esquinas. 2 par\u00e1metros: top-left + bottom-right y a top-right + bottom-left . 3 par\u00e1metros: top-left , a top-right y bottom-left y a bottom-right . 4 par\u00e1metros. Orden de las agujas del reloj, empezando por top-left . El primer formato , un \u00fanico par\u00e1metro, aplica ese tama\u00f1o a todas las esquinas del borde. El segundo formato , con dos par\u00e1metros, aplica el primer valor, e1 , a las esquinas superior-izquierda e inferior-derecha, y el segundo valor, e2 , a las esquinas superior-derecha e inferior-izquierda. En el tercer formato , se aplica el par\u00e1metro e1 a la esquina superior-izquierda, el par\u00e1metro e2 a las esquinas superior-derecha e inferior-izquierda y el par\u00e1metro e3 a la esquina inferior-derecha. Y por \u00faltimo, en el cuarto formato , se aplica el tama\u00f1o de cada valor a cada esquina por separado, en el sentido de las agujas del reloj. O lo que es lo mismo, e1 a la esquina superior-izquierda, e2 a la esquina superior-derecha, e3 a la esquina inferior-derecha y e4 a la esquina inferior-izquierda. A modo de ejemplo te\u00f3rico, pueden ver un ejemplo de la aplicaci\u00f3n de varios formatos: div { border-radius: 25px; /* Formato con un par\u00e1metro */ border-radius: 25% 50%; /* Formato con dos par\u00e1metros */ border-radius: 50px 25px 10px; /* Formato con tres par\u00e1metros */ border-radius: 25px 0 15px 50px; /* Formato con cuatro par\u00e1metros */ }","title":"Esquinas redondeadas"},{"location":"desarrollo/css/02-modelo_de_cajas/#esquinas-irregulares","text":"Truco : Es posible diferenciar el radio horizontal del radio vertical de una esquina determinada, creando una esquina redondeada irregular. Para conseguirlo, no hay m\u00e1s que a\u00f1adir una barra ( / ) y repetir nuevamente el n\u00famero de par\u00e1metros escogido. De esta forma, los par\u00e1metros a la izquierda de la barra representan el radio horizontal, mientras que los que est\u00e1n a la derecha, representan el radio vertical. div { /* Usando el segundo formato */ border-radius: 5px 50px / 50px 15px; }","title":"Esquinas irregulares"},{"location":"desarrollo/css/02-modelo_de_cajas/#esquinas-especificas","text":"De la misma forma que hemos visto con anterioridad en otras propiedades CSS similares, tambi\u00e9n es posible especificar los valores de cada esquina mediante propiedades por separado: Propiedad Valor Significado border-top-left-radius Indica un radio para redondear la esquina top-left . border-top-right-radius Indica un radio para redondear la esquina top-right . border-bottom-left-radius Indica un radio para redondear la esquina bottom-left . border-bottom-right-radius Indica un radio para redondear la esquina bottom-right . Estas propiedades son ideales para aplicar junto a la herencia de CSS y sobreescribir valores espec\u00edficos.","title":"Esquinas espec\u00edficas"},{"location":"desarrollo/css/02-modelo_de_cajas/#bordes-con-imagenes","text":"Una de las limitaciones que ten\u00eda CSS, es que, si en lugar de utilizar los bordes de los que disponemos en CSS ( s\u00f3lidos, punteados, etc... ) quisieramos hacer algo un poco m\u00e1s complejo con im\u00e1genes, podr\u00eda volverse una tarea muy complicada. Por esa raz\u00f3n, CSS3 incorpor\u00f3 en su momento un sistema para crear bordes extensibles basados en una imagen de molde.","title":"Bordes con im\u00e1genes"},{"location":"desarrollo/css/02-modelo_de_cajas/#la-tecnica-9-slice","text":"Dicho sistema se denomina 9-slice ( muy utilizado en videojuegos ) y se basa en delimitar una imagen trazando cuatro l\u00edneas ( en rojo ). Esto har\u00e1 que la imagen quede dividida en 9 fragmentos, donde el fragmento central es descartado y el resto es utilizado de molde para los bordes de un elemento: De esta forma, los fragmentos 1 , 3 , 7 y 9 se utilizar\u00e1n para las esquinas y los fragmentos 2 , 4 , 6 y 8 se utilizar\u00e1n para los bordes laterales, pudiendo expandirlos si se requiere y considera necesario con alguna de las propiedades que veremos a continuaci\u00f3n. Vamos a utilizar la siguiente imagen expandible ( a la izquierda ), que simula ser un antiguo carrete fotogr\u00e1fico, como imagen de borde. Las l\u00edneas rojas no forman parte de la imagen original, sino que se utilizan en este ejemplo para dejar claro cu\u00e1les ser\u00edan los l\u00edmites marcados con border-image-slice . Una vez hecho esto, conseguiremos el resultado de la imagen de la derecha, en el cu\u00e1l podremos ampliar el texto del elemento lo que queramos, que se adaptar\u00e1 solo a su contenido: Para ello, utilizaremos el siguiente c\u00f3digo CSS, donde antes que nada, establecemos un ancho al elemento con width y un border b\u00e1sico para que, en el caso de navegadores que no soporten border-image , tenga al menos un borde b\u00e1sico y nos sirva tambi\u00e9n como base a lo que vamos a hacer a continuaci\u00f3n: .borde { width: 200px; border: 42px solid black; border-image-width: 1; border-image-source: url(https://i.imgur.com/YC5PUl6.png); border-image-slice: 23%; border-image-repeat: round; } Para establecer los l\u00edmites y poder utilizar im\u00e1genes en los bordes, hemos hecho uso de las siguientes propiedades de CSS: Propiedad Valor Significado border-image-width 1 | | | auto Grosor de la imagen de borde. border-image-source none | url( imagen.png ) Imagen a utilizar de molde para el 9-slice. border-image-slice 100% | | | fill Tama\u00f1o de los bordes en la imagen. border-image-outset 0 | Tama\u00f1o en el que el borde crece hacia fuera. La propiedad border-image-width indica el tama\u00f1o que tendr\u00e1 el borde de la imagen. El tama\u00f1o puede ser indicado con unidades ( p\u00edxeles o porcentajes, por ejemplo ) o sin ellas, lo que lo tomar\u00e1 como m\u00faltiplo del tama\u00f1o indicado en border-width . En nuestro ejemplo, tanto indicarle un valor de 1 como dejarlo sin especificar, ser\u00eda decirle que el tama\u00f1o del borde de la imagen ser\u00e1 de 42px , pero por ejemplo, si indicamos border-image-width: 2 , le estaremos indicando que use un tama\u00f1o de 84px . Al igual que vimos en el apartado de margin se puede indicar 1, 2, 3 o 4 par\u00e1metros . Consejo: No olvides que hay que indicar tambi\u00e9n un border-width y un border-style para que el borde CSS est\u00e9 definido y se pueda visualizar. La propiedad border-image-source establece, mediante la expresi\u00f3n url() , la imagen que vamos a utilizar para crear nuestro borde con im\u00e1genes. Truco : \u00a1Como imagen de fondo puedes utilizar un gradiente de CSS , ya que internamente se interpretan como im\u00e1genes! La propiedad border-image-slice define la posici\u00f3n de las l\u00edneas divisorias de la imagen, o lo que es lo mismo, el tama\u00f1o de los bordes. Por defecto, el valor es de 100% ( tama\u00f1o de ancho completo de la imagen ), pero tambi\u00e9n podemos usar n\u00fameros sin unidad, que simbolizan p\u00edxeles de recorte. Se pueden especificar 1, 2, 3 \u00f3 4 par\u00e1metros. Por otro lado, el valor opcional fill sirve para indicar que quieres rellenar el elemento con el fondo del fragmento 5 , que por defecto es descartado. \u00datil en casos que quieras aprovechar el fondo. En nuestro caso, nos podr\u00eda valer tanto con 110 ( 110 p\u00edxeles de recorte ) como con 23% , ya que es m\u00e1s o menos la cantidad apropiada para establecer el l\u00edmite tanto de ancho como de alto. La propiedad border-image-outset establece el factor de crecimiento ( hacia fuera ) de la imagen. Muy \u00fatil para compensar la imagen si se extiende hasta el contenido. Usar con cuidado, ya que puede desplazar el contenido. Por defecto no tiene desplazamiento.","title":"La t\u00e9cnica 9-slice"},{"location":"desarrollo/css/02-modelo_de_cajas/#modo-de-repeticion","text":"Habremos comprobado que en algunas ocasiones, el modo en que se repite la imagen de borde no es la apropiada, o al menos, no es la que m\u00e1s se adapta a nuestro caso espec\u00edfico. Este comportamiento se puede variar mediante la propiedad border-image-repeat : Propiedad Valor Significado border-image-repeat [ repetici\u00f3n en X e Y ] 1 par\u00e1metro. Comportamiento de repetici\u00f3n en ambos ejes. [ rep. en X ] [ rep. en Y ] 2 par\u00e1metros. Comportamiento de repetici\u00f3n por separado. Con dicha propiedad se establece como deben comportarse los fragmentos del borde y el tipo de repetici\u00f3n que deben efectuar. Se puede usar la modalidad de un par\u00e1metro en la que se aplica a todos los bordes, o la modalidad de dos par\u00e1metros donde estableces diferente comportamiento para los bordes horizontales y verticales. Esta propiedad puede tomar los siguientes valores: Valor Significado stretch Los bordes se estiran hasta rellenar el \u00e1rea. Es el valor por defecto. repeat Los bordes se repiten hasta rellenar el \u00e1rea. round Igual que repeat , pero estira los fragmentos individualmente hasta rellenar el \u00e1rea completa. space Igual que repeat , pero a\u00f1ade espacios hasta rellenar el \u00e1rea completa. Para verlo m\u00e1s claramente, echemos un vistazo a esta representaci\u00f3n visual del comportamiento de cada uno: Es importante recalcar los dos \u00faltimos valores ( round y space ) act\u00faan igual que repeat , pero con un comportamiento ligeramente diferente que nos puede interesar en el caso de que la zona repetida quede descompensada. Utilizando la imagen y c\u00f3digo CSS anterior, obtendr\u00edamos un resultado similar a este, que se adaptar\u00eda s\u00f3lo al contenido que escribamos dentro del elemento HTML con clase borde :","title":"Modo de repetici\u00f3n"},{"location":"desarrollo/css/02-modelo_de_cajas/#atajo-bordes-con-imagenes","text":"Como suele ser costumbre, este tipo de propiedades tienen una propiedad para ahorrar espacio y escribirlo todo de una sola vez. En este caso, la sintaxis es la siguiente: div { /* border-image: <source> <slice> <width> <outset> <repeat> */ border-image: url(https://i.imgur.com/YC5PUl6.png) 23% 1 0 round; }","title":"Atajo: Bordes con im\u00e1genes"},{"location":"desarrollo/css/02-modelo_de_cajas/#funciones-css","text":"En CSS, muchas veces necesitaremos un sistema de apoyo para realizar operaciones m\u00e1s cercanas a un lenguaje de programaci\u00f3n que a un lenguaje de estilos, como pueden ser c\u00e1lculos o utilizar valores precalculados . Por esta raz\u00f3n, con el tiempo, se han ido a\u00f1adiendo mejoras, como las custom properties, un mecanismo similar a unas variables CSS . En este art\u00edculo vamos a ver algunas funciones CSS , que no son m\u00e1s que funciones de apoyo que podemos utilizar en CSS para realizar c\u00e1lculos u operaciones sencillas de una forma f\u00e1cil y sencilla, sin tener que abandonar CSS. Un resumen de las funciones CSS que veremos: Funci\u00f3n CSS Descripci\u00f3n calc() Permite calcular operaciones con unidades CSS como px , % , vw , vh u otras. min() Permite calcular el valor m\u00ednimo de las unidades indicadas. max() Permite calcular el valor m\u00e1ximo de las unidades indicadas. clamp() Permite calcular valores \u00abajustados\u00bb. Equivalente a max( MIN , min( VAL , MAX )) . attr() Permite obtener el valor de un atributo desde CSS.","title":"Funciones CSS"},{"location":"desarrollo/css/02-modelo_de_cajas/#valores-calculados-funcion-calc","text":"Es posible que en algunas ocasiones necesitemos indicar valores precalculados por el navegador. Por ejemplo, la suma de dos valores que a priori desconocemos o no sabemos exactamente cuanto suman, pero que el navegador si deber\u00eda conocer. Esto es posible hacerlo con la funci\u00f3n calc() de CSS, como se muestra a continuaci\u00f3n: .elemento { width: calc(200px + 1em); height: 300px; background: blue; } Como se puede ver, se pueden usar operaciones como sumas ( + ), restas ( - ), multiplicaciones ( * ) o divisiones ( / ) que utilicen alguna de las unidades soportadas por CSS, como por ejemplo, n\u00fameros, dimensiones, porcentajes, tiempos, \u00e1ngulos, etc... Ten en cuenta que tambi\u00e9n se pueden anidar funciones calc() una dentro de otra. Resulta especialmente interesante su utilizaci\u00f3n junto a variables (custom properties CSS).","title":"Valores calculados: Funci\u00f3n calc()"},{"location":"desarrollo/css/02-modelo_de_cajas/#valor-minimo-funcion-min","text":"En algunas ocasiones, necesitaremos que en una propiedad se aplique un valor de varias posibilidades posibles. De dichas posibilidades, no sabremos exactamente cu\u00e1l necesitamos, pero si sabremos una de sus cualidades: es la m\u00e1s peque\u00f1a , es decir, necesitamos el valor m\u00ednimo. CSS permite realizar esto utilizando la funci\u00f3n min() que nos permite elegir el valor m\u00e1s peque\u00f1o de 2 o m\u00e1s posibilidades aplicadas por par\u00e1metro: .elemento { width: min(200px, 25%); height: 200px; background: red; } Esto aplicar\u00eda un width de 200px , siempre y cuando el 25% del elemento padre sea m\u00e1s grande de 200px . Todo este c\u00e1lculo, generalmente realizado en Javascript debido a su cualidad de l\u00f3gica de c\u00e1lculo, puede realizarse desde CSS si s\u00f3lo se utiliza exclusivamente para esta finalidad.","title":"Valor m\u00ednimo: Funci\u00f3n min()"},{"location":"desarrollo/css/02-modelo_de_cajas/#valor-maximo-funcion-max","text":"De la misma forma que tenemos una funci\u00f3n min() , tambi\u00e9n tenemos una funci\u00f3n max() . Como podemos imaginar, dicha funci\u00f3n sirve para lo opuesto de la funci\u00f3n min() : obtener el valor m\u00e1ximo entre varias posibilidades. Observa el siguiente ejemplo, donde utilizamos m\u00e1s de 2 par\u00e1metros ( ambas funciones permiten m\u00faltiples valores, no necesariamente dos ): .elemento { width: max(200px - 100px, 25%, 14vw); height: 200px; background: red; } Observa que como se ve en el ejemplo en 200px - 100px , tanto en min() como en max() , puedes realizar operaciones directamente en su interior sin necesidad de utilizar la funci\u00f3n calc() .","title":"Valor m\u00e1ximo: Funci\u00f3n max()"},{"location":"desarrollo/css/02-modelo_de_cajas/#valor-ajustado-funcion-clamp","text":"Ahora pensemos en un caso que podr\u00edamos necesitar y que se puede volver algo poco legible. Imagina que necesitas obtener el valor m\u00ednimo Con la funci\u00f3n clamp() podemos realizar, de forma concisa la operaci\u00f3n max(MIN, min(VAL, MAX)) . Veamos un ejemplo: .elemento { width: max(100px, min(25%, 300px)); width: clamp(100px, 25%, 300px); height: 200px; background: red; } Observa que existen dos l\u00edneas con un width . Ambas l\u00edneas son equivalentes. El primer valor de clamp() ser\u00eda el valor m\u00ednimo , mientras que el tercero es el valor m\u00e1ximo . De esta forma, el navegador realiza lo siguiente: Obtiene el valor m\u00ednimo entre el segundo y tercer par\u00e1metro. Obtiene el valor m\u00e1ximo entre el primer par\u00e1metro y el resultado anterior. Utiliza el resultado de la operaci\u00f3n anterior en el width . El soporte en navegadores de estas 3 \u00faltimas funciones es el siguiente:","title":"Valor ajustado: Funci\u00f3n clamp()"},{"location":"desarrollo/css/02-modelo_de_cajas/#valor-del-atributo-funcion-attr","text":"Aunque no es de g\u00e9nero matem\u00e1tico como las anteriores, existe la funci\u00f3n CSS attr() , que es algo m\u00e1s particular, ya que permite obtener el valor de un atributo HTML y utilizarlo desde CSS, generalmente para temas de decoraci\u00f3n. Por ejemplo, observa el siguiente fragmento de c\u00f3digo: <div class=\"element\" data-author=\"Manz\"></div> <style> .element::before { content: attr(data-author); font-size: 22px; color: #444; } </style> Por medio de una pseudoclase CSS , utilizando la propiedad content , le pedimos al navegador que utilice el metadato del atributo data-author del elemento donde se le est\u00e1 aplicando el CSS para mostrarlo como contenido. Esta funci\u00f3n CSS es la m\u00e1s antigua y la mejor soportada en navegadores: Fuente: Lenguaje de CSS por Manz","title":"Valor del atributo: Funci\u00f3n attr()"},{"location":"desarrollo/css/03-colores_y_fondos/","text":"Colores y fondos \u00b6 Colores CSS \u00b6 Uno de los primeros cambios de estilo que podemos pensar realizar en un documento HTML es hacer variaciones en los colores de primer plano y de fondo. Esto es posible con las primeras dos propiedades que veremos a continuaci\u00f3n: Propiedad Valor Significado color color Cambia el color del texto que est\u00e1 en el interior de un elemento. background-color color Cambia el color de fondo de un elemento. La propiedad color establece el color del texto, mientras que la propiedad background-color establece el color de fondo del elemento. Todas las propiedades CSS donde existen valores , establecen la posibilidad de indicar 4 formas alternativas ( con algunos derivados ) para especificar el color deseado: Nombre Formato Ejemplo Palabra clave predefinida [palabra clave] red Esquema RGB rgb( rojo , verde , azul ) rgb(255, 0, 0) Esquema RGB con canal alfa rgba( rojo , verde , azul , alfa ) rgba(255, 0, 0, 0.25) Esquema RGB hexadecimal # RRGGBB #ff0000 Esquema RGB hexadecimal con canal alfa # RGBBBAA #ff000040 Esquema HSL hsl( color , saturaci\u00f3n , brillo ) hsl(0, 100%, 100%) Esquema HSL con canal alfa hsla( color , saturaci\u00f3n , brillo , alfa ) hsla(0, 100%, 100%, 0.25) A continuaci\u00f3n iremos explicando cada uno de estos formatos para entender como se especifican los colores en CSS y utilizar el m\u00e9todo que m\u00e1s se adapte a nuestras necesidades. Consejo : Si lo que buscamos es un sistema para extraer colores ( eye dropper ) de una p\u00e1gina web, podemos utilizar la extensi\u00f3n para Chrome de ColorZilla o el propio Chrome Developer Tools , que integra dicha funcionalidad. Palabras clave de color \u00b6 El primer caso ( y m\u00e1s limitado ) permite establecer el color utilizando palabras reservadas de colores, como red , blue , orange , white , navy , yellow u otras. Existen m\u00e1s de 140 palabras clave para indicar colores: Nombre del color Valor hexadecimal Valores RGB Color Alice azul # F0F8FF rgb (240,248,255) Blanco antiguo # FAEBD7 rgb (250,235,215) Agua # 00FFFF rgb (0,255,255) Aguamarina # 7FFFD4 rgb (127,255,212) Azur # F0FFFF rgb (240,255,255) Beige # F5F5DC rgb (245,245,220) Sopa de mariscos # FFE4C4 rgb (255,228,196) Negro # 000000 rgb (0,0,0) BlanchedAlmond #FFEBCD rgb (255,235,205) Azul # 0000FF rgb (0,0,255) Violeta Azul # 8A2BE2 rgb (138,43,226) marr\u00f3n # A52A2A rgb (165,42,42) BurlyWood # DEB887 rgb (222,184,135) CadetBlue # 5F9EA0 rgb (95,158,160) Monasterio # 7FFF00 rgb (127,255,0) Chocolate # D2691E rgb (210,105,30) Coral # FF7F50 rgb (255,127,80) Aciano Azul # 6495ED rgb (100,149,237) Seda de maiz # FFF8DC rgb (255,248,220) carmes\u00ed # DC143C rgb (220,20,60) Cian # 00FFFF rgb (0,255,255) Azul oscuro # 00008B rgb (0,0,139) DarkCyan # 008B8B rgb (0,139,139) DarkGoldenRod # B8860B rgb (184,134,11) Gris oscuro # A9A9A9 rgb (169,169,169) Gris oscuro # A9A9A9 rgb (169,169,169) Verde oscuro # 006400 rgb (0,100,0) DarkKhaki # BDB76B rgb (189,183,107) DarkMagenta # 8B008B rgb (139,0,139) DarkOliveGreen # 556B2F rgb (85,107,47) Naranja oscuro # FF8C00 rgb (255,140,0) Orqu\u00eddea Oscura # 9932CC rgb (153,50,204) Rojo oscuro # 8B0000 rgb (139,0,0) Salm\u00f3n oscuro # E9967A rgb (233,150,122) DarkSeaGreen # 8FBC8F rgb (143,188,143) DarkSlateBlue # 483D8B rgb (72,61,139) DarkSlateGray # 2F4F4F rgb (47,79,79) DarkSlateGrey # 2F4F4F rgb (47,79,79) DarkTurquoise # 00CED1 rgb (0,206,209) Violeta oscuro # 9400D3 rgb (148,0,211) Rosa profundo # FF1493 rgb (255,20,147) DeepSkyBlue # 00BFFF rgb (0,191,255) DimGray # 696969 rgb (105,105,105) DimGrey # 696969 rgb (105,105,105) DodgerBlue # 1E90FF rgb (30,144,255) Ladrillo refractario # B22222 rgb (178,34,34) FloralWhite # FFFAF0 rgb (255,250,240) Bosque verde # 228B22 rgb (34,139,34) Fucsia # FF00FF rgb (255,0,255) Gainsboro #DCDCDC rgb (220,220,220) Fantasma blanco # F8F8FF rgb (248,248,255) Oro # FFD700 rgb (255,215,0) Vara de oro # DAA520 rgb (218,165,32) gris # 808080 rgb (128,128,128) Gris # 808080 rgb (128,128,128) Verde # 008000 rgb (0,128,0) Verde amarillo # ADFF2F rgb (173,255,47) Gotas de miel # F0FFF0 rgb (240,255,240) Rosa caliente # FF69B4 rgb (255,105,180) IndianRed # CD5C5C rgb (205,92,92) \u00cdndigo # 4B0082 rgb (75,0,130) Marfil # FFFFF0 rgb (255,255,240) Caqui # F0E68C rgb (240,230,140) Lavanda # E6E6FA rgb (230,230,250) LavenderBlush # FFF0F5 rgb (255,240,245) C\u00e9sped verde # 7CFC00 rgb (124,252,0) Lim\u00f3n chiffon #FFFACD rgb (255,250,205) Azul claro # ADD8E6 rgb (173,216,230) LightCoral # F08080 rgb (240,128,128) Cian claro # E0FFFF rgb (224,255,255) LightGoldenRodYellow # FAFAD2 rgb (250,250,210) Gris claro # D3D3D3 rgb (211,211,211) Gris claro # D3D3D3 rgb (211,211,211) Verde claro # 90EE90 rgb (144,238,144) Rosa claro # FFB6C1 rgb (255,182,193) Salm\u00f3n de luz # FFA07A rgb (255,160,122) LightSeaGreen # 20B2AA rgb (32,178,170) LightSkyBlue # 87CEFA rgb (135,206,250) LightSlateGray # 778899 rgb (119,136,153) LightSlateGrey # 778899 rgb (119,136,153) LightSteelBlue # B0C4DE rgb (176,196,222) Amarillo claro # FFFFE0 rgb (255,255,224) Lima # 00FF00 rgb (0,255,0) Verde lima # 32CD32 rgb (50,205,50) Lino # FAF0E6 rgb (250,240,230) Magenta # FF00FF rgb (255,0,255) Granate # 800000 rgb (128,0,0) MedioAquaMarine # 66CDAA rgb (102,205,170) Azul medio # 0000CD rgb (0,0,205) MediumOrchid # BA55D3 rgb (186,85,211) Mediano # 9370DB rgb (147,112,219) MediumSeaGreen # 3CB371 rgb (60,179,113) MediumSlateBlue # 7B68EE rgb (123,104,238) MediumSpringGreen # 00FA9A rgb (0,250,154) MediumTurquoise # 48D1CC rgb (72,209,204) MediumVioletRed # C71585 rgb (199,21,133) MidnightBlue # 191970 rgb (25,25,112) MintCream # F5FFFA rgb (245,255,250) MistyRose # FFE4E1 rgb (255,228,225) Mocas\u00edn # FFE4B5 rgb (255,228,181) Navajoblanco #FFDEAD rgb (255,222,173) Armada # 000080 rgb (0,0,128) Antiguo lace # FDF5E6 rgb (253,245,230) Aceituna # 808000 rgb (128,128,0) Verde oliva # 6B8E23 rgb (107,142,35) naranja # FFA500 rgb (255,165,0) Rojo naranja # FF4500 rgb (255,69,0) Orqu\u00eddea # DA70D6 rgb (218,112,214) PaleGoldenRod # EEE8AA rgb (238,232,170) Verde p\u00e1lido # 98FB98 rgb (152,251,152) PaleTurquoise #AFEEEE rgb (175,238,238) PaleVioletRed # DB7093 rgb (219,112,147) PapayaWhip # FFEFD5 rgb (255,239,213) Peachpuff # FFDAB9 rgb (255,218,185) Per\u00fa # CD853F rgb (205,133,63) Rosado # FFC0CB rgb (255,192,203) ciruela # DDA0DD rgb (221,160,221) Azul p\u00e1lido # B0E0E6 rgb (176,224,230) P\u00farpura # 800080 rgb (128,0,128) RebeccaPurple # 663399 rgb (102,51,153) rojo # FF0000 rgb (255,0,0) RosyBrown # BC8F8F rgb (188,143,143) Azul real # 4169E1 rgb (65,105,225) SaddleBrown # 8B4513 rgb (139,69,19) Salm\u00f3n # FA8072 rgb (250,128,114) SandyBrown # F4A460 rgb (244,164,96) Mar verde # 2E8B57 rgb (46,139,87) Concha # FFF5EE rgb (255,245,238) Tierra de siena # A0522D rgb (160,82,45) Plata # C0C0C0 rgb (192,192,192) Cielo azul # 87CEEB rgb (135,206,235) SlateBlue # 6A5ACD rgb (106,90,205) SlateGray # 708090 rgb (112,128,144) Pizarra gris # 708090 rgb (112,128,144) Nieve #FFAFA rgb (255,250,250) Primavera verde # 00FF7F rgb (0,255,127) Azul acero # 4682B4 rgb (70,130,180) Bronceado # D2B48C rgb (210,180,140) Teal # 008080 rgb (0,128,128) Cardo # D8BFD8 rgb (216,191,216) Tomate # FF6347 rgb (255,99,71) Turquesa # 40E0D0 rgb (64,224,208) Violeta # EE82EE rgb (238,130,238) Trigo # F5DEB3 rgb (245,222,179) Blanco #FFFFFF rgb (255,255,255) Humo blanco # F5F5F5 rgb (245,245,245) Amarillo # FFFF00 rgb (255,255,0) Amarillo verde # 9ACD32 rgb (154,205,50) Adem\u00e1s, existen algunos valores especiales que puedes utilizar cuando quieras especificar un color, como colores transparentes o el color actual del texto , muy \u00fatil para SVG, por ejemplo: Valor Significado transparent Establece un color completamente transparente (valor por defecto de background-color ) currentColor Establece el mismo color que se est\u00e1 utilizando para el texto (CSS3 y SVG) Veamos algunos ejemplos de palabras clave de color: div { background-color: blue; background-color: transparent; background-color: lightpink; background-color: rebeccapurple; /* En honor a Rebeca, la hija de Eric Meyer */ } Formato RGB \u00b6 Uno de los m\u00e9todos m\u00e1s conocidos por los dise\u00f1adores gr\u00e1ficos es utilizar el formato RGB . Las siglas RGB significan rojo , verde y azul , por lo que cada cifra ( del 0 al 255 ) representa la intensidad de cada componente de color. Como se puede ver en la siguiente imagen, si utilizamos una cantidad (0, 0, 0) de cada canal, obtenemos el color negro . En cambio, si utilizamos una cantidad (255, 0, 0), obtendremos el color rojo . De esta forma, mezclando las cantidades de cada canal, se puede obtener pr\u00e1cticamente cualquier color. Existen muchos esquemas de colores, pero en dise\u00f1o web nos interesa particularmente el esquema RGB ( junto al HSL ). La mayor\u00eda de los editores tienen los denominados ColorPicker , que no son m\u00e1s que un sistema c\u00f3modo y r\u00e1pido para elegir un color a base de clics por una paleta o circulo visual. Tambi\u00e9n podemos hacerlo directamente en buscadores como Duck Duck Go o Google . Veamos algunos ejemplos de colores en formato RGB: div { background-color: rgb(125, 80, 10); background-color: rgb(0, 0, 34); color: rgb(255, 255, 0) } Formato hexadecimal \u00b6 El formato hexadecimal es el m\u00e1s utilizado por los desarrolladores web, aunque en principio puede parecer algo extra\u00f1o y complicado, sobre todo si no has o\u00eddo hablar nunca del sistema hexadecimal ( sistema en base 16 en lugar del que utilizamos normalmente, en base 10 ). Cada par de letras simboliza el valor del RGB en el sistema de numeraci\u00f3n hexadecimal, as\u00ed pues, el color #FF0000 , o sea HEX(FF,00,00), es equivalente al RGB(255,0,0), que es tambi\u00e9n equivalente al HSL(0, 100%, 100%). Veamos algunos ejemplos para clarificarlo: Hexadecimal Hex. abreviado Color RGB Palabra clave #FF0000 #F00 255,0,0 red (rojo) #000000 #000 0,0,0 black (negro) #00FFFF #0FF 0, 255, 255 cyan (azul claro) #9370DB #97D 147,112,219 mediumpurple (lila) HailPixel nos proporciona una manera muy sencilla y r\u00e1pida de seleccionar tonalidades de color en formato hexadecimal con s\u00f3lo mover el rat\u00f3n. Por otro lado, en ColorSpire puedes seleccionar el color deseado y observar como var\u00edan tanto los valores hexadecimales como los valores RGB o HSL ( ver a continuaci\u00f3n ). Truco : Como se puede ver en la segunda columna, para ahorrar espacio puedes utilizar el formato hexadecimal abreviado , especificando s\u00f3lo las primeras tres cifras de cada par. Por ejemplo, #9933AA como #93A . El color abreviado s\u00f3lo ser\u00e1 fiel cuando los pares de cifras sean id\u00e9nticos (o al menos, aproximados). Veamos algunos ejemplos del formato hexadecimal (RGB abreviado): div { background-color: #512592; background-color: #000000; background-color: #451; /* Equivalente a #445511; */ } Formato HSL \u00b6 Las siglas HSL significan color ( o matiz ), saturaci\u00f3n y brillo . La primera cifra selecciona el matiz de color ( una cifra de 0 a 360 grados ), seleccionando el color del c\u00edrculo exterior de la imagen. Por su parte, las dos siguientes, son el porcentaje de saturaci\u00f3n y el brillo del color, respectivamente ( ambos, porcentajes de 0% a 100% ). Veamos algunos ejemplos del formato HSL: div { background-color: hsl(35deg, 0%, 100%); background-color: hsl(120deg, 25%, 75%); background-color: hsl(5deg, 20%, 20%); } Canales Alfa \u00b6 Es posible que deseemos indicar un color que tenga cierto grado de transparencia, y de esta forma, refleje el contenido, color o im\u00e1genes que se encuentren detr\u00e1s. Hasta ahora solo conocemos la palabra clave transparent , que es un color de transparencia total ( totalmente transparente ). Sin embargo, existe la posibilidad de utilizar los denominados canales alfa , que permiten establecer una transparencia parcial en determinados colores. Estos se pueden establecer en cualquier formato, salvo en los colores con palabras clave. Vamos a ver como hacerlo en cada caso: Formato RGB : En lugar de rgb() indicamos rgba() para establecer que usaremos un canal alfa. Posteriormente, en lugar de establecer 3 par\u00e1metros ( rojo, verde, azul ), a\u00f1adiremos uno m\u00e1s, que ser\u00e1 el canal alfa. Dicho canal alfa ser\u00e1 un valor ( del 0 al 1 con decimales ) o un porcentaje ( del 0% al 100% ). Formato HSL : Pr\u00e1cticamente id\u00e9ntico al anterior. En lugar de hsl() indicamos hsla() . A\u00f1adimos un nuevo valor como canal alfa ( valor o porcentaje ). Formato Hexadecimal : Es posible indicar ( al final ) un par adicional que indique el grado de transparencia. Por ejemplo, el color #FF0000 reescrito como #FF000077 se tratar\u00eda de dicho color, con un grado de transparencia casi del 50% ( 00 es 0%, 80 es 50%, FF es 100%). Veamos algunos ejemplos de cada caso: div { background-color: rgba(0, 0, 0, 0.5); background-color: rgba(0, 0, 0, 50%); background-color: hsla(180deg, 50%, 25%, 0.75); background-color: hsla(180deg, 50%, 25%, 75%); background-color: #aa44ba80; } \u00a1OJO! : El formato de transparencia en formato hexadecimal se encuentra actualmente bien soportado, pero puede no ser compatible en versiones m\u00e1s antiguas u otros navegadores. Consejo: Una herramienta genial para seleccionar varios colores en nuestros proyectos es Adobe Color CC . Nos permite escoger entre colores an\u00e1logos, monocrom\u00e1ticos, tr\u00edadas, colores complementarios, compuestos o tonos similares. Muy visual e intuitiva. Otra herramienta, m\u00e1s simple pero muy pr\u00e1ctica es HSL Picker , donde puedes elegir el color deseado utilizando el formato de colores HSL y pudiendo seleccionar incluso los canales alfa. Fondos de CSS \u00b6 Es posible que, buscando hacer un dise\u00f1o m\u00e1s avanzado, en lugar de utilizar un color de fondo quieras utilizar im\u00e1genes. Para ello, CSS te proporciona la propiedad background-image , con la cu\u00e1l puedes indicar im\u00e1genes de fondo o, como veremos m\u00e1s adelante, incluso degradados de varios colores. Im\u00e1genes de fondo \u00b6 En el caso de querer utilizar una imagen de fondo, como ya hemos dicho, utilizaremos la propiedad background-image y en el valor, el nombre de la imagen ( o la direcci\u00f3n donde est\u00e1 alojada ), siempre rodeada del texto url() . Propiedad Valor Significado background-image none No utiliza ninguna imagen de fondo. background-image url( imagen.jpg ) Usa la imagen de nombre imagen.jpg como fondo. En el caso de que s\u00f3lo se coloque el nombre de la imagen ( por ejemplo, imagen.jpg ), el navegador buscar\u00e1 la imagen en la misma carpeta donde est\u00e1 el archivo CSS. Esto es lo que se llama una ruta relativa . En el caso de que se coloque la ruta completa, por ejemplo https://i.emezeta.com/img/logo.png , se acceder\u00e1 a la imagen alojada en esa direcci\u00f3n web. Esto es lo que se llama ruta absoluta . NOTA : En el caso de que no se encuentre la imagen o el valor de background-image se haya establecido a none , no se utilizar\u00e1 ninguna imagen de fondo, y en su lugar se mostrar\u00e1 el color establecido con background-color . Una vez establecida una imagen de fondo con background-image , se puede personalizar la forma en la que se mostrar\u00e1 dicha imagen mediante propiedades como background-repeat , background-attachment o background-position , entre otras: Propiedad Valor Significado background-repeat repeat Repite la imagen de fondo horizontal y verticalmente. repeat-x Repite la imagen de fondo s\u00f3lo horizontalmente (eje x). repeat-y Repite la imagen de fondo s\u00f3lo verticalmente (eje y). space Repite la imagen y rellena con espacio los huecos. round Repite la imagen y amplia cada repetici\u00f3n para ajustar. no-repeat La imagen de fondo no se repite. background-attachment scroll Cuando hacemos scroll la imagen de fondo se desplaza. fixed Cuando hacemos scroll, la imagen de fondo permanece fija. background-position 1 par\u00e1metro. Desplaza la imagen de fondo al punto (x, 50%). 2 par\u00e1metros. Desplaza la imagen de fondo al punto (x, y). La propiedad background-repeat especifica si la imagen se repetir\u00e1 horizontalmente ( repeat-x ), si se repetir\u00e1 verticalmente ( repeat-y ), si lo har\u00e1 en ambas direcciones ( repeat ) o en ninguna ( no-repeat ). Por defecto, si no se indica nada, esta propiedad est\u00e1 ajustada en repeat . Existen tambi\u00e9n dos valores interesantes, space y round , los cuales asumen impl\u00edcitamente que se repite el fondo. En el caso de que tengamos una imagen de fondo que se repita varias veces en mosaico, space evita que se corte la imagen, introduciendo un espacio entre las repeticiones individuales. Por su parte, round lo que hace es ajustar la imagen individual, de modo que la expande o contrae para ajustarla al espacio disponible. En ambos casos la repetici\u00f3n de los fondos nunca se mostrar\u00e1 cortada. Siempre se podr\u00e1 combinar en cada eje, con valores mixtos, por ejemplo, utilizando background-repeat: space round , lo que aplicar\u00e1 space al eje X y round al eje Y. Si s\u00f3lo se especifica uno, se aplicar\u00e1 a ambos ejes. La propiedad background-attachment especificar\u00e1 si la imagen de fondo seguir\u00e1 el desplazamiento del usuario ( scroll, el comportamiento por defecto ) o por el contrario, se quedar\u00e1 fijado y no se mover\u00e1 ( fixed ), mientras el usuario se desplaza por la p\u00e1gina. Por \u00faltimo, background-position coloca la imagen en la zona especificada por y por . Por defecto, esos valores son 0% 0% , pero pueden especificarse con unidades ( porcentajes, p\u00edxels, etc... ) o mediante palabras clave que representan zonas predefinidas ( top, left, right, bottom y center ). Si s\u00f3lo se especifica un valor, se tomar\u00e1 para el eje x, mientras que el valor del eje Y ser\u00e1 autom\u00e1ticamente establecido a center ( o 50% ). Atajo cl\u00e1sico: Fondos \u00b6 Es posible establecer todas estas propiedades anteriores en una sola regla de CSS a modo de atajo, y as\u00ed ahorrar mucho espacio en escribir las propiedades anteriores por separado. Aunque no es estrictamente obligatorio, se aconseja respetar el siguiente orden ( acostumbrarse a usar el mismo orden es una buena pr\u00e1ctica ): div { /* background: <color> <image> <repeat> <attachment> <position> */ background : #FFF url ( imagen.jpg ) repeat-x scroll top left ; } Y con esto, ya conocemos las ventajas b\u00e1sicas de CSS a trav\u00e9s de propiedades tan interesantes como background-color o background-image . Sin embargo, la llegada de CSS3 incorpor\u00f3 novedades muy interesantes en nuestros navegadores, que mediante versiones anteriores a CSS3 no era posible realizar ( o era algo bastante complejo ). Opacidad \u00b6 Es posible utilizar la propiedad CSS3 opacity para establecer una transparencia total sobre el elemento indicado. Cuando decimos << transparencia total >> nos referimos a que la transparencia se aplicar\u00e1 al elemento en cuesti\u00f3n y a todos los elementos HTML que est\u00e9n en su interior. Propiedad Valor Significado opacity Establece una transparencia ( 0 = 100% transparente, a 1 = 100% opaco) El valor a indicar es un n\u00famero entre 0 ( completamente transparente ) y 1 ( completamente visible ), pudiendo establecer decimales para valores intermedios: div { background-color : #FF0000 ; color : #FFFFFF ; opacity : 0.5 ; } Como se puede ver en la imagen, esto har\u00e1 que la capa div ( el recuadro rojo ) se muestre al 50% de opacidad , con color de texto blanco ( en el caso de existir texto ) y fondo de color rojo. Si buscamos una transparencia parcial ( color de fondo transparente que no afecte al texto ) debemos utilizar los valores RGBA o HSLA ( canales alfa ) en la propiedad background-color : div { color : white ; background-color : RGBA ( 255 , 0 , 0 , 0.5 ); } De este modo, s\u00f3lo aplicamos la transparencia al color de fondo, mientras que con opacity se aplica a toda la capa en s\u00ed, por lo que afecta a todos los elementos que est\u00e1n dentro de la capa. Fondos m\u00faltiples \u00b6 CSS3 ofrece nuevas caracter\u00edsticas a la hora de utilizar im\u00e1genes de fondo, como por ejemplo la posibilidad de establecer m\u00faltiples im\u00e1genes de fondo de forma simult\u00e1nea: div { background-image : url ( manz.png ), url ( fondo2.jpg ), url ( fondo3.jpg ); background-repeat : no-repeat ; } De esta forma, se pueden utilizar varias im\u00e1genes y superponerlas una sobre la otra, algo especialmente interesante si la primera imagen de fondo est\u00e1 en formato PNG ( la cu\u00e1l soporta transparencias ). Al establecer im\u00e1genes de fondo m\u00faltiples, las propiedades complementarias a los fondos como background-repeat , background-position y otras, pueden actuar de forma personalizada para cada fondo. Mientras que en el fragmento de c\u00f3digo anterior, el navegador le indica a cada una de las tres im\u00e1genes que no debe repetirse, en el siguiente fragmento de c\u00f3digo veremos que es posible indicar individualmente el comportamiento de cada una, separando por comas: div { background-image : url ( manz.png ), url ( fondo2.jpg ), url ( fondo3.jpg ); background-repeat : no-repeat , repeat-x , repeat ; } Adem\u00e1s, CSS3 tambi\u00e9n a\u00f1ade nuevas propiedades para especificar como cubrir\u00e1 la imagen de fondo al elemento en cuesti\u00f3n: Propiedad Valor Significado background-clip border-box padding-box background-origin border-box padding-box La propiedad background-clip establece la forma en la que el color o la imagen de fondo cubrir\u00e1 el elemento, mientras que la propiedad background-origin intenta posicionar el comienzo de la imagen de fondo, \u00fatil con im\u00e1genes. La primera utiliza border-box como valor por defecto, mientras que la segunda utiliza padding-box . Ambas propiedades pueden tomar uno de los siguientes valores: Valor Significado padding-box La imagen o color de fondo cubrir\u00e1 la zona del espaciado y contenido. border-box La imagen o color de fondo cubrir\u00e1 la zona del borde, espaciado y contenido. content-box La imagen o color de fondo cubrir\u00e1 s\u00f3lo la zona del contenido. Consejo : Una buena forma de darse cuenta del funcionamiento de estas propiedades es establecer un borde grueso punteado. Usando border-box la imagen de fondo se extender\u00e1 en todo el elemento, incluyendo borde, espaciado y contenido. El valor padding-box extender\u00e1 la imagen de fondo s\u00f3lo mediante el padding y el contenido, y por \u00faltimo, la propiedad content-box extender\u00e1 la imagen de fondo s\u00f3lo en la zona del contenido. Tama\u00f1o de fondos \u00b6 Una de las \u00faltimas incorporaciones a la familia de propiedades de fondos de imagen es la propiedad background-size , la cu\u00e1l ajusta el tama\u00f1o ( ancho y alto ) de la imagen de fondo, por si deseamos escalarla a un tama\u00f1o diferente. Por defecto, una imagen de fondo toma autom\u00e1ticamente el tama\u00f1o de la imagen ( que podr\u00eda ser demasiado grande, por ejemplo ). Para no tener que modificar la imagen original de forma manual con un editor de im\u00e1genes, podemos utilizar esta propiedad y ajustarla a nuestro agrado mediante CSS: Propiedad Valor Significado background-size 1 par\u00e1metro. Aplica un de ( ancho \u00d7 auto ) a la imagen de fondo. 2 par\u00e1metros. Aplica un de ( ancho \u00d7 alto ) a la imagen de fondo. Los valores de tama\u00f1o que podemos utilizar, son los siguientes: Valor Significado auto No escala la imagen. Utiliza el tama\u00f1o original. Es el valor por defecto. unidad Indicamos el tama\u00f1o espec\u00edfico que queremos usar ( p\u00edxels o porcentaje, por ej. ). cover Escala el ancho de la imagen de fondo al ancho del elemento. contain Escala el alto de la imagen de fondo al alto del elemento. Los dos \u00faltimos valores ( cover y contain ) s\u00f3lo pueden utilizarse en el caso de que se especifique un s\u00f3lo par\u00e1metro como valor en la propiedad background-size . Atajo moderno: Fondos \u00b6 Los navegadores modernos, incluyen una nueva propiedad de atajo background que permite incluir los valores de propiedades CSS3 como background-clip , background-origin o background-size , que fueron incorporados m\u00e1s tarde que los dem\u00e1s. Es por ello, que el orden aconsejado para adquirir buenas pr\u00e1cticas es el siguiente y var\u00eda un poco respecto a la otra propiedad de atajo tradicional: div { /* background: <color> <position> <size> <repeat> <origin> <clip> <attachment> <image> */ background : #FFF top left cover repeat-x padding-box border-box scroll url ( imagen.jpg ); } Gradientes CSS \u00b6 Otra funcionalidad que se echaba mucho de menos en versiones anteriores de CSS era la de utilizar fondos con gradientes , o lo que es lo mismo, un color inicial que se transforma poco a poco en uno o varios colores sucesivamente. Sin embargo, en versiones anteriores a CSS3 no era posible hacerlo desde c\u00f3digo. Por suerte, hoy en d\u00eda hemos superado esa limitaci\u00f3n. En CSS3 se introducen algunas expresiones relacionadas que har\u00e1n esta tarea algo muy sencillo, pudiendo utilizarlas f\u00e1cilmente mediante la propiedad background-image e indicando el tipo de gradiente deseado: Propiedad Funci\u00f3n de gradiente Significado background-image linear-gradient(...) Define un gradiente lineal, en una direcci\u00f3n espec\u00edfica. radial-gradient(...) Define un gradiente radial, en forma de c\u00edrculo o elipse. conic-gradient(...) Define un gradiente c\u00f3nico, desde un punto de vista superior. Veamos cada uno de estos gradientes por separado para entender como funcionan. Gradientes lineales \u00b6 El primer tipo de gradiente es el gradiente lineal , que permite crear fondos degradados que van en una cierta direcci\u00f3n y cambian de un color a otro, dependiendo de la lista de colores indicada por par\u00e1metro. La sintaxis a utilizar debe ser una de las siguientes ( es la misma, pero con menor o mayor cantidad opcional de informaci\u00f3n ): Valor Significado linear-gradient(,, ...) Gradiente b\u00e1sico entre colores. linear-gradient( ,,, ...) linear-gradient( ,,, ...) El ejemplo m\u00e1s b\u00e1sico de los anteriores es el primero, donde simplemente indicaremos los colores del gradiente ( para que se aprecie el degradado, como m\u00ednimo deben ser 2 colores ): div { background-image : linear-gradient ( blue , red ); } Esto dibujar\u00e1 un degradado con los colores indicados en direcci\u00f3n desde arriba hacia abajo , que es la direcci\u00f3n por defecto. Se pueden ir a\u00f1adiendo m\u00e1s colores al gradiente si se desea, o cambiar la direcci\u00f3n del degradado, como veremos a continuaci\u00f3n: Pero los par\u00e1metros que se pueden utilizar son los siguientes: Par\u00e1metros Valor Direcci\u00f3n del gradiente lineal ( ver valores posibles m\u00e1s adelante ). El valor por defecto es to bottom . N\u00famero de \u00e1ngulos de la direcci\u00f3n del gradiente lineal. Alternativa a la opci\u00f3n anterior. El primer color del gradiente El siguiente color del gradiente De forma opcional, se puede indicar a que altura comienza a cambiar el gradiente. ... (Se pueden seguir a\u00f1adiendo colores) Direcci\u00f3n del gradiente \u00b6 En el ejemplo visual anterior, la direcci\u00f3n del gradiente es horizontal (hacia la derecha). El primer ejemplo tiene s\u00f3lo 2 colores (azul y rojo), mientras que el segundo tiene 3 colores (azul, amarillo y rojo). Ambos tienen como direcci\u00f3n una orientaci\u00f3n hacia la derecha: div { background-image : linear-gradient ( to right , blue , red ); /* Primer ejemplo */ background-image : linear-gradient ( to right , blue , yellow , red ); /* Segundo ejemplo */ } Como vemos, el primer par\u00e1metro utilizado fue to right , que es lo que indica la orientaci\u00f3n del gradiente. En este par\u00e1metro se puede indicar tanto una palabra clave como un n\u00famero de grados que represente la direcci\u00f3n: Para que quede a\u00fan m\u00e1s claro, veamos una tabla de equivalencias: Direcci\u00f3n Grados Significado to top 0 \u00f3 360deg Gradiente lineal hacia arriba. to top right 35deg Gradiente diagonal hacia derecha-arriba. to right 90deg Gradiente lineal hacia derecha. to bottom right 145deg Gradiente diagonal hacia abajo-derecha. to bottom 180deg Gradiente lineal hacia abajo. to bottom left 215deg Gradiente diagonal hacia abajo-izquierda. to left 270deg Gradiente lineal hacia izquierda. to top left 325deg Gradiente diagonal hacia izquierda-arriba. Nota : Si utilizas los grados en lugar de las palabras clave puedes usar valores intermedios ( por ejemplo, 280deg o 58deg ) y ser m\u00e1s preciso con la direcci\u00f3n si lo necesitas. Colores del gradiente \u00b6 Por defecto, las distancias entre colores se ajustan autom\u00e1ticamente con proporciones equivalentes, salvo que especifiquemos un tama\u00f1o ( porcentaje o p\u00edxeles, por ejemplo ) justo despu\u00e9s del color en cuesti\u00f3n, que se puede indicar de forma opcional: div { background : linear-gradient ( to right , blue 50 % , red 55 % , green 75 % ); } Este tama\u00f1o representa el momento en el que el gradiente comienza a cambiar el color, respecto al tama\u00f1o del gradiente completo. En este fragmento de c\u00f3digo, a diferencia del anterior, nos mostrar\u00eda un gradiente similar al que vemos a continuaci\u00f3n, donde se aprecia que los tama\u00f1os o distancias entre colores no son equivalentes, sino que corresponden azul ( 0-50% ), rojo ( 50%-55% ) y verde ( 55%-75% ), el cu\u00e1l permanece hasta el final al no haber ning\u00fan color m\u00e1s: Gradiente radial \u00b6 Como vimos al principio, a parte de gradientes lineales, tambi\u00e9n podemos crear otros tipos de gradientes, como por ejemplo, los gradientes radiales , que permite crear degradados con formas circulares. Para ello, s\u00f3lo tenemos que utilizar la expresi\u00f3n radial-gradient en lugar de linear-gradient : De la misma forma, tambi\u00e9n tenemos diferentes modalidades para crear gradientes radiales , desde una muy b\u00e1sica donde le indicamos s\u00f3lo los colores, hasta otra m\u00e1s avanzada donde le damos forma, tama\u00f1o e incluso ubicaci\u00f3n: Valor Significado radial-gradient(,, ...) Gradiente b\u00e1sico entre colores. radial-gradient( forma ,,, ...) Gradiente con forma circular o el\u00edptica. radial-gradient( forma ,,, ...) Gradiente con tama\u00f1o o dimensi\u00f3n. radial-gradient( forma at ubicaci\u00f3n ,,, ...) Gradiente con colocaci\u00f3n inicial. radial-gradient( forma at ubicaci\u00f3n ,,, ...) Gradiente con tama\u00f1os entre colores. Algunos ejemplos aplicando estos par\u00e1metros: div { background : radial-gradient ( gold , red , black ); background : radial-gradient ( ellipse , gold 50 % , red 55 % , black 75 % ); background : radial-gradient ( circle 200 px , gold 50 % , red 55 % , black 75 % ); background : radial-gradient ( circle 400 px at left , gold 50 % , red 55 % , black 75 % ); } Donde: Par\u00e1metros Valor [forma] ellipse farthest-corner [ubicaci\u00f3n] center El primer color del gradiente El siguiente color del gradiente De forma opcional, se puede indicar a que altura comienza a cambiar el gradiente. ... (Se pueden seguir a\u00f1adiendo colores) En el caso de la forma podemos elegir circle o ellipse , dependiendo de si queremos un gradiente con forma circular o uno con forma de elipse ( que se adapta a la forma del elemento ). En el caso del tama\u00f1o del elipse o c\u00edrculo, tenemos varias opciones para indicar el tama\u00f1o que tendr\u00e1 nuestro gradiente: Valor Significado farthest-corner Intenta cubrir hasta la esquina m\u00e1s lejana ( expande hacia ambos lados ). farthest-side Intenta cubrir hasta el lado m\u00e1s lejano ( expande hacia un s\u00f3lo lado ). closest-corner Intenta cubrir hasta la esquina m\u00e1s cercana. closest-side Intenta cubrir hasta el lado m\u00e1s cercano. Le da un tama\u00f1o espec\u00edfico al gradiente ( p\u00edxeles, porcentajes, etc... ). S\u00f3lo usable en circle . En el caso de la ubicaci\u00f3n , simplemente especificamos la posici\u00f3n en la que queremos que est\u00e9 colocado el centro del gradiente. Gradiente c\u00f3nico \u00b6 Recientemente, se ha incorporado un nuevo tipo de gradiente muy interesante en CSS, visualmente muy similar al gradiente radial , pero trat\u00e1ndose de una visualizaci\u00f3n de un cono desde un plano superior, incluyendo sus sombras. Valor Significado conic-gradient(,, ...) Gradiente b\u00e1sico entre colores. conic-gradient(from,,, ...) Gradiente indicando punto de inicio. conic-gradient(from at ubicaci\u00f3n ,,, ...) Gradiente indicando ubicaci\u00f3n del inicio. Donde: Par\u00e1metros Valor from \u00c1ngulo desde donde comienza el gradiente c\u00f3nico. Por defecto from 0deg . at [ubicaci\u00f3n] center El primer color del gradiente El siguiente color del gradiente De forma opcional, se puede indicar a que altura comienza a cambiar el gradiente. ... (Se pueden seguir a\u00f1adiendo colores) A continuaci\u00f3n podemos ver la diferencia de un gradiente linear-gradient , un radial-gradient y un conic-gradient : Poco hay que a\u00f1adir en este tipo de gradiente, ya que funciona muy similar a los anteriores. La \u00fanica diferencia mencionable es el uso de la palabra clave from antes de indicar los \u00e1ngulos de direcci\u00f3n, si se requiere. Gradientes repetitivos \u00b6 Por \u00faltimo, todos los gradientes que hemos visto permiten la posibilidad de a\u00f1adir el prefijo repeating- para conseguir que el efecto del gradiente, en lugar de adaptarse a la regi\u00f3n completa, realice una repetici\u00f3n constantemente. Comprueba los siguientes ejemplos de forma individual: div { background : repeating-linear-gradient ( blue 10 % , yellow 20 % , red 30 % ); /* Ejemplo 1 */ background : repeating-radial-gradient ( blue 10 % , yellow 20 % , red 30 % ); /* Ejemplo 2 */ background : repeating-conic-gradient ( blue 10 % , yellow 20 % , red 30 % ); /* Ejemplo 3 */ } Es importante que al usar el prefijo repeating- se especifiquen tama\u00f1os a los colores, puesto que se necesita saber cuando comenzar\u00e1 a repetirse. En los ejemplos anteriores, los colores seguir\u00edan el patr\u00f3n hasta el \u00faltimo color y volver\u00edan a repetirse sucesivamente, de forma que tendr\u00edamos: Primera repetici\u00f3n: blue 10%, yellow 20%, red 30% Segunda repetici\u00f3n: blue 40%, yellow 50%, red 60% Tercera repetici\u00f3n: blue 70%, yellow 80%, red 90% Cuarta repetici\u00f3n: blue 100% Fuente: Lenguaje de CSS por Manz","title":"Colores y fondos"},{"location":"desarrollo/css/03-colores_y_fondos/#colores-y-fondos","text":"","title":"Colores y fondos"},{"location":"desarrollo/css/03-colores_y_fondos/#colores-css","text":"Uno de los primeros cambios de estilo que podemos pensar realizar en un documento HTML es hacer variaciones en los colores de primer plano y de fondo. Esto es posible con las primeras dos propiedades que veremos a continuaci\u00f3n: Propiedad Valor Significado color color Cambia el color del texto que est\u00e1 en el interior de un elemento. background-color color Cambia el color de fondo de un elemento. La propiedad color establece el color del texto, mientras que la propiedad background-color establece el color de fondo del elemento. Todas las propiedades CSS donde existen valores , establecen la posibilidad de indicar 4 formas alternativas ( con algunos derivados ) para especificar el color deseado: Nombre Formato Ejemplo Palabra clave predefinida [palabra clave] red Esquema RGB rgb( rojo , verde , azul ) rgb(255, 0, 0) Esquema RGB con canal alfa rgba( rojo , verde , azul , alfa ) rgba(255, 0, 0, 0.25) Esquema RGB hexadecimal # RRGGBB #ff0000 Esquema RGB hexadecimal con canal alfa # RGBBBAA #ff000040 Esquema HSL hsl( color , saturaci\u00f3n , brillo ) hsl(0, 100%, 100%) Esquema HSL con canal alfa hsla( color , saturaci\u00f3n , brillo , alfa ) hsla(0, 100%, 100%, 0.25) A continuaci\u00f3n iremos explicando cada uno de estos formatos para entender como se especifican los colores en CSS y utilizar el m\u00e9todo que m\u00e1s se adapte a nuestras necesidades. Consejo : Si lo que buscamos es un sistema para extraer colores ( eye dropper ) de una p\u00e1gina web, podemos utilizar la extensi\u00f3n para Chrome de ColorZilla o el propio Chrome Developer Tools , que integra dicha funcionalidad.","title":"Colores CSS"},{"location":"desarrollo/css/03-colores_y_fondos/#palabras-clave-de-color","text":"El primer caso ( y m\u00e1s limitado ) permite establecer el color utilizando palabras reservadas de colores, como red , blue , orange , white , navy , yellow u otras. Existen m\u00e1s de 140 palabras clave para indicar colores: Nombre del color Valor hexadecimal Valores RGB Color Alice azul # F0F8FF rgb (240,248,255) Blanco antiguo # FAEBD7 rgb (250,235,215) Agua # 00FFFF rgb (0,255,255) Aguamarina # 7FFFD4 rgb (127,255,212) Azur # F0FFFF rgb (240,255,255) Beige # F5F5DC rgb (245,245,220) Sopa de mariscos # FFE4C4 rgb (255,228,196) Negro # 000000 rgb (0,0,0) BlanchedAlmond #FFEBCD rgb (255,235,205) Azul # 0000FF rgb (0,0,255) Violeta Azul # 8A2BE2 rgb (138,43,226) marr\u00f3n # A52A2A rgb (165,42,42) BurlyWood # DEB887 rgb (222,184,135) CadetBlue # 5F9EA0 rgb (95,158,160) Monasterio # 7FFF00 rgb (127,255,0) Chocolate # D2691E rgb (210,105,30) Coral # FF7F50 rgb (255,127,80) Aciano Azul # 6495ED rgb (100,149,237) Seda de maiz # FFF8DC rgb (255,248,220) carmes\u00ed # DC143C rgb (220,20,60) Cian # 00FFFF rgb (0,255,255) Azul oscuro # 00008B rgb (0,0,139) DarkCyan # 008B8B rgb (0,139,139) DarkGoldenRod # B8860B rgb (184,134,11) Gris oscuro # A9A9A9 rgb (169,169,169) Gris oscuro # A9A9A9 rgb (169,169,169) Verde oscuro # 006400 rgb (0,100,0) DarkKhaki # BDB76B rgb (189,183,107) DarkMagenta # 8B008B rgb (139,0,139) DarkOliveGreen # 556B2F rgb (85,107,47) Naranja oscuro # FF8C00 rgb (255,140,0) Orqu\u00eddea Oscura # 9932CC rgb (153,50,204) Rojo oscuro # 8B0000 rgb (139,0,0) Salm\u00f3n oscuro # E9967A rgb (233,150,122) DarkSeaGreen # 8FBC8F rgb (143,188,143) DarkSlateBlue # 483D8B rgb (72,61,139) DarkSlateGray # 2F4F4F rgb (47,79,79) DarkSlateGrey # 2F4F4F rgb (47,79,79) DarkTurquoise # 00CED1 rgb (0,206,209) Violeta oscuro # 9400D3 rgb (148,0,211) Rosa profundo # FF1493 rgb (255,20,147) DeepSkyBlue # 00BFFF rgb (0,191,255) DimGray # 696969 rgb (105,105,105) DimGrey # 696969 rgb (105,105,105) DodgerBlue # 1E90FF rgb (30,144,255) Ladrillo refractario # B22222 rgb (178,34,34) FloralWhite # FFFAF0 rgb (255,250,240) Bosque verde # 228B22 rgb (34,139,34) Fucsia # FF00FF rgb (255,0,255) Gainsboro #DCDCDC rgb (220,220,220) Fantasma blanco # F8F8FF rgb (248,248,255) Oro # FFD700 rgb (255,215,0) Vara de oro # DAA520 rgb (218,165,32) gris # 808080 rgb (128,128,128) Gris # 808080 rgb (128,128,128) Verde # 008000 rgb (0,128,0) Verde amarillo # ADFF2F rgb (173,255,47) Gotas de miel # F0FFF0 rgb (240,255,240) Rosa caliente # FF69B4 rgb (255,105,180) IndianRed # CD5C5C rgb (205,92,92) \u00cdndigo # 4B0082 rgb (75,0,130) Marfil # FFFFF0 rgb (255,255,240) Caqui # F0E68C rgb (240,230,140) Lavanda # E6E6FA rgb (230,230,250) LavenderBlush # FFF0F5 rgb (255,240,245) C\u00e9sped verde # 7CFC00 rgb (124,252,0) Lim\u00f3n chiffon #FFFACD rgb (255,250,205) Azul claro # ADD8E6 rgb (173,216,230) LightCoral # F08080 rgb (240,128,128) Cian claro # E0FFFF rgb (224,255,255) LightGoldenRodYellow # FAFAD2 rgb (250,250,210) Gris claro # D3D3D3 rgb (211,211,211) Gris claro # D3D3D3 rgb (211,211,211) Verde claro # 90EE90 rgb (144,238,144) Rosa claro # FFB6C1 rgb (255,182,193) Salm\u00f3n de luz # FFA07A rgb (255,160,122) LightSeaGreen # 20B2AA rgb (32,178,170) LightSkyBlue # 87CEFA rgb (135,206,250) LightSlateGray # 778899 rgb (119,136,153) LightSlateGrey # 778899 rgb (119,136,153) LightSteelBlue # B0C4DE rgb (176,196,222) Amarillo claro # FFFFE0 rgb (255,255,224) Lima # 00FF00 rgb (0,255,0) Verde lima # 32CD32 rgb (50,205,50) Lino # FAF0E6 rgb (250,240,230) Magenta # FF00FF rgb (255,0,255) Granate # 800000 rgb (128,0,0) MedioAquaMarine # 66CDAA rgb (102,205,170) Azul medio # 0000CD rgb (0,0,205) MediumOrchid # BA55D3 rgb (186,85,211) Mediano # 9370DB rgb (147,112,219) MediumSeaGreen # 3CB371 rgb (60,179,113) MediumSlateBlue # 7B68EE rgb (123,104,238) MediumSpringGreen # 00FA9A rgb (0,250,154) MediumTurquoise # 48D1CC rgb (72,209,204) MediumVioletRed # C71585 rgb (199,21,133) MidnightBlue # 191970 rgb (25,25,112) MintCream # F5FFFA rgb (245,255,250) MistyRose # FFE4E1 rgb (255,228,225) Mocas\u00edn # FFE4B5 rgb (255,228,181) Navajoblanco #FFDEAD rgb (255,222,173) Armada # 000080 rgb (0,0,128) Antiguo lace # FDF5E6 rgb (253,245,230) Aceituna # 808000 rgb (128,128,0) Verde oliva # 6B8E23 rgb (107,142,35) naranja # FFA500 rgb (255,165,0) Rojo naranja # FF4500 rgb (255,69,0) Orqu\u00eddea # DA70D6 rgb (218,112,214) PaleGoldenRod # EEE8AA rgb (238,232,170) Verde p\u00e1lido # 98FB98 rgb (152,251,152) PaleTurquoise #AFEEEE rgb (175,238,238) PaleVioletRed # DB7093 rgb (219,112,147) PapayaWhip # FFEFD5 rgb (255,239,213) Peachpuff # FFDAB9 rgb (255,218,185) Per\u00fa # CD853F rgb (205,133,63) Rosado # FFC0CB rgb (255,192,203) ciruela # DDA0DD rgb (221,160,221) Azul p\u00e1lido # B0E0E6 rgb (176,224,230) P\u00farpura # 800080 rgb (128,0,128) RebeccaPurple # 663399 rgb (102,51,153) rojo # FF0000 rgb (255,0,0) RosyBrown # BC8F8F rgb (188,143,143) Azul real # 4169E1 rgb (65,105,225) SaddleBrown # 8B4513 rgb (139,69,19) Salm\u00f3n # FA8072 rgb (250,128,114) SandyBrown # F4A460 rgb (244,164,96) Mar verde # 2E8B57 rgb (46,139,87) Concha # FFF5EE rgb (255,245,238) Tierra de siena # A0522D rgb (160,82,45) Plata # C0C0C0 rgb (192,192,192) Cielo azul # 87CEEB rgb (135,206,235) SlateBlue # 6A5ACD rgb (106,90,205) SlateGray # 708090 rgb (112,128,144) Pizarra gris # 708090 rgb (112,128,144) Nieve #FFAFA rgb (255,250,250) Primavera verde # 00FF7F rgb (0,255,127) Azul acero # 4682B4 rgb (70,130,180) Bronceado # D2B48C rgb (210,180,140) Teal # 008080 rgb (0,128,128) Cardo # D8BFD8 rgb (216,191,216) Tomate # FF6347 rgb (255,99,71) Turquesa # 40E0D0 rgb (64,224,208) Violeta # EE82EE rgb (238,130,238) Trigo # F5DEB3 rgb (245,222,179) Blanco #FFFFFF rgb (255,255,255) Humo blanco # F5F5F5 rgb (245,245,245) Amarillo # FFFF00 rgb (255,255,0) Amarillo verde # 9ACD32 rgb (154,205,50) Adem\u00e1s, existen algunos valores especiales que puedes utilizar cuando quieras especificar un color, como colores transparentes o el color actual del texto , muy \u00fatil para SVG, por ejemplo: Valor Significado transparent Establece un color completamente transparente (valor por defecto de background-color ) currentColor Establece el mismo color que se est\u00e1 utilizando para el texto (CSS3 y SVG) Veamos algunos ejemplos de palabras clave de color: div { background-color: blue; background-color: transparent; background-color: lightpink; background-color: rebeccapurple; /* En honor a Rebeca, la hija de Eric Meyer */ }","title":"Palabras clave de color"},{"location":"desarrollo/css/03-colores_y_fondos/#formato-rgb","text":"Uno de los m\u00e9todos m\u00e1s conocidos por los dise\u00f1adores gr\u00e1ficos es utilizar el formato RGB . Las siglas RGB significan rojo , verde y azul , por lo que cada cifra ( del 0 al 255 ) representa la intensidad de cada componente de color. Como se puede ver en la siguiente imagen, si utilizamos una cantidad (0, 0, 0) de cada canal, obtenemos el color negro . En cambio, si utilizamos una cantidad (255, 0, 0), obtendremos el color rojo . De esta forma, mezclando las cantidades de cada canal, se puede obtener pr\u00e1cticamente cualquier color. Existen muchos esquemas de colores, pero en dise\u00f1o web nos interesa particularmente el esquema RGB ( junto al HSL ). La mayor\u00eda de los editores tienen los denominados ColorPicker , que no son m\u00e1s que un sistema c\u00f3modo y r\u00e1pido para elegir un color a base de clics por una paleta o circulo visual. Tambi\u00e9n podemos hacerlo directamente en buscadores como Duck Duck Go o Google . Veamos algunos ejemplos de colores en formato RGB: div { background-color: rgb(125, 80, 10); background-color: rgb(0, 0, 34); color: rgb(255, 255, 0) }","title":"Formato RGB"},{"location":"desarrollo/css/03-colores_y_fondos/#formato-hexadecimal","text":"El formato hexadecimal es el m\u00e1s utilizado por los desarrolladores web, aunque en principio puede parecer algo extra\u00f1o y complicado, sobre todo si no has o\u00eddo hablar nunca del sistema hexadecimal ( sistema en base 16 en lugar del que utilizamos normalmente, en base 10 ). Cada par de letras simboliza el valor del RGB en el sistema de numeraci\u00f3n hexadecimal, as\u00ed pues, el color #FF0000 , o sea HEX(FF,00,00), es equivalente al RGB(255,0,0), que es tambi\u00e9n equivalente al HSL(0, 100%, 100%). Veamos algunos ejemplos para clarificarlo: Hexadecimal Hex. abreviado Color RGB Palabra clave #FF0000 #F00 255,0,0 red (rojo) #000000 #000 0,0,0 black (negro) #00FFFF #0FF 0, 255, 255 cyan (azul claro) #9370DB #97D 147,112,219 mediumpurple (lila) HailPixel nos proporciona una manera muy sencilla y r\u00e1pida de seleccionar tonalidades de color en formato hexadecimal con s\u00f3lo mover el rat\u00f3n. Por otro lado, en ColorSpire puedes seleccionar el color deseado y observar como var\u00edan tanto los valores hexadecimales como los valores RGB o HSL ( ver a continuaci\u00f3n ). Truco : Como se puede ver en la segunda columna, para ahorrar espacio puedes utilizar el formato hexadecimal abreviado , especificando s\u00f3lo las primeras tres cifras de cada par. Por ejemplo, #9933AA como #93A . El color abreviado s\u00f3lo ser\u00e1 fiel cuando los pares de cifras sean id\u00e9nticos (o al menos, aproximados). Veamos algunos ejemplos del formato hexadecimal (RGB abreviado): div { background-color: #512592; background-color: #000000; background-color: #451; /* Equivalente a #445511; */ }","title":"Formato hexadecimal"},{"location":"desarrollo/css/03-colores_y_fondos/#formato-hsl","text":"Las siglas HSL significan color ( o matiz ), saturaci\u00f3n y brillo . La primera cifra selecciona el matiz de color ( una cifra de 0 a 360 grados ), seleccionando el color del c\u00edrculo exterior de la imagen. Por su parte, las dos siguientes, son el porcentaje de saturaci\u00f3n y el brillo del color, respectivamente ( ambos, porcentajes de 0% a 100% ). Veamos algunos ejemplos del formato HSL: div { background-color: hsl(35deg, 0%, 100%); background-color: hsl(120deg, 25%, 75%); background-color: hsl(5deg, 20%, 20%); }","title":"Formato HSL"},{"location":"desarrollo/css/03-colores_y_fondos/#canales-alfa","text":"Es posible que deseemos indicar un color que tenga cierto grado de transparencia, y de esta forma, refleje el contenido, color o im\u00e1genes que se encuentren detr\u00e1s. Hasta ahora solo conocemos la palabra clave transparent , que es un color de transparencia total ( totalmente transparente ). Sin embargo, existe la posibilidad de utilizar los denominados canales alfa , que permiten establecer una transparencia parcial en determinados colores. Estos se pueden establecer en cualquier formato, salvo en los colores con palabras clave. Vamos a ver como hacerlo en cada caso: Formato RGB : En lugar de rgb() indicamos rgba() para establecer que usaremos un canal alfa. Posteriormente, en lugar de establecer 3 par\u00e1metros ( rojo, verde, azul ), a\u00f1adiremos uno m\u00e1s, que ser\u00e1 el canal alfa. Dicho canal alfa ser\u00e1 un valor ( del 0 al 1 con decimales ) o un porcentaje ( del 0% al 100% ). Formato HSL : Pr\u00e1cticamente id\u00e9ntico al anterior. En lugar de hsl() indicamos hsla() . A\u00f1adimos un nuevo valor como canal alfa ( valor o porcentaje ). Formato Hexadecimal : Es posible indicar ( al final ) un par adicional que indique el grado de transparencia. Por ejemplo, el color #FF0000 reescrito como #FF000077 se tratar\u00eda de dicho color, con un grado de transparencia casi del 50% ( 00 es 0%, 80 es 50%, FF es 100%). Veamos algunos ejemplos de cada caso: div { background-color: rgba(0, 0, 0, 0.5); background-color: rgba(0, 0, 0, 50%); background-color: hsla(180deg, 50%, 25%, 0.75); background-color: hsla(180deg, 50%, 25%, 75%); background-color: #aa44ba80; } \u00a1OJO! : El formato de transparencia en formato hexadecimal se encuentra actualmente bien soportado, pero puede no ser compatible en versiones m\u00e1s antiguas u otros navegadores. Consejo: Una herramienta genial para seleccionar varios colores en nuestros proyectos es Adobe Color CC . Nos permite escoger entre colores an\u00e1logos, monocrom\u00e1ticos, tr\u00edadas, colores complementarios, compuestos o tonos similares. Muy visual e intuitiva. Otra herramienta, m\u00e1s simple pero muy pr\u00e1ctica es HSL Picker , donde puedes elegir el color deseado utilizando el formato de colores HSL y pudiendo seleccionar incluso los canales alfa.","title":"Canales Alfa"},{"location":"desarrollo/css/03-colores_y_fondos/#fondos-de-css","text":"Es posible que, buscando hacer un dise\u00f1o m\u00e1s avanzado, en lugar de utilizar un color de fondo quieras utilizar im\u00e1genes. Para ello, CSS te proporciona la propiedad background-image , con la cu\u00e1l puedes indicar im\u00e1genes de fondo o, como veremos m\u00e1s adelante, incluso degradados de varios colores.","title":"Fondos de CSS"},{"location":"desarrollo/css/03-colores_y_fondos/#imagenes-de-fondo","text":"En el caso de querer utilizar una imagen de fondo, como ya hemos dicho, utilizaremos la propiedad background-image y en el valor, el nombre de la imagen ( o la direcci\u00f3n donde est\u00e1 alojada ), siempre rodeada del texto url() . Propiedad Valor Significado background-image none No utiliza ninguna imagen de fondo. background-image url( imagen.jpg ) Usa la imagen de nombre imagen.jpg como fondo. En el caso de que s\u00f3lo se coloque el nombre de la imagen ( por ejemplo, imagen.jpg ), el navegador buscar\u00e1 la imagen en la misma carpeta donde est\u00e1 el archivo CSS. Esto es lo que se llama una ruta relativa . En el caso de que se coloque la ruta completa, por ejemplo https://i.emezeta.com/img/logo.png , se acceder\u00e1 a la imagen alojada en esa direcci\u00f3n web. Esto es lo que se llama ruta absoluta . NOTA : En el caso de que no se encuentre la imagen o el valor de background-image se haya establecido a none , no se utilizar\u00e1 ninguna imagen de fondo, y en su lugar se mostrar\u00e1 el color establecido con background-color . Una vez establecida una imagen de fondo con background-image , se puede personalizar la forma en la que se mostrar\u00e1 dicha imagen mediante propiedades como background-repeat , background-attachment o background-position , entre otras: Propiedad Valor Significado background-repeat repeat Repite la imagen de fondo horizontal y verticalmente. repeat-x Repite la imagen de fondo s\u00f3lo horizontalmente (eje x). repeat-y Repite la imagen de fondo s\u00f3lo verticalmente (eje y). space Repite la imagen y rellena con espacio los huecos. round Repite la imagen y amplia cada repetici\u00f3n para ajustar. no-repeat La imagen de fondo no se repite. background-attachment scroll Cuando hacemos scroll la imagen de fondo se desplaza. fixed Cuando hacemos scroll, la imagen de fondo permanece fija. background-position 1 par\u00e1metro. Desplaza la imagen de fondo al punto (x, 50%). 2 par\u00e1metros. Desplaza la imagen de fondo al punto (x, y). La propiedad background-repeat especifica si la imagen se repetir\u00e1 horizontalmente ( repeat-x ), si se repetir\u00e1 verticalmente ( repeat-y ), si lo har\u00e1 en ambas direcciones ( repeat ) o en ninguna ( no-repeat ). Por defecto, si no se indica nada, esta propiedad est\u00e1 ajustada en repeat . Existen tambi\u00e9n dos valores interesantes, space y round , los cuales asumen impl\u00edcitamente que se repite el fondo. En el caso de que tengamos una imagen de fondo que se repita varias veces en mosaico, space evita que se corte la imagen, introduciendo un espacio entre las repeticiones individuales. Por su parte, round lo que hace es ajustar la imagen individual, de modo que la expande o contrae para ajustarla al espacio disponible. En ambos casos la repetici\u00f3n de los fondos nunca se mostrar\u00e1 cortada. Siempre se podr\u00e1 combinar en cada eje, con valores mixtos, por ejemplo, utilizando background-repeat: space round , lo que aplicar\u00e1 space al eje X y round al eje Y. Si s\u00f3lo se especifica uno, se aplicar\u00e1 a ambos ejes. La propiedad background-attachment especificar\u00e1 si la imagen de fondo seguir\u00e1 el desplazamiento del usuario ( scroll, el comportamiento por defecto ) o por el contrario, se quedar\u00e1 fijado y no se mover\u00e1 ( fixed ), mientras el usuario se desplaza por la p\u00e1gina. Por \u00faltimo, background-position coloca la imagen en la zona especificada por y por . Por defecto, esos valores son 0% 0% , pero pueden especificarse con unidades ( porcentajes, p\u00edxels, etc... ) o mediante palabras clave que representan zonas predefinidas ( top, left, right, bottom y center ). Si s\u00f3lo se especifica un valor, se tomar\u00e1 para el eje x, mientras que el valor del eje Y ser\u00e1 autom\u00e1ticamente establecido a center ( o 50% ).","title":"Im\u00e1genes de fondo"},{"location":"desarrollo/css/03-colores_y_fondos/#atajo-clasico-fondos","text":"Es posible establecer todas estas propiedades anteriores en una sola regla de CSS a modo de atajo, y as\u00ed ahorrar mucho espacio en escribir las propiedades anteriores por separado. Aunque no es estrictamente obligatorio, se aconseja respetar el siguiente orden ( acostumbrarse a usar el mismo orden es una buena pr\u00e1ctica ): div { /* background: <color> <image> <repeat> <attachment> <position> */ background : #FFF url ( imagen.jpg ) repeat-x scroll top left ; } Y con esto, ya conocemos las ventajas b\u00e1sicas de CSS a trav\u00e9s de propiedades tan interesantes como background-color o background-image . Sin embargo, la llegada de CSS3 incorpor\u00f3 novedades muy interesantes en nuestros navegadores, que mediante versiones anteriores a CSS3 no era posible realizar ( o era algo bastante complejo ).","title":"Atajo cl\u00e1sico: Fondos"},{"location":"desarrollo/css/03-colores_y_fondos/#opacidad","text":"Es posible utilizar la propiedad CSS3 opacity para establecer una transparencia total sobre el elemento indicado. Cuando decimos << transparencia total >> nos referimos a que la transparencia se aplicar\u00e1 al elemento en cuesti\u00f3n y a todos los elementos HTML que est\u00e9n en su interior. Propiedad Valor Significado opacity Establece una transparencia ( 0 = 100% transparente, a 1 = 100% opaco) El valor a indicar es un n\u00famero entre 0 ( completamente transparente ) y 1 ( completamente visible ), pudiendo establecer decimales para valores intermedios: div { background-color : #FF0000 ; color : #FFFFFF ; opacity : 0.5 ; } Como se puede ver en la imagen, esto har\u00e1 que la capa div ( el recuadro rojo ) se muestre al 50% de opacidad , con color de texto blanco ( en el caso de existir texto ) y fondo de color rojo. Si buscamos una transparencia parcial ( color de fondo transparente que no afecte al texto ) debemos utilizar los valores RGBA o HSLA ( canales alfa ) en la propiedad background-color : div { color : white ; background-color : RGBA ( 255 , 0 , 0 , 0.5 ); } De este modo, s\u00f3lo aplicamos la transparencia al color de fondo, mientras que con opacity se aplica a toda la capa en s\u00ed, por lo que afecta a todos los elementos que est\u00e1n dentro de la capa.","title":"Opacidad"},{"location":"desarrollo/css/03-colores_y_fondos/#fondos-multiples","text":"CSS3 ofrece nuevas caracter\u00edsticas a la hora de utilizar im\u00e1genes de fondo, como por ejemplo la posibilidad de establecer m\u00faltiples im\u00e1genes de fondo de forma simult\u00e1nea: div { background-image : url ( manz.png ), url ( fondo2.jpg ), url ( fondo3.jpg ); background-repeat : no-repeat ; } De esta forma, se pueden utilizar varias im\u00e1genes y superponerlas una sobre la otra, algo especialmente interesante si la primera imagen de fondo est\u00e1 en formato PNG ( la cu\u00e1l soporta transparencias ). Al establecer im\u00e1genes de fondo m\u00faltiples, las propiedades complementarias a los fondos como background-repeat , background-position y otras, pueden actuar de forma personalizada para cada fondo. Mientras que en el fragmento de c\u00f3digo anterior, el navegador le indica a cada una de las tres im\u00e1genes que no debe repetirse, en el siguiente fragmento de c\u00f3digo veremos que es posible indicar individualmente el comportamiento de cada una, separando por comas: div { background-image : url ( manz.png ), url ( fondo2.jpg ), url ( fondo3.jpg ); background-repeat : no-repeat , repeat-x , repeat ; } Adem\u00e1s, CSS3 tambi\u00e9n a\u00f1ade nuevas propiedades para especificar como cubrir\u00e1 la imagen de fondo al elemento en cuesti\u00f3n: Propiedad Valor Significado background-clip border-box padding-box background-origin border-box padding-box La propiedad background-clip establece la forma en la que el color o la imagen de fondo cubrir\u00e1 el elemento, mientras que la propiedad background-origin intenta posicionar el comienzo de la imagen de fondo, \u00fatil con im\u00e1genes. La primera utiliza border-box como valor por defecto, mientras que la segunda utiliza padding-box . Ambas propiedades pueden tomar uno de los siguientes valores: Valor Significado padding-box La imagen o color de fondo cubrir\u00e1 la zona del espaciado y contenido. border-box La imagen o color de fondo cubrir\u00e1 la zona del borde, espaciado y contenido. content-box La imagen o color de fondo cubrir\u00e1 s\u00f3lo la zona del contenido. Consejo : Una buena forma de darse cuenta del funcionamiento de estas propiedades es establecer un borde grueso punteado. Usando border-box la imagen de fondo se extender\u00e1 en todo el elemento, incluyendo borde, espaciado y contenido. El valor padding-box extender\u00e1 la imagen de fondo s\u00f3lo mediante el padding y el contenido, y por \u00faltimo, la propiedad content-box extender\u00e1 la imagen de fondo s\u00f3lo en la zona del contenido.","title":"Fondos m\u00faltiples"},{"location":"desarrollo/css/03-colores_y_fondos/#tamano-de-fondos","text":"Una de las \u00faltimas incorporaciones a la familia de propiedades de fondos de imagen es la propiedad background-size , la cu\u00e1l ajusta el tama\u00f1o ( ancho y alto ) de la imagen de fondo, por si deseamos escalarla a un tama\u00f1o diferente. Por defecto, una imagen de fondo toma autom\u00e1ticamente el tama\u00f1o de la imagen ( que podr\u00eda ser demasiado grande, por ejemplo ). Para no tener que modificar la imagen original de forma manual con un editor de im\u00e1genes, podemos utilizar esta propiedad y ajustarla a nuestro agrado mediante CSS: Propiedad Valor Significado background-size 1 par\u00e1metro. Aplica un de ( ancho \u00d7 auto ) a la imagen de fondo. 2 par\u00e1metros. Aplica un de ( ancho \u00d7 alto ) a la imagen de fondo. Los valores de tama\u00f1o que podemos utilizar, son los siguientes: Valor Significado auto No escala la imagen. Utiliza el tama\u00f1o original. Es el valor por defecto. unidad Indicamos el tama\u00f1o espec\u00edfico que queremos usar ( p\u00edxels o porcentaje, por ej. ). cover Escala el ancho de la imagen de fondo al ancho del elemento. contain Escala el alto de la imagen de fondo al alto del elemento. Los dos \u00faltimos valores ( cover y contain ) s\u00f3lo pueden utilizarse en el caso de que se especifique un s\u00f3lo par\u00e1metro como valor en la propiedad background-size .","title":"Tama\u00f1o de fondos"},{"location":"desarrollo/css/03-colores_y_fondos/#atajo-moderno-fondos","text":"Los navegadores modernos, incluyen una nueva propiedad de atajo background que permite incluir los valores de propiedades CSS3 como background-clip , background-origin o background-size , que fueron incorporados m\u00e1s tarde que los dem\u00e1s. Es por ello, que el orden aconsejado para adquirir buenas pr\u00e1cticas es el siguiente y var\u00eda un poco respecto a la otra propiedad de atajo tradicional: div { /* background: <color> <position> <size> <repeat> <origin> <clip> <attachment> <image> */ background : #FFF top left cover repeat-x padding-box border-box scroll url ( imagen.jpg ); }","title":"Atajo moderno: Fondos"},{"location":"desarrollo/css/03-colores_y_fondos/#gradientes-css","text":"Otra funcionalidad que se echaba mucho de menos en versiones anteriores de CSS era la de utilizar fondos con gradientes , o lo que es lo mismo, un color inicial que se transforma poco a poco en uno o varios colores sucesivamente. Sin embargo, en versiones anteriores a CSS3 no era posible hacerlo desde c\u00f3digo. Por suerte, hoy en d\u00eda hemos superado esa limitaci\u00f3n. En CSS3 se introducen algunas expresiones relacionadas que har\u00e1n esta tarea algo muy sencillo, pudiendo utilizarlas f\u00e1cilmente mediante la propiedad background-image e indicando el tipo de gradiente deseado: Propiedad Funci\u00f3n de gradiente Significado background-image linear-gradient(...) Define un gradiente lineal, en una direcci\u00f3n espec\u00edfica. radial-gradient(...) Define un gradiente radial, en forma de c\u00edrculo o elipse. conic-gradient(...) Define un gradiente c\u00f3nico, desde un punto de vista superior. Veamos cada uno de estos gradientes por separado para entender como funcionan.","title":"Gradientes CSS"},{"location":"desarrollo/css/03-colores_y_fondos/#gradientes-lineales","text":"El primer tipo de gradiente es el gradiente lineal , que permite crear fondos degradados que van en una cierta direcci\u00f3n y cambian de un color a otro, dependiendo de la lista de colores indicada por par\u00e1metro. La sintaxis a utilizar debe ser una de las siguientes ( es la misma, pero con menor o mayor cantidad opcional de informaci\u00f3n ): Valor Significado linear-gradient(,, ...) Gradiente b\u00e1sico entre colores. linear-gradient( ,,, ...) linear-gradient( ,,, ...) El ejemplo m\u00e1s b\u00e1sico de los anteriores es el primero, donde simplemente indicaremos los colores del gradiente ( para que se aprecie el degradado, como m\u00ednimo deben ser 2 colores ): div { background-image : linear-gradient ( blue , red ); } Esto dibujar\u00e1 un degradado con los colores indicados en direcci\u00f3n desde arriba hacia abajo , que es la direcci\u00f3n por defecto. Se pueden ir a\u00f1adiendo m\u00e1s colores al gradiente si se desea, o cambiar la direcci\u00f3n del degradado, como veremos a continuaci\u00f3n: Pero los par\u00e1metros que se pueden utilizar son los siguientes: Par\u00e1metros Valor Direcci\u00f3n del gradiente lineal ( ver valores posibles m\u00e1s adelante ). El valor por defecto es to bottom . N\u00famero de \u00e1ngulos de la direcci\u00f3n del gradiente lineal. Alternativa a la opci\u00f3n anterior. El primer color del gradiente El siguiente color del gradiente De forma opcional, se puede indicar a que altura comienza a cambiar el gradiente. ... (Se pueden seguir a\u00f1adiendo colores)","title":"Gradientes lineales"},{"location":"desarrollo/css/03-colores_y_fondos/#direccion-del-gradiente","text":"En el ejemplo visual anterior, la direcci\u00f3n del gradiente es horizontal (hacia la derecha). El primer ejemplo tiene s\u00f3lo 2 colores (azul y rojo), mientras que el segundo tiene 3 colores (azul, amarillo y rojo). Ambos tienen como direcci\u00f3n una orientaci\u00f3n hacia la derecha: div { background-image : linear-gradient ( to right , blue , red ); /* Primer ejemplo */ background-image : linear-gradient ( to right , blue , yellow , red ); /* Segundo ejemplo */ } Como vemos, el primer par\u00e1metro utilizado fue to right , que es lo que indica la orientaci\u00f3n del gradiente. En este par\u00e1metro se puede indicar tanto una palabra clave como un n\u00famero de grados que represente la direcci\u00f3n: Para que quede a\u00fan m\u00e1s claro, veamos una tabla de equivalencias: Direcci\u00f3n Grados Significado to top 0 \u00f3 360deg Gradiente lineal hacia arriba. to top right 35deg Gradiente diagonal hacia derecha-arriba. to right 90deg Gradiente lineal hacia derecha. to bottom right 145deg Gradiente diagonal hacia abajo-derecha. to bottom 180deg Gradiente lineal hacia abajo. to bottom left 215deg Gradiente diagonal hacia abajo-izquierda. to left 270deg Gradiente lineal hacia izquierda. to top left 325deg Gradiente diagonal hacia izquierda-arriba. Nota : Si utilizas los grados en lugar de las palabras clave puedes usar valores intermedios ( por ejemplo, 280deg o 58deg ) y ser m\u00e1s preciso con la direcci\u00f3n si lo necesitas.","title":"Direcci\u00f3n del gradiente"},{"location":"desarrollo/css/03-colores_y_fondos/#colores-del-gradiente","text":"Por defecto, las distancias entre colores se ajustan autom\u00e1ticamente con proporciones equivalentes, salvo que especifiquemos un tama\u00f1o ( porcentaje o p\u00edxeles, por ejemplo ) justo despu\u00e9s del color en cuesti\u00f3n, que se puede indicar de forma opcional: div { background : linear-gradient ( to right , blue 50 % , red 55 % , green 75 % ); } Este tama\u00f1o representa el momento en el que el gradiente comienza a cambiar el color, respecto al tama\u00f1o del gradiente completo. En este fragmento de c\u00f3digo, a diferencia del anterior, nos mostrar\u00eda un gradiente similar al que vemos a continuaci\u00f3n, donde se aprecia que los tama\u00f1os o distancias entre colores no son equivalentes, sino que corresponden azul ( 0-50% ), rojo ( 50%-55% ) y verde ( 55%-75% ), el cu\u00e1l permanece hasta el final al no haber ning\u00fan color m\u00e1s:","title":"Colores del gradiente"},{"location":"desarrollo/css/03-colores_y_fondos/#gradiente-radial","text":"Como vimos al principio, a parte de gradientes lineales, tambi\u00e9n podemos crear otros tipos de gradientes, como por ejemplo, los gradientes radiales , que permite crear degradados con formas circulares. Para ello, s\u00f3lo tenemos que utilizar la expresi\u00f3n radial-gradient en lugar de linear-gradient : De la misma forma, tambi\u00e9n tenemos diferentes modalidades para crear gradientes radiales , desde una muy b\u00e1sica donde le indicamos s\u00f3lo los colores, hasta otra m\u00e1s avanzada donde le damos forma, tama\u00f1o e incluso ubicaci\u00f3n: Valor Significado radial-gradient(,, ...) Gradiente b\u00e1sico entre colores. radial-gradient( forma ,,, ...) Gradiente con forma circular o el\u00edptica. radial-gradient( forma ,,, ...) Gradiente con tama\u00f1o o dimensi\u00f3n. radial-gradient( forma at ubicaci\u00f3n ,,, ...) Gradiente con colocaci\u00f3n inicial. radial-gradient( forma at ubicaci\u00f3n ,,, ...) Gradiente con tama\u00f1os entre colores. Algunos ejemplos aplicando estos par\u00e1metros: div { background : radial-gradient ( gold , red , black ); background : radial-gradient ( ellipse , gold 50 % , red 55 % , black 75 % ); background : radial-gradient ( circle 200 px , gold 50 % , red 55 % , black 75 % ); background : radial-gradient ( circle 400 px at left , gold 50 % , red 55 % , black 75 % ); } Donde: Par\u00e1metros Valor [forma] ellipse farthest-corner [ubicaci\u00f3n] center El primer color del gradiente El siguiente color del gradiente De forma opcional, se puede indicar a que altura comienza a cambiar el gradiente. ... (Se pueden seguir a\u00f1adiendo colores) En el caso de la forma podemos elegir circle o ellipse , dependiendo de si queremos un gradiente con forma circular o uno con forma de elipse ( que se adapta a la forma del elemento ). En el caso del tama\u00f1o del elipse o c\u00edrculo, tenemos varias opciones para indicar el tama\u00f1o que tendr\u00e1 nuestro gradiente: Valor Significado farthest-corner Intenta cubrir hasta la esquina m\u00e1s lejana ( expande hacia ambos lados ). farthest-side Intenta cubrir hasta el lado m\u00e1s lejano ( expande hacia un s\u00f3lo lado ). closest-corner Intenta cubrir hasta la esquina m\u00e1s cercana. closest-side Intenta cubrir hasta el lado m\u00e1s cercano. Le da un tama\u00f1o espec\u00edfico al gradiente ( p\u00edxeles, porcentajes, etc... ). S\u00f3lo usable en circle . En el caso de la ubicaci\u00f3n , simplemente especificamos la posici\u00f3n en la que queremos que est\u00e9 colocado el centro del gradiente.","title":"Gradiente radial"},{"location":"desarrollo/css/03-colores_y_fondos/#gradiente-conico","text":"Recientemente, se ha incorporado un nuevo tipo de gradiente muy interesante en CSS, visualmente muy similar al gradiente radial , pero trat\u00e1ndose de una visualizaci\u00f3n de un cono desde un plano superior, incluyendo sus sombras. Valor Significado conic-gradient(,, ...) Gradiente b\u00e1sico entre colores. conic-gradient(from,,, ...) Gradiente indicando punto de inicio. conic-gradient(from at ubicaci\u00f3n ,,, ...) Gradiente indicando ubicaci\u00f3n del inicio. Donde: Par\u00e1metros Valor from \u00c1ngulo desde donde comienza el gradiente c\u00f3nico. Por defecto from 0deg . at [ubicaci\u00f3n] center El primer color del gradiente El siguiente color del gradiente De forma opcional, se puede indicar a que altura comienza a cambiar el gradiente. ... (Se pueden seguir a\u00f1adiendo colores) A continuaci\u00f3n podemos ver la diferencia de un gradiente linear-gradient , un radial-gradient y un conic-gradient : Poco hay que a\u00f1adir en este tipo de gradiente, ya que funciona muy similar a los anteriores. La \u00fanica diferencia mencionable es el uso de la palabra clave from antes de indicar los \u00e1ngulos de direcci\u00f3n, si se requiere.","title":"Gradiente c\u00f3nico"},{"location":"desarrollo/css/03-colores_y_fondos/#gradientes-repetitivos","text":"Por \u00faltimo, todos los gradientes que hemos visto permiten la posibilidad de a\u00f1adir el prefijo repeating- para conseguir que el efecto del gradiente, en lugar de adaptarse a la regi\u00f3n completa, realice una repetici\u00f3n constantemente. Comprueba los siguientes ejemplos de forma individual: div { background : repeating-linear-gradient ( blue 10 % , yellow 20 % , red 30 % ); /* Ejemplo 1 */ background : repeating-radial-gradient ( blue 10 % , yellow 20 % , red 30 % ); /* Ejemplo 2 */ background : repeating-conic-gradient ( blue 10 % , yellow 20 % , red 30 % ); /* Ejemplo 3 */ } Es importante que al usar el prefijo repeating- se especifiquen tama\u00f1os a los colores, puesto que se necesita saber cuando comenzar\u00e1 a repetirse. En los ejemplos anteriores, los colores seguir\u00edan el patr\u00f3n hasta el \u00faltimo color y volver\u00edan a repetirse sucesivamente, de forma que tendr\u00edamos: Primera repetici\u00f3n: blue 10%, yellow 20%, red 30% Segunda repetici\u00f3n: blue 40%, yellow 50%, red 60% Tercera repetici\u00f3n: blue 70%, yellow 80%, red 90% Cuarta repetici\u00f3n: blue 100% Fuente: Lenguaje de CSS por Manz","title":"Gradientes repetitivos"},{"location":"desarrollo/css/04-selectores_CSS/","text":"Selectores CSS \u00b6 Selectores CSS b\u00e1sicos \u00b6 Cuando comenzamos a trabajar con CSS, es habitual dar estilo con ejemplos muy sencillos, donde generalmente utilizamos un selector gen\u00e9rico que representa ( por ejemplo ) una etiqueta HTML. Sin embargo, lo que estamos haciendo en realidad es seleccionar todos los elementos del documento que sean dicha etiqueta. Por ejemplo, consideremos el siguiente caso: div { background-color: red; } En este ejemplo, le decimos al navegador que a todas las etiquetas div que encuentre en la p\u00e1gina, le ponga color de fondo rojo. La parte donde he colocado div es lo que se denomina selector , y puede llegar a ser mucho m\u00e1s complejo y potente , como veremos en los siguientes cap\u00edtulos. La verdadera potencia de CSS radica en la capacidad de poder seleccionar s\u00f3lo los elementos que nos interesen , ya que a medida que el documento HTML crece, aparecer\u00e1n nuevos elementos que podr\u00edan adoptar ese estilo, y ser eso algo que no nos interese. Aunque el esquema general es mucho m\u00e1s amplio ( lo iremos viendo todo, poco a poco ), para empezar, vamos a centrarnos en la sintaxis b\u00e1sica de los selectores CSS, y la m\u00e1s utilizada: los ID y las clases . Seleccionar por etiquetas \u00b6 Como ya hemos mencionado, la forma m\u00e1s b\u00e1sica de seleccionar elementos en CSS es indicar el elemento al cu\u00e1l queremos aplicarle los estilos. Esto se comportar\u00e1 como parece l\u00f3gico: aplicando el estilo CSS a TODOS los elementos de ese tipo : strong { color: red; } En el ejemplo anterior, todos los elementos marcados con la etiqueta HTML <strong> se visualizar\u00e1n de color rojo. Este peque\u00f1o ejemplo es did\u00e1ctico pero no suele ser pr\u00e1ctico, ya que no nos permite diferenciar entre todos los elementos de ese tipo. Para ello tenemos los selectores que veremos a continuaci\u00f3n. Seleccionar por ID (\u00fanicos) \u00b6 Todas las etiquetas HTML pueden tener un atributo id con un valor concreto. Este valor ser\u00e1 el nombre que le daremos a la etiqueta. Un buen s\u00edmil con la vida real es la de un DNI o tarjeta de identificaci\u00f3n, ya que la particularidad clave de los ID es que no se deben repetir, es decir, que s\u00f3lo debe haber una etiqueta con el mismo ID por documento. Veamos un ejemplo: <!DOCTYPE html> <html> <head> <title>Documento de ejemplo</title> </head> <body> <div id=\"saludo\"> <p>\u00a1Hola, visitante! \u00a1Bienvenido a esta p\u00e1gina!</p> </div> <div id=\"main\"> <p>En esta p\u00e1gina encontrar\u00e1s los siguientes temas:</p> </div> </body> </html> En el documento anterior, encontramos dos elementos <div> . El primero de ellos, tiene ID saludo , una capa donde se le da la bienvenida al usuario. La segunda, con ID main , es una capa donde hay contenido. Ser\u00eda incorrecto crear otra etiqueta con ID saludo o main en este mismo documento, ya que ya existe una con esos nombres. En la pr\u00e1ctica no suelen utilizarse demasiado los IDs , ya que en la mayor\u00eda de los casos utilizar una clase es perfectamente v\u00e1lido y mucho m\u00e1s mantenible a la larga. La situaci\u00f3n en la que los IDs est\u00e1n bien utilizados, es cuando se usan para designar una zona del documento que sabemos perfectamente que no se va a repetir, y debe ser identificada como una zona \u00fanica. #saludo { background-color: blue; color: white; } Como podemos ver en el ejemplo, en CSS la forma de hacer referencia a los IDs es con el s\u00edmbolo # , mientras que en el HTML se indica el atributo id=\"saludo\" . Seleccionar por clases \u00b6 A medida que vamos codificando y creando nuestros documentos HTML, comprobaremos que necesitamos cosas m\u00e1s flexibles y c\u00f3modas que los IDs, ya que los elementos tienden a repetirse y no deben ser \u00fanicos. Aqu\u00ed es donde entran en escena las clases de CSS . Las etiquetas HTML pueden tener otro atributo interesante: class . La diferencia principal respecto a los IDs es que las clases no se requiere que sean \u00fanicas, sino que pueden repetirse a lo largo del documento HTML: <!DOCTYPE html> <html> <head> <title>Documento de ejemplo</title> </head> <body> <div id=\"main\"> <p>Escoge uno de los siguientes botones:</p> <button class=\"classic\">Opci\u00f3n 1</button> <button class=\"classic\">Opci\u00f3n 2</button> <button class=\"classic\">Opci\u00f3n 3</button> <button class=\"back\">Volver</button> </div> </body> </html> En el documento HTML anterior, tenemos cuatro botones HTML. Los 3 primeros son botones de opciones, por lo que establecemos una misma clase llamada classic , mientras que el \u00faltimo bot\u00f3n ( un bot\u00f3n para volver hacia atr\u00e1s ), le hemos indicado la clase back para que tenga un estilo diferente a los anteriores. Para hacer esto con IDs ( recordemos que son \u00fanicos, no deber\u00edan repetirse ) tendr\u00edamos que crear 3 IDs con nombres diferentes , mientras que con las clases ( las cuales si se pueden repetir ) podemos reutilizar el mismo nombre. Esto nos permite indicar en la parte de CSS un s\u00f3lo selector con los estilos y reutilizarlos en todos los elementos HTML que se desee. .classic { background-color: green; color: white; } .back { background-color: orange; color: white; } En CSS se hace referencia a las clases con un punto: .classic , mientras que en el HTML se escribir\u00eda el atributo class=\"classic\" . Adem\u00e1s, en el caso de las clases, podemos incluso diferenciar el tipo de elemento del que se trata. Gracias a esto podr\u00edamos utilizar la clase .classic en <button> para dar estilo visual a botones, y la clase .classic en <p> para dar otros estilos diferentes a los p\u00e1rrafos de texto: button.classic { background-color: green; color: white; } p.classic { color: red; } Selecciones mixtas \u00b6 Al margen de todo lo que hemos visto, es posible utilizar varias clases en un mismo elemento HTML, simplemente separando por espacios dentro del atributo class . De esta forma, a dicho elemento se le aplicar\u00e1n los estilos de cada una de las clases indicadas, las cuales suelen tener un grupo de caracter\u00edsticas relacionadas con su nombre, lo cu\u00e1l es interesantes y muy pr\u00e1ctico de recordar, d\u00e1ndonos mucha soltura a la hora de crear clases y reutilizarlas: <button class=\"classic green-border big\">Bot\u00f3n</button> Este enfoque se considera uno de los principios del denominado CSS at\u00f3mico , en el que se basan frameworks CSS como Tachyons o TailwindCSS . Por \u00faltimo, mencionar que tambi\u00e9n tenemos la posibilidad de ser m\u00e1s espec\u00edficos y aplicar estilo s\u00f3lo a los elementos HTML que contengan todas las clases indicadas, colocando cada clase de forma consecutiva en el CSS, de la siguiente forma: button.classic.green-border.big { /* Estilos CSS */ } En este ejemplo, s\u00f3lo se aplicar\u00e1n los estilos cuando el elemento HTML <button> tenga una clase classic , una clase green-border y una clase big . Si falta alguna de ellas, no se aplicar\u00e1 el estilo. Selectores CSS avanzados \u00b6 Al margen de la selecci\u00f3n \u00abb\u00e1sica\u00bb de elementos a trav\u00e9s de CSS, que suele realizarse mediante clases e IDs, existe un amplio abanico de m\u00e9todos para seleccionar elementos dependiendo de la estructura del documento HTML denominados combinadores CSS : Nombre S\u00edmbolo Ejemplo Significado Agrupaci\u00f3n de selectores , p, a, div { } Se aplican estilos a varios elementos. Selector descendiente #page div { } Se aplican estilos a elementos dentro de otros. Selector hijo > #page > div { } Se aplican estilos a elementos hijos directos. Selector hermano adyacente + div + div { } Se aplican estilos a elementos que siguen a otros. Selector hermano general ~ div ~ div { } Se aplican estilos a elementos al mismo nivel. Selector universal * #page * { } Se aplican estilos a todos los elementos. En los siguientes apartados, veremos varios ejemplos gr\u00e1ficos sobre un supuesto ejemplo de documento HTML, dibujado en forma de \u00e1rbol esquem\u00e1tico. As\u00ed sabremos que elementos est\u00e1n dentro de otros y nos ser\u00e1 m\u00e1s f\u00e1cil entender cada uno de los combinadores CSS . Agrupaci\u00f3n de selectores \u00b6 En muchas ocasiones nos ocurrir\u00e1 que tenemos varios bloques CSS con selectores diferentes pero con los mismos estilos exactamente, algo que generalmente no es apropiado. Si esto ocurre a menudo, el tama\u00f1o del documento CSS ocupar\u00e1 m\u00e1s y tardar\u00e1 m\u00e1s en descargarse: .container-logo { border-color: red; background: white; } .container-alert { border-color: red; background: white; } .container-warning { border-color: red; background: white; } Una buena pr\u00e1ctica es ahorrar texto y simplificar nuestro documento CSS lo m\u00e1ximo posible, por lo que podemos hacer uso de la agrupaci\u00f3n CSS utilizando la , ( coma ). De esta forma, podemos pasar de tener el ejemplo anterior, a tener el siguiente ejemplo ( que es totalmente equivalente ), donde hemos utilizado la agrupaci\u00f3n para decirle al navegador que aplique dichos estilos las diferentes clases: .container-logo, .container-alert, .container-warning { border-color: white; background: red; } Al margen de esto, dos buenas pr\u00e1cticas que podr\u00edamos aplicar en esta situaci\u00f3n ser\u00edan las siguientes: Simplifica por responsabilidades : .container-alert y .container-warning parecen tener un concepto muy similar: alertas o mensajes de advertencia. Es posible que estos selectores tengan la misma funcionalidad y sean sin\u00f3nimos. Si es as\u00ed, lo ideal ser\u00eda refactorizar y simplificarlos a uno: .container-warning , haciendo desaparecer el otro. Legibilidad por delante : CSS por si s\u00f3lo puede ser dificil de leer y mantener. Aunque a priori puede parecer que es mejor poner la lista de selectores uno detr\u00e1s de otro, la experiencia nos dicta que deber\u00edamos separarlos en una l\u00ednea diferente cada selector. Esto lo hace tremendamente m\u00e1s legible a la hora de revisar c\u00f3digo CSS. .container-logo, .container-warning { border-color: white; background: red; } Consejo : Esto puede parecer poco importante a priori, pero a medida que avanzamos con nuestro dise\u00f1o, los documentos CSS se hacen tremendamente grandes y dif\u00edciles de mantener, por lo que cuanto m\u00e1s sencillos sean, mejor. Selector descendiente \u00b6 En CSS podemos utilizar lo que se llama el selector descendiente , que no es m\u00e1s que una forma de seleccionar ciertos elementos que est\u00e1n dentro de otros elementos. Esto puede parecer sencillo, pero cuidado, ya que puede ser una fuente de problemas si no se entiende bien. Su sintaxis se basa en colocar los elementos uno a continuaci\u00f3n de otro, separado por un espacio: div#pagina div { background-color: blue; } En el ejemplo anterior, aplicamos los estilos CSS ( color azul de fondo ) a todos los elementos <div> que est\u00e9n dentro de un <div> con ID pagina . De esta forma, si existe un elemento <div> fuera del <div> con id pagina , no se aplicar\u00e1n los estilos indicados: Repasemos varios detalles importantes respecto a este combinador CSS: Se est\u00e1n seleccionando todos los elementos <div> que est\u00e1n dentro de <div> con ID pagina . Observa que se seleccionan independientemente del nivel al que est\u00e9n ( hijos, abuelos, ... ) En este caso, el div de div#pagina es innecesario, ya que hab\u00edamos dicho que los IDs no se pueden repetir. Si ya existe un elemento con ID pagina , no hace falta diferenciarlo tambi\u00e9n por etiqueta. Si se tratase de una clase, si podr\u00eda usarse. Se pueden construir selectores muy complejos con tantos elementos como se quiera, pero una buena pr\u00e1ctica es mantenerlos simples. Cu\u00e1ntos m\u00e1s elementos descendientes existan en un selector, m\u00e1s complejo ser\u00e1 el procesamiento de dicha regla por los navegadores. Lo recomendable es ser despierto y utilizar s\u00f3lo los necesarios. <div class=\"menu\"> <div class=\"options\"> <ul> <li><a href=\"/one\">Option 1</a></li> <li><a href=\"/two\">Option 2</a></li> <li><a href=\"/three\">Option 3</a></li> </ul> </div> </div> Observando el fragmento de c\u00f3digo HTML anterior, veamos las siguientes 2 formas de aplicar estilos CSS a los enlaces <a> : /* Forma 1 */ .menu .options ul li a { color: orange; } /* Forma 2 */ .menu a { color: orange; } Mientras que la primera es mucho m\u00e1s espec\u00edfica, es una muy buena pr\u00e1ctica en CSS mantener los selectores lo menos espec\u00edficos posibles para evitar problemas de Especificidad ( a.k.a. CSS Peter Griffin ): Selector hijo \u00b6 Aunque el selector descendiente es bastante interesante, nos puede interesar hacer la misma operaci\u00f3n, pero en lugar de seleccionar todos los elementos descendientes, seleccionar s\u00f3lo los descendientes directos del elemento con el s\u00edmbolo > , descartando as\u00ed nietos y sucesivos. #pagina > div { background-color: blue; } Veamos los elementos seleccionados en el documento de ejemplo para afianzar conceptos: Al contrario que en el caso anterior, no se seleccionan todos los elementos <div> descendientes, sino solo aquellos que son hijos directos del primer elemento especificado. Selector hermano adyacente \u00b6 Es posible tambi\u00e9n hacer referencia a los elementos hermanos, es decir, aquellos elementos que est\u00e1n directamente a continuaci\u00f3n del elemento especificado. Mediante el s\u00edmbolo + del selector hermano adyacente , se pueden seleccionar aquellos elementos hermanos que est\u00e1n seguidos el uno de otro ( en el mismo nivel ): div.articulo span + span { color: blue; } C\u00f3mo se podr\u00e1 ver en este nuevo ejemplo, este combinador CSS har\u00e1 que se seleccionen los elementos span que est\u00e9n a continuaci\u00f3n de un div.articulo span : Obs\u00e9rvese que el primer elemento <span> no es seleccionado, puesto que es el que estamos tomando de base. Una buena forma para entenderlo es leerlo de la siguiente forma: \u00ab todo elemento <span> que est\u00e9 inmediatamente precedido de un <span> \u00bb. Selector hermano general \u00b6 Si pensamos otras opciones en el ejemplo anterior, es posible que necesitemos ser menos espec\u00edficos y en lugar de querer seleccionar los elementos hermanos que sean adyacentes , queramos seleccionar todos los hermanos en general, sin necesidad de que sean adyacentes. Esto se puede conseguir con el selector hermano general , simbolizado con el car\u00e1cter ~ : Como se ve en el ejemplo, no es necesario que el elemento strong se encuentre adyacente al primero, sino que basta con que sean hermanos en el mismo nivel. Selector universal \u00b6 Por \u00faltimo, el selector universal se simboliza con un asterisco * y es la forma de aplicar ciertos estilos en TODOS Y CADA UNO de los elementos HTML correspondientes. Este ejemplo selecciona todos los elementos dentro de div#menu . Es importante recalcar la diferencia de seleccionar #menu , a seleccionar todos los elementos dentro de #menu , que es lo que estamos haciendo en este caso. El selector universal puede ser muy \u00fatil en algunos casos para resetear ciertas propiedades de todo un documento, como en el siguiente ejemplo, donde se eliminan los m\u00e1rgenes de todos los elementos del documento HTML, puesto que algunos navegadores ponen m\u00e1rgenes diferentes y esto puede producir ciertas inconsistencias en los dise\u00f1os: /* Elimina m\u00e1rgenes y rellenos de todos los elementos de un documento HTML */ * { margin: 0; padding: 0; } Pseudoclases CSS \u00b6 Las pseudoclases se utilizan para hacer referencia a ciertos comportamientos de los elementos HTML. As\u00ed como los combinadores CSS se utilizan para dar estilos dependiendo de donde est\u00e9n colocados en la estructura del HTML, las pseudoclases se utilizan para dar estilos a elementos respecto al comportamiento que experimentan en determinado momento. Volvamos a recordar el esquema general de sintaxis de CSS: Las pseudoclases se definen a\u00f1adiendo dos puntos antes de la pseudoclase concreta. En el caso de existir selectores de etiqueta, id o clases, estas se escribir\u00edan a su izquierda. Pseudoclases de enlaces \u00b6 Existen algunas pseudoclases orientadas a los enlaces o hiperv\u00ednculos. En este caso, permiten cambiar los estilos dependiendo del comportamiento del enlace: Pseudoclase Descripci\u00f3n :link Aplica estilos cuando el enlace no ha sido visitado todav\u00eda. :visited Aplica estilos cuando el enlace ha sido visitado anteriormente. A continuaci\u00f3n veremos un ejemplo donde seleccionamos mediante un simple selector a los enlaces que a\u00fan no han sido visitados , cambiando el color de los mismos o su formato, lo que mostrar\u00e1 dichos enlaces de color verde y en negrita: a:link { color: green; font-weight: bold } Por otro lado, la pseudoclase :visited puede utilizarse para dar estilo a los enlaces que hayan sido visitados previamente en el navegador del usuario: a:visited { color: purple; font-weight: bold } Pseudoclases de rat\u00f3n \u00b6 Originalmente, las siguientes pseudoclases se utilizaban solamente en enlaces ( Internet Explorer no los soportaba en otros elementos ). Sin embargo, actualmente pueden ser utilizadas con seguridad en cualquier otro elemento, sin necesidad de ser <a> . Pseudoclase Descripci\u00f3n :hover Aplica estilos cuando pasamos el rat\u00f3n sobre un elemento. :active Aplica estilos cuando estamos pulsando sobre el elemento. La primera de ellas, :hover , es muy \u00fatil e interesante, ya que permite aplicar estilos a un elemento justo cuando el usuario est\u00e1 pasando el rat\u00f3n sobre \u00e9l. Es una de las pseudoclases m\u00e1s utilizadas: /* Usuario mueve el rat\u00f3n sobre un enlace */ a:hover { background-color: cyan; padding: 2px } /* Usuario mueve el rat\u00f3n sobre un div y resalta todos los enlaces que contiene */ div:hover a { background-color: steelblue; color: white; } Observese que podemos realizar acciones un poco m\u00e1s espec\u00edficas, como el segundo ejemplo anterior, donde al movernos sobre un elemento div ( div:hover ), aplicaremos los estilos a los enlaces ( a ) que est\u00e1n dentro del mencionado div . Por otro lado, la segunda pseudoclase, :active , permite resaltar los elementos que se encuentran activos, donde el usuario est\u00e1 pulsando de forma activa con el rat\u00f3n: a:active { border: 2px solid #FF0000; padding: 2px } Nota: Aunque las pseudoclases anteriores se inventaron para interactuar con un rat\u00f3n en un sistema de escritorio, pueden funcionar en dispositivos t\u00e1ctiles. A\u00fan as\u00ed, ten en cuenta que, por ejemplo, el :hover no tiene mucho sentido en dispositivos m\u00f3viles, ya que, aunque podr\u00eda hacerlo, un usuario no navega por m\u00f3vil arrastrando el dedo por la pantalla. Pseudoclases de interacci\u00f3n \u00b6 Existen pseudoclases orientadas principalmente a los campos de formulario de p\u00e1ginas webs y la interacci\u00f3n del usuario con ellos, veamos otro par interesante: Pseudoclase Descripci\u00f3n :focus Aplica estilos cuando el elemento tiene el foco. :checked Aplica estilos cuando la casilla est\u00e1 seleccionada. Cuando estamos escribiendo en un campo de texto de un formulario de una p\u00e1gina web, generalmente pulsamos TAB para cambiar al siguiente campo y SHIFT+TAB para volver al anterior. Cuando estamos posicionados en un campo se dice que ese campo tiene el foco , mientras que al pulsar TAB y saltar al siguiente, decimos que pierde el foco . El comportamiento de \u00abganar el foco\u00bb puede gestionarse mediante la pseudoclase :focus : /* El campo ha ganado el foco */ input:focus { border: 2px dotted #444 } Nota : Aunque estas pseudoclases suelen utilizarse con elementos de formularios como <input> , tambi\u00e9n pueden utilizarse con otros elementos, como por ejemplo los enlaces <a> . Esta es una excelente oportunidad para personalizar el estilo de los campos de texto de un formulario ( <input> y <textarea> ) mientras el usuario escribe y se mueve por ellos. Por otro lado, la pseudoclase :checked permite aplicar el estilo especificado a los elementos <input> ( casillas de verificaci\u00f3n o botones de radio ) u <option> ( la opci\u00f3n seleccionada de un <select> ). Por ejemplo, se podr\u00eda utilizar el siguiente fragmento de c\u00f3digo: input:checked + span { color: green; } Este ejemplo a\u00f1ade el selector hermano + para darle formato al <span> que contiene el texto y se encuentra colocado a continuaci\u00f3n de la casilla <input> . De esta forma, los textos que hayan sido seleccionados, se mostrar\u00e1n en verde. Pseudoclases de activaci\u00f3n \u00b6 Por norma general, los elementos de un formulario HTML est\u00e1n siempre activados, aunque se pueden desactivar a\u00f1adiendo el atributo disabled ( es un atributo booleano, no lleva valor ) al elemento HTML en cuesti\u00f3n. Esto es una pr\u00e1ctica muy utilizada para impedir al usuario escribir en cierta parte de un formulario porque, por ejemplo, no es aplicable. Existen varias pseudoclases para detectar si un campo de un formulario est\u00e1 activado o desactivado: Pseudoclase Descripci\u00f3n :enabled Aplica estilos cuando el campo del formulario est\u00e1 activado. :disabled Aplica estilos cuando el campo del formulario est\u00e1 desactivado. :read-only Aplica estilos cuando el campo es de s\u00f3lo lectura. :read-write Aplica estilos cuando el campo es editable por el usuario. Utilizando las dos primeras pseudoclases, bastante autoexplicativas por si solas, podemos seleccionar elementos que se encuentren activados ( comportamiento por defecto ) o desactivados: /* Muestra en fondo blanco las casillas que permiten escribir */ input:enabled { background-color: white; } /* Muestra en fondo gris las casillas que no permiten escribir */ input:disabled { background-color: grey; } Por otro lado, las pseudoclases read-only y read-write nos permiten seleccionar y diferenciar elementos que se encuentran en modo de solo lectura ( tienen especificado el atributo readonly en el HTML ) o no: input:read-only { background-color: darkred; color: white } En el ejemplo anterior, la pseudoclase :read-only le da estilo a aquellos campos <input> de un formulario que est\u00e1n marcados con el atributo de s\u00f3lo lectura readonly . La diferencia entre un campo con atributo disabled y un campo con atributo readonly es que la informaci\u00f3n del campo con readonly se enviar\u00e1 a trav\u00e9s del formulario, mientras que la del campo con disabled no se enviar\u00e1. A\u00fan as\u00ed, ambas no permiten modificar el valor. Nota : Ten en cuenta que :read-only aplicar\u00e1 los estilos a todos los elementos HTML que no puedan ser modificados por el usuario. Por otro lado, la pseudoclase :read-write es muy \u00fatil para dar estilos a todos aquellos elementos que son editables por el usuario, sean campos de texto <input> o <textarea> . input:read-write { background-color: green; color: white } Nota : La pseudoclase read-write da estilo tambi\u00e9n a elementos HTML que contengan el atributo contenteditable , como por ejemplo un p\u00e1rrafo editable por el usuario con dicho atributo. Pseudoclases de validaci\u00f3n \u00b6 En HTML5 es posible dotar de capacidades de validaci\u00f3n a los campos de un formulario, pudiendo interactuar desde Javascript o incluso desde CSS. Con estas validaciones podemos asegurarnos de que el usuario escribe en un campo de un formulario el valor esperado que deber\u00eda. Existen algunas pseudoclases \u00fatiles para las validaciones, como por ejemplo las siguientes: Pseudoclase \u00bfCu\u00e1ndo aplica estilos? :required Cuando el campo es obligatorio, o sea, tiene el atributo required . :optional Cuando el campo es opcional (por defecto, todos los campos). :invalid Cuando los campos no cumplen la validaci\u00f3n HTML5. :valid Cuando los campos cumplen la validaci\u00f3n HTML5. :out-of-range Cuando los campos num\u00e9ricos est\u00e1n fuera del rango. :in-range Cuando los campos num\u00e9ricos est\u00e1n dentro del rango. En un formulario HTML es posible establecer un campo obligatorio que ser\u00e1 necesario rellenar para enviar el formulario. Por ejemplo, el DNI de una persona que va a matricularse en un curso, o el nombre de usuario de alta en una plataforma web para identificarse. Campos que son absolutamente necesarios. Para hacer obligatorios dichos campos, tenemos que indicar en el HTML el atributo required , al cu\u00e1l ser\u00e1 posible darle estilo mediante la pseudoclase :required : input:required { border: 2px solid blue; } Por otra parte, los campos opcionales ( no obligatorios, sin el atributo required ) pueden seleccionarse con la pseudoclase :optional : input:optional { border: 2px solid grey; } Las validaciones en formularios HTML siempre han sido un proceso tedioso, hasta la llegada de HTML5. HTML5 brinda un excelente soporte de validaciones desde el lado del cliente, pudiendo comprobar si los datos especificados son correctos o no antes de realizar las validaciones en el lado del servidor, y evitando la latencia de enviar la informaci\u00f3n al servidor y recibirla de vuelta. Ojo: Ten en cuenta que la validaci\u00f3n de cliente es apropiada solo para reducir la latencia de env\u00edo/recepci\u00f3n al servidor, pero nunca como estrategia para evitar problemas de seguridad o similares, para la cu\u00e1l se debe tener validaci\u00f3n en el servidor siempre. Las validaciones utilizadas en frontend, es posible falsearlas o salt\u00e1rselas. Imaginemos un campo de entrada en el que queremos obtener la edad del usuario . Nuestra intenci\u00f3n es que solo se puedan introducir n\u00fameros. Para ello hacemos uso de la expresi\u00f3n regular [0-9]+ , que significa \u00ab una o m\u00e1s cifras del 0 al 9 \u00bb: <input type=\"text\" name=\"age\" pattern=\"[0-9]+\" /> Sin embargo, el atributo pattern permite expresiones regulares realmente complejas, como por ejemplo, una expresi\u00f3n regular para validar el formato de un DNI, ya sea en el formato nacional de Espa\u00f1a ( 12345678L ) o en formato NIE ( X1234567L ), aceptando guiones si se indican: <input type=\"text\" name=\"dni\" pattern=\"(([X-Z]{1})([-]?)(\\d{7})([-]?)([A-Z]{1}))|((\\d{8})([-]?)([A-Z]{1}))\" /> Se pueden aplicar ciertos estilos dependiendo de si se cumple o no el patr\u00f3n de validaci\u00f3n, utilizando las siguientes pseudoclases: input:invalid { background-color: darkred; color: white; } input:valid { background-color: green; color: white; } Sin embargo, en la validaci\u00f3n num\u00e9rica que vimos anteriormente, un usuario podr\u00eda escribir 500 , que es una edad imposible, porque en el patr\u00f3n de validaci\u00f3n indicamos \u00abuna o m\u00e1s cifras del 0 al 9\u00bb. Lo ideal ser\u00eda establecer un rango, algo que se suele hacer muy a menudo si tenemos campos num\u00e9ricos de formulario: <input type=\"number\" name=\"age\" min=\"18\" max=\"100\" /> Este campo permite al usuario especificar su edad, utilizando los atributos de validaci\u00f3n min y max , que s\u00f3lo permiten valores entre 18 y 100 a\u00f1os. Los valores fuera de este rango, no ser\u00e1n v\u00e1lidos. De la misma forma que antes, es posible aplicar estilos para los valores fuera de rango, como dentro de rango: input:out-of-range { background-color: darkred; color: white; } input:in-range { background-color: green; color: white; } Pseudoclases de negaci\u00f3n \u00b6 Existe una pseudoclase muy \u00fatil, denominada pseudoclase de negaci\u00f3n . Permite seleccionar todos los elementos que no cumplan los selectores indicados entre par\u00e9ntesis. Veamos un ejemplo: p:not(.general) { border: 1px solid #DDD; padding: 8px; background: #FFF; } Este peque\u00f1o fragmento de c\u00f3digo nos indica que todos los p\u00e1rrafos ( elementos <p> ) que no pertenezcan a la clase general , se les aplique el estilo especificado. Consejo : Las reglas de negaci\u00f3n pueden ser complejas, ineficientes y poco escalables. Intenta utilizarlas s\u00f3lo en los casos que sea absolutamente necesario. Otras pseudoclases \u00b6 Para finalizar el apartado de pseudoclases, quiero mencionar algunas que no encajan en los apartados anteriores, pero que pueden ser muy \u00fatiles en algunos casos: Pseudoclase Significado :lang(es) Aplica estilo a los elementos con el atributo lang=\"es\" . :target Aplica estilo al elemento que coincida con el ancla de la URL. :root Aplica estilo al elemento ra\u00edz (padre) del documento. :default Experimental. Aplica estilo al elemento por defecto. \u00datil en formularios :dir(A) Experimental. Aplica estilo al elemento que coincide con la direcci\u00f3n ltr o rtl . :indeterminate Experimental. Aplica estilo a la casilla checkbox o al elemento <progress> sin definir. :fullscreen Experimental. Aplica estilo si la p\u00e1gina est\u00e1 en el modo de pantalla completa. :scope Experimental. Aplica estilo a los elementos en el \u00e1mbito indicado. :any(A) Experimental. Aplica estilo si coincide con alg\u00fan elemento indicado en A . Otras pseudoclases como :first , :left , :right o :blank las mencionamos en el cap\u00edtulo de medios paginados . Pseudoclases CSS avanzadas \u00b6 Existen varias pseudoclases que permiten hacer referencias a los elementos del documento HTML seg\u00fan su posici\u00f3n y estructura de los elementos hijos . A continuaci\u00f3n muestro un peque\u00f1o resumen de estas pseudoclases: Pseudoclase Descripci\u00f3n :first-child Primer elemento hijo (de cualquier tipo). :last-child \u00daltimo elemento hijo (de cualquier tipo). :nth-child(n) N-elemento hijo (de cualquier tipo). :nth-last-child(n) N-elemento hijo (de cualquier tipo) partiendo desde el final. Para ello, volvamos a utilizar una estructura en forma de \u00e1rbol para ver c\u00f3modamente la ubicaci\u00f3n de cada uno de los elementos. Las dos primeras pseudoclases, :first-child y :last-child hacen referencia a los primeros y \u00faltimos elementos ( al mismo nivel ) respectivamente. strong:first-child { background-color:cyan; } strong:last-child { background-color:green; } Sin embargo, si no queremos quedarnos en los primeros o \u00faltimos elementos y necesitamos m\u00e1s potencia para elegir, podemos hacer uso de la pseudoclase :nth-child(A) , que permite especificar el elemento deseado, simplemente estableciendo su n\u00famero en el par\u00e1metro A : N\u00famero Equivalente a la pseudoclase Significado strong:nth-child(1) strong:first-child {} Primer elemento hijo, que adem\u00e1s es un <strong> strong:nth-child(2) Segundo elemento hijo, que adem\u00e1s es un <strong> strong:nth-child(3) Tercer elemento hijo, que adem\u00e1s es un <strong> strong:nth-child(n) Todos los elementos hijos que son <strong> strong:nth-child(2n) Todos los elementos hijos pares <strong> strong:nth-child(2n-1) Todos los elementos hijos impares <strong> A continuaci\u00f3n puedes comprobar los valores de la tabla anterior de un modo m\u00e1s visual y pr\u00e1ctico, estableciendo en el campo de texto valores como n , n+2 , 2n , 2n-1 ( o similares ) y observando los resultados. :nth-child() .nth-test { display: flex; flex-direction: column; align-items: center; } .nth-test input { padding: 5px; max-width: 70px; margin-bottom: 0.5em; font-family: var(--header-font); font-size: 18px; } .nth-test .table { display: flex; flex-wrap: wrap; } .nth-test .cell { border: 1px solid #aaa; width: 75px; height: 32px; margin: 3px; } const nth = document.querySelector(\".nth-test\"); const input = nth.querySelector(\"input\"); const table = nth.querySelector(\".table\"); const style = nth.querySelector(\".nth-style\"); for (let i = 0; i < 60; i++) { const div = document.createElement(\"div\"); div.className = \"cell\"; table.appendChild(div); } input.onkeyup = (ev) => { const value = ev.target.value; style.textContent = `.nth-test .cell:nth-child(${value}) { background: green; }`; } Veamos adem\u00e1s un ejemplo gr\u00e1fico: Como se aprecia en el ejemplo, en el caso :nth-child(2) se puede ver como el segundo elemento lo ocupa un elemento span , por lo que s\u00f3lo se selecciona el elemento strong del segundo caso, donde si existe. Elementos del mismo tipo \u00b6 En los casos anteriores, seleccionamos elementos independientemente de que elemento sea. Simplemente, hacemos caso a la posici\u00f3n donde est\u00e1 ubicado. Si queremos hacer referencia s\u00f3lo a elementos del mismo tipo, utilizaremos los selectores siguientes, an\u00e1logos a los anteriores, pero haciendo referencia s\u00f3lo a elementos del mismo tipo: Pseudoclase Descripci\u00f3n :first-of-type Primer elemento hijo (de su mismo tipo). :last-of-type \u00daltimo elemento hijo (de su mismo tipo). :nth-of-type(n) N-elemento hijo (de su mismo tipo). :nth-last-of-type(n) N-elemento hijo (de su mismo tipo) partiendo desde el final. Las pseudoclases :first-of-type y :last-of-type son las equivalentes a :first-child y :last-child pero s\u00f3lo teniendo en cuenta elementos del mismo tipo. Por otro lado, la pseudoclase :nth-of-type(A) es la equivalente a :nth-child(A) y :nth-last-of-type(A) es la equivalente a :nth-last-child(A) . Veamos un ejemplo sobre el ejercicio anterior: En este ejemplo, se puede ver como :nth-of-type(2) selecciona el segundo elemento strong en ambos casos, a pesar de que en el primero ocupa la tercera posici\u00f3n. En este caso se selecciona porque es el segundo elemento de su mismo tipo ( <strong> ). Por otro lado, :nth-last-of-type(A) hace una selecci\u00f3n de forma inversa, empezando por el \u00faltimo elemento. Hijos \u00fanicos \u00b6 Existen tambi\u00e9n varias pseudoclases para la gesti\u00f3n de hijos \u00fanicos. Son las siguientes: Pseudoclase Descripci\u00f3n :only-child Elemento que es hijo \u00fanico (de cualquier tipo). :only-of-type Elemento que es hijo \u00fanico (de su mismo tipo). :empty Elemento vac\u00edo (sin hijos, ni texto). La propiedad :only-child nos proporciona un m\u00e9todo para aplicar estilo a aquellos elementos que sean el \u00fanico hijo de su elemento padre. Adem\u00e1s, como ha ocurrido anteriormente, tambi\u00e9n existe la pseudoclase :only-of-type que es equivalente al anterior pero s\u00f3lo para elementos del mismo tipo, es decir, que puede ser que no sea el \u00fanico elemento hijo, pero s\u00ed el \u00fanico de su tipo. Muy relacionada est\u00e1 tambi\u00e9n la pseudoclase :empty , que permite seleccionar los elementos que est\u00e9n vac\u00edos. Ojo con esto, ya que un elemento que contenga comentarios HTML <!-- --> la pseudoclase :empty lo detectar\u00e1 como vac\u00edo, pero si contiene espacios en blanco, no. Pseudoelementos CSS \u00b6 Al igual que las pseudoclases, los pseudoelementos son otra de las caracter\u00edsticas de CSS que permiten hacer referencias a \u00abcomportamientos virtuales no tangibles\u00bb, o lo que es lo mismo, se le puede dar estilo a elementos que no existen realmente en el HTML, y que se pueden generar desde CSS. Recordemos la sintaxis de los pseudoelementos, que est\u00e1 precedida de dos puntos dobles ( :: ) para diferenciarlos de las pseudoclases, las cuales s\u00f3lo tienen dos puntos ( : ). No obstante, este cambio surgi\u00f3 posteriormente, por lo que a\u00fan hoy en d\u00eda es frecuente ver fragmentos de c\u00f3digo con pseudoelementos con la sintaxis de pseudoclase con un solo par de puntos : . Generaci\u00f3n de contenido \u00b6 Dentro de la categor\u00eda de los pseudoelementos CSS , como punto central, se encuentra la propiedad content . Esta propiedad se utiliza en selectores que incluyen los pseudoelementos ::before o ::after , para indicar que vamos a crear contenido antes o despu\u00e9s del elemento en cuesti\u00f3n: Propiedad/Pseudoelemento Descripci\u00f3n content Propiedad para generar contenido. S\u00f3lo usable en ::before o ::after . ::before Aplica los estilos antes del elemento indicado. ::after Aplica los estilos despu\u00e9s del elemento indicado. La propiedad content admite par\u00e1metros de diverso tipo, incluso concatenando informaci\u00f3n mediante espacios. Podemos utilizar tres tipos de contenido: Valor Descripci\u00f3n Ejemplo \" string \" A\u00f1ade el contenido de texto indicado. content: \"Contenido:\"; attr( atributo ) A\u00f1ade el valor del atributo HTML indicado. content: attr(href); url( URL ) A\u00f1ade la imagen indicada en la URL . content: url(icon.png); Por otro lado, los pseudoelementos ::before y ::after permiten hacer referencia a \u00abjusto antes del elemento\u00bb y \u00abjusto despu\u00e9s del elemento\u00bb, respectivamente. As\u00ed, se podr\u00eda generar informaci\u00f3n ( usualmente con fines decorativos ) que no existe en el HTML, pero que por circunstancias de dise\u00f1o ser\u00eda apropiado colocar: q::before { content: \"\u00ab\"; color: #888; } q::before { content: \"\u00bb\"; color: #888; } Los ejemplos anteriores insertan el car\u00e1cter \u00ab antes de las citas indicadas con el elemento HTML <q> y el car\u00e1cter \u00bb al finalizar la misma, ambas de color gris. Atributos HTML \u00b6 Es interesante recalcar la utilidad de la expresi\u00f3n attr() , que en lugar de generar el contenido textual que le indiquemos, permite recuperar esa informaci\u00f3n del valor del atributo HTML especificado. Veamos un ejemplo para clarificarlo, concaten\u00e1ndolo con texto: a::after { content: \" ( \" attr(href) \" )\"; } Este peque\u00f1o ejemplo muestra a continuaci\u00f3n de todos los enlaces la URL literalmente, dentro de dos par\u00e9ntesis. Esto puede ser realmente \u00fatil en una p\u00e1gina de estilos que se aplica a una p\u00e1gina en el momento de imprimir, en los cuales se pierde la informaci\u00f3n del enlace al no ser un medio interactivo. Truco : Tambi\u00e9n se puede utilizar la expresi\u00f3n url() para a\u00f1adir una imagen al contenido generado, tal y como lo hacemos en la propiedad background , por ejemplo. Primera letra y primera l\u00ednea \u00b6 Tambi\u00e9n existen pseudoelementos con los que podemos hacer referencia a la primera letra de un texto. Para ello utilizamos el pseudoelemento ::first-letter , as\u00ed como el pseudoelemento ::first-line si queremos hacer referencia a la primera l\u00ednea de un texto. De esta forma, podemos dar estilo a esas secciones concretas del texto: Pseudoelemento Descripci\u00f3n ::first-letter Aplica los estilos en la primera letra del texto. ::first-line Aplica los estilos en la primera l\u00ednea del texto. Veamos un ejemplo en acci\u00f3n sobre un p\u00e1rrafo de texto: p { color: #333; font-family: Verdana, sans-serif; font-size: 16px; } p::first-letter { color: black; font-family: 'Times New Roman', serif; font-size: 42px; } p::first-line { color: #999; } Esto puede darnos la posibilidad de dar formato a un texto con ciertas propiedades, como cuentos cl\u00e1sicos: Signos de las listas (markers) \u00b6 Existe tambi\u00e9n un pseudoelemento para hacer referencias a los signos o marcas de la listas ( <ol> o <ul> ), en el caso de que queramos que tengan, por ejemplo, un color diferente al del texto de la lista. Se aplican a los elementos <li> de los \u00edtems de una lista. Veamos un ejemplo: ul ::marker { color: green; } Esto mostrar\u00eda el texto de la lista con el color habitual que tenga ( por ejemplo, negro ), pero los signos que preceden a cada \u00edtem de la lista, aparecer\u00edan en color verde. Hay que tener cuidado, puesto que el soporte de esta caracter\u00edstica a\u00fan no es muy bueno. Otros pseudoelementos \u00b6 Existen otros pseudoelementos quiz\u00e1s menos conocidos: Pseudoelemento Descripci\u00f3n Soporte ::backdrop Aplica estilos al fondo exterior de la ventana de di\u00e1logo mostrada. ::input-placeholder Aplica estilos a los textos de sugerencia de los campos de entrada. Soporte ::selection Aplica estilos al fragmento de texto seleccionado por el usuario. Soporte Atributos CSS \u00b6 Por \u00faltimo, una caracter\u00edstica muy interesante de CSS es la posibilidad de aplicar estilos dependiendo de la existencia o el contenido de ciertos atributos de los elementos HTML . En CSS, estos atributos se rodean de corchetes [] y hay varias formas de utilizarlos, inspirados en un concepto llamado expresiones regulares: Atributo \u00bfCu\u00e1ndo se aplica el estilo? [href] Si el elemento tiene atributo href . [href=\"#\"] Si el elemento tiene atributo href y su valor es # . [href*=\"emezeta\"] Si el elemento tiene atributo href y su valor contiene emezeta . [href^=\"https://\"] Si el elemento tiene atributo href y su valor comienza por https:// . [href$=\".pdf\"] Si el elemento tiene atributo href y su valor termina por .pdf (un enlace a un PDF). [class~=\"emezeta\"] Si el elemento tiene atributo class con una lista de valores y uno de ellos es emezeta . [lang|=\"es\"] Si el elemento tiene atributo lang con una lista de valores, donde alguno empieza por es- . Atributo existente \u00b6 Para empezar, podemos utilizar el atributo [style] para seleccionar todas las etiquetas HTML que contengan un atributo style para darles estilos en l\u00ednea a un elemento. Estos elementos, aparecer\u00edan con fondo rojo: [style] { background: red; } Este ejemplo es did\u00e1ctico y no tiene finalidad pr\u00e1ctica de dise\u00f1o, ya que la idea ser\u00eda mostrar visualmente que elementos tienen esa caracter\u00edstica, algo que podr\u00eda interesarle a un desarrollador. Si el elemento no tiene un atributo style definido, no se le aplican los estilos. Atributo con valor exacto \u00b6 Pero la potencia de los atributos en CSS es que podemos indicar el valor exacto que deben tener para que sean seleccionados. Para ello, simplemente utilizamos el = y escribimos el texto entre comillas dobles: a[rel=\"nofollow\"] { background: red; } Este ejemplo selecciona los enlaces <a> que tienen un atributo rel establecido a nofollow . Esta es una caracter\u00edstica que le indica a Google ( u otros robots o crawlers ) que ese enlace no se deber\u00eda tener en cuenta para seguirlo, algo que puede ser realmente \u00fatil para desincentivar SPAM en comentarios, por ejemplo. Atributo contiene texto \u00b6 En lugar de un valor espec\u00edfico, tambi\u00e9n podemos querer indicar un fragmento de texto que debe estar inclu\u00eddo, pero que no es el texto \u00edntegro, casando con varias posibles coincidencias: a[href*=\"emezeta\"] { background-color: orange; } En la siguiente tabla se pueden ver varios ejemplos de enlaces, y cu\u00e1les se seleccionar\u00edan en este caso: Etiqueta Valor del atributo href \u00bfSeleccionado? <a> https://www . emezeta .com/ S\u00ed <a> https://www . emezeta .com/articulos/alternativas-a-bootstrap S\u00ed <a> https://www.google.com/ No, no incluye emezeta <a> https://www.google.com/search?q= emezeta S\u00ed <a> emezeta S\u00ed <link> https://www.emezeta.com/index.css No, no es <a> De la misma forma, existe una variante que utiliza el comparador ~= . Esta variante nos permitir\u00eda seleccionar los elementos HTML que tengan un atributo con una lista de palabras separadas por espacios, donde una de ellas es el texto que hemos escrito a continuaci\u00f3n. Se trata de una versi\u00f3n m\u00e1s restrictiva del comparador *= . Comienzo/final de atributo \u00b6 Otro recurso bastante \u00fatil es la posibilidad de seleccionar elementos dependiendo del texto con el que empiezan o con el que acaban en el valor de un atributo espec\u00edfico. Veamos un ejemplo, donde se apreciar\u00e1 mucho mejor esta funcionalidad: a[href]::before { content: url(icon_url.png); padding-right: 3px; } a[href$=\".pdf\"]::before { content: url(icon_pdf.png); } a[href]::after { content: \": \" attr(href); display: inline-block; color: #666; } Obtendremos el siguiente resultado: El primer bloque CSS mostrar\u00e1 un icono ( icon_url.png ) antes ( ::before ) de cualquier enlace con el atributo href . El segundo bloque CSS sobrescribimos la regla anterior si se trata de un enlace donde el atributo href acaba en .pdf . Si es as\u00ed, mostramos el icono de un archivo PDF ( icon_pdf.png ). Por \u00faltimo, el tercer bloque se aplica a cualquier enlace con un atributo href , cambiamos el modo de representaci\u00f3n con display: inline-block , para que el subrayado s\u00f3lo afecte al enlace en s\u00ed. Recuerda que tambi\u00e9n es posible seleccionar el principio de un atributo, utilizando ^= en lugar de $= , como podemos ver en el siguiente ejemplo: a[href^=\"http://\"]::after { content: \" (P\u00e1gina no segura): \" attr(href); display: inline-block; color: #666; } Ojo: En el segundo caso del ejemplo anterior, s\u00f3lo se seleccionar\u00edan los enlaces que tengan un fichero .pdf donde la extensi\u00f3n est\u00e9 en min\u00fasculas. Si tenemos un enlace a un fichero .PDF no se incluir\u00eda en esa selecci\u00f3n. Para evitar eso, podemos a\u00f1adir una i antes del cierre ] del atributo: a[href$=\".pdf\" i]::before { content: url(icon_pdf.png); } De esta forma no tendr\u00edamos problemas ese problema, ya que esa i hace referencia a \u00abcase **i**nsensitive\u00bb. As\u00ed no tendr\u00eda en cuenta si son may\u00fasculas o min\u00fasculas, sino que las tratas a todas como iguales. Fuente: Lenguaje de CSS por Manz","title":"Selectores CSS"},{"location":"desarrollo/css/04-selectores_CSS/#selectores-css","text":"","title":"Selectores CSS"},{"location":"desarrollo/css/04-selectores_CSS/#selectores-css-basicos","text":"Cuando comenzamos a trabajar con CSS, es habitual dar estilo con ejemplos muy sencillos, donde generalmente utilizamos un selector gen\u00e9rico que representa ( por ejemplo ) una etiqueta HTML. Sin embargo, lo que estamos haciendo en realidad es seleccionar todos los elementos del documento que sean dicha etiqueta. Por ejemplo, consideremos el siguiente caso: div { background-color: red; } En este ejemplo, le decimos al navegador que a todas las etiquetas div que encuentre en la p\u00e1gina, le ponga color de fondo rojo. La parte donde he colocado div es lo que se denomina selector , y puede llegar a ser mucho m\u00e1s complejo y potente , como veremos en los siguientes cap\u00edtulos. La verdadera potencia de CSS radica en la capacidad de poder seleccionar s\u00f3lo los elementos que nos interesen , ya que a medida que el documento HTML crece, aparecer\u00e1n nuevos elementos que podr\u00edan adoptar ese estilo, y ser eso algo que no nos interese. Aunque el esquema general es mucho m\u00e1s amplio ( lo iremos viendo todo, poco a poco ), para empezar, vamos a centrarnos en la sintaxis b\u00e1sica de los selectores CSS, y la m\u00e1s utilizada: los ID y las clases .","title":"Selectores CSS b\u00e1sicos"},{"location":"desarrollo/css/04-selectores_CSS/#seleccionar-por-etiquetas","text":"Como ya hemos mencionado, la forma m\u00e1s b\u00e1sica de seleccionar elementos en CSS es indicar el elemento al cu\u00e1l queremos aplicarle los estilos. Esto se comportar\u00e1 como parece l\u00f3gico: aplicando el estilo CSS a TODOS los elementos de ese tipo : strong { color: red; } En el ejemplo anterior, todos los elementos marcados con la etiqueta HTML <strong> se visualizar\u00e1n de color rojo. Este peque\u00f1o ejemplo es did\u00e1ctico pero no suele ser pr\u00e1ctico, ya que no nos permite diferenciar entre todos los elementos de ese tipo. Para ello tenemos los selectores que veremos a continuaci\u00f3n.","title":"Seleccionar por etiquetas"},{"location":"desarrollo/css/04-selectores_CSS/#seleccionar-por-id-unicos","text":"Todas las etiquetas HTML pueden tener un atributo id con un valor concreto. Este valor ser\u00e1 el nombre que le daremos a la etiqueta. Un buen s\u00edmil con la vida real es la de un DNI o tarjeta de identificaci\u00f3n, ya que la particularidad clave de los ID es que no se deben repetir, es decir, que s\u00f3lo debe haber una etiqueta con el mismo ID por documento. Veamos un ejemplo: <!DOCTYPE html> <html> <head> <title>Documento de ejemplo</title> </head> <body> <div id=\"saludo\"> <p>\u00a1Hola, visitante! \u00a1Bienvenido a esta p\u00e1gina!</p> </div> <div id=\"main\"> <p>En esta p\u00e1gina encontrar\u00e1s los siguientes temas:</p> </div> </body> </html> En el documento anterior, encontramos dos elementos <div> . El primero de ellos, tiene ID saludo , una capa donde se le da la bienvenida al usuario. La segunda, con ID main , es una capa donde hay contenido. Ser\u00eda incorrecto crear otra etiqueta con ID saludo o main en este mismo documento, ya que ya existe una con esos nombres. En la pr\u00e1ctica no suelen utilizarse demasiado los IDs , ya que en la mayor\u00eda de los casos utilizar una clase es perfectamente v\u00e1lido y mucho m\u00e1s mantenible a la larga. La situaci\u00f3n en la que los IDs est\u00e1n bien utilizados, es cuando se usan para designar una zona del documento que sabemos perfectamente que no se va a repetir, y debe ser identificada como una zona \u00fanica. #saludo { background-color: blue; color: white; } Como podemos ver en el ejemplo, en CSS la forma de hacer referencia a los IDs es con el s\u00edmbolo # , mientras que en el HTML se indica el atributo id=\"saludo\" .","title":"Seleccionar por ID (\u00fanicos)"},{"location":"desarrollo/css/04-selectores_CSS/#seleccionar-por-clases","text":"A medida que vamos codificando y creando nuestros documentos HTML, comprobaremos que necesitamos cosas m\u00e1s flexibles y c\u00f3modas que los IDs, ya que los elementos tienden a repetirse y no deben ser \u00fanicos. Aqu\u00ed es donde entran en escena las clases de CSS . Las etiquetas HTML pueden tener otro atributo interesante: class . La diferencia principal respecto a los IDs es que las clases no se requiere que sean \u00fanicas, sino que pueden repetirse a lo largo del documento HTML: <!DOCTYPE html> <html> <head> <title>Documento de ejemplo</title> </head> <body> <div id=\"main\"> <p>Escoge uno de los siguientes botones:</p> <button class=\"classic\">Opci\u00f3n 1</button> <button class=\"classic\">Opci\u00f3n 2</button> <button class=\"classic\">Opci\u00f3n 3</button> <button class=\"back\">Volver</button> </div> </body> </html> En el documento HTML anterior, tenemos cuatro botones HTML. Los 3 primeros son botones de opciones, por lo que establecemos una misma clase llamada classic , mientras que el \u00faltimo bot\u00f3n ( un bot\u00f3n para volver hacia atr\u00e1s ), le hemos indicado la clase back para que tenga un estilo diferente a los anteriores. Para hacer esto con IDs ( recordemos que son \u00fanicos, no deber\u00edan repetirse ) tendr\u00edamos que crear 3 IDs con nombres diferentes , mientras que con las clases ( las cuales si se pueden repetir ) podemos reutilizar el mismo nombre. Esto nos permite indicar en la parte de CSS un s\u00f3lo selector con los estilos y reutilizarlos en todos los elementos HTML que se desee. .classic { background-color: green; color: white; } .back { background-color: orange; color: white; } En CSS se hace referencia a las clases con un punto: .classic , mientras que en el HTML se escribir\u00eda el atributo class=\"classic\" . Adem\u00e1s, en el caso de las clases, podemos incluso diferenciar el tipo de elemento del que se trata. Gracias a esto podr\u00edamos utilizar la clase .classic en <button> para dar estilo visual a botones, y la clase .classic en <p> para dar otros estilos diferentes a los p\u00e1rrafos de texto: button.classic { background-color: green; color: white; } p.classic { color: red; }","title":"Seleccionar por clases"},{"location":"desarrollo/css/04-selectores_CSS/#selecciones-mixtas","text":"Al margen de todo lo que hemos visto, es posible utilizar varias clases en un mismo elemento HTML, simplemente separando por espacios dentro del atributo class . De esta forma, a dicho elemento se le aplicar\u00e1n los estilos de cada una de las clases indicadas, las cuales suelen tener un grupo de caracter\u00edsticas relacionadas con su nombre, lo cu\u00e1l es interesantes y muy pr\u00e1ctico de recordar, d\u00e1ndonos mucha soltura a la hora de crear clases y reutilizarlas: <button class=\"classic green-border big\">Bot\u00f3n</button> Este enfoque se considera uno de los principios del denominado CSS at\u00f3mico , en el que se basan frameworks CSS como Tachyons o TailwindCSS . Por \u00faltimo, mencionar que tambi\u00e9n tenemos la posibilidad de ser m\u00e1s espec\u00edficos y aplicar estilo s\u00f3lo a los elementos HTML que contengan todas las clases indicadas, colocando cada clase de forma consecutiva en el CSS, de la siguiente forma: button.classic.green-border.big { /* Estilos CSS */ } En este ejemplo, s\u00f3lo se aplicar\u00e1n los estilos cuando el elemento HTML <button> tenga una clase classic , una clase green-border y una clase big . Si falta alguna de ellas, no se aplicar\u00e1 el estilo.","title":"Selecciones mixtas"},{"location":"desarrollo/css/04-selectores_CSS/#selectores-css-avanzados","text":"Al margen de la selecci\u00f3n \u00abb\u00e1sica\u00bb de elementos a trav\u00e9s de CSS, que suele realizarse mediante clases e IDs, existe un amplio abanico de m\u00e9todos para seleccionar elementos dependiendo de la estructura del documento HTML denominados combinadores CSS : Nombre S\u00edmbolo Ejemplo Significado Agrupaci\u00f3n de selectores , p, a, div { } Se aplican estilos a varios elementos. Selector descendiente #page div { } Se aplican estilos a elementos dentro de otros. Selector hijo > #page > div { } Se aplican estilos a elementos hijos directos. Selector hermano adyacente + div + div { } Se aplican estilos a elementos que siguen a otros. Selector hermano general ~ div ~ div { } Se aplican estilos a elementos al mismo nivel. Selector universal * #page * { } Se aplican estilos a todos los elementos. En los siguientes apartados, veremos varios ejemplos gr\u00e1ficos sobre un supuesto ejemplo de documento HTML, dibujado en forma de \u00e1rbol esquem\u00e1tico. As\u00ed sabremos que elementos est\u00e1n dentro de otros y nos ser\u00e1 m\u00e1s f\u00e1cil entender cada uno de los combinadores CSS .","title":"Selectores CSS avanzados"},{"location":"desarrollo/css/04-selectores_CSS/#agrupacion-de-selectores","text":"En muchas ocasiones nos ocurrir\u00e1 que tenemos varios bloques CSS con selectores diferentes pero con los mismos estilos exactamente, algo que generalmente no es apropiado. Si esto ocurre a menudo, el tama\u00f1o del documento CSS ocupar\u00e1 m\u00e1s y tardar\u00e1 m\u00e1s en descargarse: .container-logo { border-color: red; background: white; } .container-alert { border-color: red; background: white; } .container-warning { border-color: red; background: white; } Una buena pr\u00e1ctica es ahorrar texto y simplificar nuestro documento CSS lo m\u00e1ximo posible, por lo que podemos hacer uso de la agrupaci\u00f3n CSS utilizando la , ( coma ). De esta forma, podemos pasar de tener el ejemplo anterior, a tener el siguiente ejemplo ( que es totalmente equivalente ), donde hemos utilizado la agrupaci\u00f3n para decirle al navegador que aplique dichos estilos las diferentes clases: .container-logo, .container-alert, .container-warning { border-color: white; background: red; } Al margen de esto, dos buenas pr\u00e1cticas que podr\u00edamos aplicar en esta situaci\u00f3n ser\u00edan las siguientes: Simplifica por responsabilidades : .container-alert y .container-warning parecen tener un concepto muy similar: alertas o mensajes de advertencia. Es posible que estos selectores tengan la misma funcionalidad y sean sin\u00f3nimos. Si es as\u00ed, lo ideal ser\u00eda refactorizar y simplificarlos a uno: .container-warning , haciendo desaparecer el otro. Legibilidad por delante : CSS por si s\u00f3lo puede ser dificil de leer y mantener. Aunque a priori puede parecer que es mejor poner la lista de selectores uno detr\u00e1s de otro, la experiencia nos dicta que deber\u00edamos separarlos en una l\u00ednea diferente cada selector. Esto lo hace tremendamente m\u00e1s legible a la hora de revisar c\u00f3digo CSS. .container-logo, .container-warning { border-color: white; background: red; } Consejo : Esto puede parecer poco importante a priori, pero a medida que avanzamos con nuestro dise\u00f1o, los documentos CSS se hacen tremendamente grandes y dif\u00edciles de mantener, por lo que cuanto m\u00e1s sencillos sean, mejor.","title":"Agrupaci\u00f3n de selectores"},{"location":"desarrollo/css/04-selectores_CSS/#selector-descendiente","text":"En CSS podemos utilizar lo que se llama el selector descendiente , que no es m\u00e1s que una forma de seleccionar ciertos elementos que est\u00e1n dentro de otros elementos. Esto puede parecer sencillo, pero cuidado, ya que puede ser una fuente de problemas si no se entiende bien. Su sintaxis se basa en colocar los elementos uno a continuaci\u00f3n de otro, separado por un espacio: div#pagina div { background-color: blue; } En el ejemplo anterior, aplicamos los estilos CSS ( color azul de fondo ) a todos los elementos <div> que est\u00e9n dentro de un <div> con ID pagina . De esta forma, si existe un elemento <div> fuera del <div> con id pagina , no se aplicar\u00e1n los estilos indicados: Repasemos varios detalles importantes respecto a este combinador CSS: Se est\u00e1n seleccionando todos los elementos <div> que est\u00e1n dentro de <div> con ID pagina . Observa que se seleccionan independientemente del nivel al que est\u00e9n ( hijos, abuelos, ... ) En este caso, el div de div#pagina es innecesario, ya que hab\u00edamos dicho que los IDs no se pueden repetir. Si ya existe un elemento con ID pagina , no hace falta diferenciarlo tambi\u00e9n por etiqueta. Si se tratase de una clase, si podr\u00eda usarse. Se pueden construir selectores muy complejos con tantos elementos como se quiera, pero una buena pr\u00e1ctica es mantenerlos simples. Cu\u00e1ntos m\u00e1s elementos descendientes existan en un selector, m\u00e1s complejo ser\u00e1 el procesamiento de dicha regla por los navegadores. Lo recomendable es ser despierto y utilizar s\u00f3lo los necesarios. <div class=\"menu\"> <div class=\"options\"> <ul> <li><a href=\"/one\">Option 1</a></li> <li><a href=\"/two\">Option 2</a></li> <li><a href=\"/three\">Option 3</a></li> </ul> </div> </div> Observando el fragmento de c\u00f3digo HTML anterior, veamos las siguientes 2 formas de aplicar estilos CSS a los enlaces <a> : /* Forma 1 */ .menu .options ul li a { color: orange; } /* Forma 2 */ .menu a { color: orange; } Mientras que la primera es mucho m\u00e1s espec\u00edfica, es una muy buena pr\u00e1ctica en CSS mantener los selectores lo menos espec\u00edficos posibles para evitar problemas de Especificidad ( a.k.a. CSS Peter Griffin ):","title":"Selector descendiente"},{"location":"desarrollo/css/04-selectores_CSS/#selector-hijo","text":"Aunque el selector descendiente es bastante interesante, nos puede interesar hacer la misma operaci\u00f3n, pero en lugar de seleccionar todos los elementos descendientes, seleccionar s\u00f3lo los descendientes directos del elemento con el s\u00edmbolo > , descartando as\u00ed nietos y sucesivos. #pagina > div { background-color: blue; } Veamos los elementos seleccionados en el documento de ejemplo para afianzar conceptos: Al contrario que en el caso anterior, no se seleccionan todos los elementos <div> descendientes, sino solo aquellos que son hijos directos del primer elemento especificado.","title":"Selector hijo"},{"location":"desarrollo/css/04-selectores_CSS/#selector-hermano-adyacente","text":"Es posible tambi\u00e9n hacer referencia a los elementos hermanos, es decir, aquellos elementos que est\u00e1n directamente a continuaci\u00f3n del elemento especificado. Mediante el s\u00edmbolo + del selector hermano adyacente , se pueden seleccionar aquellos elementos hermanos que est\u00e1n seguidos el uno de otro ( en el mismo nivel ): div.articulo span + span { color: blue; } C\u00f3mo se podr\u00e1 ver en este nuevo ejemplo, este combinador CSS har\u00e1 que se seleccionen los elementos span que est\u00e9n a continuaci\u00f3n de un div.articulo span : Obs\u00e9rvese que el primer elemento <span> no es seleccionado, puesto que es el que estamos tomando de base. Una buena forma para entenderlo es leerlo de la siguiente forma: \u00ab todo elemento <span> que est\u00e9 inmediatamente precedido de un <span> \u00bb.","title":"Selector hermano adyacente"},{"location":"desarrollo/css/04-selectores_CSS/#selector-hermano-general","text":"Si pensamos otras opciones en el ejemplo anterior, es posible que necesitemos ser menos espec\u00edficos y en lugar de querer seleccionar los elementos hermanos que sean adyacentes , queramos seleccionar todos los hermanos en general, sin necesidad de que sean adyacentes. Esto se puede conseguir con el selector hermano general , simbolizado con el car\u00e1cter ~ : Como se ve en el ejemplo, no es necesario que el elemento strong se encuentre adyacente al primero, sino que basta con que sean hermanos en el mismo nivel.","title":"Selector hermano general"},{"location":"desarrollo/css/04-selectores_CSS/#selector-universal","text":"Por \u00faltimo, el selector universal se simboliza con un asterisco * y es la forma de aplicar ciertos estilos en TODOS Y CADA UNO de los elementos HTML correspondientes. Este ejemplo selecciona todos los elementos dentro de div#menu . Es importante recalcar la diferencia de seleccionar #menu , a seleccionar todos los elementos dentro de #menu , que es lo que estamos haciendo en este caso. El selector universal puede ser muy \u00fatil en algunos casos para resetear ciertas propiedades de todo un documento, como en el siguiente ejemplo, donde se eliminan los m\u00e1rgenes de todos los elementos del documento HTML, puesto que algunos navegadores ponen m\u00e1rgenes diferentes y esto puede producir ciertas inconsistencias en los dise\u00f1os: /* Elimina m\u00e1rgenes y rellenos de todos los elementos de un documento HTML */ * { margin: 0; padding: 0; }","title":"Selector universal"},{"location":"desarrollo/css/04-selectores_CSS/#pseudoclases-css","text":"Las pseudoclases se utilizan para hacer referencia a ciertos comportamientos de los elementos HTML. As\u00ed como los combinadores CSS se utilizan para dar estilos dependiendo de donde est\u00e9n colocados en la estructura del HTML, las pseudoclases se utilizan para dar estilos a elementos respecto al comportamiento que experimentan en determinado momento. Volvamos a recordar el esquema general de sintaxis de CSS: Las pseudoclases se definen a\u00f1adiendo dos puntos antes de la pseudoclase concreta. En el caso de existir selectores de etiqueta, id o clases, estas se escribir\u00edan a su izquierda.","title":"Pseudoclases CSS"},{"location":"desarrollo/css/04-selectores_CSS/#pseudoclases-de-enlaces","text":"Existen algunas pseudoclases orientadas a los enlaces o hiperv\u00ednculos. En este caso, permiten cambiar los estilos dependiendo del comportamiento del enlace: Pseudoclase Descripci\u00f3n :link Aplica estilos cuando el enlace no ha sido visitado todav\u00eda. :visited Aplica estilos cuando el enlace ha sido visitado anteriormente. A continuaci\u00f3n veremos un ejemplo donde seleccionamos mediante un simple selector a los enlaces que a\u00fan no han sido visitados , cambiando el color de los mismos o su formato, lo que mostrar\u00e1 dichos enlaces de color verde y en negrita: a:link { color: green; font-weight: bold } Por otro lado, la pseudoclase :visited puede utilizarse para dar estilo a los enlaces que hayan sido visitados previamente en el navegador del usuario: a:visited { color: purple; font-weight: bold }","title":"Pseudoclases de enlaces"},{"location":"desarrollo/css/04-selectores_CSS/#pseudoclases-de-raton","text":"Originalmente, las siguientes pseudoclases se utilizaban solamente en enlaces ( Internet Explorer no los soportaba en otros elementos ). Sin embargo, actualmente pueden ser utilizadas con seguridad en cualquier otro elemento, sin necesidad de ser <a> . Pseudoclase Descripci\u00f3n :hover Aplica estilos cuando pasamos el rat\u00f3n sobre un elemento. :active Aplica estilos cuando estamos pulsando sobre el elemento. La primera de ellas, :hover , es muy \u00fatil e interesante, ya que permite aplicar estilos a un elemento justo cuando el usuario est\u00e1 pasando el rat\u00f3n sobre \u00e9l. Es una de las pseudoclases m\u00e1s utilizadas: /* Usuario mueve el rat\u00f3n sobre un enlace */ a:hover { background-color: cyan; padding: 2px } /* Usuario mueve el rat\u00f3n sobre un div y resalta todos los enlaces que contiene */ div:hover a { background-color: steelblue; color: white; } Observese que podemos realizar acciones un poco m\u00e1s espec\u00edficas, como el segundo ejemplo anterior, donde al movernos sobre un elemento div ( div:hover ), aplicaremos los estilos a los enlaces ( a ) que est\u00e1n dentro del mencionado div . Por otro lado, la segunda pseudoclase, :active , permite resaltar los elementos que se encuentran activos, donde el usuario est\u00e1 pulsando de forma activa con el rat\u00f3n: a:active { border: 2px solid #FF0000; padding: 2px } Nota: Aunque las pseudoclases anteriores se inventaron para interactuar con un rat\u00f3n en un sistema de escritorio, pueden funcionar en dispositivos t\u00e1ctiles. A\u00fan as\u00ed, ten en cuenta que, por ejemplo, el :hover no tiene mucho sentido en dispositivos m\u00f3viles, ya que, aunque podr\u00eda hacerlo, un usuario no navega por m\u00f3vil arrastrando el dedo por la pantalla.","title":"Pseudoclases de rat\u00f3n"},{"location":"desarrollo/css/04-selectores_CSS/#pseudoclases-de-interaccion","text":"Existen pseudoclases orientadas principalmente a los campos de formulario de p\u00e1ginas webs y la interacci\u00f3n del usuario con ellos, veamos otro par interesante: Pseudoclase Descripci\u00f3n :focus Aplica estilos cuando el elemento tiene el foco. :checked Aplica estilos cuando la casilla est\u00e1 seleccionada. Cuando estamos escribiendo en un campo de texto de un formulario de una p\u00e1gina web, generalmente pulsamos TAB para cambiar al siguiente campo y SHIFT+TAB para volver al anterior. Cuando estamos posicionados en un campo se dice que ese campo tiene el foco , mientras que al pulsar TAB y saltar al siguiente, decimos que pierde el foco . El comportamiento de \u00abganar el foco\u00bb puede gestionarse mediante la pseudoclase :focus : /* El campo ha ganado el foco */ input:focus { border: 2px dotted #444 } Nota : Aunque estas pseudoclases suelen utilizarse con elementos de formularios como <input> , tambi\u00e9n pueden utilizarse con otros elementos, como por ejemplo los enlaces <a> . Esta es una excelente oportunidad para personalizar el estilo de los campos de texto de un formulario ( <input> y <textarea> ) mientras el usuario escribe y se mueve por ellos. Por otro lado, la pseudoclase :checked permite aplicar el estilo especificado a los elementos <input> ( casillas de verificaci\u00f3n o botones de radio ) u <option> ( la opci\u00f3n seleccionada de un <select> ). Por ejemplo, se podr\u00eda utilizar el siguiente fragmento de c\u00f3digo: input:checked + span { color: green; } Este ejemplo a\u00f1ade el selector hermano + para darle formato al <span> que contiene el texto y se encuentra colocado a continuaci\u00f3n de la casilla <input> . De esta forma, los textos que hayan sido seleccionados, se mostrar\u00e1n en verde.","title":"Pseudoclases de interacci\u00f3n"},{"location":"desarrollo/css/04-selectores_CSS/#pseudoclases-de-activacion","text":"Por norma general, los elementos de un formulario HTML est\u00e1n siempre activados, aunque se pueden desactivar a\u00f1adiendo el atributo disabled ( es un atributo booleano, no lleva valor ) al elemento HTML en cuesti\u00f3n. Esto es una pr\u00e1ctica muy utilizada para impedir al usuario escribir en cierta parte de un formulario porque, por ejemplo, no es aplicable. Existen varias pseudoclases para detectar si un campo de un formulario est\u00e1 activado o desactivado: Pseudoclase Descripci\u00f3n :enabled Aplica estilos cuando el campo del formulario est\u00e1 activado. :disabled Aplica estilos cuando el campo del formulario est\u00e1 desactivado. :read-only Aplica estilos cuando el campo es de s\u00f3lo lectura. :read-write Aplica estilos cuando el campo es editable por el usuario. Utilizando las dos primeras pseudoclases, bastante autoexplicativas por si solas, podemos seleccionar elementos que se encuentren activados ( comportamiento por defecto ) o desactivados: /* Muestra en fondo blanco las casillas que permiten escribir */ input:enabled { background-color: white; } /* Muestra en fondo gris las casillas que no permiten escribir */ input:disabled { background-color: grey; } Por otro lado, las pseudoclases read-only y read-write nos permiten seleccionar y diferenciar elementos que se encuentran en modo de solo lectura ( tienen especificado el atributo readonly en el HTML ) o no: input:read-only { background-color: darkred; color: white } En el ejemplo anterior, la pseudoclase :read-only le da estilo a aquellos campos <input> de un formulario que est\u00e1n marcados con el atributo de s\u00f3lo lectura readonly . La diferencia entre un campo con atributo disabled y un campo con atributo readonly es que la informaci\u00f3n del campo con readonly se enviar\u00e1 a trav\u00e9s del formulario, mientras que la del campo con disabled no se enviar\u00e1. A\u00fan as\u00ed, ambas no permiten modificar el valor. Nota : Ten en cuenta que :read-only aplicar\u00e1 los estilos a todos los elementos HTML que no puedan ser modificados por el usuario. Por otro lado, la pseudoclase :read-write es muy \u00fatil para dar estilos a todos aquellos elementos que son editables por el usuario, sean campos de texto <input> o <textarea> . input:read-write { background-color: green; color: white } Nota : La pseudoclase read-write da estilo tambi\u00e9n a elementos HTML que contengan el atributo contenteditable , como por ejemplo un p\u00e1rrafo editable por el usuario con dicho atributo.","title":"Pseudoclases de activaci\u00f3n"},{"location":"desarrollo/css/04-selectores_CSS/#pseudoclases-de-validacion","text":"En HTML5 es posible dotar de capacidades de validaci\u00f3n a los campos de un formulario, pudiendo interactuar desde Javascript o incluso desde CSS. Con estas validaciones podemos asegurarnos de que el usuario escribe en un campo de un formulario el valor esperado que deber\u00eda. Existen algunas pseudoclases \u00fatiles para las validaciones, como por ejemplo las siguientes: Pseudoclase \u00bfCu\u00e1ndo aplica estilos? :required Cuando el campo es obligatorio, o sea, tiene el atributo required . :optional Cuando el campo es opcional (por defecto, todos los campos). :invalid Cuando los campos no cumplen la validaci\u00f3n HTML5. :valid Cuando los campos cumplen la validaci\u00f3n HTML5. :out-of-range Cuando los campos num\u00e9ricos est\u00e1n fuera del rango. :in-range Cuando los campos num\u00e9ricos est\u00e1n dentro del rango. En un formulario HTML es posible establecer un campo obligatorio que ser\u00e1 necesario rellenar para enviar el formulario. Por ejemplo, el DNI de una persona que va a matricularse en un curso, o el nombre de usuario de alta en una plataforma web para identificarse. Campos que son absolutamente necesarios. Para hacer obligatorios dichos campos, tenemos que indicar en el HTML el atributo required , al cu\u00e1l ser\u00e1 posible darle estilo mediante la pseudoclase :required : input:required { border: 2px solid blue; } Por otra parte, los campos opcionales ( no obligatorios, sin el atributo required ) pueden seleccionarse con la pseudoclase :optional : input:optional { border: 2px solid grey; } Las validaciones en formularios HTML siempre han sido un proceso tedioso, hasta la llegada de HTML5. HTML5 brinda un excelente soporte de validaciones desde el lado del cliente, pudiendo comprobar si los datos especificados son correctos o no antes de realizar las validaciones en el lado del servidor, y evitando la latencia de enviar la informaci\u00f3n al servidor y recibirla de vuelta. Ojo: Ten en cuenta que la validaci\u00f3n de cliente es apropiada solo para reducir la latencia de env\u00edo/recepci\u00f3n al servidor, pero nunca como estrategia para evitar problemas de seguridad o similares, para la cu\u00e1l se debe tener validaci\u00f3n en el servidor siempre. Las validaciones utilizadas en frontend, es posible falsearlas o salt\u00e1rselas. Imaginemos un campo de entrada en el que queremos obtener la edad del usuario . Nuestra intenci\u00f3n es que solo se puedan introducir n\u00fameros. Para ello hacemos uso de la expresi\u00f3n regular [0-9]+ , que significa \u00ab una o m\u00e1s cifras del 0 al 9 \u00bb: <input type=\"text\" name=\"age\" pattern=\"[0-9]+\" /> Sin embargo, el atributo pattern permite expresiones regulares realmente complejas, como por ejemplo, una expresi\u00f3n regular para validar el formato de un DNI, ya sea en el formato nacional de Espa\u00f1a ( 12345678L ) o en formato NIE ( X1234567L ), aceptando guiones si se indican: <input type=\"text\" name=\"dni\" pattern=\"(([X-Z]{1})([-]?)(\\d{7})([-]?)([A-Z]{1}))|((\\d{8})([-]?)([A-Z]{1}))\" /> Se pueden aplicar ciertos estilos dependiendo de si se cumple o no el patr\u00f3n de validaci\u00f3n, utilizando las siguientes pseudoclases: input:invalid { background-color: darkred; color: white; } input:valid { background-color: green; color: white; } Sin embargo, en la validaci\u00f3n num\u00e9rica que vimos anteriormente, un usuario podr\u00eda escribir 500 , que es una edad imposible, porque en el patr\u00f3n de validaci\u00f3n indicamos \u00abuna o m\u00e1s cifras del 0 al 9\u00bb. Lo ideal ser\u00eda establecer un rango, algo que se suele hacer muy a menudo si tenemos campos num\u00e9ricos de formulario: <input type=\"number\" name=\"age\" min=\"18\" max=\"100\" /> Este campo permite al usuario especificar su edad, utilizando los atributos de validaci\u00f3n min y max , que s\u00f3lo permiten valores entre 18 y 100 a\u00f1os. Los valores fuera de este rango, no ser\u00e1n v\u00e1lidos. De la misma forma que antes, es posible aplicar estilos para los valores fuera de rango, como dentro de rango: input:out-of-range { background-color: darkred; color: white; } input:in-range { background-color: green; color: white; }","title":"Pseudoclases de validaci\u00f3n"},{"location":"desarrollo/css/04-selectores_CSS/#pseudoclases-de-negacion","text":"Existe una pseudoclase muy \u00fatil, denominada pseudoclase de negaci\u00f3n . Permite seleccionar todos los elementos que no cumplan los selectores indicados entre par\u00e9ntesis. Veamos un ejemplo: p:not(.general) { border: 1px solid #DDD; padding: 8px; background: #FFF; } Este peque\u00f1o fragmento de c\u00f3digo nos indica que todos los p\u00e1rrafos ( elementos <p> ) que no pertenezcan a la clase general , se les aplique el estilo especificado. Consejo : Las reglas de negaci\u00f3n pueden ser complejas, ineficientes y poco escalables. Intenta utilizarlas s\u00f3lo en los casos que sea absolutamente necesario.","title":"Pseudoclases de negaci\u00f3n"},{"location":"desarrollo/css/04-selectores_CSS/#otras-pseudoclases","text":"Para finalizar el apartado de pseudoclases, quiero mencionar algunas que no encajan en los apartados anteriores, pero que pueden ser muy \u00fatiles en algunos casos: Pseudoclase Significado :lang(es) Aplica estilo a los elementos con el atributo lang=\"es\" . :target Aplica estilo al elemento que coincida con el ancla de la URL. :root Aplica estilo al elemento ra\u00edz (padre) del documento. :default Experimental. Aplica estilo al elemento por defecto. \u00datil en formularios :dir(A) Experimental. Aplica estilo al elemento que coincide con la direcci\u00f3n ltr o rtl . :indeterminate Experimental. Aplica estilo a la casilla checkbox o al elemento <progress> sin definir. :fullscreen Experimental. Aplica estilo si la p\u00e1gina est\u00e1 en el modo de pantalla completa. :scope Experimental. Aplica estilo a los elementos en el \u00e1mbito indicado. :any(A) Experimental. Aplica estilo si coincide con alg\u00fan elemento indicado en A . Otras pseudoclases como :first , :left , :right o :blank las mencionamos en el cap\u00edtulo de medios paginados .","title":"Otras pseudoclases"},{"location":"desarrollo/css/04-selectores_CSS/#pseudoclases-css-avanzadas","text":"Existen varias pseudoclases que permiten hacer referencias a los elementos del documento HTML seg\u00fan su posici\u00f3n y estructura de los elementos hijos . A continuaci\u00f3n muestro un peque\u00f1o resumen de estas pseudoclases: Pseudoclase Descripci\u00f3n :first-child Primer elemento hijo (de cualquier tipo). :last-child \u00daltimo elemento hijo (de cualquier tipo). :nth-child(n) N-elemento hijo (de cualquier tipo). :nth-last-child(n) N-elemento hijo (de cualquier tipo) partiendo desde el final. Para ello, volvamos a utilizar una estructura en forma de \u00e1rbol para ver c\u00f3modamente la ubicaci\u00f3n de cada uno de los elementos. Las dos primeras pseudoclases, :first-child y :last-child hacen referencia a los primeros y \u00faltimos elementos ( al mismo nivel ) respectivamente. strong:first-child { background-color:cyan; } strong:last-child { background-color:green; } Sin embargo, si no queremos quedarnos en los primeros o \u00faltimos elementos y necesitamos m\u00e1s potencia para elegir, podemos hacer uso de la pseudoclase :nth-child(A) , que permite especificar el elemento deseado, simplemente estableciendo su n\u00famero en el par\u00e1metro A : N\u00famero Equivalente a la pseudoclase Significado strong:nth-child(1) strong:first-child {} Primer elemento hijo, que adem\u00e1s es un <strong> strong:nth-child(2) Segundo elemento hijo, que adem\u00e1s es un <strong> strong:nth-child(3) Tercer elemento hijo, que adem\u00e1s es un <strong> strong:nth-child(n) Todos los elementos hijos que son <strong> strong:nth-child(2n) Todos los elementos hijos pares <strong> strong:nth-child(2n-1) Todos los elementos hijos impares <strong> A continuaci\u00f3n puedes comprobar los valores de la tabla anterior de un modo m\u00e1s visual y pr\u00e1ctico, estableciendo en el campo de texto valores como n , n+2 , 2n , 2n-1 ( o similares ) y observando los resultados. :nth-child() .nth-test { display: flex; flex-direction: column; align-items: center; } .nth-test input { padding: 5px; max-width: 70px; margin-bottom: 0.5em; font-family: var(--header-font); font-size: 18px; } .nth-test .table { display: flex; flex-wrap: wrap; } .nth-test .cell { border: 1px solid #aaa; width: 75px; height: 32px; margin: 3px; } const nth = document.querySelector(\".nth-test\"); const input = nth.querySelector(\"input\"); const table = nth.querySelector(\".table\"); const style = nth.querySelector(\".nth-style\"); for (let i = 0; i < 60; i++) { const div = document.createElement(\"div\"); div.className = \"cell\"; table.appendChild(div); } input.onkeyup = (ev) => { const value = ev.target.value; style.textContent = `.nth-test .cell:nth-child(${value}) { background: green; }`; } Veamos adem\u00e1s un ejemplo gr\u00e1fico: Como se aprecia en el ejemplo, en el caso :nth-child(2) se puede ver como el segundo elemento lo ocupa un elemento span , por lo que s\u00f3lo se selecciona el elemento strong del segundo caso, donde si existe.","title":"Pseudoclases CSS avanzadas"},{"location":"desarrollo/css/04-selectores_CSS/#elementos-del-mismo-tipo","text":"En los casos anteriores, seleccionamos elementos independientemente de que elemento sea. Simplemente, hacemos caso a la posici\u00f3n donde est\u00e1 ubicado. Si queremos hacer referencia s\u00f3lo a elementos del mismo tipo, utilizaremos los selectores siguientes, an\u00e1logos a los anteriores, pero haciendo referencia s\u00f3lo a elementos del mismo tipo: Pseudoclase Descripci\u00f3n :first-of-type Primer elemento hijo (de su mismo tipo). :last-of-type \u00daltimo elemento hijo (de su mismo tipo). :nth-of-type(n) N-elemento hijo (de su mismo tipo). :nth-last-of-type(n) N-elemento hijo (de su mismo tipo) partiendo desde el final. Las pseudoclases :first-of-type y :last-of-type son las equivalentes a :first-child y :last-child pero s\u00f3lo teniendo en cuenta elementos del mismo tipo. Por otro lado, la pseudoclase :nth-of-type(A) es la equivalente a :nth-child(A) y :nth-last-of-type(A) es la equivalente a :nth-last-child(A) . Veamos un ejemplo sobre el ejercicio anterior: En este ejemplo, se puede ver como :nth-of-type(2) selecciona el segundo elemento strong en ambos casos, a pesar de que en el primero ocupa la tercera posici\u00f3n. En este caso se selecciona porque es el segundo elemento de su mismo tipo ( <strong> ). Por otro lado, :nth-last-of-type(A) hace una selecci\u00f3n de forma inversa, empezando por el \u00faltimo elemento.","title":"Elementos del mismo tipo"},{"location":"desarrollo/css/04-selectores_CSS/#hijos-unicos","text":"Existen tambi\u00e9n varias pseudoclases para la gesti\u00f3n de hijos \u00fanicos. Son las siguientes: Pseudoclase Descripci\u00f3n :only-child Elemento que es hijo \u00fanico (de cualquier tipo). :only-of-type Elemento que es hijo \u00fanico (de su mismo tipo). :empty Elemento vac\u00edo (sin hijos, ni texto). La propiedad :only-child nos proporciona un m\u00e9todo para aplicar estilo a aquellos elementos que sean el \u00fanico hijo de su elemento padre. Adem\u00e1s, como ha ocurrido anteriormente, tambi\u00e9n existe la pseudoclase :only-of-type que es equivalente al anterior pero s\u00f3lo para elementos del mismo tipo, es decir, que puede ser que no sea el \u00fanico elemento hijo, pero s\u00ed el \u00fanico de su tipo. Muy relacionada est\u00e1 tambi\u00e9n la pseudoclase :empty , que permite seleccionar los elementos que est\u00e9n vac\u00edos. Ojo con esto, ya que un elemento que contenga comentarios HTML <!-- --> la pseudoclase :empty lo detectar\u00e1 como vac\u00edo, pero si contiene espacios en blanco, no.","title":"Hijos \u00fanicos"},{"location":"desarrollo/css/04-selectores_CSS/#pseudoelementos-css","text":"Al igual que las pseudoclases, los pseudoelementos son otra de las caracter\u00edsticas de CSS que permiten hacer referencias a \u00abcomportamientos virtuales no tangibles\u00bb, o lo que es lo mismo, se le puede dar estilo a elementos que no existen realmente en el HTML, y que se pueden generar desde CSS. Recordemos la sintaxis de los pseudoelementos, que est\u00e1 precedida de dos puntos dobles ( :: ) para diferenciarlos de las pseudoclases, las cuales s\u00f3lo tienen dos puntos ( : ). No obstante, este cambio surgi\u00f3 posteriormente, por lo que a\u00fan hoy en d\u00eda es frecuente ver fragmentos de c\u00f3digo con pseudoelementos con la sintaxis de pseudoclase con un solo par de puntos : .","title":"Pseudoelementos CSS"},{"location":"desarrollo/css/04-selectores_CSS/#generacion-de-contenido","text":"Dentro de la categor\u00eda de los pseudoelementos CSS , como punto central, se encuentra la propiedad content . Esta propiedad se utiliza en selectores que incluyen los pseudoelementos ::before o ::after , para indicar que vamos a crear contenido antes o despu\u00e9s del elemento en cuesti\u00f3n: Propiedad/Pseudoelemento Descripci\u00f3n content Propiedad para generar contenido. S\u00f3lo usable en ::before o ::after . ::before Aplica los estilos antes del elemento indicado. ::after Aplica los estilos despu\u00e9s del elemento indicado. La propiedad content admite par\u00e1metros de diverso tipo, incluso concatenando informaci\u00f3n mediante espacios. Podemos utilizar tres tipos de contenido: Valor Descripci\u00f3n Ejemplo \" string \" A\u00f1ade el contenido de texto indicado. content: \"Contenido:\"; attr( atributo ) A\u00f1ade el valor del atributo HTML indicado. content: attr(href); url( URL ) A\u00f1ade la imagen indicada en la URL . content: url(icon.png); Por otro lado, los pseudoelementos ::before y ::after permiten hacer referencia a \u00abjusto antes del elemento\u00bb y \u00abjusto despu\u00e9s del elemento\u00bb, respectivamente. As\u00ed, se podr\u00eda generar informaci\u00f3n ( usualmente con fines decorativos ) que no existe en el HTML, pero que por circunstancias de dise\u00f1o ser\u00eda apropiado colocar: q::before { content: \"\u00ab\"; color: #888; } q::before { content: \"\u00bb\"; color: #888; } Los ejemplos anteriores insertan el car\u00e1cter \u00ab antes de las citas indicadas con el elemento HTML <q> y el car\u00e1cter \u00bb al finalizar la misma, ambas de color gris.","title":"Generaci\u00f3n de contenido"},{"location":"desarrollo/css/04-selectores_CSS/#atributos-html","text":"Es interesante recalcar la utilidad de la expresi\u00f3n attr() , que en lugar de generar el contenido textual que le indiquemos, permite recuperar esa informaci\u00f3n del valor del atributo HTML especificado. Veamos un ejemplo para clarificarlo, concaten\u00e1ndolo con texto: a::after { content: \" ( \" attr(href) \" )\"; } Este peque\u00f1o ejemplo muestra a continuaci\u00f3n de todos los enlaces la URL literalmente, dentro de dos par\u00e9ntesis. Esto puede ser realmente \u00fatil en una p\u00e1gina de estilos que se aplica a una p\u00e1gina en el momento de imprimir, en los cuales se pierde la informaci\u00f3n del enlace al no ser un medio interactivo. Truco : Tambi\u00e9n se puede utilizar la expresi\u00f3n url() para a\u00f1adir una imagen al contenido generado, tal y como lo hacemos en la propiedad background , por ejemplo.","title":"Atributos HTML"},{"location":"desarrollo/css/04-selectores_CSS/#primera-letra-y-primera-linea","text":"Tambi\u00e9n existen pseudoelementos con los que podemos hacer referencia a la primera letra de un texto. Para ello utilizamos el pseudoelemento ::first-letter , as\u00ed como el pseudoelemento ::first-line si queremos hacer referencia a la primera l\u00ednea de un texto. De esta forma, podemos dar estilo a esas secciones concretas del texto: Pseudoelemento Descripci\u00f3n ::first-letter Aplica los estilos en la primera letra del texto. ::first-line Aplica los estilos en la primera l\u00ednea del texto. Veamos un ejemplo en acci\u00f3n sobre un p\u00e1rrafo de texto: p { color: #333; font-family: Verdana, sans-serif; font-size: 16px; } p::first-letter { color: black; font-family: 'Times New Roman', serif; font-size: 42px; } p::first-line { color: #999; } Esto puede darnos la posibilidad de dar formato a un texto con ciertas propiedades, como cuentos cl\u00e1sicos:","title":"Primera letra y primera l\u00ednea"},{"location":"desarrollo/css/04-selectores_CSS/#signos-de-las-listas-markers","text":"Existe tambi\u00e9n un pseudoelemento para hacer referencias a los signos o marcas de la listas ( <ol> o <ul> ), en el caso de que queramos que tengan, por ejemplo, un color diferente al del texto de la lista. Se aplican a los elementos <li> de los \u00edtems de una lista. Veamos un ejemplo: ul ::marker { color: green; } Esto mostrar\u00eda el texto de la lista con el color habitual que tenga ( por ejemplo, negro ), pero los signos que preceden a cada \u00edtem de la lista, aparecer\u00edan en color verde. Hay que tener cuidado, puesto que el soporte de esta caracter\u00edstica a\u00fan no es muy bueno.","title":"Signos de las listas (markers)"},{"location":"desarrollo/css/04-selectores_CSS/#otros-pseudoelementos","text":"Existen otros pseudoelementos quiz\u00e1s menos conocidos: Pseudoelemento Descripci\u00f3n Soporte ::backdrop Aplica estilos al fondo exterior de la ventana de di\u00e1logo mostrada. ::input-placeholder Aplica estilos a los textos de sugerencia de los campos de entrada. Soporte ::selection Aplica estilos al fragmento de texto seleccionado por el usuario. Soporte","title":"Otros pseudoelementos"},{"location":"desarrollo/css/04-selectores_CSS/#atributos-css","text":"Por \u00faltimo, una caracter\u00edstica muy interesante de CSS es la posibilidad de aplicar estilos dependiendo de la existencia o el contenido de ciertos atributos de los elementos HTML . En CSS, estos atributos se rodean de corchetes [] y hay varias formas de utilizarlos, inspirados en un concepto llamado expresiones regulares: Atributo \u00bfCu\u00e1ndo se aplica el estilo? [href] Si el elemento tiene atributo href . [href=\"#\"] Si el elemento tiene atributo href y su valor es # . [href*=\"emezeta\"] Si el elemento tiene atributo href y su valor contiene emezeta . [href^=\"https://\"] Si el elemento tiene atributo href y su valor comienza por https:// . [href$=\".pdf\"] Si el elemento tiene atributo href y su valor termina por .pdf (un enlace a un PDF). [class~=\"emezeta\"] Si el elemento tiene atributo class con una lista de valores y uno de ellos es emezeta . [lang|=\"es\"] Si el elemento tiene atributo lang con una lista de valores, donde alguno empieza por es- .","title":"Atributos CSS"},{"location":"desarrollo/css/04-selectores_CSS/#atributo-existente","text":"Para empezar, podemos utilizar el atributo [style] para seleccionar todas las etiquetas HTML que contengan un atributo style para darles estilos en l\u00ednea a un elemento. Estos elementos, aparecer\u00edan con fondo rojo: [style] { background: red; } Este ejemplo es did\u00e1ctico y no tiene finalidad pr\u00e1ctica de dise\u00f1o, ya que la idea ser\u00eda mostrar visualmente que elementos tienen esa caracter\u00edstica, algo que podr\u00eda interesarle a un desarrollador. Si el elemento no tiene un atributo style definido, no se le aplican los estilos.","title":"Atributo existente"},{"location":"desarrollo/css/04-selectores_CSS/#atributo-con-valor-exacto","text":"Pero la potencia de los atributos en CSS es que podemos indicar el valor exacto que deben tener para que sean seleccionados. Para ello, simplemente utilizamos el = y escribimos el texto entre comillas dobles: a[rel=\"nofollow\"] { background: red; } Este ejemplo selecciona los enlaces <a> que tienen un atributo rel establecido a nofollow . Esta es una caracter\u00edstica que le indica a Google ( u otros robots o crawlers ) que ese enlace no se deber\u00eda tener en cuenta para seguirlo, algo que puede ser realmente \u00fatil para desincentivar SPAM en comentarios, por ejemplo.","title":"Atributo con valor exacto"},{"location":"desarrollo/css/04-selectores_CSS/#atributo-contiene-texto","text":"En lugar de un valor espec\u00edfico, tambi\u00e9n podemos querer indicar un fragmento de texto que debe estar inclu\u00eddo, pero que no es el texto \u00edntegro, casando con varias posibles coincidencias: a[href*=\"emezeta\"] { background-color: orange; } En la siguiente tabla se pueden ver varios ejemplos de enlaces, y cu\u00e1les se seleccionar\u00edan en este caso: Etiqueta Valor del atributo href \u00bfSeleccionado? <a> https://www . emezeta .com/ S\u00ed <a> https://www . emezeta .com/articulos/alternativas-a-bootstrap S\u00ed <a> https://www.google.com/ No, no incluye emezeta <a> https://www.google.com/search?q= emezeta S\u00ed <a> emezeta S\u00ed <link> https://www.emezeta.com/index.css No, no es <a> De la misma forma, existe una variante que utiliza el comparador ~= . Esta variante nos permitir\u00eda seleccionar los elementos HTML que tengan un atributo con una lista de palabras separadas por espacios, donde una de ellas es el texto que hemos escrito a continuaci\u00f3n. Se trata de una versi\u00f3n m\u00e1s restrictiva del comparador *= .","title":"Atributo contiene texto"},{"location":"desarrollo/css/04-selectores_CSS/#comienzofinal-de-atributo","text":"Otro recurso bastante \u00fatil es la posibilidad de seleccionar elementos dependiendo del texto con el que empiezan o con el que acaban en el valor de un atributo espec\u00edfico. Veamos un ejemplo, donde se apreciar\u00e1 mucho mejor esta funcionalidad: a[href]::before { content: url(icon_url.png); padding-right: 3px; } a[href$=\".pdf\"]::before { content: url(icon_pdf.png); } a[href]::after { content: \": \" attr(href); display: inline-block; color: #666; } Obtendremos el siguiente resultado: El primer bloque CSS mostrar\u00e1 un icono ( icon_url.png ) antes ( ::before ) de cualquier enlace con el atributo href . El segundo bloque CSS sobrescribimos la regla anterior si se trata de un enlace donde el atributo href acaba en .pdf . Si es as\u00ed, mostramos el icono de un archivo PDF ( icon_pdf.png ). Por \u00faltimo, el tercer bloque se aplica a cualquier enlace con un atributo href , cambiamos el modo de representaci\u00f3n con display: inline-block , para que el subrayado s\u00f3lo afecte al enlace en s\u00ed. Recuerda que tambi\u00e9n es posible seleccionar el principio de un atributo, utilizando ^= en lugar de $= , como podemos ver en el siguiente ejemplo: a[href^=\"http://\"]::after { content: \" (P\u00e1gina no segura): \" attr(href); display: inline-block; color: #666; } Ojo: En el segundo caso del ejemplo anterior, s\u00f3lo se seleccionar\u00edan los enlaces que tengan un fichero .pdf donde la extensi\u00f3n est\u00e9 en min\u00fasculas. Si tenemos un enlace a un fichero .PDF no se incluir\u00eda en esa selecci\u00f3n. Para evitar eso, podemos a\u00f1adir una i antes del cierre ] del atributo: a[href$=\".pdf\" i]::before { content: url(icon_pdf.png); } De esta forma no tendr\u00edamos problemas ese problema, ya que esa i hace referencia a \u00abcase **i**nsensitive\u00bb. As\u00ed no tendr\u00eda en cuenta si son may\u00fasculas o min\u00fasculas, sino que las tratas a todas como iguales. Fuente: Lenguaje de CSS por Manz","title":"Comienzo/final de atributo"},{"location":"desarrollo/css/05-Fuentes_y_tipografias/","text":"Fuentes y tipograf\u00edas \u00b6 Tipograf\u00edas CSS \u00b6 Las tipograf\u00edas ( tambi\u00e9n denominadas fuentes ) son una parte muy importante del mundo de CSS. De hecho, son uno de los pilares del dise\u00f1o web. La elecci\u00f3n de una tipograf\u00eda adecuada , su tama\u00f1o, color, espacio entre letras, interlineado y otras caracter\u00edsticas pueden variar mucho, de forma consciente o inconsciente, la percepci\u00f3n en la que una persona interpreta o accede a los contenidos de una p\u00e1gina. Detalles de una tipograf\u00eda \u00b6 Existen multitud de caracter\u00edsticas en las tipograf\u00edas que convendr\u00eda conocer antes de continuar, por lo que vamos a ver algunas de ellas: * Serifa : Las fuentes o tipograf\u00edas que utilizan serifa o gracia , son aquellas que incorporan unos peque\u00f1os adornos o remates en los extremos de los bordes de las letras. Muchas de estas tipograf\u00edas suelen terminar su nombre en < > ( con serifa ). * Paloseco : Las fuentes o tipograf\u00edas de paloseco son las opuestas a la anterior: unas tipograf\u00edas lisas, sin adornos o remates en los extremos de los bordes de las letras. Muchas de estas tipograf\u00edas suelen terminar su nombre en < > ( sin serifa ). Tradicionalmente, se han utilizado tipograf\u00edas con serifa en medios impresos argumentando que dichos bordes ofrecen una mayor legibilidad que las tipograf\u00edas de paloseco, ya que ayudan a reconocer m\u00e1s r\u00e1pidamente las letras. En medios digitales , las tipograf\u00edas de paloseco suelen ser m\u00e1s comunes puesto que dan un aspecto m\u00e1s limpio y ayudan a que se canse menos la vista del usuario. No obstante, todo esto puede ser muy subjetivo y est\u00e1 sujeto a diferentes interpretaciones. Monoespaciada : Por otro lado, existe un tipo de tipograf\u00eda denominada fuente monoespaciada, que se basa en que cada una de sus letras tienen exactamente el mismo ancho. Son muy \u00fatiles para tareas de programaci\u00f3n o emuladores de terminal , donde se leen mejor l\u00edneas con estas caracter\u00edsticas, ya que no queremos que una l\u00ednea sea m\u00e1s corta dependiendo de su contenido. Propiedades b\u00e1sicas \u00b6 Existe un amplio abanico de propiedades CSS para modificar las caracter\u00edsticas b\u00e1sicas de las tipograf\u00edas a utilizar. Aunque existen muchas m\u00e1s, a continuaci\u00f3n, veremos las propiedades CSS m\u00e1s b\u00e1sicas para aplicar a cualquier tipo de tipograf\u00eda: Propiedad Valor Significado font-family fuente Indica el nombre de la fuente (tipograf\u00eda) a utilizar. font-size Indica el tama\u00f1o de la fuente. font-style normal italic font-weight peso Indica el peso (grosor) de la fuente (100-800). Con ellas podemos seleccionar tipograf\u00edas concretas, espec\u00edficar su tama\u00f1o, estilo o grosor. Familia tipogr\u00e1fica \u00b6 Empezaremos por la m\u00e1s l\u00f3gica, la propiedad CSS para seleccionar una familia tipogr\u00e1fica concreta. Con esta propiedad, denominada font-family , podemos seleccionar seleccionar cualquier tipograf\u00eda simplemente escribiendo su nombre. Si dicho nombre est\u00e1 compuesto por varias palabras separadas por un espacio, se aconseja utilizar comillas simples para indicarla ( como se ve en el segundo ejemplo ): body { font-family : Verdana ; font-family : 'PT Sans' ; /* Otro ejemplo */ } Esta es la forma m\u00e1s b\u00e1sica de indicar una tipograf\u00eda. Sin embargo, hay que tener en cuenta un detalle muy importante: estas fuentes s\u00f3lo se visualizar\u00e1n si el usuario las tiene instaladas en su sistema o dispositivo . En caso contrario, se observar\u00e1n los textos con otra tipograf\u00eda < > que est\u00e9 disponible en el sistema, pero que puede ser visualmente muy diferente. Esto convierte una tarea a priori simple, en algo muy complejo, puesto que los sistemas operativos ( Windows, Mac, GNU/Linux ) tienen diferentes tipograf\u00edas instaladas. Si adem\u00e1s entramos en temas de licencias y tipograf\u00edas propietarias, la cosa se se vuelve a\u00fan m\u00e1s compleja. Consejo : La p\u00e1gina FontFamily.io incorpora un sencillo formulario para mostrar informaci\u00f3n sobre determinadas tipograf\u00edas y como se mostrar\u00edan en diferentes sistemas ( Windows, Mac OS, GNU/Linux, Android, iOS, Windows Phone, etc... ). M\u00e1s adelante, veremos la regla @font-face de CSS3 , que permite solucionar este problema y la usan sistemas como Google Fonts . Un primer y sencillo paso para paliar ( en parte ) este problema, es a\u00f1adir varias tipograf\u00edas alternativas, separadas por comas, lo que adem\u00e1s se considera una buena pr\u00e1ctica de CSS: div { font-family : Vegur , 'PT Sans' , Verdana , sans-serif ; } De esta forma, el navegador busca la fuente Vegur en nuestro sistema, y en el caso de no estar instalada, pasa a buscar la siguiente ( PT Sans ), y as\u00ed sucesivamente. Se recomienda especificar al menos 2 \u00f3 3 tipograf\u00edas diferentes. Consejo : Como \u00faltima opci\u00f3n de font-family se recomienda utilizar una palabra clave denominada < > ( fuente segura ). Esta fuente segura no es una tipograf\u00eda espec\u00edfica, sino una palabra clave con la que se denomina una categor\u00eda. Esto indica al navegador que debe buscar una tipograf\u00eda instalada en el sistema que entre dentro de la misma categor\u00eda. Las palabras clave de fuentes seguras son las siguientes: Fuente Significado Fuentes de ejemplo serif Tipograf\u00eda con serifa Times New Roman, Georgia... sans-serif Tipograf\u00eda sin serifa Arial, Verdana, Tahoma... cursive Tipograf\u00eda en cursiva Sanvito, Corsiva... fantasy Tipograf\u00eda decorativa Critter, Cottonwood... monospace Tipograf\u00eda monoespaciada Courier, Courier New... Tama\u00f1o de la tipograf\u00eda \u00b6 Otra de las propiedades m\u00e1s utilizadas con las tipograf\u00edas es font-size , una tipograf\u00eda que permite especificar el tama\u00f1o que tendr\u00e1 la fuente que vamos a utilizar: Propiedad Valor Tipo de medida font-size xx-small x-small font-size smaller larger font-size Espec\u00edfica (tama\u00f1o exacto) Se pueden indicar tres tipos de valores: * Medidas absolutas : Palabras clave como medium que representan un tama\u00f1o medio ( por defecto ), small : tama\u00f1o peque\u00f1o, x-small : tama\u00f1o muy peque\u00f1o, etc... * Medidas relativas : Palabras clave como smaller que representan un tama\u00f1o un poco m\u00e1s peque\u00f1o que el actual, o larger que representa un tama\u00f1o un poco m\u00e1s grande que el actual. * Medida espec\u00edfica : Simplemente, indicar p\u00edxeles, porcentajes u otra unidad para especificar el tama\u00f1o concreto de la tipograf\u00eda. Para tipograf\u00edas se recomienda empezar por p\u00edxeles ( m\u00e1s f\u00e1cil ) o utilizar estrategias con unidades rem ( mejor, pero m\u00e1s avanzado ). Estilo de la tipograf\u00eda \u00b6 A las tipograf\u00edas elegidas se les puede aplicar ciertos estilos, muy \u00fatil para maquetar los textos, como por ejemplo negrita o cursiva ( italic ). La propiedad que utilizamos es font-style y puede tomar los siguientes valores: Valor Significado normal Estilo normal, por defecto. Sin cambios aparentes. italic Cursiva. Estilo caracterizado por una ligera inclinaci\u00f3n de las letras hacia la derecha. oblique Obl\u00edcua. Idem al anterior, salvo que esta inclinaci\u00f3n se realiza de forma artificial. Con la propiedad font-style podemos aplicarle estos estilos. En la mayor\u00eda de los casos, se aprecia el mismo efecto con los valores italic y oblique , no obstante, italic muestra la versi\u00f3n cursiva de la fuente, espec\u00edficamente creada por el dise\u00f1ador de la tipograf\u00eda, mientras que oblique es una representaci\u00f3n forzosa artificial de una tipograf\u00eda cursiva. Peso de la tipograf\u00eda \u00b6 Por otro lado, tenemos el peso de la fuente, que no es m\u00e1s que el grosor de la misma. Tambi\u00e9n depende de la fuente elegida, ya que no todas soportan todos los tipos de grosor. De forma similar a como hemos visto hasta ahora, se puede especificar el peso de una fuente mediante tres formas diferentes: Propiedad Valor Significado font-weight normal bold font-weight bolder lighter font-weight peso Medida espec\u00edfica (n\u00famero del peso concreto) Valores absolutos : Palabras claves para indicar el peso de la fuente: normal y bold . Normal es el valor por defecto. Valores relativos : Bolder (m\u00e1s gruesa) o Ligther (m\u00e1s delgada). Valor num\u00e9rico : Un n\u00famero del 100 (menos gruesa) al 900 (mas gruesa). Generalmente, se incrementan en valores de 100 en 100. OJO : Ten en cuenta que los diferentes pesos de una tipograf\u00eda son dise\u00f1ados por el creador de la tipograf\u00eda. Algunas tipograf\u00edas carecen de diferentes pesos y s\u00f3lo tienen uno espec\u00edfico. Esto es algo muy sencillo de ver en Google Fonts ( al seleccionar una tipograf\u00eda ). Tipograf\u00edas externas \u00b6 Antiguamente, utilizar tipograf\u00edas en CSS ten\u00eda una gran limitaci\u00f3n. Usando la propiedad font-family y especificando el nombre de la tipograf\u00eda a utilizar, en principio deber\u00edan visualizarse. Pero fundamentalmente, exist\u00edan dos problemas: Las tipograf\u00edas especificadas mediante font-family deb\u00edan estar instaladas en el sistema donde se visualiza la p\u00e1gina web. p { font-family : Vegur , Georgia , \"Times New Roman\" , sans-serif ; } En el ejemplo superior, se han indicado las tipograf\u00edas Vegur ( tipograf\u00eda personalizada ), Georgia y Times New Roman ( tipograf\u00edas de Microsoft Windows ) y la categor\u00eda segura sans-serif . Un usuario con la tipograf\u00eda Vegur instalada, ver\u00eda sin problema el dise\u00f1o con dicha tipograf\u00eda, mientras que un usuario de Windows la ver\u00eda con Georgia ( o si no la tiene, con Times New Roman ), mientras que un usuario de Linux o Mac, la ver\u00eda con otra tipograf\u00eda diferente ( una tipograf\u00eda sans-serif del sistema ). Esto es un problema ya que no permite hacer dise\u00f1os consistentes, pero hay formas de solucionarlo, como veremos a continuaci\u00f3n. Por otro lado, muchas tipograf\u00edas gen\u00e9ricas tienen derechos de autor y puede que algunos sistemas no tengan permiso para tenerlas instaladas. Mientras que las tipograf\u00edas que vienen en sistemas como Microsoft Windows de serie ( Times New Roman, Verdana, Tahoma, Trebuchet MS... ) se ver\u00edan correctamente en navegadores con dicho sistema operativo, no ocurrir\u00eda lo mismo en dispositivos con GNU/Linux o Mac. Y lo mismo con tablets o dispositivos m\u00f3viles, o viceversa. Esto ocurre porque muchas tipograf\u00edas son propietarias y tienen licencias que permiten usarse s\u00f3lo en dispositivos de dicha compa\u00f1\u00eda. En definitiva, aunque ten\u00edamos los mecanismos, vivimos en un mundo complicado en el que no es tan sencillo establecer una fuente espec\u00edfica para obtener el mismo resultado de dise\u00f1o en todos los navegadores y sistemas disponibles.... al menos hasta que lleg\u00f3 @font-face . La regla @font-face \u00b6 La regla @font-face permite descargar una fuente o tipograf\u00eda, cargarla en el navegador y utilizarla en nuestras p\u00e1ginas. Todo ello de forma transparente al usuario sin que deba instalar o realizar ninguna acci\u00f3n. Veamos un ejemplo de como se puede utilizar: @ font-face { font-family : 'Open Sans' ; font-style : normal ; font-weight : 400 ; src : local ( 'Open Sans' ), url (/ fonts / opensans . woff2 ) format ( 'woff2' ), url (/ fonts / opensans . woff ) format ( 'woff' ), url (/ fonts / opensans . ttf ) format ( 'truetype' ), url (/ fonts / opensans . otf ) format ( 'opentype' ), url (/ fonts / opensans . eot ) format ( 'embedded-opentype' ); } La regla @font-face suele colocarse al principio del fichero CSS para preparar el navegador para descargar la tipograf\u00eda en el caso de no disponer de ella. En el ejemplo superior lo hemos hecho con la fuente Open Sans , una tipograf\u00eda libre creada por Steve Matteson para Google y disponible en Google Fonts. Basicamente, abrimos un bloque @font-face , establecemos su nombre mediante font-family y definimos sus caracter\u00edsticas mediante propiedades como font-style o font-weight . El factor clave viene a la hora de indicar la tipograf\u00eda, que se hace mediante la propiedad src ( source ) con los siguientes valores: Valor Significado Soporte local('Nombre') \u00bfEst\u00e1 la fuente 'Nombre' instalada? Si es as\u00ed, no hace falta descargarla. Todos url(file.woff2) Formato Web Open Font Format 2 . Mejora de WOFF con Brotli . No IE url(file.woff) Formato Web Open Font Format . Es un TTF comprimido, ideal para web. Bueno url(file.ttf) Formato True Type . Uno de los formatos m\u00e1s conocidos. Bueno url(file.otf) Formato Open Type . Mejora del formato TTF . Bueno url(file.eot) Formato Embedded OpenType . Mejora de OTF , propietaria de Microsoft. S\u00f3lo IE url(file.svg) Tipograf\u00edas creadas como formas SVG. No usar , considerada obsoleta . Malo Consejo : Actualmente, una buena pr\u00e1ctica es utilizar la expresi\u00f3n local() seguida de la expresi\u00f3n url() con los formatos WOFF2 , WOFF y TTF ( en dicho orden ), dando as\u00ed soporte a la mayor\u00eda de navegadores. Para dar soporte a versiones antiguas de Internet Explorer, podr\u00eda ser adecuado incluir tambi\u00e9n el formato EOT . Google Fonts \u00b6 En la actualidad, es muy com\u00fan utilizar Google Fonts como repositorio proveedor de tipograf\u00edas para utilizar en nuestros sitios web por varias razones: Gratuitas : Disponen de un amplio cat\u00e1logo de fuentes y tipograf\u00edas libres y/o gratuitas. C\u00f3modo : Resulta muy sencillo su uso: Google nos proporciona un c\u00f3digo y el resto lo hace \u00e9l. R\u00e1pido : El servicio est\u00e1 muy extendido y utiliza un CDN, que brinda ventajas de velocidad. En la propia p\u00e1gina de Google Fonts podemos seleccionar las fuentes con las caracter\u00edsticas deseadas y generar un c\u00f3digo HTML con la tipograf\u00eda ( o colecci\u00f3n de tipograf\u00edas ) que vamos a utilizar. Todo esto nos generar\u00e1 el siguiente c\u00f3digo, que aparece en la zona derecha de la web ( en la zona < > ), y que ser\u00e1 el fragmento de c\u00f3digo que tendremos que insertar en nuestro documento HTML, concretamente, antes de finalizar la secci\u00f3n <head> : < link rel = \"stylesheet\" href = \"https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400&display=swap\" > C\u00f3mo se puede ver el ejemplo anterior, al a\u00f1adir este c\u00f3digo estamos enlazando nuestro documento HTML con un documento CSS del repositorio de Google, que incluye los @font-face correspondientes. Esto har\u00e1 que incluyamos autom\u00e1ticamente todo ese c\u00f3digo CSS necesario para las tipograf\u00edas escogidas, en este caso la tipograf\u00eda Open Sans con los pesos 300 y 400 . Si adem\u00e1s, a\u00f1adimos tambi\u00e9n la familia de tipograf\u00edas Roboto ( con grosor 400 ) y Lato ( con grosor 300 y 400 ), el c\u00f3digo necesario ser\u00eda el siguiente: < link rel = \"stylesheet\" href = \"https://fonts.googleapis.com/css2?family=Lato:wght@300;400&family=Open+Sans:wght@300;400;600&family=Roboto&display=swap\" > De esta forma conseguimos cargar varias tipograf\u00edas desde el repositorio de Google de una sola vez , sin la necesidad de varias l\u00edneas de c\u00f3digo diferentes, que realizar\u00edan varias peticiones diferentes a Google Fonts . Nota que en este nuevo ejemplo, en caso de no tener instaladas ningunas de las tipograf\u00edas anteriores, estar\u00edamos realizando 6 descargas : ( el css de Google Fonts ), ( las 2 tipograf\u00edas con los diferentes pesos de Open Sans ), ( la de Roboto ), ( y las 2 tipograf\u00edas con los diferentes pesos de Lato ). Por \u00faltimo y para terminar, s\u00f3lo necesitaremos a\u00f1adir la propiedad font-family: \"Open Sans\" , font-family: \"Lato\" o font-family: \"Roboto\" a los textos que queramos dar formato con dichas tipograf\u00edas. No te olvides de a\u00f1adir tipograf\u00edas alternativas y fuente segura para mejorar la compatibilidad con navegadores antiguos. El par\u00e1metro display con valor swap que aparece en la \u00faltima versi\u00f3n de Google Fonts, lo explicamos aqu\u00ed Propiedades avanzadas de tipograf\u00edas . No hay que dejar de tener en cuenta que cuantas m\u00e1s tipograf\u00edas ( y/o m\u00e1s pesos ) incluyamos en nuestra p\u00e1gina, m\u00e1s lenta ser\u00e1 la experiencia del usuario , ya que m\u00e1s contenido tendr\u00e1 que descargar. Salvo excepciones particulares, lo habitual suele ser elegir entre 2-3 tipograf\u00edas como m\u00e1ximo , cada una con una finalidad concreta: encabezados o titulares, tipograf\u00eda de lectura normal y tipograf\u00eda secundaria, por ejemplo. Atajo para tipograf\u00edas \u00b6 Finalmente, algunas de las propiedades m\u00e1s utilizadas de tipograf\u00edas y fuentes se pueden resumir en una propiedad de atajo, como viene siendo habitual. El esquema es el siguiente: div { font : < style > < variant > < weight > < size / line-height > < family > ; } Por ejemplo, utilizar la tipograf\u00eda Arial , con la fuente alternativa Verdana o una fuente segura sin serifa, a un tama\u00f1o de 16 p\u00edxeles, con un interlineado de 22 p\u00edxeles, un peso de 400, sin utilizar versalitas y con estilo cursiva: div { font : italic normal 400 16 px / 22 px Arial , Verdana , Sans-serif ; } Textos y alineaciones \u00b6 CSS dispone de ciertas propiedades relacionadas con el texto de una p\u00e1gina, pero alej\u00e1ndose de criterios de tipograf\u00edas, y centr\u00e1ndose m\u00e1s en objetivos de alineaci\u00f3n o tratamiento de espaciados. Veamos algunas de estas propiedades: Propiedad Valor Significado letter-spacing normal word-spacing normal line-height normal text-indent Indentaci\u00f3n de texto (sangr\u00eda) white-space normal nowrap tab-size direction ltr rtl Las tres primeras propiedades, determinan el espacio en diferentes zonas del texto. Por ejemplo la primera de ellas, letter-spacing , especifica el espacio de separaci\u00f3n que hay entre cada letra de un texto, denominado com\u00fanmente interletraje o tracking . Con n\u00fameros negativos tendremos m\u00e1s unidas las letras y con n\u00fameros positivos, las tendremos m\u00e1s separadas unas de otras. La propiedad line-height especifica la altura que tendr\u00e1 cada l\u00ednea de texto, una caracter\u00edstica que puede facilitar much\u00edsimo la lectura, puesto que un interlineado excesivo puede desorientar al lector, mientras que uno insuficiente puede hacer perder al visitante el foco en el texto. La propiedad word-spacing permite establecer el espacio que hay entre una palabra y otra en un texto determinado, lo que puede facilitar la legibilidad de los textos de una p\u00e1gina web y da flexibilidad y control sobre ciertas tipograf\u00edas. La propiedad text-indent establece un tama\u00f1o de indentaci\u00f3n ( por defecto, 0 ), o lo que es lo mismo, hace un sangrado, desplazando el texto la longitud especificada hacia la derecha ( o izquierda en cantidades negativas ). Al utilizar white-space podemos indicar el comportamiento que tendr\u00e1n los espacios en blanco en una p\u00e1gina web. Por defecto, el valor es normal ( transforma m\u00faltiples espacios en blanco en un solo espacio consecutivo ), pero tiene otras opciones posibles: Valor Espacios en blanco consecutivos Contenido normal Los espacios se transforman en uno solo. Se ajusta al contenedor. nowrap Los espacios se transforman en uno solo. Ignora saltos de l\u00ednea. pre Respeta literalmente los espacios. Ignora saltos de l\u00ednea. pre-wrap Respeta literalmente los espacios. Se ajusta al contenedor. pre-line Respeta literalmente los espacios y suprime los espacios del final. Se ajusta al contenedor. Nota : La diferencia entre pre-wrap y pre-line es que este \u00faltimo respeta literalmente los espacios que est\u00e1n antes del texto, mientras que si sobran despu\u00e9s del texto, los suprime. Probablemente, a medida que realices diferentes dise\u00f1os, te encontrar\u00e1s con la desagradable situaci\u00f3n en la que un texto concreto ( por ejemplo, un enlace demasiado largo ) no cabe dentro de un contenedor, por lo que el texto se desborda y provoca efectos no deseados como salirse de su lugar. Propiedad Valor Significado hyphens manual none overflow-wrap normal break-word line-break auto loose word-break normal keep-all OJO : La propiedad overflow-wrap s\u00f3lo funciona cuando white-space est\u00e1 establecida a valores que respeten espacios. Adem\u00e1s, la propiedad word-wrap es un alias de overflow-wrap por temas de retrocompatibilidad. Existen formas de mitigar este problema, como la propiedad word-break , word-wrap o la propiedad hyphens , sin embargo, a\u00fan est\u00e1n en fase de desarrollo y su soporte est\u00e1 poco extendido en la actualidad. A\u00fan as\u00ed, si quieres probar una combinaci\u00f3n de varias propiedades que suele dar resultado para paliar este comportamiento, puedes probar lo siguiente: . container { hyphens : auto ; word-wrap : break-word ; word-break : break-word ; } Por otra parte, la propiedad tab-size permite establecer el n\u00famero de espacios que se mostrar\u00e1n en el cliente o navegador al representar el car\u00e1cter de un TAB ( tabulador ), que generalmente se convierten a un espacio en blanco, pero sin embargo son visibles en elementos HTML como <textarea> o <pre> . Por \u00faltimo, la propiedad direction permite establecer la direcci\u00f3n del texto: de izquierda a derecha ( ltr, left to right ) o de derecha a izquierda ( rtl, right to left ). Alineaciones \u00b6 Tambi\u00e9n existen varias propiedades CSS que permiten modificar las diferentes alineaciones de los textos en su conjunto. Veamos un resumen de ellas: Propiedad Valor Significado text-align left center text-justify auto inter-word text-overflow clip ellipsis En el primer caso, se puede establecer los valores left , right , center o justify a la propiedad text-align para alinear horizontalmente el texto a la izquierda, a la derecha, en el centro o justificar el texto, respectivamente, de la misma forma que lo hacemos en un procesador de texto. En la propiedad text-justify indicamos el tipo de justificaci\u00f3n de texto que el navegador realizar\u00e1: autom\u00e1tica ( el navegador elige ), ajustar el espacio entre palabras ( el resultado de ajustar con la propiedad word-spacing ), ajustar el espacio entre par de car\u00e1cteres ( el resultado de ajustar con la propiedad letter-spacing ) y justificaci\u00f3n desactivada. Por su parte, la propiedad text-overflow cambia el comportamiento del navegador cuando detecta que un texto no cabe y se desborda. En ella podemos utilizar los valores clip , desbordar el contenedor ( comportamiento por defecto ), ellipsis , que muestra el texto <<...>> cuando no cabe m\u00e1s texto y por \u00faltimo indicar el texto que queremos utilizar en lugar de <<...>>. Al igual que existe text-align para alinear horizontalmente, tambi\u00e9n existe la propiedad vertical-align , que se encarga de la alineaci\u00f3n vertical de un elemento, pudiendo establecer como valor las siguientes opciones: Valor \u00bfC\u00f3mo hace la alineaci\u00f3n? baseline La base del elemento con la base del elemento padre. sub El elemento como un sub\u00edndice. super El elemento como un super\u00edndice. top La parte superior del elemento con la parte superior del elemento m\u00e1s alto de la l\u00ednea. middle El elemento en la mitad del elemento padre. bottom La parte inferior del elemento con la parte inferior del elemento m\u00e1s bajo de esa l\u00ednea. text-top La parte superior del elemento con la parte superior del texto padre. text-bottom La parte inferior del elemento con la parte inferior del texto padre. tama\u00f1o Sube o baja un elemento el tama\u00f1o o porcentaje especificado. Consejo : Cuidado con vertical-align . Esta propiedad puede querer utilizarse para centrar verticalmente un elemento, sin embargo, su utilizaci\u00f3n es un poco menos intuitiva de lo que en un principio se cree, ya que se debe utilizar para alinear textos respecto a elementos. Para alinear bloques de contenido o crear estructuras de dise\u00f1o, v\u00e9ase Flexbox . Variaciones \u00b6 Por \u00faltimo, existen varias propiedades aplicables a los textos para variar su naturaleza. Echemos un vistazo: Propiedad Valor Significado text-decoration none underline text-transform none capitalize La propiedad text-decoration permite establecer subrayados ( underline ), subrayados por encima del texto ( overline ) y tachados ( line-through ). Indicando el valor none se puede eliminar cualquiera de los formatos anteriores. Es muy utilizado, por ejemplo, para eliminar el subrayado de los textos que tienen un enlace o hiperv\u00ednculo. Por \u00faltimo, la propiedad text-transform es muy \u00fatil para convertir textos a may\u00fasculas ( uppercase ) o min\u00fasculas ( lowercase ), o incluso capitalizar el texto ( capitalize ), es decir, poner s\u00f3lo la primera letra en may\u00fascula, independientemente de como est\u00e9 escrito en el documento HTML. Propiedades avanzadas \u00b6 En CSS existen m\u00faltiples propiedades relacionadas con las tipograf\u00edas. Las que veremos en esta secci\u00f3n se trata de algunas propiedades espec\u00edficas para controlar la forma en la que se ven o aparecen las tipograf\u00edas en la p\u00e1gina. Compactaci\u00f3n de la tipograf\u00eda \u00b6 Con la propiedad font-stretch podemos definir el grado de compactaci\u00f3n o expansi\u00f3n de los car\u00e1cteres de la tipograf\u00eda, desde valores muy condensados ( para ocupar menos espacio ) a valores muy expandidos ( para ocupar m\u00e1s espacio ): Propiedad Valor font-stretch ultra-condensed font-stretch Tambi\u00e9n se puede especificar el tama\u00f1o, por ejemplo en porcentajes. Recuerda que para que la propiedad font-stretch funcione correctamente, la tipograf\u00eda seleccionada debe poseer una versi\u00f3n < > o < > para as\u00ed poderla aplicar. Ajuste de tama\u00f1o \u00b6 Con la propiedad font-size-adjust podemos ajustar el tama\u00f1o de la tipograf\u00eda indicando la diferencia de tama\u00f1o entre la x min\u00fascula y la X may\u00fascula. Con esta caracter\u00edstica, podemos conseguir reducir la proporci\u00f3n de tama\u00f1o entre may\u00fasculas y min\u00fasculas de nuestros textos, si consideramos que no es adecuada: Propiedad Valor Significado font-size-adjust none Por defecto, el valor de esta propiedad es none , que establece el tama\u00f1o indicado por el dise\u00f1ador de la tipograf\u00eda. Ojo a la compatibilidad, ya que es una caracter\u00edstica que a\u00fan est\u00e1 en fase experimental: Modo de aparici\u00f3n \u00b6 La propiedad font-display nos brinda un mecanismo muy interesante para determinar como queremos que se comporte la tipograf\u00eda al cargar la p\u00e1gina. Cuando cargamos una p\u00e1gina con una tipograf\u00eda que no se encuentra instalada, el navegador debe descargar la tipograf\u00eda y activarla, tarea que no ocurre instant\u00e1neamente, ya que depende de nuestra conexi\u00f3n, del tama\u00f1o de la fuente y del sistema utilizado. En el instante anterior a descargar la tipograf\u00eda pueden ocurrir varias cosas: FOIT ( Flash of Invisible Text ): El texto permanece oculto (invisible) al usuario hasta que la tipograf\u00eda deseada se ha descargado y puede visualizarse. FOUT ( Flash of Unstyled Text ): El texto permanece sin estilo (con otra tipograf\u00eda diferente) hasta que la tipograf\u00eda deseada se ha descargado y puede visualizarse. Dependiendo del valor de la propiedad font-display podemos modificar dicho comportamiento: Propiedad Valor Significado font-display auto block Veamos que ocurre con cada uno de los valores indicados ( si la tipograf\u00eda no est\u00e1 descargada ): * auto : El valor por defecto de la propiedad. El navegador decide que comportamiento aplicar, que suele ser FOIT. C\u00f3mo desventaja, en algunos navegadores o situaciones, el tiempo de FOIT puede llegar a ser considerablemente alto. * block : El navegador mantiene el texto invisible (FOIT) un corto periodo de tiempo, cambiando a modo swap desde que la tipograf\u00eda deseada est\u00e1 cargada. Se aconseja usar especialmente en peque\u00f1os fragmentos de texto como titulares. * swap : El navegador muestra inmediatamente el texto con la siguiente tipograf\u00eda de la lista font-family durante un cort\u00edsimo periodo de tiempo, mostrando la tipograf\u00eda deseada desde que est\u00e1 cargada. Se aconseja usar especialmente en peque\u00f1os fragmentos de texto como titulares. * fallback : El navegador muestra el texto con la siguiente tipograf\u00eda de la lista font-family durante un cort\u00edsimo periodo de tiempo, mostrando la tipograf\u00eda deseada desde que est\u00e1 cargada. La diferencia respecto al modo anterior es que si pasa demasiado tiempo sin que la tipograf\u00eda se cargue, se utiliza de forma definitiva la alternativa que se estaba usando. Apropiada para usar en fragmentos largos de texto. * optional : El navegador considera opcional el uso de la tipograf\u00eda deseada si tarda demasiado o cree que hay alg\u00fan problema en la descarga, utilizando la siguiente tipograf\u00eda de la lista font-family . Caracter\u00edsticas personalizadas \u00b6 Ciertas tipograf\u00edas tienen una serie de caracter\u00edsticas avanzadas que pueden existir o no, dependiendo de la tipograf\u00eda. Dichas caracter\u00edsticas permiten realizar variaciones en las tipograf\u00edas como las siguientes: Caracter\u00edstica Descripci\u00f3n Ligadura Uni\u00f3n visual de 2 car\u00e1cteres. Muy usada en programaci\u00f3n, matem\u00e1ticas e idiomas. Posicionamiento Colocaci\u00f3n de car\u00e1cteres de forma similar a los sub\u00edndices o super\u00edndices. May\u00fasculas/Min\u00fasculas Variaciones relacionadas con las may\u00fasculas y min\u00fasculas. Variaciones Se trata de grupos de variaciones visuales con un prop\u00f3sito concreto. Veamos detalladamente cada una de estas caracter\u00edsticas: * Ligaduras : Es posible activar una caracter\u00edsticas llamada ligadura que no es m\u00e1s que la uni\u00f3n de ciertos car\u00e1cteres cambiando su aspecto visual. Esto se puede hacer con la propiedad font-variant-ligatures , y dependiendo del valor espec\u00edfico, activaremos uno u otro tipo de ligadura. Existen las siguientes: Ligaduras normales : Se indica con el valor common-ligatures . Se suele observar en valores como fi , fl , ff ... Ligaduras discrecionales : Se indica con el valor discretionary-ligatures . Se suele observar en valores como ch , sp , st ... Ligaduras hist\u00f3ricas : Se indica con el valor historical-ligatures . Se aplican para mostrar ligaduras heredadas de escritura manual. * Posicionamiento de car\u00e1cteres : Es posible activar una variaci\u00f3n para indicar texto como sub\u00edndice o super\u00edndice, similar a como se hace con las etiquetas HTML <sub> y <super> . * May\u00fasculas y min\u00fasculas : Es posible realizar ciertas variaciones como versalitas o similares, aplicadas s\u00f3lo a min\u00fasculas, s\u00f3lo a may\u00fasculas o a ambas. * Variaciones num\u00e9ricas : Con la propiedad font-variant-numeric podemos establecer ciertas variaciones como representar n\u00fameros con estilo antiguo, diferentes proporciones, como fracciones \"gr\u00e1ficas\" o incluso indicar que el cero tenga una raya o no. * Variaciones alternativas : Con la propiedad font-variant-alternates se pueden indicar una o m\u00faltiples variaciones visuales, donde se pueden mencionar las siguientes: historical-forms : Muestra glifos hist\u00f3ricos ( heredados de \u00e9pocas pasadas ) stylistic( id ) : Muesta caracter\u00edsticas de estilo alternativas de forma individual. styleset( id ) : Muestra un conjunto de caracter\u00edsticas de estilo alternativas ( creados para trabajar juntos ). character-variant( id ) : Muestra ciertas variaciones en car\u00e1cteres concretos. swash( id ) : Muestra decoraciones art\u00edsticas en los car\u00e1cteres como adornos tipogr\u00e1ficos. ornaments( id ) : Muestra glifos con adornos en lugar del caracter predeterminado. anotation( id ) : Muestra formas notacionales de glifos (glifos abiertos, cajas redondeadas, etc...) Variaciones en tipograf\u00edas \u00b6 Estas caracter\u00edsticas pueden ser activadas o desactivadas desde CSS, por medio de una de las siguientes propiedades ( o de forma alternativa, utilizando una propiedad a bajo nivel que veremos m\u00e1s adelante ): Propiedad/Valores Significado font-variant-ligatures Establece un estilo de ligadura normal none font-variant-position Establece estilo subscript ( sub\u00edndice ) o superscript ( super\u00edndice ) normal sub font-variant-caps Establece una variaci\u00f3n de versalitas normal small-caps font-variant-numeric Establece variaciones num\u00e9ricas normal lining-nums font-variant-alternates Establece variaciones visuales normal historical-forms font-variant-east-asian Permite controlar los glifos de textos orientales normal jis78 font-kerning Indica qui\u00e9n debe ajustar el kerning auto normal Ten en cuenta que en la mayor\u00eda de ellas, se puede utilizar la regla @font-feature-values para personalizar como utilizar la caracter\u00edstica en cuesti\u00f3n ( la cu\u00e1l debe existir y estar definida en la tipograf\u00eda ). Veamos un ejemplo: @ font-feature-values 'bookmania' { @ swash { flourish : 1 ; } } . texto-alternativo { font-variant-alternates : swash ( flourish ); } Caracter\u00edsticas a bajo nivel \u00b6 La propiedad font-feature-settings es una propiedad a bajo nivel para indicar como debe comportarse una tipograf\u00eda respecto a sus caracter\u00edsticas especiales . S\u00f3lo debe usarse cuando no nos sirva otra propiedad con la que modificar dicha caracter\u00edstica, la cu\u00e1l normalmente se encuentra en la lista del apartado anterior. La sintaxis de esta propiedad es la que podemos ver a continuaci\u00f3n ( se pueden combinar varias caracter\u00edsticas separando por comas ): p { /* La caracter\u00edstica \"feat\" est\u00e1 activada. */ font-feature-settings : \"feat\" 1 ; /* Otra opci\u00f3n equivalente a la anterior. */ font-feature-settings : \"feat\" on ; /* La caracter\u00edstica \"feat\" est\u00e1 desactivada. */ font-feature-settings : \"feat\" 0 ; /* Otra opci\u00f3n equivalente a la anterior. */ font-feature-settings : \"feat\" off ; } Sin embargo, la caracter\u00edstica < > no existe, es s\u00f3lo un ejemplo te\u00f3rico. Cada tipograf\u00eda tiene un cierto n\u00famero de caracter\u00edsticas especiales ( hay tipograf\u00edas que tienen varias, y tipograf\u00edas que no tienen ninguna ). Veamos una lista de las caracter\u00edsticas que existen: Valor OTF Significado Propiedad equivalente Valor concreto \"liga\" 1 Ligaduras est\u00e1ndar (tambi\u00e9n clig ) font-variant-ligatures common-ligatures \"dlig\" 1 Ligaduras discrecionales font-variant-ligatures discretionary-ligatures \"hlig\" 1 Ligaduras hist\u00f3ricas font-variant-ligatures historical-ligatures \"calt\" 1 Ligaduras contextuales alternativas font-variant-ligatures contextual \"ordn\" 1 Marcas ordinales font-variant-numeric ordinal \"zero\" 1 Raya del cero font-variant-numeric slashed-zero \"onum\" 1 Figuras de estilo antiguo font-variant-numeric oldstyle-nums \"lnum\" 1 N\u00fameros alineados font-variant-numeric lining-nums \"pnum\" 1 N\u00fameros proporcionales font-variant-numeric proportional-nums \"tnum\" 1 Figuras tabulares (mismo tama\u00f1o) font-variant-numeric tabular-nums \"frac\" 1 Fracciones diagonales font-variant-numeric diagonal-fractions \"afrc\" 1 Fracciones apiladas font-variant-numeric stacked-fractions \"sups\" 1 Super\u00edndices font-variant-position super \"subs\" 1 Sub\u00edndices font-variant-position sub \"smcp\" 1 Versalitas en min\u00fasculas font-variant-caps small-caps \"c2sc\" 1 Versalitas en may\u00fasculas y min\u00fasculas font-variant-caps all-small-caps \"pcap\" 1 Capitaliza min\u00fasculas font-variant-caps petite-caps \"c2pc\" 1 Capitaliza may\u00fasculas y min\u00fasculas font-variant-caps all-petite-caps \"unic\" 1 Versalitas en may\u00fasculas font-variant-caps unicase \"titl\" 1 May\u00fasculas para titulares font-variant-caps titling-caps \"swsh\" 1 Decoraciones swash font-variant-alternates swash() \"hist\" 1 Glifos hist\u00f3ricos font-variant-alternates historical-forms \"salt\" 1 Car\u00e1cteres con estilos alternativos font-variant-alternates stylistic() \"ss01\" 1 Conjunto de estilos alternativos font-variant-alternates styleset(01) \"ss02\" 1 Segundo conjunto de estilos alternativos font-variant-alternates styleset(02) \"ss03\" 1 Tercer conjunto de estilos alternativos font-variant-alternates styleset(03) \"cv01\" 1 Estilo alternativo para car\u00e1cteres font-variant-alternates character-variant(01) \"ornm\" 1 Adornos como fleurons o dingbats font-variant-alternates ornaments() \"nalt\" 1 D\u00edgitos circulares, car\u00e1cteres invertidos... font-variant-alternates annotation() \"kern\" 1 Kerning de tipograf\u00edas font-kerning normal Para saber si la tipograf\u00eda que estamos utilizando posee alguna de estas caracter\u00edsticas especiales , podemos utilizar el comando de terminal font , que lee dicha informaci\u00f3n de formatos WOFF2, WOFF, TTF u OTF. Dicho comando est\u00e1 programado en el lenguaje de programaci\u00f3n Go , por lo que instalarlo es tan f\u00e1cil como escribir desde una terminal lo siguiente: go get -u github.com/ConradIrwin/font/cmd/font # Instalamos \"font\" (necesitamos Go) font feature fichero.ttf # Leemos las caracter\u00edsticas Este comando nos mostrar\u00e1 los metadatos de la tipograf\u00eda, incluyendo los flags de las features ( liga, tnum, frac, etc... ) que existen y est\u00e1n definidas en la tipograf\u00eda en cuesti\u00f3n. El soporte actual de dicha propiedad es el siguiente: Atajo de caracter\u00edsticas \u00b6 Tradicionalmente, la propiedad font-variant s\u00f3lo permit\u00eda los valores normal o small-caps . Sin embargo, las nuevas propuestas de CSS permiten utilizar esta propiedad como propiedad de atajo para todas las caracter\u00edsticas que hemos visto en el apartado anterior. Por lo tanto, pasamos de este esquema antiguo ( soportado en la mayor\u00eda de los navegadores ): Propiedad Valor Significado font-variant normal small-caps Al esquema moderno, que es el siguiente: p { /* font-variant: <ligatures> <caps> <numeric> <east-asian> <position> */ } En \u00e9l podemos utilizar los valores de cada propiedad individual: font-variant-ligatures , font-variant-caps , etc... en forma de atajo. Fuente: Lenguaje de CSS por Manz","title":"Fuentes y tipograf\u00edas"},{"location":"desarrollo/css/05-Fuentes_y_tipografias/#fuentes-y-tipografias","text":"","title":"Fuentes y tipograf\u00edas"},{"location":"desarrollo/css/05-Fuentes_y_tipografias/#tipografias-css","text":"Las tipograf\u00edas ( tambi\u00e9n denominadas fuentes ) son una parte muy importante del mundo de CSS. De hecho, son uno de los pilares del dise\u00f1o web. La elecci\u00f3n de una tipograf\u00eda adecuada , su tama\u00f1o, color, espacio entre letras, interlineado y otras caracter\u00edsticas pueden variar mucho, de forma consciente o inconsciente, la percepci\u00f3n en la que una persona interpreta o accede a los contenidos de una p\u00e1gina.","title":"Tipograf\u00edas CSS"},{"location":"desarrollo/css/05-Fuentes_y_tipografias/#detalles-de-una-tipografia","text":"Existen multitud de caracter\u00edsticas en las tipograf\u00edas que convendr\u00eda conocer antes de continuar, por lo que vamos a ver algunas de ellas: * Serifa : Las fuentes o tipograf\u00edas que utilizan serifa o gracia , son aquellas que incorporan unos peque\u00f1os adornos o remates en los extremos de los bordes de las letras. Muchas de estas tipograf\u00edas suelen terminar su nombre en < > ( con serifa ). * Paloseco : Las fuentes o tipograf\u00edas de paloseco son las opuestas a la anterior: unas tipograf\u00edas lisas, sin adornos o remates en los extremos de los bordes de las letras. Muchas de estas tipograf\u00edas suelen terminar su nombre en < > ( sin serifa ). Tradicionalmente, se han utilizado tipograf\u00edas con serifa en medios impresos argumentando que dichos bordes ofrecen una mayor legibilidad que las tipograf\u00edas de paloseco, ya que ayudan a reconocer m\u00e1s r\u00e1pidamente las letras. En medios digitales , las tipograf\u00edas de paloseco suelen ser m\u00e1s comunes puesto que dan un aspecto m\u00e1s limpio y ayudan a que se canse menos la vista del usuario. No obstante, todo esto puede ser muy subjetivo y est\u00e1 sujeto a diferentes interpretaciones. Monoespaciada : Por otro lado, existe un tipo de tipograf\u00eda denominada fuente monoespaciada, que se basa en que cada una de sus letras tienen exactamente el mismo ancho. Son muy \u00fatiles para tareas de programaci\u00f3n o emuladores de terminal , donde se leen mejor l\u00edneas con estas caracter\u00edsticas, ya que no queremos que una l\u00ednea sea m\u00e1s corta dependiendo de su contenido.","title":"Detalles de una tipograf\u00eda"},{"location":"desarrollo/css/05-Fuentes_y_tipografias/#propiedades-basicas","text":"Existe un amplio abanico de propiedades CSS para modificar las caracter\u00edsticas b\u00e1sicas de las tipograf\u00edas a utilizar. Aunque existen muchas m\u00e1s, a continuaci\u00f3n, veremos las propiedades CSS m\u00e1s b\u00e1sicas para aplicar a cualquier tipo de tipograf\u00eda: Propiedad Valor Significado font-family fuente Indica el nombre de la fuente (tipograf\u00eda) a utilizar. font-size Indica el tama\u00f1o de la fuente. font-style normal italic font-weight peso Indica el peso (grosor) de la fuente (100-800). Con ellas podemos seleccionar tipograf\u00edas concretas, espec\u00edficar su tama\u00f1o, estilo o grosor.","title":"Propiedades b\u00e1sicas"},{"location":"desarrollo/css/05-Fuentes_y_tipografias/#familia-tipografica","text":"Empezaremos por la m\u00e1s l\u00f3gica, la propiedad CSS para seleccionar una familia tipogr\u00e1fica concreta. Con esta propiedad, denominada font-family , podemos seleccionar seleccionar cualquier tipograf\u00eda simplemente escribiendo su nombre. Si dicho nombre est\u00e1 compuesto por varias palabras separadas por un espacio, se aconseja utilizar comillas simples para indicarla ( como se ve en el segundo ejemplo ): body { font-family : Verdana ; font-family : 'PT Sans' ; /* Otro ejemplo */ } Esta es la forma m\u00e1s b\u00e1sica de indicar una tipograf\u00eda. Sin embargo, hay que tener en cuenta un detalle muy importante: estas fuentes s\u00f3lo se visualizar\u00e1n si el usuario las tiene instaladas en su sistema o dispositivo . En caso contrario, se observar\u00e1n los textos con otra tipograf\u00eda < > que est\u00e9 disponible en el sistema, pero que puede ser visualmente muy diferente. Esto convierte una tarea a priori simple, en algo muy complejo, puesto que los sistemas operativos ( Windows, Mac, GNU/Linux ) tienen diferentes tipograf\u00edas instaladas. Si adem\u00e1s entramos en temas de licencias y tipograf\u00edas propietarias, la cosa se se vuelve a\u00fan m\u00e1s compleja. Consejo : La p\u00e1gina FontFamily.io incorpora un sencillo formulario para mostrar informaci\u00f3n sobre determinadas tipograf\u00edas y como se mostrar\u00edan en diferentes sistemas ( Windows, Mac OS, GNU/Linux, Android, iOS, Windows Phone, etc... ). M\u00e1s adelante, veremos la regla @font-face de CSS3 , que permite solucionar este problema y la usan sistemas como Google Fonts . Un primer y sencillo paso para paliar ( en parte ) este problema, es a\u00f1adir varias tipograf\u00edas alternativas, separadas por comas, lo que adem\u00e1s se considera una buena pr\u00e1ctica de CSS: div { font-family : Vegur , 'PT Sans' , Verdana , sans-serif ; } De esta forma, el navegador busca la fuente Vegur en nuestro sistema, y en el caso de no estar instalada, pasa a buscar la siguiente ( PT Sans ), y as\u00ed sucesivamente. Se recomienda especificar al menos 2 \u00f3 3 tipograf\u00edas diferentes. Consejo : Como \u00faltima opci\u00f3n de font-family se recomienda utilizar una palabra clave denominada < > ( fuente segura ). Esta fuente segura no es una tipograf\u00eda espec\u00edfica, sino una palabra clave con la que se denomina una categor\u00eda. Esto indica al navegador que debe buscar una tipograf\u00eda instalada en el sistema que entre dentro de la misma categor\u00eda. Las palabras clave de fuentes seguras son las siguientes: Fuente Significado Fuentes de ejemplo serif Tipograf\u00eda con serifa Times New Roman, Georgia... sans-serif Tipograf\u00eda sin serifa Arial, Verdana, Tahoma... cursive Tipograf\u00eda en cursiva Sanvito, Corsiva... fantasy Tipograf\u00eda decorativa Critter, Cottonwood... monospace Tipograf\u00eda monoespaciada Courier, Courier New...","title":"Familia tipogr\u00e1fica"},{"location":"desarrollo/css/05-Fuentes_y_tipografias/#tamano-de-la-tipografia","text":"Otra de las propiedades m\u00e1s utilizadas con las tipograf\u00edas es font-size , una tipograf\u00eda que permite especificar el tama\u00f1o que tendr\u00e1 la fuente que vamos a utilizar: Propiedad Valor Tipo de medida font-size xx-small x-small font-size smaller larger font-size Espec\u00edfica (tama\u00f1o exacto) Se pueden indicar tres tipos de valores: * Medidas absolutas : Palabras clave como medium que representan un tama\u00f1o medio ( por defecto ), small : tama\u00f1o peque\u00f1o, x-small : tama\u00f1o muy peque\u00f1o, etc... * Medidas relativas : Palabras clave como smaller que representan un tama\u00f1o un poco m\u00e1s peque\u00f1o que el actual, o larger que representa un tama\u00f1o un poco m\u00e1s grande que el actual. * Medida espec\u00edfica : Simplemente, indicar p\u00edxeles, porcentajes u otra unidad para especificar el tama\u00f1o concreto de la tipograf\u00eda. Para tipograf\u00edas se recomienda empezar por p\u00edxeles ( m\u00e1s f\u00e1cil ) o utilizar estrategias con unidades rem ( mejor, pero m\u00e1s avanzado ).","title":"Tama\u00f1o de la tipograf\u00eda"},{"location":"desarrollo/css/05-Fuentes_y_tipografias/#estilo-de-la-tipografia","text":"A las tipograf\u00edas elegidas se les puede aplicar ciertos estilos, muy \u00fatil para maquetar los textos, como por ejemplo negrita o cursiva ( italic ). La propiedad que utilizamos es font-style y puede tomar los siguientes valores: Valor Significado normal Estilo normal, por defecto. Sin cambios aparentes. italic Cursiva. Estilo caracterizado por una ligera inclinaci\u00f3n de las letras hacia la derecha. oblique Obl\u00edcua. Idem al anterior, salvo que esta inclinaci\u00f3n se realiza de forma artificial. Con la propiedad font-style podemos aplicarle estos estilos. En la mayor\u00eda de los casos, se aprecia el mismo efecto con los valores italic y oblique , no obstante, italic muestra la versi\u00f3n cursiva de la fuente, espec\u00edficamente creada por el dise\u00f1ador de la tipograf\u00eda, mientras que oblique es una representaci\u00f3n forzosa artificial de una tipograf\u00eda cursiva.","title":"Estilo de la tipograf\u00eda"},{"location":"desarrollo/css/05-Fuentes_y_tipografias/#peso-de-la-tipografia","text":"Por otro lado, tenemos el peso de la fuente, que no es m\u00e1s que el grosor de la misma. Tambi\u00e9n depende de la fuente elegida, ya que no todas soportan todos los tipos de grosor. De forma similar a como hemos visto hasta ahora, se puede especificar el peso de una fuente mediante tres formas diferentes: Propiedad Valor Significado font-weight normal bold font-weight bolder lighter font-weight peso Medida espec\u00edfica (n\u00famero del peso concreto) Valores absolutos : Palabras claves para indicar el peso de la fuente: normal y bold . Normal es el valor por defecto. Valores relativos : Bolder (m\u00e1s gruesa) o Ligther (m\u00e1s delgada). Valor num\u00e9rico : Un n\u00famero del 100 (menos gruesa) al 900 (mas gruesa). Generalmente, se incrementan en valores de 100 en 100. OJO : Ten en cuenta que los diferentes pesos de una tipograf\u00eda son dise\u00f1ados por el creador de la tipograf\u00eda. Algunas tipograf\u00edas carecen de diferentes pesos y s\u00f3lo tienen uno espec\u00edfico. Esto es algo muy sencillo de ver en Google Fonts ( al seleccionar una tipograf\u00eda ).","title":"Peso de la tipograf\u00eda"},{"location":"desarrollo/css/05-Fuentes_y_tipografias/#tipografias-externas","text":"Antiguamente, utilizar tipograf\u00edas en CSS ten\u00eda una gran limitaci\u00f3n. Usando la propiedad font-family y especificando el nombre de la tipograf\u00eda a utilizar, en principio deber\u00edan visualizarse. Pero fundamentalmente, exist\u00edan dos problemas: Las tipograf\u00edas especificadas mediante font-family deb\u00edan estar instaladas en el sistema donde se visualiza la p\u00e1gina web. p { font-family : Vegur , Georgia , \"Times New Roman\" , sans-serif ; } En el ejemplo superior, se han indicado las tipograf\u00edas Vegur ( tipograf\u00eda personalizada ), Georgia y Times New Roman ( tipograf\u00edas de Microsoft Windows ) y la categor\u00eda segura sans-serif . Un usuario con la tipograf\u00eda Vegur instalada, ver\u00eda sin problema el dise\u00f1o con dicha tipograf\u00eda, mientras que un usuario de Windows la ver\u00eda con Georgia ( o si no la tiene, con Times New Roman ), mientras que un usuario de Linux o Mac, la ver\u00eda con otra tipograf\u00eda diferente ( una tipograf\u00eda sans-serif del sistema ). Esto es un problema ya que no permite hacer dise\u00f1os consistentes, pero hay formas de solucionarlo, como veremos a continuaci\u00f3n. Por otro lado, muchas tipograf\u00edas gen\u00e9ricas tienen derechos de autor y puede que algunos sistemas no tengan permiso para tenerlas instaladas. Mientras que las tipograf\u00edas que vienen en sistemas como Microsoft Windows de serie ( Times New Roman, Verdana, Tahoma, Trebuchet MS... ) se ver\u00edan correctamente en navegadores con dicho sistema operativo, no ocurrir\u00eda lo mismo en dispositivos con GNU/Linux o Mac. Y lo mismo con tablets o dispositivos m\u00f3viles, o viceversa. Esto ocurre porque muchas tipograf\u00edas son propietarias y tienen licencias que permiten usarse s\u00f3lo en dispositivos de dicha compa\u00f1\u00eda. En definitiva, aunque ten\u00edamos los mecanismos, vivimos en un mundo complicado en el que no es tan sencillo establecer una fuente espec\u00edfica para obtener el mismo resultado de dise\u00f1o en todos los navegadores y sistemas disponibles.... al menos hasta que lleg\u00f3 @font-face .","title":"Tipograf\u00edas externas"},{"location":"desarrollo/css/05-Fuentes_y_tipografias/#la-regla-font-face","text":"La regla @font-face permite descargar una fuente o tipograf\u00eda, cargarla en el navegador y utilizarla en nuestras p\u00e1ginas. Todo ello de forma transparente al usuario sin que deba instalar o realizar ninguna acci\u00f3n. Veamos un ejemplo de como se puede utilizar: @ font-face { font-family : 'Open Sans' ; font-style : normal ; font-weight : 400 ; src : local ( 'Open Sans' ), url (/ fonts / opensans . woff2 ) format ( 'woff2' ), url (/ fonts / opensans . woff ) format ( 'woff' ), url (/ fonts / opensans . ttf ) format ( 'truetype' ), url (/ fonts / opensans . otf ) format ( 'opentype' ), url (/ fonts / opensans . eot ) format ( 'embedded-opentype' ); } La regla @font-face suele colocarse al principio del fichero CSS para preparar el navegador para descargar la tipograf\u00eda en el caso de no disponer de ella. En el ejemplo superior lo hemos hecho con la fuente Open Sans , una tipograf\u00eda libre creada por Steve Matteson para Google y disponible en Google Fonts. Basicamente, abrimos un bloque @font-face , establecemos su nombre mediante font-family y definimos sus caracter\u00edsticas mediante propiedades como font-style o font-weight . El factor clave viene a la hora de indicar la tipograf\u00eda, que se hace mediante la propiedad src ( source ) con los siguientes valores: Valor Significado Soporte local('Nombre') \u00bfEst\u00e1 la fuente 'Nombre' instalada? Si es as\u00ed, no hace falta descargarla. Todos url(file.woff2) Formato Web Open Font Format 2 . Mejora de WOFF con Brotli . No IE url(file.woff) Formato Web Open Font Format . Es un TTF comprimido, ideal para web. Bueno url(file.ttf) Formato True Type . Uno de los formatos m\u00e1s conocidos. Bueno url(file.otf) Formato Open Type . Mejora del formato TTF . Bueno url(file.eot) Formato Embedded OpenType . Mejora de OTF , propietaria de Microsoft. S\u00f3lo IE url(file.svg) Tipograf\u00edas creadas como formas SVG. No usar , considerada obsoleta . Malo Consejo : Actualmente, una buena pr\u00e1ctica es utilizar la expresi\u00f3n local() seguida de la expresi\u00f3n url() con los formatos WOFF2 , WOFF y TTF ( en dicho orden ), dando as\u00ed soporte a la mayor\u00eda de navegadores. Para dar soporte a versiones antiguas de Internet Explorer, podr\u00eda ser adecuado incluir tambi\u00e9n el formato EOT .","title":"La regla @font-face"},{"location":"desarrollo/css/05-Fuentes_y_tipografias/#google-fonts","text":"En la actualidad, es muy com\u00fan utilizar Google Fonts como repositorio proveedor de tipograf\u00edas para utilizar en nuestros sitios web por varias razones: Gratuitas : Disponen de un amplio cat\u00e1logo de fuentes y tipograf\u00edas libres y/o gratuitas. C\u00f3modo : Resulta muy sencillo su uso: Google nos proporciona un c\u00f3digo y el resto lo hace \u00e9l. R\u00e1pido : El servicio est\u00e1 muy extendido y utiliza un CDN, que brinda ventajas de velocidad. En la propia p\u00e1gina de Google Fonts podemos seleccionar las fuentes con las caracter\u00edsticas deseadas y generar un c\u00f3digo HTML con la tipograf\u00eda ( o colecci\u00f3n de tipograf\u00edas ) que vamos a utilizar. Todo esto nos generar\u00e1 el siguiente c\u00f3digo, que aparece en la zona derecha de la web ( en la zona < > ), y que ser\u00e1 el fragmento de c\u00f3digo que tendremos que insertar en nuestro documento HTML, concretamente, antes de finalizar la secci\u00f3n <head> : < link rel = \"stylesheet\" href = \"https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400&display=swap\" > C\u00f3mo se puede ver el ejemplo anterior, al a\u00f1adir este c\u00f3digo estamos enlazando nuestro documento HTML con un documento CSS del repositorio de Google, que incluye los @font-face correspondientes. Esto har\u00e1 que incluyamos autom\u00e1ticamente todo ese c\u00f3digo CSS necesario para las tipograf\u00edas escogidas, en este caso la tipograf\u00eda Open Sans con los pesos 300 y 400 . Si adem\u00e1s, a\u00f1adimos tambi\u00e9n la familia de tipograf\u00edas Roboto ( con grosor 400 ) y Lato ( con grosor 300 y 400 ), el c\u00f3digo necesario ser\u00eda el siguiente: < link rel = \"stylesheet\" href = \"https://fonts.googleapis.com/css2?family=Lato:wght@300;400&family=Open+Sans:wght@300;400;600&family=Roboto&display=swap\" > De esta forma conseguimos cargar varias tipograf\u00edas desde el repositorio de Google de una sola vez , sin la necesidad de varias l\u00edneas de c\u00f3digo diferentes, que realizar\u00edan varias peticiones diferentes a Google Fonts . Nota que en este nuevo ejemplo, en caso de no tener instaladas ningunas de las tipograf\u00edas anteriores, estar\u00edamos realizando 6 descargas : ( el css de Google Fonts ), ( las 2 tipograf\u00edas con los diferentes pesos de Open Sans ), ( la de Roboto ), ( y las 2 tipograf\u00edas con los diferentes pesos de Lato ). Por \u00faltimo y para terminar, s\u00f3lo necesitaremos a\u00f1adir la propiedad font-family: \"Open Sans\" , font-family: \"Lato\" o font-family: \"Roboto\" a los textos que queramos dar formato con dichas tipograf\u00edas. No te olvides de a\u00f1adir tipograf\u00edas alternativas y fuente segura para mejorar la compatibilidad con navegadores antiguos. El par\u00e1metro display con valor swap que aparece en la \u00faltima versi\u00f3n de Google Fonts, lo explicamos aqu\u00ed Propiedades avanzadas de tipograf\u00edas . No hay que dejar de tener en cuenta que cuantas m\u00e1s tipograf\u00edas ( y/o m\u00e1s pesos ) incluyamos en nuestra p\u00e1gina, m\u00e1s lenta ser\u00e1 la experiencia del usuario , ya que m\u00e1s contenido tendr\u00e1 que descargar. Salvo excepciones particulares, lo habitual suele ser elegir entre 2-3 tipograf\u00edas como m\u00e1ximo , cada una con una finalidad concreta: encabezados o titulares, tipograf\u00eda de lectura normal y tipograf\u00eda secundaria, por ejemplo.","title":"Google Fonts"},{"location":"desarrollo/css/05-Fuentes_y_tipografias/#atajo-para-tipografias","text":"Finalmente, algunas de las propiedades m\u00e1s utilizadas de tipograf\u00edas y fuentes se pueden resumir en una propiedad de atajo, como viene siendo habitual. El esquema es el siguiente: div { font : < style > < variant > < weight > < size / line-height > < family > ; } Por ejemplo, utilizar la tipograf\u00eda Arial , con la fuente alternativa Verdana o una fuente segura sin serifa, a un tama\u00f1o de 16 p\u00edxeles, con un interlineado de 22 p\u00edxeles, un peso de 400, sin utilizar versalitas y con estilo cursiva: div { font : italic normal 400 16 px / 22 px Arial , Verdana , Sans-serif ; }","title":"Atajo para tipograf\u00edas"},{"location":"desarrollo/css/05-Fuentes_y_tipografias/#textos-y-alineaciones","text":"CSS dispone de ciertas propiedades relacionadas con el texto de una p\u00e1gina, pero alej\u00e1ndose de criterios de tipograf\u00edas, y centr\u00e1ndose m\u00e1s en objetivos de alineaci\u00f3n o tratamiento de espaciados. Veamos algunas de estas propiedades: Propiedad Valor Significado letter-spacing normal word-spacing normal line-height normal text-indent Indentaci\u00f3n de texto (sangr\u00eda) white-space normal nowrap tab-size direction ltr rtl Las tres primeras propiedades, determinan el espacio en diferentes zonas del texto. Por ejemplo la primera de ellas, letter-spacing , especifica el espacio de separaci\u00f3n que hay entre cada letra de un texto, denominado com\u00fanmente interletraje o tracking . Con n\u00fameros negativos tendremos m\u00e1s unidas las letras y con n\u00fameros positivos, las tendremos m\u00e1s separadas unas de otras. La propiedad line-height especifica la altura que tendr\u00e1 cada l\u00ednea de texto, una caracter\u00edstica que puede facilitar much\u00edsimo la lectura, puesto que un interlineado excesivo puede desorientar al lector, mientras que uno insuficiente puede hacer perder al visitante el foco en el texto. La propiedad word-spacing permite establecer el espacio que hay entre una palabra y otra en un texto determinado, lo que puede facilitar la legibilidad de los textos de una p\u00e1gina web y da flexibilidad y control sobre ciertas tipograf\u00edas. La propiedad text-indent establece un tama\u00f1o de indentaci\u00f3n ( por defecto, 0 ), o lo que es lo mismo, hace un sangrado, desplazando el texto la longitud especificada hacia la derecha ( o izquierda en cantidades negativas ). Al utilizar white-space podemos indicar el comportamiento que tendr\u00e1n los espacios en blanco en una p\u00e1gina web. Por defecto, el valor es normal ( transforma m\u00faltiples espacios en blanco en un solo espacio consecutivo ), pero tiene otras opciones posibles: Valor Espacios en blanco consecutivos Contenido normal Los espacios se transforman en uno solo. Se ajusta al contenedor. nowrap Los espacios se transforman en uno solo. Ignora saltos de l\u00ednea. pre Respeta literalmente los espacios. Ignora saltos de l\u00ednea. pre-wrap Respeta literalmente los espacios. Se ajusta al contenedor. pre-line Respeta literalmente los espacios y suprime los espacios del final. Se ajusta al contenedor. Nota : La diferencia entre pre-wrap y pre-line es que este \u00faltimo respeta literalmente los espacios que est\u00e1n antes del texto, mientras que si sobran despu\u00e9s del texto, los suprime. Probablemente, a medida que realices diferentes dise\u00f1os, te encontrar\u00e1s con la desagradable situaci\u00f3n en la que un texto concreto ( por ejemplo, un enlace demasiado largo ) no cabe dentro de un contenedor, por lo que el texto se desborda y provoca efectos no deseados como salirse de su lugar. Propiedad Valor Significado hyphens manual none overflow-wrap normal break-word line-break auto loose word-break normal keep-all OJO : La propiedad overflow-wrap s\u00f3lo funciona cuando white-space est\u00e1 establecida a valores que respeten espacios. Adem\u00e1s, la propiedad word-wrap es un alias de overflow-wrap por temas de retrocompatibilidad. Existen formas de mitigar este problema, como la propiedad word-break , word-wrap o la propiedad hyphens , sin embargo, a\u00fan est\u00e1n en fase de desarrollo y su soporte est\u00e1 poco extendido en la actualidad. A\u00fan as\u00ed, si quieres probar una combinaci\u00f3n de varias propiedades que suele dar resultado para paliar este comportamiento, puedes probar lo siguiente: . container { hyphens : auto ; word-wrap : break-word ; word-break : break-word ; } Por otra parte, la propiedad tab-size permite establecer el n\u00famero de espacios que se mostrar\u00e1n en el cliente o navegador al representar el car\u00e1cter de un TAB ( tabulador ), que generalmente se convierten a un espacio en blanco, pero sin embargo son visibles en elementos HTML como <textarea> o <pre> . Por \u00faltimo, la propiedad direction permite establecer la direcci\u00f3n del texto: de izquierda a derecha ( ltr, left to right ) o de derecha a izquierda ( rtl, right to left ).","title":"Textos y alineaciones"},{"location":"desarrollo/css/05-Fuentes_y_tipografias/#alineaciones","text":"Tambi\u00e9n existen varias propiedades CSS que permiten modificar las diferentes alineaciones de los textos en su conjunto. Veamos un resumen de ellas: Propiedad Valor Significado text-align left center text-justify auto inter-word text-overflow clip ellipsis En el primer caso, se puede establecer los valores left , right , center o justify a la propiedad text-align para alinear horizontalmente el texto a la izquierda, a la derecha, en el centro o justificar el texto, respectivamente, de la misma forma que lo hacemos en un procesador de texto. En la propiedad text-justify indicamos el tipo de justificaci\u00f3n de texto que el navegador realizar\u00e1: autom\u00e1tica ( el navegador elige ), ajustar el espacio entre palabras ( el resultado de ajustar con la propiedad word-spacing ), ajustar el espacio entre par de car\u00e1cteres ( el resultado de ajustar con la propiedad letter-spacing ) y justificaci\u00f3n desactivada. Por su parte, la propiedad text-overflow cambia el comportamiento del navegador cuando detecta que un texto no cabe y se desborda. En ella podemos utilizar los valores clip , desbordar el contenedor ( comportamiento por defecto ), ellipsis , que muestra el texto <<...>> cuando no cabe m\u00e1s texto y por \u00faltimo indicar el texto que queremos utilizar en lugar de <<...>>. Al igual que existe text-align para alinear horizontalmente, tambi\u00e9n existe la propiedad vertical-align , que se encarga de la alineaci\u00f3n vertical de un elemento, pudiendo establecer como valor las siguientes opciones: Valor \u00bfC\u00f3mo hace la alineaci\u00f3n? baseline La base del elemento con la base del elemento padre. sub El elemento como un sub\u00edndice. super El elemento como un super\u00edndice. top La parte superior del elemento con la parte superior del elemento m\u00e1s alto de la l\u00ednea. middle El elemento en la mitad del elemento padre. bottom La parte inferior del elemento con la parte inferior del elemento m\u00e1s bajo de esa l\u00ednea. text-top La parte superior del elemento con la parte superior del texto padre. text-bottom La parte inferior del elemento con la parte inferior del texto padre. tama\u00f1o Sube o baja un elemento el tama\u00f1o o porcentaje especificado. Consejo : Cuidado con vertical-align . Esta propiedad puede querer utilizarse para centrar verticalmente un elemento, sin embargo, su utilizaci\u00f3n es un poco menos intuitiva de lo que en un principio se cree, ya que se debe utilizar para alinear textos respecto a elementos. Para alinear bloques de contenido o crear estructuras de dise\u00f1o, v\u00e9ase Flexbox .","title":"Alineaciones"},{"location":"desarrollo/css/05-Fuentes_y_tipografias/#variaciones","text":"Por \u00faltimo, existen varias propiedades aplicables a los textos para variar su naturaleza. Echemos un vistazo: Propiedad Valor Significado text-decoration none underline text-transform none capitalize La propiedad text-decoration permite establecer subrayados ( underline ), subrayados por encima del texto ( overline ) y tachados ( line-through ). Indicando el valor none se puede eliminar cualquiera de los formatos anteriores. Es muy utilizado, por ejemplo, para eliminar el subrayado de los textos que tienen un enlace o hiperv\u00ednculo. Por \u00faltimo, la propiedad text-transform es muy \u00fatil para convertir textos a may\u00fasculas ( uppercase ) o min\u00fasculas ( lowercase ), o incluso capitalizar el texto ( capitalize ), es decir, poner s\u00f3lo la primera letra en may\u00fascula, independientemente de como est\u00e9 escrito en el documento HTML.","title":"Variaciones"},{"location":"desarrollo/css/05-Fuentes_y_tipografias/#propiedades-avanzadas","text":"En CSS existen m\u00faltiples propiedades relacionadas con las tipograf\u00edas. Las que veremos en esta secci\u00f3n se trata de algunas propiedades espec\u00edficas para controlar la forma en la que se ven o aparecen las tipograf\u00edas en la p\u00e1gina.","title":"Propiedades avanzadas"},{"location":"desarrollo/css/05-Fuentes_y_tipografias/#compactacion-de-la-tipografia","text":"Con la propiedad font-stretch podemos definir el grado de compactaci\u00f3n o expansi\u00f3n de los car\u00e1cteres de la tipograf\u00eda, desde valores muy condensados ( para ocupar menos espacio ) a valores muy expandidos ( para ocupar m\u00e1s espacio ): Propiedad Valor font-stretch ultra-condensed font-stretch Tambi\u00e9n se puede especificar el tama\u00f1o, por ejemplo en porcentajes. Recuerda que para que la propiedad font-stretch funcione correctamente, la tipograf\u00eda seleccionada debe poseer una versi\u00f3n < > o < > para as\u00ed poderla aplicar.","title":"Compactaci\u00f3n de la tipograf\u00eda"},{"location":"desarrollo/css/05-Fuentes_y_tipografias/#ajuste-de-tamano","text":"Con la propiedad font-size-adjust podemos ajustar el tama\u00f1o de la tipograf\u00eda indicando la diferencia de tama\u00f1o entre la x min\u00fascula y la X may\u00fascula. Con esta caracter\u00edstica, podemos conseguir reducir la proporci\u00f3n de tama\u00f1o entre may\u00fasculas y min\u00fasculas de nuestros textos, si consideramos que no es adecuada: Propiedad Valor Significado font-size-adjust none Por defecto, el valor de esta propiedad es none , que establece el tama\u00f1o indicado por el dise\u00f1ador de la tipograf\u00eda. Ojo a la compatibilidad, ya que es una caracter\u00edstica que a\u00fan est\u00e1 en fase experimental:","title":"Ajuste de tama\u00f1o"},{"location":"desarrollo/css/05-Fuentes_y_tipografias/#modo-de-aparicion","text":"La propiedad font-display nos brinda un mecanismo muy interesante para determinar como queremos que se comporte la tipograf\u00eda al cargar la p\u00e1gina. Cuando cargamos una p\u00e1gina con una tipograf\u00eda que no se encuentra instalada, el navegador debe descargar la tipograf\u00eda y activarla, tarea que no ocurre instant\u00e1neamente, ya que depende de nuestra conexi\u00f3n, del tama\u00f1o de la fuente y del sistema utilizado. En el instante anterior a descargar la tipograf\u00eda pueden ocurrir varias cosas: FOIT ( Flash of Invisible Text ): El texto permanece oculto (invisible) al usuario hasta que la tipograf\u00eda deseada se ha descargado y puede visualizarse. FOUT ( Flash of Unstyled Text ): El texto permanece sin estilo (con otra tipograf\u00eda diferente) hasta que la tipograf\u00eda deseada se ha descargado y puede visualizarse. Dependiendo del valor de la propiedad font-display podemos modificar dicho comportamiento: Propiedad Valor Significado font-display auto block Veamos que ocurre con cada uno de los valores indicados ( si la tipograf\u00eda no est\u00e1 descargada ): * auto : El valor por defecto de la propiedad. El navegador decide que comportamiento aplicar, que suele ser FOIT. C\u00f3mo desventaja, en algunos navegadores o situaciones, el tiempo de FOIT puede llegar a ser considerablemente alto. * block : El navegador mantiene el texto invisible (FOIT) un corto periodo de tiempo, cambiando a modo swap desde que la tipograf\u00eda deseada est\u00e1 cargada. Se aconseja usar especialmente en peque\u00f1os fragmentos de texto como titulares. * swap : El navegador muestra inmediatamente el texto con la siguiente tipograf\u00eda de la lista font-family durante un cort\u00edsimo periodo de tiempo, mostrando la tipograf\u00eda deseada desde que est\u00e1 cargada. Se aconseja usar especialmente en peque\u00f1os fragmentos de texto como titulares. * fallback : El navegador muestra el texto con la siguiente tipograf\u00eda de la lista font-family durante un cort\u00edsimo periodo de tiempo, mostrando la tipograf\u00eda deseada desde que est\u00e1 cargada. La diferencia respecto al modo anterior es que si pasa demasiado tiempo sin que la tipograf\u00eda se cargue, se utiliza de forma definitiva la alternativa que se estaba usando. Apropiada para usar en fragmentos largos de texto. * optional : El navegador considera opcional el uso de la tipograf\u00eda deseada si tarda demasiado o cree que hay alg\u00fan problema en la descarga, utilizando la siguiente tipograf\u00eda de la lista font-family .","title":"Modo de aparici\u00f3n"},{"location":"desarrollo/css/05-Fuentes_y_tipografias/#caracteristicas-personalizadas","text":"Ciertas tipograf\u00edas tienen una serie de caracter\u00edsticas avanzadas que pueden existir o no, dependiendo de la tipograf\u00eda. Dichas caracter\u00edsticas permiten realizar variaciones en las tipograf\u00edas como las siguientes: Caracter\u00edstica Descripci\u00f3n Ligadura Uni\u00f3n visual de 2 car\u00e1cteres. Muy usada en programaci\u00f3n, matem\u00e1ticas e idiomas. Posicionamiento Colocaci\u00f3n de car\u00e1cteres de forma similar a los sub\u00edndices o super\u00edndices. May\u00fasculas/Min\u00fasculas Variaciones relacionadas con las may\u00fasculas y min\u00fasculas. Variaciones Se trata de grupos de variaciones visuales con un prop\u00f3sito concreto. Veamos detalladamente cada una de estas caracter\u00edsticas: * Ligaduras : Es posible activar una caracter\u00edsticas llamada ligadura que no es m\u00e1s que la uni\u00f3n de ciertos car\u00e1cteres cambiando su aspecto visual. Esto se puede hacer con la propiedad font-variant-ligatures , y dependiendo del valor espec\u00edfico, activaremos uno u otro tipo de ligadura. Existen las siguientes: Ligaduras normales : Se indica con el valor common-ligatures . Se suele observar en valores como fi , fl , ff ... Ligaduras discrecionales : Se indica con el valor discretionary-ligatures . Se suele observar en valores como ch , sp , st ... Ligaduras hist\u00f3ricas : Se indica con el valor historical-ligatures . Se aplican para mostrar ligaduras heredadas de escritura manual. * Posicionamiento de car\u00e1cteres : Es posible activar una variaci\u00f3n para indicar texto como sub\u00edndice o super\u00edndice, similar a como se hace con las etiquetas HTML <sub> y <super> . * May\u00fasculas y min\u00fasculas : Es posible realizar ciertas variaciones como versalitas o similares, aplicadas s\u00f3lo a min\u00fasculas, s\u00f3lo a may\u00fasculas o a ambas. * Variaciones num\u00e9ricas : Con la propiedad font-variant-numeric podemos establecer ciertas variaciones como representar n\u00fameros con estilo antiguo, diferentes proporciones, como fracciones \"gr\u00e1ficas\" o incluso indicar que el cero tenga una raya o no. * Variaciones alternativas : Con la propiedad font-variant-alternates se pueden indicar una o m\u00faltiples variaciones visuales, donde se pueden mencionar las siguientes: historical-forms : Muestra glifos hist\u00f3ricos ( heredados de \u00e9pocas pasadas ) stylistic( id ) : Muesta caracter\u00edsticas de estilo alternativas de forma individual. styleset( id ) : Muestra un conjunto de caracter\u00edsticas de estilo alternativas ( creados para trabajar juntos ). character-variant( id ) : Muestra ciertas variaciones en car\u00e1cteres concretos. swash( id ) : Muestra decoraciones art\u00edsticas en los car\u00e1cteres como adornos tipogr\u00e1ficos. ornaments( id ) : Muestra glifos con adornos en lugar del caracter predeterminado. anotation( id ) : Muestra formas notacionales de glifos (glifos abiertos, cajas redondeadas, etc...)","title":"Caracter\u00edsticas personalizadas"},{"location":"desarrollo/css/05-Fuentes_y_tipografias/#variaciones-en-tipografias","text":"Estas caracter\u00edsticas pueden ser activadas o desactivadas desde CSS, por medio de una de las siguientes propiedades ( o de forma alternativa, utilizando una propiedad a bajo nivel que veremos m\u00e1s adelante ): Propiedad/Valores Significado font-variant-ligatures Establece un estilo de ligadura normal none font-variant-position Establece estilo subscript ( sub\u00edndice ) o superscript ( super\u00edndice ) normal sub font-variant-caps Establece una variaci\u00f3n de versalitas normal small-caps font-variant-numeric Establece variaciones num\u00e9ricas normal lining-nums font-variant-alternates Establece variaciones visuales normal historical-forms font-variant-east-asian Permite controlar los glifos de textos orientales normal jis78 font-kerning Indica qui\u00e9n debe ajustar el kerning auto normal Ten en cuenta que en la mayor\u00eda de ellas, se puede utilizar la regla @font-feature-values para personalizar como utilizar la caracter\u00edstica en cuesti\u00f3n ( la cu\u00e1l debe existir y estar definida en la tipograf\u00eda ). Veamos un ejemplo: @ font-feature-values 'bookmania' { @ swash { flourish : 1 ; } } . texto-alternativo { font-variant-alternates : swash ( flourish ); }","title":"Variaciones en tipograf\u00edas"},{"location":"desarrollo/css/05-Fuentes_y_tipografias/#caracteristicas-a-bajo-nivel","text":"La propiedad font-feature-settings es una propiedad a bajo nivel para indicar como debe comportarse una tipograf\u00eda respecto a sus caracter\u00edsticas especiales . S\u00f3lo debe usarse cuando no nos sirva otra propiedad con la que modificar dicha caracter\u00edstica, la cu\u00e1l normalmente se encuentra en la lista del apartado anterior. La sintaxis de esta propiedad es la que podemos ver a continuaci\u00f3n ( se pueden combinar varias caracter\u00edsticas separando por comas ): p { /* La caracter\u00edstica \"feat\" est\u00e1 activada. */ font-feature-settings : \"feat\" 1 ; /* Otra opci\u00f3n equivalente a la anterior. */ font-feature-settings : \"feat\" on ; /* La caracter\u00edstica \"feat\" est\u00e1 desactivada. */ font-feature-settings : \"feat\" 0 ; /* Otra opci\u00f3n equivalente a la anterior. */ font-feature-settings : \"feat\" off ; } Sin embargo, la caracter\u00edstica < > no existe, es s\u00f3lo un ejemplo te\u00f3rico. Cada tipograf\u00eda tiene un cierto n\u00famero de caracter\u00edsticas especiales ( hay tipograf\u00edas que tienen varias, y tipograf\u00edas que no tienen ninguna ). Veamos una lista de las caracter\u00edsticas que existen: Valor OTF Significado Propiedad equivalente Valor concreto \"liga\" 1 Ligaduras est\u00e1ndar (tambi\u00e9n clig ) font-variant-ligatures common-ligatures \"dlig\" 1 Ligaduras discrecionales font-variant-ligatures discretionary-ligatures \"hlig\" 1 Ligaduras hist\u00f3ricas font-variant-ligatures historical-ligatures \"calt\" 1 Ligaduras contextuales alternativas font-variant-ligatures contextual \"ordn\" 1 Marcas ordinales font-variant-numeric ordinal \"zero\" 1 Raya del cero font-variant-numeric slashed-zero \"onum\" 1 Figuras de estilo antiguo font-variant-numeric oldstyle-nums \"lnum\" 1 N\u00fameros alineados font-variant-numeric lining-nums \"pnum\" 1 N\u00fameros proporcionales font-variant-numeric proportional-nums \"tnum\" 1 Figuras tabulares (mismo tama\u00f1o) font-variant-numeric tabular-nums \"frac\" 1 Fracciones diagonales font-variant-numeric diagonal-fractions \"afrc\" 1 Fracciones apiladas font-variant-numeric stacked-fractions \"sups\" 1 Super\u00edndices font-variant-position super \"subs\" 1 Sub\u00edndices font-variant-position sub \"smcp\" 1 Versalitas en min\u00fasculas font-variant-caps small-caps \"c2sc\" 1 Versalitas en may\u00fasculas y min\u00fasculas font-variant-caps all-small-caps \"pcap\" 1 Capitaliza min\u00fasculas font-variant-caps petite-caps \"c2pc\" 1 Capitaliza may\u00fasculas y min\u00fasculas font-variant-caps all-petite-caps \"unic\" 1 Versalitas en may\u00fasculas font-variant-caps unicase \"titl\" 1 May\u00fasculas para titulares font-variant-caps titling-caps \"swsh\" 1 Decoraciones swash font-variant-alternates swash() \"hist\" 1 Glifos hist\u00f3ricos font-variant-alternates historical-forms \"salt\" 1 Car\u00e1cteres con estilos alternativos font-variant-alternates stylistic() \"ss01\" 1 Conjunto de estilos alternativos font-variant-alternates styleset(01) \"ss02\" 1 Segundo conjunto de estilos alternativos font-variant-alternates styleset(02) \"ss03\" 1 Tercer conjunto de estilos alternativos font-variant-alternates styleset(03) \"cv01\" 1 Estilo alternativo para car\u00e1cteres font-variant-alternates character-variant(01) \"ornm\" 1 Adornos como fleurons o dingbats font-variant-alternates ornaments() \"nalt\" 1 D\u00edgitos circulares, car\u00e1cteres invertidos... font-variant-alternates annotation() \"kern\" 1 Kerning de tipograf\u00edas font-kerning normal Para saber si la tipograf\u00eda que estamos utilizando posee alguna de estas caracter\u00edsticas especiales , podemos utilizar el comando de terminal font , que lee dicha informaci\u00f3n de formatos WOFF2, WOFF, TTF u OTF. Dicho comando est\u00e1 programado en el lenguaje de programaci\u00f3n Go , por lo que instalarlo es tan f\u00e1cil como escribir desde una terminal lo siguiente: go get -u github.com/ConradIrwin/font/cmd/font # Instalamos \"font\" (necesitamos Go) font feature fichero.ttf # Leemos las caracter\u00edsticas Este comando nos mostrar\u00e1 los metadatos de la tipograf\u00eda, incluyendo los flags de las features ( liga, tnum, frac, etc... ) que existen y est\u00e1n definidas en la tipograf\u00eda en cuesti\u00f3n. El soporte actual de dicha propiedad es el siguiente:","title":"Caracter\u00edsticas a bajo nivel"},{"location":"desarrollo/css/05-Fuentes_y_tipografias/#atajo-de-caracteristicas","text":"Tradicionalmente, la propiedad font-variant s\u00f3lo permit\u00eda los valores normal o small-caps . Sin embargo, las nuevas propuestas de CSS permiten utilizar esta propiedad como propiedad de atajo para todas las caracter\u00edsticas que hemos visto en el apartado anterior. Por lo tanto, pasamos de este esquema antiguo ( soportado en la mayor\u00eda de los navegadores ): Propiedad Valor Significado font-variant normal small-caps Al esquema moderno, que es el siguiente: p { /* font-variant: <ligatures> <caps> <numeric> <east-asian> <position> */ } En \u00e9l podemos utilizar los valores de cada propiedad individual: font-variant-ligatures , font-variant-caps , etc... en forma de atajo. Fuente: Lenguaje de CSS por Manz","title":"Atajo de caracter\u00edsticas"},{"location":"desarrollo/css/06-representacion_de_datos/","text":"Representaci\u00f3n de datos \u00b6 Tablas CSS \u00b6 Las tablas de HTML son un grupo de etiquetas de HTML que sirven para mostrar datos tabulados. En el pasado, se utilizaron de forma err\u00f3nea para crear un dise\u00f1o, debido a su facilidad de colocaci\u00f3n al ser un esquema rect\u00e1ngular. Afortunadamente, hoy en d\u00eda ya se ha perdido esa percepci\u00f3n incorrecta, aunque nunca est\u00e1 de m\u00e1s conocer un poco de historia para no repetir los errores del pasado. Cuando queremos dar estilo a una tabla de HTML, podemos utilizar propiedades gen\u00e9ricas como border , background , color , font-family , padding , margin , entre otras. Combin\u00e1ndolas en los diferentes elementos HTML de tablas, en particular, celdas <td> , encabezados <th> , filas <tr> y tablas <table> , podemos personalizar mucho el aspecto visual de la misma. Propiedades CSS para tablas \u00b6 Sin embargo, tambi\u00e9n existen varias propiedades CSS espec\u00edficas para alterar o modificar el comportamiento de ciertas caracter\u00edsticas de una tablas HTML. Veamos cuales son esas propiedades espec\u00edficas para tablas: Propiedad Valor Significado border-collapse separate | collapse Aplicado sobre la tabla, elimina el espacio de relleno entre celdas. border-spacing 0 | Amplia el espacio de relleno entre tabla y celdas. caption-side top | bottom Mueve el elemento <caption> del interior de una tabla. empty-cells show | hide Hace desaparecer visualmente una celda vac\u00eda (sin contenido). table-layout auto | fixed Indica si las celdas deben ajustarse o tener un tama\u00f1o fijo. La propiedad border-collapse permite especificar si los bordes de una tabla y sus celdas deben estar unidos ( collapse ) o separados ( separate ). En el segundo caso, se puede tambi\u00e9n aplicar la propiedad border-spacing , que especifica el tama\u00f1o que medir\u00e1n los espacios exteriores entre celdas. La propiedad caption-side permite especificar donde se colocar\u00e1 el t\u00edtulo de la tabla ( en el caso de haber utilizado el elemento HTML ): al principio de la tabla ( top ) o al final ( bottom ). La propiedad empty-cells establece si mostrar ( show ) o no ( hide ) las celdas vac\u00edas, haci\u00e9ndolas desaparecer en el \u00faltimo caso. Por \u00faltimo, la propiedad table-layout permite especificar si el navegador debe adaptar el tama\u00f1o de las celdas autom\u00e1ticamente ( auto ) o establecer un tama\u00f1o fijo ( fixed ). Listas CSS \u00b6 De la misma forma que las tablas, las listas tambi\u00e9n poseen sus propias propiedades espec\u00edficas para alterar el estilo o caracter\u00edsticas de listas HTML, tanto listas ordenadas <ol> como listas sin orden <ul> . Listas CSS \u00b6 Por ejemplo, las siguientes propiedades: Propiedad|Valor|Significado list-style-image | none | url( image.png )|Especifica una imagen para usar como \u00abpunto\u00bb o vi\u00f1eta de \u00edtem. list-style-position |inside | outside |Establece o elimina indentaci\u00f3n de \u00edtems sobre la lista. La primera propiedad, list-style-image permite indicar la URL de una imagen para utilizar de icono o vi\u00f1eta en cada \u00edtem de la lista. Con el valor none eliminamos el uso de cualquier imagen. Por otro lado, la propiedad list-style-position permite establece una indentaci\u00f3n a todos los \u00edtems de la lista, estableciendolos desplazados a la derecha ( inside ) o sin desplazar ( outside ). La tercera propiedad, list-style-type nos permite indicar que tipo de numeraci\u00f3n tendr\u00e1n las listas ( en el caso de no estar utilizando ningun imagen ). Se establecen tres grupos. El primero indicado para las listas que no requieren orden, el segundo para las listas numeradas y el tercero para las listas numeradas que queremos especificar con letras ( n\u00fameros romanos, letras griegas, etc... ). Veamos cada uno de los valores posibles: Propiedad Valor Significado list-style-type disc | circle | square | none Vi\u00f1etas sin orden list-style-type decimal | decimal-leading-zero | lower-roman | upper-roman Vi\u00f1etas num\u00e9ricas list-style-type lower-alpha | | upper-alpha | lower-greek Vi\u00f1etas alfab\u00e9ticas El primer grupo, indicado para listas sin orden <ul> : disc : Un peque\u00f1o circulo relleno. circle : Un circulo vac\u00edo. square : Un cuadrado relleno. none : No muestra ninguna marca a la izquierda de los \u00edtems. Si lo que queremos es establecer una lista numerada <ol> , podemos utilizar valores como: decimal : Numeraci\u00f3n decimal: 1, 2, 3, 4, 5... decimal-leading-zero : Numeraci\u00f3n decimal con ceros: 01, 02, 03, 04, 05... lower-roman : N\u00fameros romanos en min\u00fasculas: i, ii, iii, iv, v... upper-roman : N\u00fameros romanos en may\u00fasculas: I, II, III, IV, V... lower-alpha / lower-latin : Min\u00fasculas: a, b, c, d, e... upper-alpha / upper-latin : May\u00fasculas: A, B, C, D, E... Otras menos utilizadas generalmente, como lower-greek (letras griegas min\u00fasculas), arabic-indic (n\u00fameros \u00e1rabes), upper-armenian / armenian (letras armenias en may\u00fasculas), lower-armenian (letras armenias en min\u00fasculas) o georgian (letras georgianas). Existen otros valores como bengali , cambodian , hebrew , devanagari , gujarati , gurmukhi , kannada , lao , malayalam , mongolian , myanmar , oriya , persian , tamil , telugu . thai , tibetan , hiragana , hiragana-iroha , katakana , katakana-iroha , entre otros. Atajo: Listas \u00b6 Es posible utilizar la propiedad de atajo list-style para especificar varias propiedades en una sola. El orden aconsejado es el siguiente: div { /* list-style: <type> <position> <image> */ list-style: circle inside none; } Fuente: Lenguaje de CSS por Manz","title":"Representaci\u00f3n de datos"},{"location":"desarrollo/css/06-representacion_de_datos/#representacion-de-datos","text":"","title":"Representaci\u00f3n de datos"},{"location":"desarrollo/css/06-representacion_de_datos/#tablas-css","text":"Las tablas de HTML son un grupo de etiquetas de HTML que sirven para mostrar datos tabulados. En el pasado, se utilizaron de forma err\u00f3nea para crear un dise\u00f1o, debido a su facilidad de colocaci\u00f3n al ser un esquema rect\u00e1ngular. Afortunadamente, hoy en d\u00eda ya se ha perdido esa percepci\u00f3n incorrecta, aunque nunca est\u00e1 de m\u00e1s conocer un poco de historia para no repetir los errores del pasado. Cuando queremos dar estilo a una tabla de HTML, podemos utilizar propiedades gen\u00e9ricas como border , background , color , font-family , padding , margin , entre otras. Combin\u00e1ndolas en los diferentes elementos HTML de tablas, en particular, celdas <td> , encabezados <th> , filas <tr> y tablas <table> , podemos personalizar mucho el aspecto visual de la misma.","title":"Tablas CSS"},{"location":"desarrollo/css/06-representacion_de_datos/#propiedades-css-para-tablas","text":"Sin embargo, tambi\u00e9n existen varias propiedades CSS espec\u00edficas para alterar o modificar el comportamiento de ciertas caracter\u00edsticas de una tablas HTML. Veamos cuales son esas propiedades espec\u00edficas para tablas: Propiedad Valor Significado border-collapse separate | collapse Aplicado sobre la tabla, elimina el espacio de relleno entre celdas. border-spacing 0 | Amplia el espacio de relleno entre tabla y celdas. caption-side top | bottom Mueve el elemento <caption> del interior de una tabla. empty-cells show | hide Hace desaparecer visualmente una celda vac\u00eda (sin contenido). table-layout auto | fixed Indica si las celdas deben ajustarse o tener un tama\u00f1o fijo. La propiedad border-collapse permite especificar si los bordes de una tabla y sus celdas deben estar unidos ( collapse ) o separados ( separate ). En el segundo caso, se puede tambi\u00e9n aplicar la propiedad border-spacing , que especifica el tama\u00f1o que medir\u00e1n los espacios exteriores entre celdas. La propiedad caption-side permite especificar donde se colocar\u00e1 el t\u00edtulo de la tabla ( en el caso de haber utilizado el elemento HTML ): al principio de la tabla ( top ) o al final ( bottom ). La propiedad empty-cells establece si mostrar ( show ) o no ( hide ) las celdas vac\u00edas, haci\u00e9ndolas desaparecer en el \u00faltimo caso. Por \u00faltimo, la propiedad table-layout permite especificar si el navegador debe adaptar el tama\u00f1o de las celdas autom\u00e1ticamente ( auto ) o establecer un tama\u00f1o fijo ( fixed ).","title":"Propiedades CSS para tablas"},{"location":"desarrollo/css/06-representacion_de_datos/#listas-css","text":"De la misma forma que las tablas, las listas tambi\u00e9n poseen sus propias propiedades espec\u00edficas para alterar el estilo o caracter\u00edsticas de listas HTML, tanto listas ordenadas <ol> como listas sin orden <ul> .","title":"Listas CSS"},{"location":"desarrollo/css/06-representacion_de_datos/#listas-css_1","text":"Por ejemplo, las siguientes propiedades: Propiedad|Valor|Significado list-style-image | none | url( image.png )|Especifica una imagen para usar como \u00abpunto\u00bb o vi\u00f1eta de \u00edtem. list-style-position |inside | outside |Establece o elimina indentaci\u00f3n de \u00edtems sobre la lista. La primera propiedad, list-style-image permite indicar la URL de una imagen para utilizar de icono o vi\u00f1eta en cada \u00edtem de la lista. Con el valor none eliminamos el uso de cualquier imagen. Por otro lado, la propiedad list-style-position permite establece una indentaci\u00f3n a todos los \u00edtems de la lista, estableciendolos desplazados a la derecha ( inside ) o sin desplazar ( outside ). La tercera propiedad, list-style-type nos permite indicar que tipo de numeraci\u00f3n tendr\u00e1n las listas ( en el caso de no estar utilizando ningun imagen ). Se establecen tres grupos. El primero indicado para las listas que no requieren orden, el segundo para las listas numeradas y el tercero para las listas numeradas que queremos especificar con letras ( n\u00fameros romanos, letras griegas, etc... ). Veamos cada uno de los valores posibles: Propiedad Valor Significado list-style-type disc | circle | square | none Vi\u00f1etas sin orden list-style-type decimal | decimal-leading-zero | lower-roman | upper-roman Vi\u00f1etas num\u00e9ricas list-style-type lower-alpha | | upper-alpha | lower-greek Vi\u00f1etas alfab\u00e9ticas El primer grupo, indicado para listas sin orden <ul> : disc : Un peque\u00f1o circulo relleno. circle : Un circulo vac\u00edo. square : Un cuadrado relleno. none : No muestra ninguna marca a la izquierda de los \u00edtems. Si lo que queremos es establecer una lista numerada <ol> , podemos utilizar valores como: decimal : Numeraci\u00f3n decimal: 1, 2, 3, 4, 5... decimal-leading-zero : Numeraci\u00f3n decimal con ceros: 01, 02, 03, 04, 05... lower-roman : N\u00fameros romanos en min\u00fasculas: i, ii, iii, iv, v... upper-roman : N\u00fameros romanos en may\u00fasculas: I, II, III, IV, V... lower-alpha / lower-latin : Min\u00fasculas: a, b, c, d, e... upper-alpha / upper-latin : May\u00fasculas: A, B, C, D, E... Otras menos utilizadas generalmente, como lower-greek (letras griegas min\u00fasculas), arabic-indic (n\u00fameros \u00e1rabes), upper-armenian / armenian (letras armenias en may\u00fasculas), lower-armenian (letras armenias en min\u00fasculas) o georgian (letras georgianas). Existen otros valores como bengali , cambodian , hebrew , devanagari , gujarati , gurmukhi , kannada , lao , malayalam , mongolian , myanmar , oriya , persian , tamil , telugu . thai , tibetan , hiragana , hiragana-iroha , katakana , katakana-iroha , entre otros.","title":"Listas CSS"},{"location":"desarrollo/css/06-representacion_de_datos/#atajo-listas","text":"Es posible utilizar la propiedad de atajo list-style para especificar varias propiedades en una sola. El orden aconsejado es el siguiente: div { /* list-style: <type> <position> <image> */ list-style: circle inside none; } Fuente: Lenguaje de CSS por Manz","title":"Atajo: Listas"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/","text":"Maquetaci\u00f3n y colocaci\u00f3n \u00b6 Tipos de elementos \u00b6 Una de las partes m\u00e1s complejas de CSS, probablemente, sea la colocaci\u00f3n y distribuci\u00f3n de los elementos de una p\u00e1gina. Sin embargo, suele ser dif\u00edcil porque se desconocen los detalles particulares que componen CSS. Una vez se analiza y se comprenden los detalles, todo resulta m\u00e1s f\u00e1cil. Para comenzar, hay que saber que cada etiqueta HTML tiene un tipo de representaci\u00f3n visual en un navegador, lo que habitualmente se suele denominar el tipo de caja . En principio, se parte de dos tipos b\u00e1sicos: inline y block . Valor Denominaci\u00f3n Significado Ejemplo inline Elemento en l\u00ednea El elemento se coloca en horizontal (un elemento a continuaci\u00f3n del otro). <span> block Elemento en bloque El elemento se coloca en vertical (un elemento encima de otro). <div> Obs\u00e9rvese que por defecto, todos los elementos <div> son elementos de bloque ( block ) y todos los elementos <span> son elementos en l\u00ednea ( inline ). Para entender esto facilmente, vamos a crear un HTML con 3 etiquetas <div> como las siguientes: < div > Elemento 1 </ div > < div > Elemento 2 </ div > < div > Elemento 3 </ div > A estas etiquetas HTML le vamos a aplicar el siguiente c\u00f3digo CSS: div { background : blue ; color : white ; margin : 1 px ; } Con esto observaremos que en nuestro navegador nos aparecen 3 cajas azules colocadas en vertical ( una debajo de otra ) que cubren todo el ancho disponible de la p\u00e1gina. Esto ocurre porque la etiqueta <div> es un elemento en bloque, o lo que es lo mismo, que tiene un tipo de representaci\u00f3n block por defecto. Cada etiqueta HTML tiene un tipo de representaci\u00f3n concreta. Sin embargo, este comportamiento de elementos puede cambiarse con la propiedad CSS display . Tan sencillo como a\u00f1adir display: inline en el ejemplo anterior y veremos como pasan a ser 3 cajas azules colocadas en horizontal ( una al lado de la otra ) que cubren s\u00f3lo el ancho del contenido de cada una. Ahora los <div> de esa p\u00e1gina son elementos en l\u00ednea ( el tipo de representaci\u00f3n visual que tienen los <span> ). Otros tipos de elementos \u00b6 A medida que vamos cambiando el tipo de representaci\u00f3n de estos elementos, nos damos cuenta que es insuficiente para realizar tareas y vamos necesitando m\u00e1s tipos de caja. Vamos a rellenar un poco m\u00e1s la tabla, con las caracter\u00edsticas m\u00e1s importantes de las opciones que puede tomar la propiedad CSS display : Tipo de caja Caracter\u00edsticas block Se apila en vertical. Ocupa todo el ancho disponible de su etiqueta contenedora. inline Se coloca en horizontal. Se adapta al ancho de su contenido. Ignora width o height . inline-block Combinaci\u00f3n de los dos anteriores. Se comporta como inline pero no ignora width o height . flex Utiliza el modelo de cajas flexibles Flexbox . Muy \u00fatil para dise\u00f1os adaptables. inline-flex La versi\u00f3n en l\u00ednea (ocupa s\u00f3lo su contenido) del modelo de cajas flexibles flexbox. grid Utiliza cuadr\u00edculas o rejillas con el modelo de cajas Grid CSS . inline-grid La versi\u00f3n en l\u00ednea (ocupa s\u00f3lo su contenido) del modelo de cajas grid css. list-item Act\u00faa como un \u00edtem de una lista. Es el comportamiento de etiquetas como <li> . table Act\u00faa como una tabla. Es el comportamiento de etiquetas como <table> . table-cell Act\u00faa como la celda de una tabla. Es el comportamiento de etiquetas como <th> o <td> . table-row Act\u00faa como la fila de una tabla. Es el comportamiento de etiquetas como <tr> . Ocultar elementos \u00b6 En la lista anterior, falta un valor de la propiedad display . Mediante la mencionada propiedad, es posible aplicar un valor none y ocultar completamente elementos que no queramos que se muestren, los cuales desaparecen por completo. Es muy \u00fatil para hacer desaparecer informaci\u00f3n cuando el usuario realiza alguna acci\u00f3n, por ejemplo. Tipo de caja Caracter\u00edsticas none Hace desaparecer visualmente el elemento, como si no existiera. No obstante, tambi\u00e9n existe una propiedad CSS llamada visibility que realiza la misma acci\u00f3n, con la ligera diferencia de que no s\u00f3lo oculta el elemento, sino que adem\u00e1s mantiene un vac\u00edo con el mismo tama\u00f1o de lo que antes estaba ah\u00ed. Dicha propiedad visibility tiene los siguientes valores posibles: Valor Significado visible El elemento es visible. Valor por defecto. hidden El elemento no es visible pero sigue ocupando su espacio y posici\u00f3n. collapse S\u00f3lo para tablas. El elemento se contrae para no ocupar espacio. Utilizar visibility:hidden es muy interesante si queremos que un elemento y su contenido se vuelva invisible, pero siga ocupando su espacio y as\u00ed evitar que los elementos adyacentes se desplacen, lo que suele ser un comportamiento no deseado en algunas ocasiones cuando se aplica display: none . Otra opci\u00f3n interesante es utilizar la propiedad opacity junto a transiciones o animaciones, desplazarse desde el valor 0 al 1 o viceversa. De esta forma conseguimos una animaci\u00f3n de aparici\u00f3n o desvanecimiento. Posicionamiento \u00b6 A grandes rasgos, y como aprendimos en temas anteriores, si tenemos varios elementos en l\u00ednea ( uno detr\u00e1s de otro ) aparecer\u00e1n colocados de izquierda hacia derecha , mientras que si son elementos en bloque se ver\u00e1n colocados desde arriba hacia abajo . Estos elementos se pueden ir combinando y anidando ( incluyendo unos dentro de otros ), construyendo as\u00ed esquemas m\u00e1s complejos. Hasta ahora, hemos estado trabajando sin saberlo en lo que se denomina posicionamiento est\u00e1tico ( static ), donde todos los elementos aparecen con un orden natural seg\u00fan donde est\u00e9n colocados en el HTML. Este es el modo por defecto en que un navegador renderiza una p\u00e1gina. Sin embargo, existen otros modos alternativos de posicionamiento, que podemos cambiar mediante la propiedad position , que nos pueden interesar para modificar la posici\u00f3n en donde aparecen los diferentes elementos y su contenido. A la propiedad position se le pueden indicar los siguientes valores: Valor Significado static Posicionamiento est\u00e1tico. Utiliza el orden natural de los elementos HTML. relative Posicionamiento relativo. Los elementos se mueven ligeramente en base a su posici\u00f3n est\u00e1tica. absolute Posicionamiento absoluto. Los elementos se colocan en base al contenedor padre. fixed Posicionamiento fijo. Idem al absoluto, pero aunque hagamos scroll no se mueve. Si utilizamos un modo de posicionamiento diferente al est\u00e1tico ( absolute, fixed o relative ), podemos utilizar una serie de propiedades para modificar la posici\u00f3n de un elemento. Estas propiedades son las siguientes: Propiedad Valor Significado top: auto bottom: auto left: auto right: auto z-index: auto Antes de pasar a explicar los tipos de posicionamiento, debemos tener claras las propiedades top , bottom , left y right , que sirven para mover un elemento desde la orientaci\u00f3n que su propio nombre indica hasta su extremo contrario. Esto es, si utilizamos left e indicamos 20px , estaremos indicando mover desde la izquierda 20 p\u00edxeles hacia la derecha . Pero pasemos a ver cada tipo de posicionamiento por separado y su comportamiento: Posicionamiento relativo \u00b6 Si utilizamos la palabra clave relative activaremos el modo de posicionamiento relativo , que es el m\u00e1s sencillo de todos. En este modo, los elementos se colocan exactamente igual que en el posicionamiento est\u00e1tico ( permanecen en la misma posici\u00f3n ), pero dependiendo del valor de las propiedades top , bottom , left o right variaremos ligeramente la posici\u00f3n del elemento. Ejemplo : Si establecemos left:40px , el elemento se colocar\u00e1 40 p\u00edxeles a la derecha desde la izquierda donde estaba colocado en principio, mientras que si especificamos right:40px , el elemento se colocar\u00e1 40 p\u00edxeles a la izquierda desde la derecha donde estaba colocado en principio. Posicionamiento absoluto \u00b6 Si utilizamos la palabra clave absolute estamos indicando que el elemento pasar\u00e1 a utilizar posicionamiento absoluto , que no es m\u00e1s que utilizar el documento completo como referencia. Esto no es exactamente el funcionamiento de este modo de posicionamiento, pero nos servir\u00e1 como primer punto de partida para entenderlo. Ejemplo : Si establecemos left:40px , el elemento se colocar\u00e1 40 p\u00edxeles a la derecha del extremo izquierdo de la p\u00e1gina. Sin embargo, si indicamos right:40px , el elemento se colocar\u00e1 40 p\u00edxeles a la izquierda del extremo derecho de la p\u00e1gina. Como mencionaba anteriormente, aunque este es el funcionamiento del posicionamiento absoluto, hay algunos detalles m\u00e1s complejos en su modo de trabajar. Realmente, este tipo de posicionamiento coloca los elementos utilizando como punto de origen el primer contenedor con posicionamiento diferente a est\u00e1tico . Por ejemplo, si el contenedor padre tiene posicionamiento est\u00e1tico, pasamos a mirar el posicionamiento del padre del contenedor padre, y as\u00ed sucesivamente hasta encontrar un contenedor con posicionamiento no est\u00e1tico o llegar a la etiqueta <body> , en el caso que se comportar\u00eda como el ejemplo anterior. Posicionamiento fijo \u00b6 Por \u00faltimo, el posicionamiento fijo es hermano del posicionamiento absoluto . Funciona exactamente igual, salvo que hace que el elemento se muestre en una posici\u00f3n fija dependiendo de la regi\u00f3n visual del navegador . Es decir, aunque el usuario haga scroll y se desplace hacia abajo en la p\u00e1gina web, el elemento seguir\u00e1 en el mismo sitio posicionado. Ejemplo : Si establecemos top:0 y right:0 , el elemento se colocar\u00e1 justo en la esquina superior derecha y se mantendr\u00e1 ah\u00ed aunque hagamos scroll hacia abajo en la p\u00e1gina. Otros posicionamientos \u00b6 Existen otros valores de position como sticky , page o center , sin embargo, su soporte e implementaci\u00f3n a\u00fan es muy temprana y no se sabe si su funcionalidad terminar\u00e1 ofreci\u00e9ndose desde los diferentes navegadores. Profundidad (niveles) \u00b6 Es interesante conocer tambi\u00e9n la existencia de la propiedad z-index , que establece el nivel de profundidad en el que est\u00e1 un elemento sobre los dem\u00e1s. De esta forma, podemos hacer que un elemento se coloque encima o debajo de otro. Su funcionamiento es muy sencillo, s\u00f3lo hay que indicar un n\u00famero que representar\u00e1 el nivel de profundidad del elemento. Los elementos un n\u00famero m\u00e1s alto estar\u00e1n por encima de otros con un n\u00famero m\u00e1s bajo, que permanecer\u00e1n ocultos detr\u00e1s de los primeros. Nota : Los niveles z-index , as\u00ed como las propiedades top , left , bottom y right no funcionan con elementos que est\u00e9n utilizando posicionamiento est\u00e1tico. Deben tener un tipo de posicionamiento diferente a est\u00e1tico. Desplazamientos \u00b6 Es posible que en alg\u00fan momento necesitemos algo m\u00e1s de control sobre nuestra p\u00e1gina y realizar cambios en determinados elementos. Existe una propiedad denominada float que tiene un funcionamiento peculiar con el que cambiamos el flujo de ordenaci\u00f3n de elementos. Con float podemos conseguir que un elemento < > a la izquierda o a la derecha de otro elemento. Para ello podemos utilizar las siguientes propiedades: Propiedad Valor Significado float none left clear none left Elementos flotantes \u00b6 Con la propiedad float puedes conseguir que los elementos que quieras, alteren su comportamiento y floten a la izquierda ( left ) o a la derecha ( right ). Con el valor none ( valor por defecto ) eliminas esta caracter\u00edstica de desplazamiento. Imaginemos que tenemos un p\u00e1rrafo de texto, seguido de una lista, seguida de otro p\u00e1rrafo de texto: ul { background : grey ; } li { background : blue ; width : 100 px ; padding : 8 px ; margin : 8 px ; color : white ; } ul , li { float : left ; } Con esto conseguimos que los \u00edtems de la lista floten uno a continuaci\u00f3n de otro. No obstante, para conseguir este comportamiento siempre recomiendo utilizar display en lugar de float . Cambiando la representaci\u00f3n de elementos se suele conseguir una soluci\u00f3n m\u00e1s limpia y organizada. Limpiar flujo flotante \u00b6 Por otro lado, la propiedad clear se encarga de impedir elementos flotantes en la zona indicada, a la izquierda del elemento ( left ), a la derecha ( right ) o en ambos lados ( both ). En el ejemplo anterior, el segundo p\u00e1rrafo de texto aparecer\u00eda a continuaci\u00f3n de la lista, cuando probablemente, nuestra intenci\u00f3n es que apareciera en la parte inferior. Se podr\u00eda solucionar simplemente a\u00f1adiendo el siguiente texto: p { clear : both } OJO : La propiedad float es una propiedad que podr\u00eda ser interesante en determinadas condiciones, sin embargo, el c\u00f3digo resultante suele ser m\u00e1s sucio y complejo de lo que ser\u00eda mediante otros m\u00e9todos actuales, por lo que se recomienda s\u00f3lo utilizarlo por razones de retrocompatibilidad y darle preferencia a m\u00e9todos como Flexbox o Grid CSS . Flexbox CSS \u00b6 Tradicionalmente, en CSS se ha utilizado el posicionamiento ( static, relative, absolute... ), los elementos en l\u00ednea o en bloque ( y derivados ) o los float , lo que a grandes rasgos no dejaba de ser un sistema de creaci\u00f3n de dise\u00f1os bastante tradicional que no encaja con los retos que tenemos hoy en d\u00eda: sistemas de escritorio, dispositivos m\u00f3viles, m\u00faltiples resoluciones, etc... Flexbox es un sistema de elementos flexibles que llega con la idea de olvidar estos mecanismos y acostumbrarnos a una mec\u00e1nica m\u00e1s potente, limpia y personalizable, en la que los elementos HTML se adaptan y colocan autom\u00e1ticamente y es m\u00e1s f\u00e1cil personalizar los dise\u00f1os. Est\u00e1 especialmente dise\u00f1ado para crear, mediante CSS, estructuras de una s\u00f3la dimensi\u00f3n . Conceptos \u00b6 Para empezar a utilizar flexbox lo primero que debemos hacer es conocer algunos de los elementos b\u00e1sicos de este nuevo esquema, que son los siguientes: * Contenedor : Existe un elemento padre que es el contenedor que tendr\u00e1 en su interior cada uno de los \u00edtems flexibles y adaptables. Eje principal : Los contenedores flexibles tendr\u00e1n una orientaci\u00f3n principal espec\u00edfica. Por defecto, es en horizontal ( fila ). Eje secundario : De la misma forma, los contenedores flexibles tendr\u00e1n una orientaci\u00f3n secundaria, perpendicular a la principal. Si la principal es en horizontal, la secundaria ser\u00e1 en vertical, y viceversa. * \u00cdtem : Cada uno de los hijos flexibles que tendr\u00e1 el contenedor en su interior. Imaginemos el siguiente escenario: < div id = \"contenedor\" > <!-- contenedor flex --> < div class = \"item item-1\" > 1 </ div > <!-- cada uno de los \u00edtems flexibles --> < div class = \"item item-2\" > 2 </ div > < div class = \"item item-3\" > 3 </ div > </ div > Para activar el modo flexbox hay que utilizar sobre el elemento contenedor la propiedad display que vimos en un cap\u00edtulo previo, y especificar el valor flex o inline-flex dependiendo de como queramos que se comporte el contenedor: si como un elemento en l\u00ednea, o como un elemento en bloque. Tipo de elemento Descripci\u00f3n inline-flex Establece un contenedor de \u00edtems flexible en l\u00ednea, de forma equivalente a inline-block. flex Establece un contenedor de \u00edtems flexible en bloque, de forma equivalente a block. Por defecto, y s\u00f3lo con esto, observaremos que los elementos se disponen todos sobre una misma l\u00ednea. Esto ocurre porque estamos utilizando el modo flexbox y estaremos trabajando con \u00edtems flexibles b\u00e1sicos, garantizando que no se desbordar\u00e1n ni mostrar\u00e1n los problemas que, por ejemplo, tienen los porcentajes sobre elementos que no utilizan flexbox. Direcci\u00f3n de los ejes \u00b6 Existen dos propiedades principales para manipular la direcci\u00f3n y comportamiento de los \u00edtems a lo largo del eje principal del contenedor. Son las siguientes: Propiedad Valor Significado flex-direction row row-reverse flex-wrap nowrap wrap Mediante la propiedad flex-direction podemos modificar la direcci\u00f3n del eje principal del contenedor para que se oriente en horizontal ( por defecto ) o en vertical. Adem\u00e1s, tambi\u00e9n podemos incluir el sufijo -reverse para indicar que coloque los \u00edtems en orden inverso. Valor Descripci\u00f3n row Establece la direcci\u00f3n del eje principal en horizontal. row-reverse Establece la direcci\u00f3n del eje principal en horizontal (invertido). column Establece la direcci\u00f3n del eje principal en vertical. column-reverse Establece la direcci\u00f3n del eje principal en vertical (invertido). Esto nos permite tener un control muy alto sobre el orden de los elementos en una p\u00e1gina. Veamos la aplicaci\u00f3n de estas propiedades sobre el ejemplo anterior, para modificar el flujo del eje principal del contenedor: # contenedor { background : #CCC ; display : flex ; flex-direction : column ; } . item { background : #777 ; } Por otro lado, existe otra propiedad llamada flex-wrap con la que podemos especificar el comportamiento del contenedor respecto a evitar que se desborde ( nowrap, valor por defecto ) o permitir que lo haga, en cuyo caso, estar\u00edamos hablando de un contenedor flexbox multilinea . Valor Descripci\u00f3n nowrap Establece los \u00edtems en una sola l\u00ednea (no permite que se desborde el contenedor). wrap Establece los \u00edtems en modo multil\u00ednea (permite que se desborde el contenedor). wrap-reverse Establece los \u00edtems en modo multil\u00ednea, pero en direcci\u00f3n inversa. Teniendo en cuenta estos valores de la propiedad flex-wrap , podemos conseguir cosas como la siguiente: # contenedor { background : #CCC ; display : flex ; width : 200 px ; flex-wrap : wrap ; /* Comportamiento por defecto: nowrap */ } . item { background : #777 ; width : 50 % ; } En el caso de especificar nowrap ( u omitir la propiedad flex-wrap ) en el contenedor, los 3 \u00edtems se mostrar\u00edan en una misma l\u00ednea del contenedor. En ese caso, cada \u00edtem deber\u00eda tener un 50% de ancho ( o sea, 100px de los 200px del contenedor ). Un tama\u00f1o de 100px por \u00edtem, sumar\u00eda un total de 300px , que no cabr\u00edan en el contenedor de 200px , por lo que flexbox reajusta los \u00edtems flexibles para que quepan todos en la misma l\u00ednea, manteniendo las mismas proporciones. Sin embargo, si especificamos wrap en la propiedad flex-wrap , lo que permitimos es que el contenedor se pueda desbordar, pasando a ser un contenedor multil\u00ednea , que mostrar\u00eda el \u00edtem 1 y 2 en la primera linea ( con un tama\u00f1o de 100px cada uno ) y el \u00edtem 3 en la l\u00ednea siguiente, dejando un espacio libre para un posible \u00edtem 4 . Atajo: Direcci\u00f3n de los ejes \u00b6 Recuerda que existe una propiedad de atajo (short-hand) llamada flex-flow , con la que podemos resumir los valores de las propiedades flex-direction y flex-wrap , especific\u00e1ndolas en una sola propiedad y ahorr\u00e1ndonos utilizar las propiedades concretas: # contenedor { /* flex-flow: <flex-direction> <flex-wrap>; */ flex-flow : row wrap ; } Propiedades de alineaci\u00f3n \u00b6 Ahora que tenemos un control b\u00e1sico del contenedor de estos \u00edtems flexibles, necesitamos conocer las propiedades existentes dentro de flexbox para disponer los \u00edtems dependiendo de nuestro objetivo. Vamos a echar un vistazo a cuatro propiedades interesantes para ello: Propiedad Valor Act\u00faa sobre justify-content flex-start flex-end align-content flex-start flex-end align-items flex-start flex-end align-self auto flex-start De esta peque\u00f1a lista, hay que centrarse en primer lugar en la primera y la tercera propiedad, que son las m\u00e1s importantes ( las otras dos son casos particulares que explicaremos m\u00e1s adelante ): justify-content : Se utiliza para alinear los \u00edtems del eje principal ( por defecto, el horizontal ). align-items : Usada para alinear los \u00edtems del eje secundario ( por defecto, el vertical ). Sobre el eje principal \u00b6 La primera propiedad, justify-content , sirve para colocar los \u00edtems de un contenedor mediante una disposici\u00f3n concreta a lo largo del eje principal : Valor Descripci\u00f3n flex-start Agrupa los \u00edtems al principio del eje principal. flex-end Agrupa los \u00edtems al final del eje principal. center Agrupa los \u00edtems al centro del eje principal. space-between Distribuye los \u00edtems dejando (el mismo) espacio entre ellos. space-around Distribuye los \u00edtems dejando (el mismo) espacio a ambos lados de cada uno de ellos. Con cada uno de estos valores, modificaremos la disposici\u00f3n de los \u00edtems del contenedor donde se aplica, pasando a colocarse como se ve en la imagen siguiente ( n\u00f3tense las diferentes tonalidades azules para indicar las posiciones de cada \u00edtem ): Una vez entendido este caso, debemos atender a la propiedad align-content , que es un caso particular del anterior. Nos servir\u00e1 cuando estemos tratando con un contenedor flex multilinea, que es un contenedor en el que los \u00edtems no caben en el ancho disponible, y por lo tanto, el eje principal se divide en m\u00faltiples l\u00edneas. De esta forma, align-content servir\u00e1 para alinear cada una de las l\u00edneas del contenedor multilinea. Los valores que puede tomar son los siguientes: Valor Descripci\u00f3n flex-start Agrupa los \u00edtems al principio del eje principal. flex-end Agrupa los \u00edtems al final del eje principal. center Agrupa los \u00edtems al centro del eje principal. space-between Distribuye los \u00edtems desde el inicio hasta el final. space-around Distribuye los \u00edtems dejando el mismo espacio a los lados de cada uno. stretch Estira los \u00edtems para ocupar de forma equitativa todo el espacio. Con estos valores, vemos como cambiamos la disposici\u00f3n en vertical ( porque partimos de un ejemplo en el que estamos utilizando flex-direction: row, y el eje principal es horizontal ) de los \u00edtems que est\u00e1n dentro de un contenedor multilinea. En el ejemplo siguiente, veremos que al indicar un contenedor de 200 p\u00edxels de alto con \u00edtems de 50px de alto y un flex-wrap establecido para tener contenedores multilinea, podemos utilizar la propiedad align-content para alinear los \u00edtems de forma vertical de modo que se queden en la zona inferior del contenedor: # contenedor { background : #CCC ; display : flex ; width : 200 px ; height : 200 px ; flex-wrap : wrap ; align-content : flex-end ; } . item { background : #777 ; width : 50 % ; height : 50 px ; } Sobre el eje secundario \u00b6 La otra propiedad importante de este apartado es align-items , que se encarga de alinear los \u00edtems en el eje secundario del contenedor. Hay que tener cuidado de no confundir align-content con align-items , puesto que el primero act\u00faa sobre cada una de las l\u00edneas de un contenedor multilinea ( no tiene efecto sobre contenedores de una sola l\u00ednea ), mientras que align-items lo hace sobre la l\u00ednea actual. Los valores que puede tomar son los siguientes: Valor Descripci\u00f3n flex-start Alinea los \u00edtems al principio del eje secundario. flex-end Alinea los \u00edtems al final del eje secundario. center Alinea los \u00edtems al centro del eje secundario. stretch Alinea los \u00edtems estir\u00e1ndolos de modo que cubran desde el inicio hasta el final del contenedor. baseline Alinea los \u00edtems en el contenedor seg\u00fan la base del contenido de los \u00edtems del contenedor. Por otro lado, la propiedad align-self act\u00faa exactamente igual que align-items , sin embargo es la primera propiedad de flexbox que vemos que se utiliza sobre un \u00edtem hijo espec\u00edfico y no sobre el elemento contenedor. Salvo por este detalle, funciona exactamente igual que align-items . Gracias a ese detalle, align-self nos permite cambiar el comportamiento de align-items y sobreescribirlo con comportamientos espec\u00edficos para \u00edtems concretos que no queremos que se comporten igual que el resto. La propiedad puede tomar los siguientes valores: Valor Descripci\u00f3n flex-start Alinea los \u00edtems al principio del contenedor. flex-end Alinea los \u00edtems al final del contenedor. center Alinea los \u00edtems al centro del contenedor. stretch Alinea los \u00edtems estir\u00e1ndolos al tama\u00f1o del contenedor. baseline Alinea los \u00edtems en el contenedor seg\u00fan la base de los \u00edtems. auto Hereda el valor de align-items del padre (o si no lo tiene, stretch ). Si se especifica el valor auto a la propiedad align-self , el navegador le asigna el valor de la propiedad align-items del contenedor padre, y en caso de no existir, el valor por defecto: stretch . Atajo: Alineaciones \u00b6 Existe una propiedad de atajo con la que se pueden establecer los valores de align-content y de justify-content de una sola vez, denominada place-content : # contenedor { display : flex ; place-content : flex-start flex-end ; /* Equivalente a... */ align-content : flex-start ; justify-content : flex-end ; } Propiedades de hijos \u00b6 A excepci\u00f3n de la propiedad align-self , todas las propiedades que hemos visto hasta ahora se aplican sobre el elemento contenedor . Las siguientes propiedades, sin embargo, se aplican sobre los \u00edtems hijos. Echemos un vistazo: Propiedad Valor Descripci\u00f3n flex-grow 0 flex-shrink 1 flex-basis content order 0 En primer lugar, tenemos la propiedad flex-grow para indicar el factor de crecimiento de los \u00edtems en el caso de que no tengan un ancho espec\u00edfico. Por ejemplo, si con flex-grow indicamos un valor de 1 a todos sus \u00edtems, tendr\u00edan el mismo tama\u00f1o cada uno de ellos. Pero si colocamos un valor de 1 a todos los elementos, salvo a uno de ellos, que le indicamos 2 , ese \u00edtem ser\u00e1 m\u00e1s grande que los anteriores. Los \u00edtems a los que no se le especifique ning\u00fan valor, tendr\u00e1n por defecto valor de 0 . En segundo lugar, tenemos la propiedad flex-shrink que es la opuesta a flex-grow . Mientras que la anterior indica un factor de crecimiento, flex-shrink hace justo lo contrario, aplica un factor de decrecimiento. De esta forma, los \u00edtems que tengan un valor num\u00e9rico m\u00e1s grande, ser\u00e1n m\u00e1s peque\u00f1os, mientras que los que tengan un valor num\u00e9rico m\u00e1s peque\u00f1o ser\u00e1n m\u00e1s grandes, justo al contrario de como funciona la propiedad flex-grow . Por \u00faltimo, tenemos la propiedad flex-basis , que define el tama\u00f1o por defecto ( de base ) que tendr\u00e1n los \u00edtems antes de aplicarle la distribuci\u00f3n de espacio. Generalmente, se aplica un tama\u00f1o ( unidades, porcentajes, etc... ), pero tambi\u00e9n se puede aplicar la palabra clave content que ajusta autom\u00e1ticamente el tama\u00f1o al contenido del \u00edtem, que es su valor por defecto. Atajo: Propiedades de hijos \u00b6 Existe una propiedad llamada flex que sirve de atajo para estas tres propiedades de los \u00edtems hijos. Funciona de la siguiente forma: . item { /* flex: <flex-grow> <flex-shrink> <flex-basis> */ flex : 1 3 35 % ; } Huecos (gaps) \u00b6 Existen dos propiedades de flexbox que han surgido recientemente: row-gap y column-gap . Dichas propiedades, permiten establecer el tama\u00f1o de un < > entre \u00edtems desde el elemento padre contenedor, y sin necesidad de estar utilizando padding o margin en los elementos hijos. Propiedad Valor Descripci\u00f3n row-gap normal column-gap normal Ten en cuenta que s\u00f3lo una de las dos propiedades tendr\u00e1 efecto, dependiendo de si la propiedad flex-direction est\u00e1 establecida en column o en row . Eso s\u00ed, es posible usar ambas si tenemos la propiedad flex-wrap definida a wrap y, por lo tanto, disponemos de multicolumnas flexbox. Atajo: Huecos \u00b6 En el caso de que queramos utilizar una propiedad de atajo para los huecos, podemos utilizar la propiedad gap . Eso s\u00ed, ten en cuenta que estas propiedades de huecos en flexbox, a\u00fan no tienen un soporte demasiado extendido entre navegadores: # contenedor { /* gap: <row> <column> */ gap : 4 px 8 px ; /* 1 par\u00e1metro: usa el mismo para ambos */ gap : 4 px ; } Orden de los \u00edtems \u00b6 Por \u00faltimo, y quiz\u00e1s una de las propiedades m\u00e1s interesantes, es order , que modificar y establece el orden de los \u00edtems seg\u00fan una secuencia num\u00e9rica. Por defecto, todos los \u00edtems flex tienen un order: 0 impl\u00edcito, aunque no se especifique. Si indicamos un order con un valor num\u00e9rico, ir\u00e1 recolocando los \u00edtems seg\u00fan su n\u00famero, colocando antes los \u00edtems con n\u00famero m\u00e1s peque\u00f1o ( incluso valores negativos ) y despu\u00e9s los \u00edtems con n\u00fameros m\u00e1s altos. De esta forma podemos recolocar f\u00e1cilmente los \u00edtems incluso utilizando media queries o responsive design. Grid CSS (Cuadr\u00edculas) \u00b6 Uno de los procesos m\u00e1s problematicos y frustrantes de CSS, sobre todo para novatos o principiantes, es el proceso de colocar y distribuir los elementos a lo largo de una p\u00e1gina. Mecanismos como posicionamiento, floats o elementos en bloque o en l\u00ednea, suelen ser insuficientes ( o muy complejos ) para crear un layout o estructuras para p\u00e1ginas web actuales. El sistema flexbox es una gran mejora, sin embargo, est\u00e1 orientado a estructuras de una sola dimensi\u00f3n, por lo que a\u00fan necesitamos algo m\u00e1s potente para estructuras web m\u00e1s espec\u00edficas o complejas. Con el paso del tiempo, muchos frameworks y librer\u00edas utilizan un sistema grid donde definen una cuadr\u00edcula determinada, y modificando los nombres de las clases de los elementos HTML, podemos darle tama\u00f1o, posici\u00f3n o colocaci\u00f3n. Grid CSS nace de esa necesidad, y recoge las ventajas de ese sistema, a\u00f1adiendole numerosas mejoras y caracter\u00edsticas que permiten crear r\u00e1pidamente cuadr\u00edculas sencillas y potentes de forma pr\u00e1cticamente instant\u00e1nea. Conceptos \u00b6 Antes de comenzar con Grid CSS , quiz\u00e1s ser\u00eda conveniente dominar el sistema Flexbox , ya que Grid toma la filosof\u00eda y bases de \u00e9l. Para utilizar Grid CSS necesitaremos tener en cuenta una serie de conceptos que utilizaremos a partir de ahora y que definiremos a continuaci\u00f3n: Contenedor : El elemento padre contenedor que definir\u00e1 la cuadr\u00edcula o rejilla. \u00cdtem : Cada uno de los hijos que contiene la cuadr\u00edcula ( elemento contenedor ). Celda (grid cell) : Cada uno de los cuadritos ( unidad m\u00ednima ) de la cuadr\u00edcula. Area (grid area) : Regi\u00f3n o conjunto de celdas de la cuadr\u00edcula. Banda (grid track) : Banda horizontal o vertical de celdas de la cuadr\u00edcula. L\u00ednea (grid line) : Separador horizontal o vertical de las celdas de la cuadr\u00edcula. Para utilizar cuadriculas Grid CSS , trabajaremos bajo el siguiente escenario: < div class = \"grid\" > <!-- contenedor --> < div class = \"a\" > Item 1 </ div > <!-- cada uno de los \u00edtems del grid --> < div class = \"b\" > Item 2 </ div > < div class = \"c\" > Item 3 </ div > < div class = \"d\" > Item 4 </ div > </ div > Para activar la cuadr\u00edcula grid hay que utilizar sobre el elemento contenedor la propiedad display y especificar el valor grid o inline-grid . Este valor influye en como se comportar\u00e1 la cuadr\u00edcula con el contenido exterior. El primero de ellos permite que la cuadr\u00edcula aparezca encima/debajo del contenido exterior ( en bloque ) y el segundo de ellos permite que la cuadr\u00edcula aparezca a la izquierda/derecha ( en l\u00ednea ) del contenido exterior. Tipo de elemento Descripci\u00f3n inline-grid Establece una cuadr\u00edcula con \u00edtems en l\u00ednea, de forma equivalente a inline-block. grid Establece una cuadr\u00edcula con \u00edtems en bloque, de forma equivalente a block. Una vez elegido uno de estos dos valores, y establecida la propiedad display al elemento contenedor, hay varias formas de configurar nuestra cuadr\u00edcula grid. Comencemos con las propiedades que se aplican al elemento contenedor ( padre ). Grid con filas y columnas \u00b6 Es posible crear cuadr\u00edculas con un tama\u00f1o expl\u00edcito. Para ello, s\u00f3lo tenemos que usar las propiedades CSS grid-template-columns y grid-template-rows , que sirven para indicar las dimensiones de cada celda de la cuadr\u00edcula, diferenciando entre columnas y filas. Las propiedades son las siguientes: Propiedad Valor Descripci\u00f3n grid-template-columns [ c1 ] [ c2 ] ... Establece el de cada columna ( col 1, col 2... ). grid-template-rows [ f1 ] [ f2 ] ... Establece el de cada fila ( fila 1, fila 2... ). Conociendo estas dos propiedades, asumamos el siguiente c\u00f3digo CSS: . grid { display : grid ; grid-template-columns : 50 px 300 px ; grid-template-rows : 200 px 75 px ; } Esto significa que tendremos una cuadricula con 2 columnas ( la primera con 50px de ancho y la segunda con 300px de ancho ) y con 2 filas ( la primera con 200px de alto y la segunda con 75px de alto ). Ahora, dependiendo del n\u00famero de \u00edtems ( elementos hijos ) que tenga el contenedor grid , tendremos una cuadr\u00edcula de 2x2 elementos ( 4 \u00edtems ), 2x3 elementos ( 6 \u00edtems ), 2x4 elementos ( 8 \u00edtems ) y as\u00ed sucesivamente. Si el n\u00famero de \u00edtems es impar, la \u00faltima celda de la cuadr\u00edcula se quedar\u00e1 vac\u00eda. Unidad fracci\u00f3n restante (fr) \u00b6 En el ejemplo anterior he utilizado p\u00edxels como unidades de las celdas de la cuadr\u00edcula, sin embargo, tambi\u00e9n podemos utilizar otras unidades ( o incluso combinarlas ) como porcentajes, la palabra clave auto ( que obtiene el tama\u00f1o restante ) o la unidad especial de Grid CSS fr ( fraction ), que simboliza una fracci\u00f3n de espacio restante en el grid . Veamos un c\u00f3digo de ejemplo en acci\u00f3n: . grid { display : grid ; grid-template-columns : 1 fr 1 fr ; grid-template-rows : 2 fr 1 fr ; } Este nuevo ejemplo, se crea una cuadr\u00edcula de 2x2, donde el tama\u00f1o de ancho de la cuadr\u00edcula se divide en dos columnas ( mismo tama\u00f1o de ancho para cada una ), y el tama\u00f1o de alto de la cuadr\u00edcula se divide en dos filas , donde la primera ocupar\u00e1 el doble ( 2 fr ) que la segunda ( 1 fr ): De esta forma, podemos tener un mejor control del espacio restante de la cuadr\u00edcula, y como utilizarlo. Nota : Se pueden combinar varias unidades diferentes, pudiendo utilizar p\u00edxeles ( px ) y fracciones restantes ( fr ), porcentajes ( % ) y fracciones restantes ( fr ) o combinaci\u00f3nes similares. Filas y columnas repetitivas \u00b6 En algunos casos, en las propiedades grid-template-columns y grid-template-rows podemos necesitar indicar las mismas cantidades un n\u00famero alto de veces, resultando repetitivo y molesto. Se puede utilizar la expresi\u00f3n repeat() para indicar repetici\u00f3n de valores, indicando el n\u00famero de veces que se repiten y el tama\u00f1o en cuesti\u00f3n. La expresi\u00f3n a utilizar ser\u00eda la siguiente: repeat([n&#xFA;m de veces], [valor o valores]) : . grid { display : grid ; grid-template-columns : 100 px repeat ( 2 , 50 px ) 200 px ; grid-template-rows : repeat ( 2 , 50 px 100 px ); } Asumiendo que tuvieramos un contenedor grid con 8 \u00edtems hijos ( o m\u00e1s ), el ejemplo anterior crear\u00eda una cuadr\u00edcula con 4 columnas ( la primera de 100px de ancho, la segunda y tercera de 50px de ancho y la cuarta de 200px de ancho ). Por otro lado, tendr\u00eda 2 filas ( la primera de 50px de alto, y la segunda de 100px de alto ). En el caso de tener m\u00e1s \u00edtems hijos, el patr\u00f3n se seguir\u00eda repitiendo. El ejemplo anterior ser\u00eda equivalente al c\u00f3digo CSS siguiente: . grid { display : grid ; grid-template-columns : 100 px 50 px 50 px 200 px ; grid-template-rows : 50 px 100 px 50 px 100 px ;; } Grid con l\u00edneas nombradas \u00b6 Con Grid CSS tambi\u00e9n tenemos la posibilidad de usar << linenames >>, o lo que es lo mismo, ponerle nombre a las l\u00edneas de nuestro sistema grid. Vamos a verlo con un ejemplo, donde probablemente se vea mucho mejor. Partamos de esta estructura HTML: < div class = \"grid\" > < div class = \"header\" > Header </ div > < div class = \"sidebar\" > Sidebar </ div > < div class = \"content\" > Content </ div > < div class = \"footer\" > Footer </ div > </ div > Los nombres de las clases ya dan una idea del contenido que tendr\u00e1n. Ahora, mediante Grid CSS lo que haremos es darle una estructura definida. Para ello, vamos a considerar los siguientes nombres para las lineas de nuestro grid, utilizando X para las posiciones en el eje X y utilizando Y para las posiciones en el eje Y : Teniendo esto en cuenta, lo \u00fanico que tenemos que hacer es indicar estos nombres entre corchetes, justo antes de la medida que establecimos como vimos en apartados anteriores. Obs\u00e9rvese que tambi\u00e9n se coloca una nombre de l\u00ednea final sin medida a continuaci\u00f3n, que representa la l\u00ednea final: . grid { display : grid ; grid-template-columns : [ x0 ] 1 fr [ x1 ] 1 fr [ x2 ] 1 fr [ x3 ]; grid-template-rows : [ y0 ] 1 fr [ y1 ] 1 fr [ y2 ] 1 fr [ y3 ]; } En este caso, los nombres utilizados son tan s\u00f3lo un ejemplo did\u00e1ctico. Si se considera m\u00e1s adecuado, se podr\u00edan utilizar otros nombres quiz\u00e1s m\u00e1s amigables como top-line , top-medium-line , bottom-medium-line y bottom-line , por ejemplo, en lugar de y0 , y1 , y2 y y3 respectivamente. Ahora, teniendo los nombres, s\u00f3lo quedar\u00eda delimitar que zonas del grid queremos que ocupe cada uno de nuestros bloques <div> del grid. Para ello utilizaremos las propiedades grid-column-start , grid-column-end y grid-row-start , grid-row-end . Tambi\u00e9n podriamos utilizar sus propiedades de atajo grid-column y grid-row . . header { background : darkred ; grid-column-start : x0 ; grid-column-end : x3 ; /* Equivalente a */ grid-column : x0 / x3 ; } . sidebar { background : black ; grid-row : y1 / y2 ; color : white ; } . content { background : orange ; grid-column : x1 / x3 ; grid-row : y1 / y3 ; } . footer { background : green ; grid-column : x0 / x3 ; grid-row : y2 ; } Hemos aplicado la siguiente estructura: Zona .header desde la columna x0 a x3 . Zona .sidebar desde la fila y1 a y2 . Zona .content desde la columna x1 a x3 y desde la fila y1 a y3 . Zona .footer desde la columna x0 a x3 en la fila y2 . Por lo que nuestra estructura grid quedar\u00eda as\u00ed: Un poco m\u00e1s adelante veremos m\u00e1s detalladamente estas \u00faltimas propiedades. Nota: Ten en cuenta que ser\u00eda necesario darle un tama\u00f1o de alto con height al contenedor padre para que el navegador sepa cuanto ocupar\u00e1 la estructura completa. Tambi\u00e9n podemos modificar las medidas 1fr para dar menos proporci\u00f3n, por ejemplo utilizando en grid-template-rows un [y0] 0.5fr y un [y2] 0.25fr . Grid por \u00e1reas \u00b6 Mediante los grids CSS es posible indicar el nombre y posici\u00f3n concreta de cada \u00e1rea de una cuadr\u00edcula. Para ello utilizaremos la propiedad grid-template-areas , donde debemos especificar el orden de las \u00e1reas en la cuadr\u00edcula. Posteriormente, en cada \u00edtem hijo, utilizamos la propiedad grid-area para indicar el nombre del \u00e1rea del que se trata: Propiedad Descripci\u00f3n grid-template-areas Indica la disposici\u00f3n de las \u00e1reas en el grid. Cada texto entre comillas simboliza una fila. grid-area Indica el nombre del \u00e1rea. Se usa sobre \u00edtems hijos del grid. De esta forma, es muy sencillo crear una cuadr\u00edcula altamente personalizada en apenas unas cuantas l\u00edneas de CSS, con mucha flexibilidad en la disposici\u00f3n y posici\u00f3n de cada \u00e1rea: . grid { display : grid ; grid-template-areas : \"head head\" \"menu main\" \"foot foot\" ; } . a { grid-area : head ; background : blue } . b { grid-area : menu ; background : red } . c { grid-area : main ; background : green } . d { grid-area : foot ; background : orange } Aplicando este c\u00f3digo, conseguir\u00edamos una cuadr\u00edcula donde: El Item 1 , la cabecera ( head ), ocupar\u00eda toda la parte superior. El Item 2 , el men\u00fa ( menu ), ocupar\u00eda el \u00e1rea izquierda del grid, debajo de la cabecera. El Item 3 , el contenido ( main ), ocupar\u00eda el \u00e1rea derecha del grid, debajo de la cabecera. El Item 4 , el pie de cuadr\u00edcula ( foot ), ocupar\u00eda toda la zona inferior del grid. OJO : Ten en cuenta a\u00f1adir contenido de texto en cada celda del grid, para que Grid CSS detecte que esa celda no est\u00e1 vac\u00eda. En la propiedad grid-template-areas , en lugar de indicar el nombre del \u00e1rea a colocar, tambi\u00e9n podemos indicar una palabra clave especial: La palabra clave none : Indica que no se colocar\u00e1 ninguna celda en esta posici\u00f3n. Uno o m\u00e1s puntos ( . ): Indica que se colocar\u00e1 una celda vac\u00eda en esta posici\u00f3n. Huecos en grid \u00b6 Por defecto, la cuadr\u00edcula tiene todas sus celdas pegadas a sus celdas contiguas. Aunque ser\u00eda posible darle un margin a las celdas dentro del contenedor, existe una forma m\u00e1s apropiada, que evita los problemas cl\u00e1sicos de los modelos de caja: los huecos ( gutters ). Para especificar los huecos ( espacio entre celdas ) podemos utilizar las propiedades grid-column-gap y/o grid-row-gap . En ellas indicaremos el tama\u00f1o de dichos huecos: Propiedad Descripci\u00f3n grid-column-gap Establece el de los huecos entre columnas ( l\u00edneas verticales ). grid-row-gap Establece el de los huecos entre filas ( l\u00edneas horizontales ). Tomemos el ejemplo anterior como base. En \u00e9l, le indicamos estas propiedades para colocar huecos entre las celdas de la cuadr\u00edcula. El c\u00f3digo a a\u00f1adir al ejemplo anterior ser\u00eda el siguiente: . grid { grid-column-gap : 100 px ; grid-row-gap : 10 px ; } Con esto, obtendr\u00edamos un resultado como el siguiente, indicando huecos entre columnas de 100px y huecos entre filas de 10px: Atajo: Grid con huecos \u00b6 Existe una propiedad de atajo para las propiedades grid-column-gap y grid-row-gap , permiti\u00e9ndonos la posibilidad de no tener que indicarlas por separado. La propiedad en cuesti\u00f3n ser\u00eda grid-gap y se utilizar\u00eda de la siguiente forma: . grid { /* grid-gap: <row-gap> <column-gap> */ grid-gap : 20 px 80 px ; /* Equivalente a grid-gap: 40px 40px; */ /* grid-gap: <rowcolumn-gap> */ grid-gap : 40 px ; } Posici\u00f3n en el grid \u00b6 Existen una serie de propiedades que se pueden utilizar para colocar los \u00edtems dentro de la cuadr\u00edcula. Con ellas podemos distribuir los elementos de una forma muy sencilla y c\u00f3moda. Dichas propiedades son justify-items y align-items , que ya conocer\u00e1s del m\u00f3dulo CSS flexbox : Propiedad Valores Descripci\u00f3n justify-items start end align-items start end Estas propiedades se aplican sobre el elemento contenedor padre, pero afectan a los \u00edtems hijos, por lo que actuan sobre la distribuci\u00f3n de cada uno de los hijos. En el caso de que queramos que uno de los \u00edtems hijos tengan una distribuci\u00f3n diferente al resto, aplicamos la propiedad justify-self o align-self sobre el \u00edtem hijo en cuesti\u00f3n, sobreescribiendo su distribuci\u00f3n. Estas propiedades funcionan exactamente igual que sus an\u00e1logas justify-items o align-items , s\u00f3lo que en lugar de indicarse en el elemento padre contenedor, se hace sobre un elemento hijo. Las propiedades sobre \u00edtems hijos las veremos m\u00e1s adelante. Tambi\u00e9n podemos utilizar las propiedades justify-content o align-content para modificar la distribuci\u00f3n de todo el contenido en su conjunto, y no s\u00f3lo de los \u00edtems por separado: Propiedad Valores justify-content start align-content start De esta forma, podemos controlar pr\u00e1cticamente todos los aspectos de posicionamiento de la cuadr\u00edcula directamente desde los estilos CSS de su contenedor padre: Atajo de posiciones grid \u00b6 Si vamos a crear estructuras grid donde necesitamos utilizar las cuatro propiedades anteriores, quiz\u00e1s ser\u00eda mejor utilizar un atajo donde simplificar\u00edamos mucho el c\u00f3digo resultante. Es el caso de las siguientes propiedades: Propiedad Valores Descripci\u00f3n place-items [ align-items ] [ justify-items ] Propiedad de atajo para * -items place-content [ align-content ] [ justify-content ] Propiedad de atajo para * -content Con ellas conseguiremos que nuestro c\u00f3digo sea menos verboso. Ajuste autom\u00e1tico de celdas \u00b6 Es posible utilizar las propiedades grid-auto-columns y grid-auto-rows para darle un tama\u00f1o autom\u00e1tico a las celdas de la cuadr\u00edcula. Para ello, s\u00f3lo hay que especificar el tama\u00f1o deseado en cada una de las propiedades. Adem\u00e1s, tambi\u00e9n podemos utilizar grid-auto-flow para indicar el flujo de elementos en la cuadr\u00edcula, y especificar por donde se ir\u00e1n a\u00f1adiendo. Las propiedades son las siguientes: Propiedad Valores Descripci\u00f3n grid-auto-columns Indica el tama\u00f1o autom\u00e1tico de ancho que tendr\u00e1n las columnas. grid-auto-rows Indica el tama\u00f1o autom\u00e1tico de alto que tendr\u00e1n las filas. grid-auto-flow row column Un ejemplo de como se insertar\u00edan los elementos en una cuadr\u00edcula de 2x2 utilizando grid-auto-flow por columnas o por filas: Atajo: Grid \u00b6 Por \u00faltimo, existe una propiedad grid que sirve de atajo para la mayor\u00eda de propiedades CSS relativas a cuadr\u00edculas. Su esquema de utilizaci\u00f3n ser\u00eda el siguiente, junto a algunos ejemplos: . grid { /* grid: <grid-template> <grid-auto-flow> <grid-auto-rows> / <grid-auto-columns> */ grid : 100 px 20 px ; grid : 200 px repeat ( 2 , 100 px ) 300 px ; grid : row ; grid : column dense ; grid : row 200 px ; grid : row 400 px / 150 px ; } Propiedades para \u00edtems hijos \u00b6 Hasta ahora, salvo algunas excepciones como justify-self , align-self o grid-area , hemos visto propiedades CSS que se aplican solamente al contenedor padre de una cuadr\u00edcula. A continuaci\u00f3n, vamos a ver ciertas propiedades que en su lugar, se aplican a cada \u00edtem hijo de la cuadr\u00edcula, para alterar o cambiar el comportamiento espec\u00edfico de dicho elemento, que no se comporta como la mayor\u00eda. Algunas de las propiedades vistas hasta ahora son las siguientes: Propiedad Descripci\u00f3n justify-self Altera la justificaci\u00f3n del \u00edtem hijo en el eje horizontal. align-self Altera la alineaci\u00f3n del \u00edtem hijo en el eje vertical. grid-area Indica un nombre al \u00e1rea especificada, para su utilizaci\u00f3n con grid-template-areas . Sin embargo, existen algunas propiedades m\u00e1s, referentes en este caso, a la posici\u00f3n de los hijos de la cuadr\u00edcula donde va a comenzar o terminar una fila o columna. Las propiedades son las siguientes: Propiedad Descripci\u00f3n grid-column-start Indica en que columna empezar\u00e1 el \u00edtem de la cuadr\u00edcula. grid-column-end Indica en que columna terminar\u00e1 el \u00edtem de la cuadr\u00edcula. grid-row-start Indica en que fila empezar\u00e1 el \u00edtem de la cuadr\u00edcula. grid-row-end Indica en que fila terminar\u00e1 el \u00edtem de la cuadr\u00edcula. Con dichas propiedades, podemos indicar el siguiente c\u00f3digo CSS sobre el primer \u00edtem de una cuadr\u00edcula de 4 \u00edtems: . grid { display : grid ; } . a { grid-column-start : 1 ; grid-row-end : 2 ; } De esta forma, tenemos una cuadr\u00edcula de 4 elementos, en el que indicamos la posici\u00f3n del \u00edtem 1 ( elemento con clase .a ): comenzando en la columna 1 y acabando en el inicio de la columna 2: Ese ser\u00eda el funcionamiento normal. Donde se ve la utilidad de estas propiedades, es si variamos los valores de forma que tomen posiciones diferentes, como por ejemplo, si indicamos que el \u00edtem 1 debe comenzar en la columna 1, pero acabar en la columna 3 ( ocupando la hipot\u00e9tica primera y segunda celda ): En este nuevo ejemplo, comenzamos el primer \u00edtem en la columna 2 y lo acabamos al principio de la columna 3, por lo que la celda permanecer\u00e1 en la posici\u00f3n de la segunda columna. Adem\u00e1s, a\u00f1adimos la propiedad grid-row-start que hace lo mismo que hasta ahora, pero con las filas. En este caso, le indicamos que comience en la fila 3, por lo que el \u00edtem 1 se desplaza a una nueva fila de la cuadr\u00edcula, dejando en la anterior el \u00edtem 4 : Tambi\u00e9n es posible utilizar la palabra clave span seguida de un n\u00famero, que indica que abarque hasta esa columna o celda. Atajo: grid-column y grid-row \u00b6 El m\u00f3dulo grid de CSS proporciona las propiedades de atajo grid-column y grid-row donde se nos permite escribir en un formato abreviado las propiedades anteriores. Su sintaxis ser\u00eda la siguiente: . grid { display : grid ; } . a { /* grid-column: <grid-column-start> <grid-column-end> */ /* grid-row: <grid-row-start> <grid-row-end> */ grid-column : auto ; grid-column : 4 / 6 ; grid-column : span 3 ; grid-column : span 3 / 6 ; } La especificaci\u00f3n de Grid CSS ya tiene buen soporte en la actualidad y puede utilizarse en producci\u00f3n. Eso s\u00ed, si requieres soporte para navegadores antiguos, s\u00e9 cuidadoso. Actualmente, su soporte es el siguiente: https://caniuse.com/css-grid Fuente: Lenguaje de CSS por Manz","title":"Maquetaci\u00f3n y colocaci\u00f3n"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#maquetacion-y-colocacion","text":"","title":"Maquetaci\u00f3n y colocaci\u00f3n"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#tipos-de-elementos","text":"Una de las partes m\u00e1s complejas de CSS, probablemente, sea la colocaci\u00f3n y distribuci\u00f3n de los elementos de una p\u00e1gina. Sin embargo, suele ser dif\u00edcil porque se desconocen los detalles particulares que componen CSS. Una vez se analiza y se comprenden los detalles, todo resulta m\u00e1s f\u00e1cil. Para comenzar, hay que saber que cada etiqueta HTML tiene un tipo de representaci\u00f3n visual en un navegador, lo que habitualmente se suele denominar el tipo de caja . En principio, se parte de dos tipos b\u00e1sicos: inline y block . Valor Denominaci\u00f3n Significado Ejemplo inline Elemento en l\u00ednea El elemento se coloca en horizontal (un elemento a continuaci\u00f3n del otro). <span> block Elemento en bloque El elemento se coloca en vertical (un elemento encima de otro). <div> Obs\u00e9rvese que por defecto, todos los elementos <div> son elementos de bloque ( block ) y todos los elementos <span> son elementos en l\u00ednea ( inline ). Para entender esto facilmente, vamos a crear un HTML con 3 etiquetas <div> como las siguientes: < div > Elemento 1 </ div > < div > Elemento 2 </ div > < div > Elemento 3 </ div > A estas etiquetas HTML le vamos a aplicar el siguiente c\u00f3digo CSS: div { background : blue ; color : white ; margin : 1 px ; } Con esto observaremos que en nuestro navegador nos aparecen 3 cajas azules colocadas en vertical ( una debajo de otra ) que cubren todo el ancho disponible de la p\u00e1gina. Esto ocurre porque la etiqueta <div> es un elemento en bloque, o lo que es lo mismo, que tiene un tipo de representaci\u00f3n block por defecto. Cada etiqueta HTML tiene un tipo de representaci\u00f3n concreta. Sin embargo, este comportamiento de elementos puede cambiarse con la propiedad CSS display . Tan sencillo como a\u00f1adir display: inline en el ejemplo anterior y veremos como pasan a ser 3 cajas azules colocadas en horizontal ( una al lado de la otra ) que cubren s\u00f3lo el ancho del contenido de cada una. Ahora los <div> de esa p\u00e1gina son elementos en l\u00ednea ( el tipo de representaci\u00f3n visual que tienen los <span> ).","title":"Tipos de elementos"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#otros-tipos-de-elementos","text":"A medida que vamos cambiando el tipo de representaci\u00f3n de estos elementos, nos damos cuenta que es insuficiente para realizar tareas y vamos necesitando m\u00e1s tipos de caja. Vamos a rellenar un poco m\u00e1s la tabla, con las caracter\u00edsticas m\u00e1s importantes de las opciones que puede tomar la propiedad CSS display : Tipo de caja Caracter\u00edsticas block Se apila en vertical. Ocupa todo el ancho disponible de su etiqueta contenedora. inline Se coloca en horizontal. Se adapta al ancho de su contenido. Ignora width o height . inline-block Combinaci\u00f3n de los dos anteriores. Se comporta como inline pero no ignora width o height . flex Utiliza el modelo de cajas flexibles Flexbox . Muy \u00fatil para dise\u00f1os adaptables. inline-flex La versi\u00f3n en l\u00ednea (ocupa s\u00f3lo su contenido) del modelo de cajas flexibles flexbox. grid Utiliza cuadr\u00edculas o rejillas con el modelo de cajas Grid CSS . inline-grid La versi\u00f3n en l\u00ednea (ocupa s\u00f3lo su contenido) del modelo de cajas grid css. list-item Act\u00faa como un \u00edtem de una lista. Es el comportamiento de etiquetas como <li> . table Act\u00faa como una tabla. Es el comportamiento de etiquetas como <table> . table-cell Act\u00faa como la celda de una tabla. Es el comportamiento de etiquetas como <th> o <td> . table-row Act\u00faa como la fila de una tabla. Es el comportamiento de etiquetas como <tr> .","title":"Otros tipos de elementos"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#ocultar-elementos","text":"En la lista anterior, falta un valor de la propiedad display . Mediante la mencionada propiedad, es posible aplicar un valor none y ocultar completamente elementos que no queramos que se muestren, los cuales desaparecen por completo. Es muy \u00fatil para hacer desaparecer informaci\u00f3n cuando el usuario realiza alguna acci\u00f3n, por ejemplo. Tipo de caja Caracter\u00edsticas none Hace desaparecer visualmente el elemento, como si no existiera. No obstante, tambi\u00e9n existe una propiedad CSS llamada visibility que realiza la misma acci\u00f3n, con la ligera diferencia de que no s\u00f3lo oculta el elemento, sino que adem\u00e1s mantiene un vac\u00edo con el mismo tama\u00f1o de lo que antes estaba ah\u00ed. Dicha propiedad visibility tiene los siguientes valores posibles: Valor Significado visible El elemento es visible. Valor por defecto. hidden El elemento no es visible pero sigue ocupando su espacio y posici\u00f3n. collapse S\u00f3lo para tablas. El elemento se contrae para no ocupar espacio. Utilizar visibility:hidden es muy interesante si queremos que un elemento y su contenido se vuelva invisible, pero siga ocupando su espacio y as\u00ed evitar que los elementos adyacentes se desplacen, lo que suele ser un comportamiento no deseado en algunas ocasiones cuando se aplica display: none . Otra opci\u00f3n interesante es utilizar la propiedad opacity junto a transiciones o animaciones, desplazarse desde el valor 0 al 1 o viceversa. De esta forma conseguimos una animaci\u00f3n de aparici\u00f3n o desvanecimiento.","title":"Ocultar elementos"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#posicionamiento","text":"A grandes rasgos, y como aprendimos en temas anteriores, si tenemos varios elementos en l\u00ednea ( uno detr\u00e1s de otro ) aparecer\u00e1n colocados de izquierda hacia derecha , mientras que si son elementos en bloque se ver\u00e1n colocados desde arriba hacia abajo . Estos elementos se pueden ir combinando y anidando ( incluyendo unos dentro de otros ), construyendo as\u00ed esquemas m\u00e1s complejos. Hasta ahora, hemos estado trabajando sin saberlo en lo que se denomina posicionamiento est\u00e1tico ( static ), donde todos los elementos aparecen con un orden natural seg\u00fan donde est\u00e9n colocados en el HTML. Este es el modo por defecto en que un navegador renderiza una p\u00e1gina. Sin embargo, existen otros modos alternativos de posicionamiento, que podemos cambiar mediante la propiedad position , que nos pueden interesar para modificar la posici\u00f3n en donde aparecen los diferentes elementos y su contenido. A la propiedad position se le pueden indicar los siguientes valores: Valor Significado static Posicionamiento est\u00e1tico. Utiliza el orden natural de los elementos HTML. relative Posicionamiento relativo. Los elementos se mueven ligeramente en base a su posici\u00f3n est\u00e1tica. absolute Posicionamiento absoluto. Los elementos se colocan en base al contenedor padre. fixed Posicionamiento fijo. Idem al absoluto, pero aunque hagamos scroll no se mueve. Si utilizamos un modo de posicionamiento diferente al est\u00e1tico ( absolute, fixed o relative ), podemos utilizar una serie de propiedades para modificar la posici\u00f3n de un elemento. Estas propiedades son las siguientes: Propiedad Valor Significado top: auto bottom: auto left: auto right: auto z-index: auto Antes de pasar a explicar los tipos de posicionamiento, debemos tener claras las propiedades top , bottom , left y right , que sirven para mover un elemento desde la orientaci\u00f3n que su propio nombre indica hasta su extremo contrario. Esto es, si utilizamos left e indicamos 20px , estaremos indicando mover desde la izquierda 20 p\u00edxeles hacia la derecha . Pero pasemos a ver cada tipo de posicionamiento por separado y su comportamiento:","title":"Posicionamiento"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#posicionamiento-relativo","text":"Si utilizamos la palabra clave relative activaremos el modo de posicionamiento relativo , que es el m\u00e1s sencillo de todos. En este modo, los elementos se colocan exactamente igual que en el posicionamiento est\u00e1tico ( permanecen en la misma posici\u00f3n ), pero dependiendo del valor de las propiedades top , bottom , left o right variaremos ligeramente la posici\u00f3n del elemento. Ejemplo : Si establecemos left:40px , el elemento se colocar\u00e1 40 p\u00edxeles a la derecha desde la izquierda donde estaba colocado en principio, mientras que si especificamos right:40px , el elemento se colocar\u00e1 40 p\u00edxeles a la izquierda desde la derecha donde estaba colocado en principio.","title":"Posicionamiento relativo"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#posicionamiento-absoluto","text":"Si utilizamos la palabra clave absolute estamos indicando que el elemento pasar\u00e1 a utilizar posicionamiento absoluto , que no es m\u00e1s que utilizar el documento completo como referencia. Esto no es exactamente el funcionamiento de este modo de posicionamiento, pero nos servir\u00e1 como primer punto de partida para entenderlo. Ejemplo : Si establecemos left:40px , el elemento se colocar\u00e1 40 p\u00edxeles a la derecha del extremo izquierdo de la p\u00e1gina. Sin embargo, si indicamos right:40px , el elemento se colocar\u00e1 40 p\u00edxeles a la izquierda del extremo derecho de la p\u00e1gina. Como mencionaba anteriormente, aunque este es el funcionamiento del posicionamiento absoluto, hay algunos detalles m\u00e1s complejos en su modo de trabajar. Realmente, este tipo de posicionamiento coloca los elementos utilizando como punto de origen el primer contenedor con posicionamiento diferente a est\u00e1tico . Por ejemplo, si el contenedor padre tiene posicionamiento est\u00e1tico, pasamos a mirar el posicionamiento del padre del contenedor padre, y as\u00ed sucesivamente hasta encontrar un contenedor con posicionamiento no est\u00e1tico o llegar a la etiqueta <body> , en el caso que se comportar\u00eda como el ejemplo anterior.","title":"Posicionamiento absoluto"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#posicionamiento-fijo","text":"Por \u00faltimo, el posicionamiento fijo es hermano del posicionamiento absoluto . Funciona exactamente igual, salvo que hace que el elemento se muestre en una posici\u00f3n fija dependiendo de la regi\u00f3n visual del navegador . Es decir, aunque el usuario haga scroll y se desplace hacia abajo en la p\u00e1gina web, el elemento seguir\u00e1 en el mismo sitio posicionado. Ejemplo : Si establecemos top:0 y right:0 , el elemento se colocar\u00e1 justo en la esquina superior derecha y se mantendr\u00e1 ah\u00ed aunque hagamos scroll hacia abajo en la p\u00e1gina.","title":"Posicionamiento fijo"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#otros-posicionamientos","text":"Existen otros valores de position como sticky , page o center , sin embargo, su soporte e implementaci\u00f3n a\u00fan es muy temprana y no se sabe si su funcionalidad terminar\u00e1 ofreci\u00e9ndose desde los diferentes navegadores.","title":"Otros posicionamientos"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#profundidad-niveles","text":"Es interesante conocer tambi\u00e9n la existencia de la propiedad z-index , que establece el nivel de profundidad en el que est\u00e1 un elemento sobre los dem\u00e1s. De esta forma, podemos hacer que un elemento se coloque encima o debajo de otro. Su funcionamiento es muy sencillo, s\u00f3lo hay que indicar un n\u00famero que representar\u00e1 el nivel de profundidad del elemento. Los elementos un n\u00famero m\u00e1s alto estar\u00e1n por encima de otros con un n\u00famero m\u00e1s bajo, que permanecer\u00e1n ocultos detr\u00e1s de los primeros. Nota : Los niveles z-index , as\u00ed como las propiedades top , left , bottom y right no funcionan con elementos que est\u00e9n utilizando posicionamiento est\u00e1tico. Deben tener un tipo de posicionamiento diferente a est\u00e1tico.","title":"Profundidad (niveles)"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#desplazamientos","text":"Es posible que en alg\u00fan momento necesitemos algo m\u00e1s de control sobre nuestra p\u00e1gina y realizar cambios en determinados elementos. Existe una propiedad denominada float que tiene un funcionamiento peculiar con el que cambiamos el flujo de ordenaci\u00f3n de elementos. Con float podemos conseguir que un elemento < > a la izquierda o a la derecha de otro elemento. Para ello podemos utilizar las siguientes propiedades: Propiedad Valor Significado float none left clear none left","title":"Desplazamientos"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#elementos-flotantes","text":"Con la propiedad float puedes conseguir que los elementos que quieras, alteren su comportamiento y floten a la izquierda ( left ) o a la derecha ( right ). Con el valor none ( valor por defecto ) eliminas esta caracter\u00edstica de desplazamiento. Imaginemos que tenemos un p\u00e1rrafo de texto, seguido de una lista, seguida de otro p\u00e1rrafo de texto: ul { background : grey ; } li { background : blue ; width : 100 px ; padding : 8 px ; margin : 8 px ; color : white ; } ul , li { float : left ; } Con esto conseguimos que los \u00edtems de la lista floten uno a continuaci\u00f3n de otro. No obstante, para conseguir este comportamiento siempre recomiendo utilizar display en lugar de float . Cambiando la representaci\u00f3n de elementos se suele conseguir una soluci\u00f3n m\u00e1s limpia y organizada.","title":"Elementos flotantes"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#limpiar-flujo-flotante","text":"Por otro lado, la propiedad clear se encarga de impedir elementos flotantes en la zona indicada, a la izquierda del elemento ( left ), a la derecha ( right ) o en ambos lados ( both ). En el ejemplo anterior, el segundo p\u00e1rrafo de texto aparecer\u00eda a continuaci\u00f3n de la lista, cuando probablemente, nuestra intenci\u00f3n es que apareciera en la parte inferior. Se podr\u00eda solucionar simplemente a\u00f1adiendo el siguiente texto: p { clear : both } OJO : La propiedad float es una propiedad que podr\u00eda ser interesante en determinadas condiciones, sin embargo, el c\u00f3digo resultante suele ser m\u00e1s sucio y complejo de lo que ser\u00eda mediante otros m\u00e9todos actuales, por lo que se recomienda s\u00f3lo utilizarlo por razones de retrocompatibilidad y darle preferencia a m\u00e9todos como Flexbox o Grid CSS .","title":"Limpiar flujo flotante"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#flexbox-css","text":"Tradicionalmente, en CSS se ha utilizado el posicionamiento ( static, relative, absolute... ), los elementos en l\u00ednea o en bloque ( y derivados ) o los float , lo que a grandes rasgos no dejaba de ser un sistema de creaci\u00f3n de dise\u00f1os bastante tradicional que no encaja con los retos que tenemos hoy en d\u00eda: sistemas de escritorio, dispositivos m\u00f3viles, m\u00faltiples resoluciones, etc... Flexbox es un sistema de elementos flexibles que llega con la idea de olvidar estos mecanismos y acostumbrarnos a una mec\u00e1nica m\u00e1s potente, limpia y personalizable, en la que los elementos HTML se adaptan y colocan autom\u00e1ticamente y es m\u00e1s f\u00e1cil personalizar los dise\u00f1os. Est\u00e1 especialmente dise\u00f1ado para crear, mediante CSS, estructuras de una s\u00f3la dimensi\u00f3n .","title":"Flexbox CSS"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#conceptos","text":"Para empezar a utilizar flexbox lo primero que debemos hacer es conocer algunos de los elementos b\u00e1sicos de este nuevo esquema, que son los siguientes: * Contenedor : Existe un elemento padre que es el contenedor que tendr\u00e1 en su interior cada uno de los \u00edtems flexibles y adaptables. Eje principal : Los contenedores flexibles tendr\u00e1n una orientaci\u00f3n principal espec\u00edfica. Por defecto, es en horizontal ( fila ). Eje secundario : De la misma forma, los contenedores flexibles tendr\u00e1n una orientaci\u00f3n secundaria, perpendicular a la principal. Si la principal es en horizontal, la secundaria ser\u00e1 en vertical, y viceversa. * \u00cdtem : Cada uno de los hijos flexibles que tendr\u00e1 el contenedor en su interior. Imaginemos el siguiente escenario: < div id = \"contenedor\" > <!-- contenedor flex --> < div class = \"item item-1\" > 1 </ div > <!-- cada uno de los \u00edtems flexibles --> < div class = \"item item-2\" > 2 </ div > < div class = \"item item-3\" > 3 </ div > </ div > Para activar el modo flexbox hay que utilizar sobre el elemento contenedor la propiedad display que vimos en un cap\u00edtulo previo, y especificar el valor flex o inline-flex dependiendo de como queramos que se comporte el contenedor: si como un elemento en l\u00ednea, o como un elemento en bloque. Tipo de elemento Descripci\u00f3n inline-flex Establece un contenedor de \u00edtems flexible en l\u00ednea, de forma equivalente a inline-block. flex Establece un contenedor de \u00edtems flexible en bloque, de forma equivalente a block. Por defecto, y s\u00f3lo con esto, observaremos que los elementos se disponen todos sobre una misma l\u00ednea. Esto ocurre porque estamos utilizando el modo flexbox y estaremos trabajando con \u00edtems flexibles b\u00e1sicos, garantizando que no se desbordar\u00e1n ni mostrar\u00e1n los problemas que, por ejemplo, tienen los porcentajes sobre elementos que no utilizan flexbox.","title":"Conceptos"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#direccion-de-los-ejes","text":"Existen dos propiedades principales para manipular la direcci\u00f3n y comportamiento de los \u00edtems a lo largo del eje principal del contenedor. Son las siguientes: Propiedad Valor Significado flex-direction row row-reverse flex-wrap nowrap wrap Mediante la propiedad flex-direction podemos modificar la direcci\u00f3n del eje principal del contenedor para que se oriente en horizontal ( por defecto ) o en vertical. Adem\u00e1s, tambi\u00e9n podemos incluir el sufijo -reverse para indicar que coloque los \u00edtems en orden inverso. Valor Descripci\u00f3n row Establece la direcci\u00f3n del eje principal en horizontal. row-reverse Establece la direcci\u00f3n del eje principal en horizontal (invertido). column Establece la direcci\u00f3n del eje principal en vertical. column-reverse Establece la direcci\u00f3n del eje principal en vertical (invertido). Esto nos permite tener un control muy alto sobre el orden de los elementos en una p\u00e1gina. Veamos la aplicaci\u00f3n de estas propiedades sobre el ejemplo anterior, para modificar el flujo del eje principal del contenedor: # contenedor { background : #CCC ; display : flex ; flex-direction : column ; } . item { background : #777 ; } Por otro lado, existe otra propiedad llamada flex-wrap con la que podemos especificar el comportamiento del contenedor respecto a evitar que se desborde ( nowrap, valor por defecto ) o permitir que lo haga, en cuyo caso, estar\u00edamos hablando de un contenedor flexbox multilinea . Valor Descripci\u00f3n nowrap Establece los \u00edtems en una sola l\u00ednea (no permite que se desborde el contenedor). wrap Establece los \u00edtems en modo multil\u00ednea (permite que se desborde el contenedor). wrap-reverse Establece los \u00edtems en modo multil\u00ednea, pero en direcci\u00f3n inversa. Teniendo en cuenta estos valores de la propiedad flex-wrap , podemos conseguir cosas como la siguiente: # contenedor { background : #CCC ; display : flex ; width : 200 px ; flex-wrap : wrap ; /* Comportamiento por defecto: nowrap */ } . item { background : #777 ; width : 50 % ; } En el caso de especificar nowrap ( u omitir la propiedad flex-wrap ) en el contenedor, los 3 \u00edtems se mostrar\u00edan en una misma l\u00ednea del contenedor. En ese caso, cada \u00edtem deber\u00eda tener un 50% de ancho ( o sea, 100px de los 200px del contenedor ). Un tama\u00f1o de 100px por \u00edtem, sumar\u00eda un total de 300px , que no cabr\u00edan en el contenedor de 200px , por lo que flexbox reajusta los \u00edtems flexibles para que quepan todos en la misma l\u00ednea, manteniendo las mismas proporciones. Sin embargo, si especificamos wrap en la propiedad flex-wrap , lo que permitimos es que el contenedor se pueda desbordar, pasando a ser un contenedor multil\u00ednea , que mostrar\u00eda el \u00edtem 1 y 2 en la primera linea ( con un tama\u00f1o de 100px cada uno ) y el \u00edtem 3 en la l\u00ednea siguiente, dejando un espacio libre para un posible \u00edtem 4 .","title":"Direcci\u00f3n de los ejes"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#atajo-direccion-de-los-ejes","text":"Recuerda que existe una propiedad de atajo (short-hand) llamada flex-flow , con la que podemos resumir los valores de las propiedades flex-direction y flex-wrap , especific\u00e1ndolas en una sola propiedad y ahorr\u00e1ndonos utilizar las propiedades concretas: # contenedor { /* flex-flow: <flex-direction> <flex-wrap>; */ flex-flow : row wrap ; }","title":"Atajo: Direcci\u00f3n de los ejes"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#propiedades-de-alineacion","text":"Ahora que tenemos un control b\u00e1sico del contenedor de estos \u00edtems flexibles, necesitamos conocer las propiedades existentes dentro de flexbox para disponer los \u00edtems dependiendo de nuestro objetivo. Vamos a echar un vistazo a cuatro propiedades interesantes para ello: Propiedad Valor Act\u00faa sobre justify-content flex-start flex-end align-content flex-start flex-end align-items flex-start flex-end align-self auto flex-start De esta peque\u00f1a lista, hay que centrarse en primer lugar en la primera y la tercera propiedad, que son las m\u00e1s importantes ( las otras dos son casos particulares que explicaremos m\u00e1s adelante ): justify-content : Se utiliza para alinear los \u00edtems del eje principal ( por defecto, el horizontal ). align-items : Usada para alinear los \u00edtems del eje secundario ( por defecto, el vertical ).","title":"Propiedades de alineaci\u00f3n"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#sobre-el-eje-principal","text":"La primera propiedad, justify-content , sirve para colocar los \u00edtems de un contenedor mediante una disposici\u00f3n concreta a lo largo del eje principal : Valor Descripci\u00f3n flex-start Agrupa los \u00edtems al principio del eje principal. flex-end Agrupa los \u00edtems al final del eje principal. center Agrupa los \u00edtems al centro del eje principal. space-between Distribuye los \u00edtems dejando (el mismo) espacio entre ellos. space-around Distribuye los \u00edtems dejando (el mismo) espacio a ambos lados de cada uno de ellos. Con cada uno de estos valores, modificaremos la disposici\u00f3n de los \u00edtems del contenedor donde se aplica, pasando a colocarse como se ve en la imagen siguiente ( n\u00f3tense las diferentes tonalidades azules para indicar las posiciones de cada \u00edtem ): Una vez entendido este caso, debemos atender a la propiedad align-content , que es un caso particular del anterior. Nos servir\u00e1 cuando estemos tratando con un contenedor flex multilinea, que es un contenedor en el que los \u00edtems no caben en el ancho disponible, y por lo tanto, el eje principal se divide en m\u00faltiples l\u00edneas. De esta forma, align-content servir\u00e1 para alinear cada una de las l\u00edneas del contenedor multilinea. Los valores que puede tomar son los siguientes: Valor Descripci\u00f3n flex-start Agrupa los \u00edtems al principio del eje principal. flex-end Agrupa los \u00edtems al final del eje principal. center Agrupa los \u00edtems al centro del eje principal. space-between Distribuye los \u00edtems desde el inicio hasta el final. space-around Distribuye los \u00edtems dejando el mismo espacio a los lados de cada uno. stretch Estira los \u00edtems para ocupar de forma equitativa todo el espacio. Con estos valores, vemos como cambiamos la disposici\u00f3n en vertical ( porque partimos de un ejemplo en el que estamos utilizando flex-direction: row, y el eje principal es horizontal ) de los \u00edtems que est\u00e1n dentro de un contenedor multilinea. En el ejemplo siguiente, veremos que al indicar un contenedor de 200 p\u00edxels de alto con \u00edtems de 50px de alto y un flex-wrap establecido para tener contenedores multilinea, podemos utilizar la propiedad align-content para alinear los \u00edtems de forma vertical de modo que se queden en la zona inferior del contenedor: # contenedor { background : #CCC ; display : flex ; width : 200 px ; height : 200 px ; flex-wrap : wrap ; align-content : flex-end ; } . item { background : #777 ; width : 50 % ; height : 50 px ; }","title":"Sobre el eje principal"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#sobre-el-eje-secundario","text":"La otra propiedad importante de este apartado es align-items , que se encarga de alinear los \u00edtems en el eje secundario del contenedor. Hay que tener cuidado de no confundir align-content con align-items , puesto que el primero act\u00faa sobre cada una de las l\u00edneas de un contenedor multilinea ( no tiene efecto sobre contenedores de una sola l\u00ednea ), mientras que align-items lo hace sobre la l\u00ednea actual. Los valores que puede tomar son los siguientes: Valor Descripci\u00f3n flex-start Alinea los \u00edtems al principio del eje secundario. flex-end Alinea los \u00edtems al final del eje secundario. center Alinea los \u00edtems al centro del eje secundario. stretch Alinea los \u00edtems estir\u00e1ndolos de modo que cubran desde el inicio hasta el final del contenedor. baseline Alinea los \u00edtems en el contenedor seg\u00fan la base del contenido de los \u00edtems del contenedor. Por otro lado, la propiedad align-self act\u00faa exactamente igual que align-items , sin embargo es la primera propiedad de flexbox que vemos que se utiliza sobre un \u00edtem hijo espec\u00edfico y no sobre el elemento contenedor. Salvo por este detalle, funciona exactamente igual que align-items . Gracias a ese detalle, align-self nos permite cambiar el comportamiento de align-items y sobreescribirlo con comportamientos espec\u00edficos para \u00edtems concretos que no queremos que se comporten igual que el resto. La propiedad puede tomar los siguientes valores: Valor Descripci\u00f3n flex-start Alinea los \u00edtems al principio del contenedor. flex-end Alinea los \u00edtems al final del contenedor. center Alinea los \u00edtems al centro del contenedor. stretch Alinea los \u00edtems estir\u00e1ndolos al tama\u00f1o del contenedor. baseline Alinea los \u00edtems en el contenedor seg\u00fan la base de los \u00edtems. auto Hereda el valor de align-items del padre (o si no lo tiene, stretch ). Si se especifica el valor auto a la propiedad align-self , el navegador le asigna el valor de la propiedad align-items del contenedor padre, y en caso de no existir, el valor por defecto: stretch .","title":"Sobre el eje secundario"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#atajo-alineaciones","text":"Existe una propiedad de atajo con la que se pueden establecer los valores de align-content y de justify-content de una sola vez, denominada place-content : # contenedor { display : flex ; place-content : flex-start flex-end ; /* Equivalente a... */ align-content : flex-start ; justify-content : flex-end ; }","title":"Atajo: Alineaciones"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#propiedades-de-hijos","text":"A excepci\u00f3n de la propiedad align-self , todas las propiedades que hemos visto hasta ahora se aplican sobre el elemento contenedor . Las siguientes propiedades, sin embargo, se aplican sobre los \u00edtems hijos. Echemos un vistazo: Propiedad Valor Descripci\u00f3n flex-grow 0 flex-shrink 1 flex-basis content order 0 En primer lugar, tenemos la propiedad flex-grow para indicar el factor de crecimiento de los \u00edtems en el caso de que no tengan un ancho espec\u00edfico. Por ejemplo, si con flex-grow indicamos un valor de 1 a todos sus \u00edtems, tendr\u00edan el mismo tama\u00f1o cada uno de ellos. Pero si colocamos un valor de 1 a todos los elementos, salvo a uno de ellos, que le indicamos 2 , ese \u00edtem ser\u00e1 m\u00e1s grande que los anteriores. Los \u00edtems a los que no se le especifique ning\u00fan valor, tendr\u00e1n por defecto valor de 0 . En segundo lugar, tenemos la propiedad flex-shrink que es la opuesta a flex-grow . Mientras que la anterior indica un factor de crecimiento, flex-shrink hace justo lo contrario, aplica un factor de decrecimiento. De esta forma, los \u00edtems que tengan un valor num\u00e9rico m\u00e1s grande, ser\u00e1n m\u00e1s peque\u00f1os, mientras que los que tengan un valor num\u00e9rico m\u00e1s peque\u00f1o ser\u00e1n m\u00e1s grandes, justo al contrario de como funciona la propiedad flex-grow . Por \u00faltimo, tenemos la propiedad flex-basis , que define el tama\u00f1o por defecto ( de base ) que tendr\u00e1n los \u00edtems antes de aplicarle la distribuci\u00f3n de espacio. Generalmente, se aplica un tama\u00f1o ( unidades, porcentajes, etc... ), pero tambi\u00e9n se puede aplicar la palabra clave content que ajusta autom\u00e1ticamente el tama\u00f1o al contenido del \u00edtem, que es su valor por defecto.","title":"Propiedades de hijos"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#atajo-propiedades-de-hijos","text":"Existe una propiedad llamada flex que sirve de atajo para estas tres propiedades de los \u00edtems hijos. Funciona de la siguiente forma: . item { /* flex: <flex-grow> <flex-shrink> <flex-basis> */ flex : 1 3 35 % ; }","title":"Atajo: Propiedades de hijos"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#huecos-gaps","text":"Existen dos propiedades de flexbox que han surgido recientemente: row-gap y column-gap . Dichas propiedades, permiten establecer el tama\u00f1o de un < > entre \u00edtems desde el elemento padre contenedor, y sin necesidad de estar utilizando padding o margin en los elementos hijos. Propiedad Valor Descripci\u00f3n row-gap normal column-gap normal Ten en cuenta que s\u00f3lo una de las dos propiedades tendr\u00e1 efecto, dependiendo de si la propiedad flex-direction est\u00e1 establecida en column o en row . Eso s\u00ed, es posible usar ambas si tenemos la propiedad flex-wrap definida a wrap y, por lo tanto, disponemos de multicolumnas flexbox.","title":"Huecos (gaps)"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#atajo-huecos","text":"En el caso de que queramos utilizar una propiedad de atajo para los huecos, podemos utilizar la propiedad gap . Eso s\u00ed, ten en cuenta que estas propiedades de huecos en flexbox, a\u00fan no tienen un soporte demasiado extendido entre navegadores: # contenedor { /* gap: <row> <column> */ gap : 4 px 8 px ; /* 1 par\u00e1metro: usa el mismo para ambos */ gap : 4 px ; }","title":"Atajo: Huecos"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#orden-de-los-items","text":"Por \u00faltimo, y quiz\u00e1s una de las propiedades m\u00e1s interesantes, es order , que modificar y establece el orden de los \u00edtems seg\u00fan una secuencia num\u00e9rica. Por defecto, todos los \u00edtems flex tienen un order: 0 impl\u00edcito, aunque no se especifique. Si indicamos un order con un valor num\u00e9rico, ir\u00e1 recolocando los \u00edtems seg\u00fan su n\u00famero, colocando antes los \u00edtems con n\u00famero m\u00e1s peque\u00f1o ( incluso valores negativos ) y despu\u00e9s los \u00edtems con n\u00fameros m\u00e1s altos. De esta forma podemos recolocar f\u00e1cilmente los \u00edtems incluso utilizando media queries o responsive design.","title":"Orden de los \u00edtems"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#grid-css-cuadriculas","text":"Uno de los procesos m\u00e1s problematicos y frustrantes de CSS, sobre todo para novatos o principiantes, es el proceso de colocar y distribuir los elementos a lo largo de una p\u00e1gina. Mecanismos como posicionamiento, floats o elementos en bloque o en l\u00ednea, suelen ser insuficientes ( o muy complejos ) para crear un layout o estructuras para p\u00e1ginas web actuales. El sistema flexbox es una gran mejora, sin embargo, est\u00e1 orientado a estructuras de una sola dimensi\u00f3n, por lo que a\u00fan necesitamos algo m\u00e1s potente para estructuras web m\u00e1s espec\u00edficas o complejas. Con el paso del tiempo, muchos frameworks y librer\u00edas utilizan un sistema grid donde definen una cuadr\u00edcula determinada, y modificando los nombres de las clases de los elementos HTML, podemos darle tama\u00f1o, posici\u00f3n o colocaci\u00f3n. Grid CSS nace de esa necesidad, y recoge las ventajas de ese sistema, a\u00f1adiendole numerosas mejoras y caracter\u00edsticas que permiten crear r\u00e1pidamente cuadr\u00edculas sencillas y potentes de forma pr\u00e1cticamente instant\u00e1nea.","title":"Grid CSS (Cuadr\u00edculas)"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#conceptos_1","text":"Antes de comenzar con Grid CSS , quiz\u00e1s ser\u00eda conveniente dominar el sistema Flexbox , ya que Grid toma la filosof\u00eda y bases de \u00e9l. Para utilizar Grid CSS necesitaremos tener en cuenta una serie de conceptos que utilizaremos a partir de ahora y que definiremos a continuaci\u00f3n: Contenedor : El elemento padre contenedor que definir\u00e1 la cuadr\u00edcula o rejilla. \u00cdtem : Cada uno de los hijos que contiene la cuadr\u00edcula ( elemento contenedor ). Celda (grid cell) : Cada uno de los cuadritos ( unidad m\u00ednima ) de la cuadr\u00edcula. Area (grid area) : Regi\u00f3n o conjunto de celdas de la cuadr\u00edcula. Banda (grid track) : Banda horizontal o vertical de celdas de la cuadr\u00edcula. L\u00ednea (grid line) : Separador horizontal o vertical de las celdas de la cuadr\u00edcula. Para utilizar cuadriculas Grid CSS , trabajaremos bajo el siguiente escenario: < div class = \"grid\" > <!-- contenedor --> < div class = \"a\" > Item 1 </ div > <!-- cada uno de los \u00edtems del grid --> < div class = \"b\" > Item 2 </ div > < div class = \"c\" > Item 3 </ div > < div class = \"d\" > Item 4 </ div > </ div > Para activar la cuadr\u00edcula grid hay que utilizar sobre el elemento contenedor la propiedad display y especificar el valor grid o inline-grid . Este valor influye en como se comportar\u00e1 la cuadr\u00edcula con el contenido exterior. El primero de ellos permite que la cuadr\u00edcula aparezca encima/debajo del contenido exterior ( en bloque ) y el segundo de ellos permite que la cuadr\u00edcula aparezca a la izquierda/derecha ( en l\u00ednea ) del contenido exterior. Tipo de elemento Descripci\u00f3n inline-grid Establece una cuadr\u00edcula con \u00edtems en l\u00ednea, de forma equivalente a inline-block. grid Establece una cuadr\u00edcula con \u00edtems en bloque, de forma equivalente a block. Una vez elegido uno de estos dos valores, y establecida la propiedad display al elemento contenedor, hay varias formas de configurar nuestra cuadr\u00edcula grid. Comencemos con las propiedades que se aplican al elemento contenedor ( padre ).","title":"Conceptos"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#grid-con-filas-y-columnas","text":"Es posible crear cuadr\u00edculas con un tama\u00f1o expl\u00edcito. Para ello, s\u00f3lo tenemos que usar las propiedades CSS grid-template-columns y grid-template-rows , que sirven para indicar las dimensiones de cada celda de la cuadr\u00edcula, diferenciando entre columnas y filas. Las propiedades son las siguientes: Propiedad Valor Descripci\u00f3n grid-template-columns [ c1 ] [ c2 ] ... Establece el de cada columna ( col 1, col 2... ). grid-template-rows [ f1 ] [ f2 ] ... Establece el de cada fila ( fila 1, fila 2... ). Conociendo estas dos propiedades, asumamos el siguiente c\u00f3digo CSS: . grid { display : grid ; grid-template-columns : 50 px 300 px ; grid-template-rows : 200 px 75 px ; } Esto significa que tendremos una cuadricula con 2 columnas ( la primera con 50px de ancho y la segunda con 300px de ancho ) y con 2 filas ( la primera con 200px de alto y la segunda con 75px de alto ). Ahora, dependiendo del n\u00famero de \u00edtems ( elementos hijos ) que tenga el contenedor grid , tendremos una cuadr\u00edcula de 2x2 elementos ( 4 \u00edtems ), 2x3 elementos ( 6 \u00edtems ), 2x4 elementos ( 8 \u00edtems ) y as\u00ed sucesivamente. Si el n\u00famero de \u00edtems es impar, la \u00faltima celda de la cuadr\u00edcula se quedar\u00e1 vac\u00eda.","title":"Grid con filas y columnas"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#unidad-fraccion-restante-fr","text":"En el ejemplo anterior he utilizado p\u00edxels como unidades de las celdas de la cuadr\u00edcula, sin embargo, tambi\u00e9n podemos utilizar otras unidades ( o incluso combinarlas ) como porcentajes, la palabra clave auto ( que obtiene el tama\u00f1o restante ) o la unidad especial de Grid CSS fr ( fraction ), que simboliza una fracci\u00f3n de espacio restante en el grid . Veamos un c\u00f3digo de ejemplo en acci\u00f3n: . grid { display : grid ; grid-template-columns : 1 fr 1 fr ; grid-template-rows : 2 fr 1 fr ; } Este nuevo ejemplo, se crea una cuadr\u00edcula de 2x2, donde el tama\u00f1o de ancho de la cuadr\u00edcula se divide en dos columnas ( mismo tama\u00f1o de ancho para cada una ), y el tama\u00f1o de alto de la cuadr\u00edcula se divide en dos filas , donde la primera ocupar\u00e1 el doble ( 2 fr ) que la segunda ( 1 fr ): De esta forma, podemos tener un mejor control del espacio restante de la cuadr\u00edcula, y como utilizarlo. Nota : Se pueden combinar varias unidades diferentes, pudiendo utilizar p\u00edxeles ( px ) y fracciones restantes ( fr ), porcentajes ( % ) y fracciones restantes ( fr ) o combinaci\u00f3nes similares.","title":"Unidad fracci\u00f3n restante (fr)"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#filas-y-columnas-repetitivas","text":"En algunos casos, en las propiedades grid-template-columns y grid-template-rows podemos necesitar indicar las mismas cantidades un n\u00famero alto de veces, resultando repetitivo y molesto. Se puede utilizar la expresi\u00f3n repeat() para indicar repetici\u00f3n de valores, indicando el n\u00famero de veces que se repiten y el tama\u00f1o en cuesti\u00f3n. La expresi\u00f3n a utilizar ser\u00eda la siguiente: repeat([n&#xFA;m de veces], [valor o valores]) : . grid { display : grid ; grid-template-columns : 100 px repeat ( 2 , 50 px ) 200 px ; grid-template-rows : repeat ( 2 , 50 px 100 px ); } Asumiendo que tuvieramos un contenedor grid con 8 \u00edtems hijos ( o m\u00e1s ), el ejemplo anterior crear\u00eda una cuadr\u00edcula con 4 columnas ( la primera de 100px de ancho, la segunda y tercera de 50px de ancho y la cuarta de 200px de ancho ). Por otro lado, tendr\u00eda 2 filas ( la primera de 50px de alto, y la segunda de 100px de alto ). En el caso de tener m\u00e1s \u00edtems hijos, el patr\u00f3n se seguir\u00eda repitiendo. El ejemplo anterior ser\u00eda equivalente al c\u00f3digo CSS siguiente: . grid { display : grid ; grid-template-columns : 100 px 50 px 50 px 200 px ; grid-template-rows : 50 px 100 px 50 px 100 px ;; }","title":"Filas y columnas repetitivas"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#grid-con-lineas-nombradas","text":"Con Grid CSS tambi\u00e9n tenemos la posibilidad de usar << linenames >>, o lo que es lo mismo, ponerle nombre a las l\u00edneas de nuestro sistema grid. Vamos a verlo con un ejemplo, donde probablemente se vea mucho mejor. Partamos de esta estructura HTML: < div class = \"grid\" > < div class = \"header\" > Header </ div > < div class = \"sidebar\" > Sidebar </ div > < div class = \"content\" > Content </ div > < div class = \"footer\" > Footer </ div > </ div > Los nombres de las clases ya dan una idea del contenido que tendr\u00e1n. Ahora, mediante Grid CSS lo que haremos es darle una estructura definida. Para ello, vamos a considerar los siguientes nombres para las lineas de nuestro grid, utilizando X para las posiciones en el eje X y utilizando Y para las posiciones en el eje Y : Teniendo esto en cuenta, lo \u00fanico que tenemos que hacer es indicar estos nombres entre corchetes, justo antes de la medida que establecimos como vimos en apartados anteriores. Obs\u00e9rvese que tambi\u00e9n se coloca una nombre de l\u00ednea final sin medida a continuaci\u00f3n, que representa la l\u00ednea final: . grid { display : grid ; grid-template-columns : [ x0 ] 1 fr [ x1 ] 1 fr [ x2 ] 1 fr [ x3 ]; grid-template-rows : [ y0 ] 1 fr [ y1 ] 1 fr [ y2 ] 1 fr [ y3 ]; } En este caso, los nombres utilizados son tan s\u00f3lo un ejemplo did\u00e1ctico. Si se considera m\u00e1s adecuado, se podr\u00edan utilizar otros nombres quiz\u00e1s m\u00e1s amigables como top-line , top-medium-line , bottom-medium-line y bottom-line , por ejemplo, en lugar de y0 , y1 , y2 y y3 respectivamente. Ahora, teniendo los nombres, s\u00f3lo quedar\u00eda delimitar que zonas del grid queremos que ocupe cada uno de nuestros bloques <div> del grid. Para ello utilizaremos las propiedades grid-column-start , grid-column-end y grid-row-start , grid-row-end . Tambi\u00e9n podriamos utilizar sus propiedades de atajo grid-column y grid-row . . header { background : darkred ; grid-column-start : x0 ; grid-column-end : x3 ; /* Equivalente a */ grid-column : x0 / x3 ; } . sidebar { background : black ; grid-row : y1 / y2 ; color : white ; } . content { background : orange ; grid-column : x1 / x3 ; grid-row : y1 / y3 ; } . footer { background : green ; grid-column : x0 / x3 ; grid-row : y2 ; } Hemos aplicado la siguiente estructura: Zona .header desde la columna x0 a x3 . Zona .sidebar desde la fila y1 a y2 . Zona .content desde la columna x1 a x3 y desde la fila y1 a y3 . Zona .footer desde la columna x0 a x3 en la fila y2 . Por lo que nuestra estructura grid quedar\u00eda as\u00ed: Un poco m\u00e1s adelante veremos m\u00e1s detalladamente estas \u00faltimas propiedades. Nota: Ten en cuenta que ser\u00eda necesario darle un tama\u00f1o de alto con height al contenedor padre para que el navegador sepa cuanto ocupar\u00e1 la estructura completa. Tambi\u00e9n podemos modificar las medidas 1fr para dar menos proporci\u00f3n, por ejemplo utilizando en grid-template-rows un [y0] 0.5fr y un [y2] 0.25fr .","title":"Grid con l\u00edneas nombradas"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#grid-por-areas","text":"Mediante los grids CSS es posible indicar el nombre y posici\u00f3n concreta de cada \u00e1rea de una cuadr\u00edcula. Para ello utilizaremos la propiedad grid-template-areas , donde debemos especificar el orden de las \u00e1reas en la cuadr\u00edcula. Posteriormente, en cada \u00edtem hijo, utilizamos la propiedad grid-area para indicar el nombre del \u00e1rea del que se trata: Propiedad Descripci\u00f3n grid-template-areas Indica la disposici\u00f3n de las \u00e1reas en el grid. Cada texto entre comillas simboliza una fila. grid-area Indica el nombre del \u00e1rea. Se usa sobre \u00edtems hijos del grid. De esta forma, es muy sencillo crear una cuadr\u00edcula altamente personalizada en apenas unas cuantas l\u00edneas de CSS, con mucha flexibilidad en la disposici\u00f3n y posici\u00f3n de cada \u00e1rea: . grid { display : grid ; grid-template-areas : \"head head\" \"menu main\" \"foot foot\" ; } . a { grid-area : head ; background : blue } . b { grid-area : menu ; background : red } . c { grid-area : main ; background : green } . d { grid-area : foot ; background : orange } Aplicando este c\u00f3digo, conseguir\u00edamos una cuadr\u00edcula donde: El Item 1 , la cabecera ( head ), ocupar\u00eda toda la parte superior. El Item 2 , el men\u00fa ( menu ), ocupar\u00eda el \u00e1rea izquierda del grid, debajo de la cabecera. El Item 3 , el contenido ( main ), ocupar\u00eda el \u00e1rea derecha del grid, debajo de la cabecera. El Item 4 , el pie de cuadr\u00edcula ( foot ), ocupar\u00eda toda la zona inferior del grid. OJO : Ten en cuenta a\u00f1adir contenido de texto en cada celda del grid, para que Grid CSS detecte que esa celda no est\u00e1 vac\u00eda. En la propiedad grid-template-areas , en lugar de indicar el nombre del \u00e1rea a colocar, tambi\u00e9n podemos indicar una palabra clave especial: La palabra clave none : Indica que no se colocar\u00e1 ninguna celda en esta posici\u00f3n. Uno o m\u00e1s puntos ( . ): Indica que se colocar\u00e1 una celda vac\u00eda en esta posici\u00f3n.","title":"Grid por \u00e1reas"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#huecos-en-grid","text":"Por defecto, la cuadr\u00edcula tiene todas sus celdas pegadas a sus celdas contiguas. Aunque ser\u00eda posible darle un margin a las celdas dentro del contenedor, existe una forma m\u00e1s apropiada, que evita los problemas cl\u00e1sicos de los modelos de caja: los huecos ( gutters ). Para especificar los huecos ( espacio entre celdas ) podemos utilizar las propiedades grid-column-gap y/o grid-row-gap . En ellas indicaremos el tama\u00f1o de dichos huecos: Propiedad Descripci\u00f3n grid-column-gap Establece el de los huecos entre columnas ( l\u00edneas verticales ). grid-row-gap Establece el de los huecos entre filas ( l\u00edneas horizontales ). Tomemos el ejemplo anterior como base. En \u00e9l, le indicamos estas propiedades para colocar huecos entre las celdas de la cuadr\u00edcula. El c\u00f3digo a a\u00f1adir al ejemplo anterior ser\u00eda el siguiente: . grid { grid-column-gap : 100 px ; grid-row-gap : 10 px ; } Con esto, obtendr\u00edamos un resultado como el siguiente, indicando huecos entre columnas de 100px y huecos entre filas de 10px:","title":"Huecos en grid"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#atajo-grid-con-huecos","text":"Existe una propiedad de atajo para las propiedades grid-column-gap y grid-row-gap , permiti\u00e9ndonos la posibilidad de no tener que indicarlas por separado. La propiedad en cuesti\u00f3n ser\u00eda grid-gap y se utilizar\u00eda de la siguiente forma: . grid { /* grid-gap: <row-gap> <column-gap> */ grid-gap : 20 px 80 px ; /* Equivalente a grid-gap: 40px 40px; */ /* grid-gap: <rowcolumn-gap> */ grid-gap : 40 px ; }","title":"Atajo: Grid con huecos"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#posicion-en-el-grid","text":"Existen una serie de propiedades que se pueden utilizar para colocar los \u00edtems dentro de la cuadr\u00edcula. Con ellas podemos distribuir los elementos de una forma muy sencilla y c\u00f3moda. Dichas propiedades son justify-items y align-items , que ya conocer\u00e1s del m\u00f3dulo CSS flexbox : Propiedad Valores Descripci\u00f3n justify-items start end align-items start end Estas propiedades se aplican sobre el elemento contenedor padre, pero afectan a los \u00edtems hijos, por lo que actuan sobre la distribuci\u00f3n de cada uno de los hijos. En el caso de que queramos que uno de los \u00edtems hijos tengan una distribuci\u00f3n diferente al resto, aplicamos la propiedad justify-self o align-self sobre el \u00edtem hijo en cuesti\u00f3n, sobreescribiendo su distribuci\u00f3n. Estas propiedades funcionan exactamente igual que sus an\u00e1logas justify-items o align-items , s\u00f3lo que en lugar de indicarse en el elemento padre contenedor, se hace sobre un elemento hijo. Las propiedades sobre \u00edtems hijos las veremos m\u00e1s adelante. Tambi\u00e9n podemos utilizar las propiedades justify-content o align-content para modificar la distribuci\u00f3n de todo el contenido en su conjunto, y no s\u00f3lo de los \u00edtems por separado: Propiedad Valores justify-content start align-content start De esta forma, podemos controlar pr\u00e1cticamente todos los aspectos de posicionamiento de la cuadr\u00edcula directamente desde los estilos CSS de su contenedor padre:","title":"Posici\u00f3n en el grid"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#atajo-de-posiciones-grid","text":"Si vamos a crear estructuras grid donde necesitamos utilizar las cuatro propiedades anteriores, quiz\u00e1s ser\u00eda mejor utilizar un atajo donde simplificar\u00edamos mucho el c\u00f3digo resultante. Es el caso de las siguientes propiedades: Propiedad Valores Descripci\u00f3n place-items [ align-items ] [ justify-items ] Propiedad de atajo para * -items place-content [ align-content ] [ justify-content ] Propiedad de atajo para * -content Con ellas conseguiremos que nuestro c\u00f3digo sea menos verboso.","title":"Atajo de posiciones grid"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#ajuste-automatico-de-celdas","text":"Es posible utilizar las propiedades grid-auto-columns y grid-auto-rows para darle un tama\u00f1o autom\u00e1tico a las celdas de la cuadr\u00edcula. Para ello, s\u00f3lo hay que especificar el tama\u00f1o deseado en cada una de las propiedades. Adem\u00e1s, tambi\u00e9n podemos utilizar grid-auto-flow para indicar el flujo de elementos en la cuadr\u00edcula, y especificar por donde se ir\u00e1n a\u00f1adiendo. Las propiedades son las siguientes: Propiedad Valores Descripci\u00f3n grid-auto-columns Indica el tama\u00f1o autom\u00e1tico de ancho que tendr\u00e1n las columnas. grid-auto-rows Indica el tama\u00f1o autom\u00e1tico de alto que tendr\u00e1n las filas. grid-auto-flow row column Un ejemplo de como se insertar\u00edan los elementos en una cuadr\u00edcula de 2x2 utilizando grid-auto-flow por columnas o por filas:","title":"Ajuste autom\u00e1tico de celdas"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#atajo-grid","text":"Por \u00faltimo, existe una propiedad grid que sirve de atajo para la mayor\u00eda de propiedades CSS relativas a cuadr\u00edculas. Su esquema de utilizaci\u00f3n ser\u00eda el siguiente, junto a algunos ejemplos: . grid { /* grid: <grid-template> <grid-auto-flow> <grid-auto-rows> / <grid-auto-columns> */ grid : 100 px 20 px ; grid : 200 px repeat ( 2 , 100 px ) 300 px ; grid : row ; grid : column dense ; grid : row 200 px ; grid : row 400 px / 150 px ; }","title":"Atajo: Grid"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#propiedades-para-items-hijos","text":"Hasta ahora, salvo algunas excepciones como justify-self , align-self o grid-area , hemos visto propiedades CSS que se aplican solamente al contenedor padre de una cuadr\u00edcula. A continuaci\u00f3n, vamos a ver ciertas propiedades que en su lugar, se aplican a cada \u00edtem hijo de la cuadr\u00edcula, para alterar o cambiar el comportamiento espec\u00edfico de dicho elemento, que no se comporta como la mayor\u00eda. Algunas de las propiedades vistas hasta ahora son las siguientes: Propiedad Descripci\u00f3n justify-self Altera la justificaci\u00f3n del \u00edtem hijo en el eje horizontal. align-self Altera la alineaci\u00f3n del \u00edtem hijo en el eje vertical. grid-area Indica un nombre al \u00e1rea especificada, para su utilizaci\u00f3n con grid-template-areas . Sin embargo, existen algunas propiedades m\u00e1s, referentes en este caso, a la posici\u00f3n de los hijos de la cuadr\u00edcula donde va a comenzar o terminar una fila o columna. Las propiedades son las siguientes: Propiedad Descripci\u00f3n grid-column-start Indica en que columna empezar\u00e1 el \u00edtem de la cuadr\u00edcula. grid-column-end Indica en que columna terminar\u00e1 el \u00edtem de la cuadr\u00edcula. grid-row-start Indica en que fila empezar\u00e1 el \u00edtem de la cuadr\u00edcula. grid-row-end Indica en que fila terminar\u00e1 el \u00edtem de la cuadr\u00edcula. Con dichas propiedades, podemos indicar el siguiente c\u00f3digo CSS sobre el primer \u00edtem de una cuadr\u00edcula de 4 \u00edtems: . grid { display : grid ; } . a { grid-column-start : 1 ; grid-row-end : 2 ; } De esta forma, tenemos una cuadr\u00edcula de 4 elementos, en el que indicamos la posici\u00f3n del \u00edtem 1 ( elemento con clase .a ): comenzando en la columna 1 y acabando en el inicio de la columna 2: Ese ser\u00eda el funcionamiento normal. Donde se ve la utilidad de estas propiedades, es si variamos los valores de forma que tomen posiciones diferentes, como por ejemplo, si indicamos que el \u00edtem 1 debe comenzar en la columna 1, pero acabar en la columna 3 ( ocupando la hipot\u00e9tica primera y segunda celda ): En este nuevo ejemplo, comenzamos el primer \u00edtem en la columna 2 y lo acabamos al principio de la columna 3, por lo que la celda permanecer\u00e1 en la posici\u00f3n de la segunda columna. Adem\u00e1s, a\u00f1adimos la propiedad grid-row-start que hace lo mismo que hasta ahora, pero con las filas. En este caso, le indicamos que comience en la fila 3, por lo que el \u00edtem 1 se desplaza a una nueva fila de la cuadr\u00edcula, dejando en la anterior el \u00edtem 4 : Tambi\u00e9n es posible utilizar la palabra clave span seguida de un n\u00famero, que indica que abarque hasta esa columna o celda.","title":"Propiedades para \u00edtems hijos"},{"location":"desarrollo/css/07_maquetacion_y_colocacion/#atajo-grid-column-y-grid-row","text":"El m\u00f3dulo grid de CSS proporciona las propiedades de atajo grid-column y grid-row donde se nos permite escribir en un formato abreviado las propiedades anteriores. Su sintaxis ser\u00eda la siguiente: . grid { display : grid ; } . a { /* grid-column: <grid-column-start> <grid-column-end> */ /* grid-row: <grid-row-start> <grid-row-end> */ grid-column : auto ; grid-column : 4 / 6 ; grid-column : span 3 ; grid-column : span 3 / 6 ; } La especificaci\u00f3n de Grid CSS ya tiene buen soporte en la actualidad y puede utilizarse en producci\u00f3n. Eso s\u00ed, si requieres soporte para navegadores antiguos, s\u00e9 cuidadoso. Actualmente, su soporte es el siguiente: https://caniuse.com/css-grid Fuente: Lenguaje de CSS por Manz","title":"Atajo: grid-column y grid-row"},{"location":"desarrollo/css/08-interacciones/","text":"Interacciones \u00b6 Contornos \u00b6 Mediante CSS se pueden modificar ciertos detalles relacionados con el modo en que interactua el usuario con un alguno de los componentes del interfaz de la p\u00e1gina. Contornos (outline) \u00b6 La familia de propiedades outline-* nos permiten modificar el comportamiento del contorno de los elementos : una l\u00ednea divisoria que rodea el contenido externo del propio elemento. A diferencia de los bordes, esta l\u00ednea divisoria, por defecto no ocupa espacio y no tiene porque tener una forma rectangular. Es f\u00e1cil de observar esta l\u00ednea divisoria en los navegadores, pulsando TAB y movi\u00e9ndonos por los diferentes enlaces de la p\u00e1gina. Generalmente, aparece como una l\u00ednea punteada y es muy similar al funcionamiento de los bordes. Propiedad Valor Significado outline-color invert outline-style none outline-width medium thin outline-offset Desplazamiento del contorno. La propiedad outline-color permite modificar el color de la l\u00ednea divisoria, en el caso de que el tama\u00f1o outline-width sea mayor que cero. Adem\u00e1s, al igual que con los bordes, tambi\u00e9n se puede cambiar el estilo de la l\u00ednea con outline-style . En CSS3 tambi\u00e9n existe la propiedad outline-offset , que nos permite ampliar el desplazamiento o espacio interior dentro del perfil del elemento. Atajo: Contornos \u00b6 Es posible, al igual que con muchas otras propiedades, resumir en una sola propiedad para ahorrar espacio. El orden recomendado es el siguiente: div { outline : < color > < style > < width > } Nota: En muchas ocasiones, estas propiedades son usadas por el desarrollador para indicar un outline: 0 y desactivar esta caracter\u00edstica de contorno. Hay que tener mucho cuidado con esto, ya que este contorno visual es muy importante en el \u00e1mbito de la accesibilidad, y desactivarlo puede ser contraproducente. Cursor del rat\u00f3n \u00b6 Ser\u00eda fant\u00e1stico si CSS permitiera modificar la apariencia del rat\u00f3n, a gusto del desarrollador web, dependiendo de la zona del documento HTML donde nos encontremos. Y de hecho, es algo que aunque es posible hacer con CSS, hay que ser cuidadosos al hacerlo. El navegador puede cambiar el aspecto visual del rat\u00f3n mediante CSS, pero no hay que hacerlo a la ligera. Los usuarios est\u00e1n acostumbrados al cursor del rat\u00f3n que utilizan normalmente, y cambiarlo, puede ser una experiencia de usuario negativa . Es por ello que lo aconsejable es cambiarlo por uno de los cursores predefinidos que tiene el sistema y s\u00f3lo en situaciones especiales para aportar m\u00e1s informaci\u00f3n al usuario. Cursor del rat\u00f3n \u00b6 Para modificar el cursor del rat\u00f3n solo tenemos que especificar la propiedad cursor dentro del elemento que busquemos, junto al valor del cursor deseado: Propiedad Valor Significado cursor palabra clave de cursor Muestra un cursor de rat\u00f3n espec\u00edfico. Veamos un ejemplo: div { cursor : text ; } En este caso hemos utilizado la palabra clave text , pero existe una amplia gama valores predefinidos para diversas situaciones, que separaremos en dos grupos a continuaci\u00f3n. Cursores b\u00e1sicos \u00b6 Son los m\u00e1s extendidos y compatibles con todos los navegadores. Funcionan sin problema en cualquier sistema y pueden utilizarse sin preocuparse por el soporte. Las palabras clave son las siguientes: Valor Significado default Muestra el cursor del rat\u00f3n por defecto del sistema. Usualmente, una flecha/cursor. crosshair Muestra una cruceta. \u00datil para tareas en las que requieres precisi\u00f3n. help Muestra un cursor de ayuda. Generalmente, una interrogaci\u00f3n o un puntero con interrogaci\u00f3n. move Muestra un cursor para mover elementos. Se suele representar con flechas hacia todos lados. pointer Muestra un cursor para hacer click. Usualmente, una mano o alg\u00fan tipo de apuntador. progress Muestra un cursor que indica que se est\u00e1 trabajando en segundo plano. text Muestra un cursor que permite seleccionar texto de una forma m\u00e1s c\u00f3moda. wait Muestra un cursor que indica que se est\u00e1 trabajando en primer plano y deber\u00edas esperar. Por \u00faltimo, tenemos valores como e-resize , ne-resize , nw-resize , n-resize , se-resize , sw-resize , s-resize o w-resize , que representan la redimensi\u00f3n de ventanas en puntos cardinales como norte, sur, este, oeste y derivados. Cursores CSS3 \u00b6 A partir de CSS3, se a\u00f1adieron una serie de valores propios para cubrir ciertas carencias en la lista de cursores anterior. Actualmente, los navegadores de escritorio los soportan correctamente: Valor Significado none No muestra ning\u00fan cursor, pero el cursor del rat\u00f3n sigue funcionando. \u00datil para bromas. context-menu Muestra un cursor de texto junto a un men\u00fa contextual (al hacer clic con bot\u00f3n derecho). cell Muestra un cursor de cruceta, utilizado en hojas de c\u00e1lculo para ajustar celdas. vertical-text Idem al cursor text , pero con orientaci\u00f3n para texto vertical. alias Muestra un cursor que representa un alias o < > a algo. copy Muestra un cursor que representa una copia. Usualmente un cursor con un s\u00edmbolo + . no-drop Muestra un cursor que indica que no se puede arrastrar y soltar en ese lugar. not-allowed Muestra un cursor que indica que no se puede realizar una acci\u00f3n (prohibido). grab Muestra un cursor que indica que algo se puede agarrar y arrastrar (drag & drop). grabbing Muestra un cursor que indica que algo se est\u00e1 arrastrando (drag & drop). zoom-in Muestra un cursor que indica que se puede acercar la imagen (lupa con signo + ). zoom-out Muestra un cursor que indica que se puede alejar la imagen (lupa con signo - ). Se a\u00f1aden otros cursores de orientaci\u00f3n a puntos cardinales como ew-resize , ns-resize , nesw-resize , nwse-resize , otros para redimensionar filas o columnas de una tabla row-resize y col-resize o all-scroll que indica que se puede hacer scroll en cualquier direcci\u00f3n. A continuaci\u00f3n podemos ver algunos ejemplos de los cursores mencionados en las listas anteriores: Cursores personalizados \u00b6 Uno de los valores anteriores de la lista es cursor: url(images/nyan.png) , el mismo formato que se utiliza, por ejemplo, para utilizar im\u00e1genes externas de fondo con background . De la misma forma, podemos utilizar cursores personalizados. Sin embargo, esta funcionalidad, aunque forma parte de la especificaci\u00f3n CSS2 , tiene varias particularidades que conviene aclarar. Su utilizaci\u00f3n ser\u00eda la siguiente: div { cursor : url ( imagen.ext ); /* Formato b\u00e1sico */ cursor : url ( imagen.ext ) pos-x pos-y ; /* Con posici\u00f3n */ } La imagen del cursor personalizado debe especificarse en el interior de url() , al igual que se hace en im\u00e1genes de fondo CSS. Aunque esta propiedad tiene bastante tiempo, tiene bastante problemas de soporte: Internet Explorer s\u00f3lo soporta cursores en formato . CUR ( propietario de Microsoft ). Opera no soporta cursores personalizados. Chrome , Firefox y Safari requieren una imagen ( recomendado: PNG de 24-bits ). Firefox requiere especificar un segundo cursor para el caso en el que no pueda cargar la imagen. Chrome , Firefox y Safari aceptan el uso de pos-x y pos-y para especificar el p\u00edxel donde empezar a recortar la imagen. Por defecto, utiliza 0 0 . M\u00e1s informaci\u00f3n en soporte de cursores CSS . Fuente: Lenguaje de CSS por Manz","title":"Interacciones"},{"location":"desarrollo/css/08-interacciones/#interacciones","text":"","title":"Interacciones"},{"location":"desarrollo/css/08-interacciones/#contornos","text":"Mediante CSS se pueden modificar ciertos detalles relacionados con el modo en que interactua el usuario con un alguno de los componentes del interfaz de la p\u00e1gina.","title":"Contornos"},{"location":"desarrollo/css/08-interacciones/#contornos-outline","text":"La familia de propiedades outline-* nos permiten modificar el comportamiento del contorno de los elementos : una l\u00ednea divisoria que rodea el contenido externo del propio elemento. A diferencia de los bordes, esta l\u00ednea divisoria, por defecto no ocupa espacio y no tiene porque tener una forma rectangular. Es f\u00e1cil de observar esta l\u00ednea divisoria en los navegadores, pulsando TAB y movi\u00e9ndonos por los diferentes enlaces de la p\u00e1gina. Generalmente, aparece como una l\u00ednea punteada y es muy similar al funcionamiento de los bordes. Propiedad Valor Significado outline-color invert outline-style none outline-width medium thin outline-offset Desplazamiento del contorno. La propiedad outline-color permite modificar el color de la l\u00ednea divisoria, en el caso de que el tama\u00f1o outline-width sea mayor que cero. Adem\u00e1s, al igual que con los bordes, tambi\u00e9n se puede cambiar el estilo de la l\u00ednea con outline-style . En CSS3 tambi\u00e9n existe la propiedad outline-offset , que nos permite ampliar el desplazamiento o espacio interior dentro del perfil del elemento.","title":"Contornos (outline)"},{"location":"desarrollo/css/08-interacciones/#atajo-contornos","text":"Es posible, al igual que con muchas otras propiedades, resumir en una sola propiedad para ahorrar espacio. El orden recomendado es el siguiente: div { outline : < color > < style > < width > } Nota: En muchas ocasiones, estas propiedades son usadas por el desarrollador para indicar un outline: 0 y desactivar esta caracter\u00edstica de contorno. Hay que tener mucho cuidado con esto, ya que este contorno visual es muy importante en el \u00e1mbito de la accesibilidad, y desactivarlo puede ser contraproducente.","title":"Atajo: Contornos"},{"location":"desarrollo/css/08-interacciones/#cursor-del-raton","text":"Ser\u00eda fant\u00e1stico si CSS permitiera modificar la apariencia del rat\u00f3n, a gusto del desarrollador web, dependiendo de la zona del documento HTML donde nos encontremos. Y de hecho, es algo que aunque es posible hacer con CSS, hay que ser cuidadosos al hacerlo. El navegador puede cambiar el aspecto visual del rat\u00f3n mediante CSS, pero no hay que hacerlo a la ligera. Los usuarios est\u00e1n acostumbrados al cursor del rat\u00f3n que utilizan normalmente, y cambiarlo, puede ser una experiencia de usuario negativa . Es por ello que lo aconsejable es cambiarlo por uno de los cursores predefinidos que tiene el sistema y s\u00f3lo en situaciones especiales para aportar m\u00e1s informaci\u00f3n al usuario.","title":"Cursor del rat\u00f3n"},{"location":"desarrollo/css/08-interacciones/#cursor-del-raton_1","text":"Para modificar el cursor del rat\u00f3n solo tenemos que especificar la propiedad cursor dentro del elemento que busquemos, junto al valor del cursor deseado: Propiedad Valor Significado cursor palabra clave de cursor Muestra un cursor de rat\u00f3n espec\u00edfico. Veamos un ejemplo: div { cursor : text ; } En este caso hemos utilizado la palabra clave text , pero existe una amplia gama valores predefinidos para diversas situaciones, que separaremos en dos grupos a continuaci\u00f3n.","title":"Cursor del rat\u00f3n"},{"location":"desarrollo/css/08-interacciones/#cursores-basicos","text":"Son los m\u00e1s extendidos y compatibles con todos los navegadores. Funcionan sin problema en cualquier sistema y pueden utilizarse sin preocuparse por el soporte. Las palabras clave son las siguientes: Valor Significado default Muestra el cursor del rat\u00f3n por defecto del sistema. Usualmente, una flecha/cursor. crosshair Muestra una cruceta. \u00datil para tareas en las que requieres precisi\u00f3n. help Muestra un cursor de ayuda. Generalmente, una interrogaci\u00f3n o un puntero con interrogaci\u00f3n. move Muestra un cursor para mover elementos. Se suele representar con flechas hacia todos lados. pointer Muestra un cursor para hacer click. Usualmente, una mano o alg\u00fan tipo de apuntador. progress Muestra un cursor que indica que se est\u00e1 trabajando en segundo plano. text Muestra un cursor que permite seleccionar texto de una forma m\u00e1s c\u00f3moda. wait Muestra un cursor que indica que se est\u00e1 trabajando en primer plano y deber\u00edas esperar. Por \u00faltimo, tenemos valores como e-resize , ne-resize , nw-resize , n-resize , se-resize , sw-resize , s-resize o w-resize , que representan la redimensi\u00f3n de ventanas en puntos cardinales como norte, sur, este, oeste y derivados.","title":"Cursores b\u00e1sicos"},{"location":"desarrollo/css/08-interacciones/#cursores-css3","text":"A partir de CSS3, se a\u00f1adieron una serie de valores propios para cubrir ciertas carencias en la lista de cursores anterior. Actualmente, los navegadores de escritorio los soportan correctamente: Valor Significado none No muestra ning\u00fan cursor, pero el cursor del rat\u00f3n sigue funcionando. \u00datil para bromas. context-menu Muestra un cursor de texto junto a un men\u00fa contextual (al hacer clic con bot\u00f3n derecho). cell Muestra un cursor de cruceta, utilizado en hojas de c\u00e1lculo para ajustar celdas. vertical-text Idem al cursor text , pero con orientaci\u00f3n para texto vertical. alias Muestra un cursor que representa un alias o < > a algo. copy Muestra un cursor que representa una copia. Usualmente un cursor con un s\u00edmbolo + . no-drop Muestra un cursor que indica que no se puede arrastrar y soltar en ese lugar. not-allowed Muestra un cursor que indica que no se puede realizar una acci\u00f3n (prohibido). grab Muestra un cursor que indica que algo se puede agarrar y arrastrar (drag & drop). grabbing Muestra un cursor que indica que algo se est\u00e1 arrastrando (drag & drop). zoom-in Muestra un cursor que indica que se puede acercar la imagen (lupa con signo + ). zoom-out Muestra un cursor que indica que se puede alejar la imagen (lupa con signo - ). Se a\u00f1aden otros cursores de orientaci\u00f3n a puntos cardinales como ew-resize , ns-resize , nesw-resize , nwse-resize , otros para redimensionar filas o columnas de una tabla row-resize y col-resize o all-scroll que indica que se puede hacer scroll en cualquier direcci\u00f3n. A continuaci\u00f3n podemos ver algunos ejemplos de los cursores mencionados en las listas anteriores:","title":"Cursores CSS3"},{"location":"desarrollo/css/08-interacciones/#cursores-personalizados","text":"Uno de los valores anteriores de la lista es cursor: url(images/nyan.png) , el mismo formato que se utiliza, por ejemplo, para utilizar im\u00e1genes externas de fondo con background . De la misma forma, podemos utilizar cursores personalizados. Sin embargo, esta funcionalidad, aunque forma parte de la especificaci\u00f3n CSS2 , tiene varias particularidades que conviene aclarar. Su utilizaci\u00f3n ser\u00eda la siguiente: div { cursor : url ( imagen.ext ); /* Formato b\u00e1sico */ cursor : url ( imagen.ext ) pos-x pos-y ; /* Con posici\u00f3n */ } La imagen del cursor personalizado debe especificarse en el interior de url() , al igual que se hace en im\u00e1genes de fondo CSS. Aunque esta propiedad tiene bastante tiempo, tiene bastante problemas de soporte: Internet Explorer s\u00f3lo soporta cursores en formato . CUR ( propietario de Microsoft ). Opera no soporta cursores personalizados. Chrome , Firefox y Safari requieren una imagen ( recomendado: PNG de 24-bits ). Firefox requiere especificar un segundo cursor para el caso en el que no pueda cargar la imagen. Chrome , Firefox y Safari aceptan el uso de pos-x y pos-y para especificar el p\u00edxel donde empezar a recortar la imagen. Por defecto, utiliza 0 0 . M\u00e1s informaci\u00f3n en soporte de cursores CSS . Fuente: Lenguaje de CSS por Manz","title":"Cursores personalizados"},{"location":"desarrollo/css/09-efectos/","text":"Efectos \u00b6 Sombras CSS \u00b6 Un efecto interesante que podemos utilizar en nuestros dise\u00f1os web a partir de CSS3 es el de las sombras , ya que nos permiten a\u00f1adir atractivas sombras que pueden suavizar y hacer m\u00e1s elegantes nuestros dise\u00f1os. Podemos utilizar dos tipos de propiedades, text-shadow y box-shadow . La primera de ellas para sombras en textos, y la segunda para sombras en otro tipo de elementos como cajas o contenedores. Ambas propiedades son pr\u00e1cticamente id\u00e9nticas, solo con algunas diferencias: Propiedad Valor Significado text-shadow none box-shadow inset none * Los valores y nos permiten indicar las coordenadas de X e Y donde se situar\u00e1 la sombra, respecto a la posici\u00f3n del texto o contenedor original. * El primer valor es el blur , que no es otra cosa que el radio de desenfoque de la sombra ( en px, em, etc... ). Cuanto m\u00e1s bajo sea este valor, menos difuminada estar\u00e1 la sombra, cuanto m\u00e1s alto sea, m\u00e1s borrosa. * El segundo valor es el factor de crecimiento de la sombra. En algunos casos, en los que tenemos una sombra con muy poco desenfoque y las posiciones son 0 , puede que la sombra quede justo detr\u00e1s del elemento, sin poderse apreciar. Aumentando este valor, haremos que la sombra crezca hacia los lados el tama\u00f1o que indiquemos. * Por \u00faltimo, podemos indicar el a utilizar ( recuerda que puedes utilizar canales alfa ) y la palabra clave inset si queremos que la sombra sea interna, en lugar de externa que es la que aparece por defecto. div { /* Sombra normal */ box-shadow : 2 px 2 px 10 px #666 ; /* Sombra superior sin desenfoque */ box-shadow : 5 px -5 px 0 2 px #444 ; /* Sombra interior */ box-shadow : 5 px 5 px 25 px #222 inset ; } Ojo: Ten en cuenta que tanto el de factor de crecimiento como la palabra clave inset s\u00f3lo est\u00e1n disponibles para box-shadow , ya que text-shadow no posee esos par\u00e1metros. Sombras m\u00faltiples \u00b6 Una caracter\u00edstica interesante de la propiedad background en CSS es la posibilidad de indicar fondos multiples separando por comas. En el caso de las sombras, tambi\u00e9n es posible hacer lo mismo, consiguiendo efectos muy vistosos: p { /* Se indican 3 sombras diferentes */ text-shadow : 2 px 2 px 0 #AAA , 6 px 6 px 2 px #777 , 12 px 12 px 8 px #444 ; } En el caso de la propiedad box-shadow tambi\u00e9n se pueden indicar sombras m\u00faltiples. Sombras flexibles \u00b6 En el m\u00f3dulo de filtros CSS existe una funci\u00f3n denominada drop-shadow que puede utilizarse en un filtro. Dicha funci\u00f3n permite aplicar una sombra id\u00e9ntica a un objeto determinado con una forma irregular. Por ejemplo, podr\u00edamos disponer de una imagen PNG con fondo transparente, al que le queremos aplicar una sombra de modo que respete su contorno. Con la propiedad box-shadow la sombra que se aplicar\u00eda ser\u00eda totalmente rectangular, sin embargo, con la propiedad filter y la funci\u00f3n drop-shadow ( la cu\u00e1l tiene los mismos par\u00e1metros que text-shadow ), aplicar\u00eda una sombra que respetar\u00e1 exactamente la forma de la imagen. img { filter : drop-shadow ( 5 px 5 px 10 px #444 ); } Filtros CSS \u00b6 Los filtros CSS son una caracter\u00edstica muy atractiva de CSS que permite aplicar ciertos efectos de imagen, propios de aplicaciones de retoque fotogr\u00e1fico, como sepia , variaciones de brillo o contraste ( u otros ) al vuelo en el propio navegador, sin hacer cambios permanentes sobre una imagen. Dichos filtros funcionan a trav\u00e9s de la propiedad filter , a la cu\u00e1l hay que especificarle una funci\u00f3n concreta de las existentes, como por ejemplo la funci\u00f3n de blanco y negro ( grayscale ): img { filter : grayscale ( 75 % ); } Nota: Aunque es la que se ha utilizado en el ejemplo, esta propiedad funciona con otros elementos, es decir, no debe aplicarse necesariamente sobre una imagen. Funciones de filtros \u00b6 Los filtros de CSS tienen a nuestra disposici\u00f3n un amplio abanico de funciones, listas para utilizar mediante la propiedad filter y aplicarlas a los elementos que queramos: Funci\u00f3n Significado Valor M\u00ednimo M\u00e1ximo >100% grayscale Escala de blanco y negro 0% \u00b9 100% = B&N blur Grado de difuminado Tama\u00f1o de radio (desenfoque) sepia Grado de color sepia 0% \u00b9 100% = sepia saturate Grado de saturaci\u00f3n 0% = B&N 100% \u00b9 S\u00ed opacity Grado de transparencia 0% = invisible 100% = visible \u00b9 brightness Brillo 0% = negro 100% \u00b9 S\u00ed contrast Contraste 0% = gris 100% \u00b9 S\u00ed hue-rotate Rotaci\u00f3n de color (matiz) 0/360deg \u00b9 invert Invertir 0% \u00b9 100% = invertido drop-shadow Sombra id\u00e9ntica (Ver apartado de sombras CSS ) ( \u00b9 ) Es el valor considerado como original Nota : En las cantidades de se pueden utilizar indistintamente porcentajes ( entre 0% y 100% ) o valores num\u00e9ricos con decimales ( entre 0 y 1 ). Por ejemplo, filter: contrast(0.5) es lo mismo que filter: contrast(50%) . Estas propiedades permiten alterar los colores, tonalidades o diferentes aspectos visuales, tal como se har\u00edan desde un programa de dise\u00f1o gr\u00e1fico. Por ejemplo, la rotaci\u00f3n de colores ( hue-rotate ) se representa mediante una rueda de colores, donde el grado definido especifica el matiz que se le da a los colores, pudiendo alterarlo ligera o intensamente: Nota: La funci\u00f3n opacity ya existe en CSS fuera de los filtros CSS. Puede utilizarse de forma independientemente, con el siguiente formato: opacity: 0.75 . Modos de fusi\u00f3n CSS \u00b6 Los filtros CSS est\u00e1n muy bien en multitud de situaciones, pero hay casos en los que se nos pueden quedar cortos. Los modos de fusi\u00f3n son un interesante a\u00f1adido que aparece en CSS para dotar de otra caracter\u00edstica muy com\u00fan en los programas de dise\u00f1o y edici\u00f3n de imagen: la fusi\u00f3n de dos elementos sumando la informaci\u00f3n de color de los p\u00edxeles de cada uno de ellos. Mediante las propiedades mix-blend-mode y background-blend-mode podemos utilizar modos de fusi\u00f3n en los diferentes elementos que seleccionemos en una p\u00e1gina web, aplicando composici\u00f3n para mezclar los colores, superponiendo dos elementos, consiguiendo una variaci\u00f3n como resultado final. Dichas propiedades son las siguientes: Propiedad Valor Significado mix-blend-mode normal background-blend-mode normal isolation auto isolate La diferencia entre ambas propiedades es que la primera de ellas, mix-blend-mode , se utiliza para elementos, mientras que la segunda, background-blend-mode , se utiliza para aplicar modos de fusi\u00f3n en fondos. Por ejemplo, us\u00e1ndola con una imagen: body { background : green ; } img { mix-blend-mode : multiply ; } Entre los diferentes modos de fusi\u00f3n que podemos utilizar en dichas propiedades, se encuentran las siguientes: multiply ( multiplicar ) screen ( trama ) overlay ( superponer ) darken ( oscurecer ) lighten ( aclarar ) color-dodge ( sobreexponer color ) color-burn ( subexponer color ) hard-light ( luz fuerte ) soft-light ( luz suave ) difference ( diferencia ) exclusion ( exclusi\u00f3n ) hue ( tono ) saturation ( saturaci\u00f3n ) color luminosity ( luminosidad ) Si no tenemos ning\u00fan modo de fusi\u00f3n aplicado, el valor por defecto de la propiedad es normal . Como ejemplo, a continuaci\u00f3n tenemos una imagen de Smudge aplicado con un modo de fusi\u00f3n sobre un fondo rojo. Puedes mover el rat\u00f3n por encima de \u00e9l para comparar la fotograf\u00eda sin modo de fusi\u00f3n: Podemos hacer uso de la propiedad isolation con valor auto o isolate , para que, en el \u00faltimo caso, se proteja un elemento de la mezcla de fusi\u00f3n y aislarlo sin que se aplique. Nota: Lo mismo que hemos hecho en el ejemplo anterior con una imagen y un color de fondo, se podr\u00eda hacer con 2 o varias im\u00e1genes. El soporte de estas propiedades en navegadores modernos es relativamente bueno, como se ve a continuaci\u00f3n en la siguiente tabla: https://caniuse.com/#feat=css-mixblendmode Fuente: Lenguaje de CSS por Manz","title":"Efectos"},{"location":"desarrollo/css/09-efectos/#efectos","text":"","title":"Efectos"},{"location":"desarrollo/css/09-efectos/#sombras-css","text":"Un efecto interesante que podemos utilizar en nuestros dise\u00f1os web a partir de CSS3 es el de las sombras , ya que nos permiten a\u00f1adir atractivas sombras que pueden suavizar y hacer m\u00e1s elegantes nuestros dise\u00f1os. Podemos utilizar dos tipos de propiedades, text-shadow y box-shadow . La primera de ellas para sombras en textos, y la segunda para sombras en otro tipo de elementos como cajas o contenedores. Ambas propiedades son pr\u00e1cticamente id\u00e9nticas, solo con algunas diferencias: Propiedad Valor Significado text-shadow none box-shadow inset none * Los valores y nos permiten indicar las coordenadas de X e Y donde se situar\u00e1 la sombra, respecto a la posici\u00f3n del texto o contenedor original. * El primer valor es el blur , que no es otra cosa que el radio de desenfoque de la sombra ( en px, em, etc... ). Cuanto m\u00e1s bajo sea este valor, menos difuminada estar\u00e1 la sombra, cuanto m\u00e1s alto sea, m\u00e1s borrosa. * El segundo valor es el factor de crecimiento de la sombra. En algunos casos, en los que tenemos una sombra con muy poco desenfoque y las posiciones son 0 , puede que la sombra quede justo detr\u00e1s del elemento, sin poderse apreciar. Aumentando este valor, haremos que la sombra crezca hacia los lados el tama\u00f1o que indiquemos. * Por \u00faltimo, podemos indicar el a utilizar ( recuerda que puedes utilizar canales alfa ) y la palabra clave inset si queremos que la sombra sea interna, en lugar de externa que es la que aparece por defecto. div { /* Sombra normal */ box-shadow : 2 px 2 px 10 px #666 ; /* Sombra superior sin desenfoque */ box-shadow : 5 px -5 px 0 2 px #444 ; /* Sombra interior */ box-shadow : 5 px 5 px 25 px #222 inset ; } Ojo: Ten en cuenta que tanto el de factor de crecimiento como la palabra clave inset s\u00f3lo est\u00e1n disponibles para box-shadow , ya que text-shadow no posee esos par\u00e1metros.","title":"Sombras CSS"},{"location":"desarrollo/css/09-efectos/#sombras-multiples","text":"Una caracter\u00edstica interesante de la propiedad background en CSS es la posibilidad de indicar fondos multiples separando por comas. En el caso de las sombras, tambi\u00e9n es posible hacer lo mismo, consiguiendo efectos muy vistosos: p { /* Se indican 3 sombras diferentes */ text-shadow : 2 px 2 px 0 #AAA , 6 px 6 px 2 px #777 , 12 px 12 px 8 px #444 ; } En el caso de la propiedad box-shadow tambi\u00e9n se pueden indicar sombras m\u00faltiples.","title":"Sombras m\u00faltiples"},{"location":"desarrollo/css/09-efectos/#sombras-flexibles","text":"En el m\u00f3dulo de filtros CSS existe una funci\u00f3n denominada drop-shadow que puede utilizarse en un filtro. Dicha funci\u00f3n permite aplicar una sombra id\u00e9ntica a un objeto determinado con una forma irregular. Por ejemplo, podr\u00edamos disponer de una imagen PNG con fondo transparente, al que le queremos aplicar una sombra de modo que respete su contorno. Con la propiedad box-shadow la sombra que se aplicar\u00eda ser\u00eda totalmente rectangular, sin embargo, con la propiedad filter y la funci\u00f3n drop-shadow ( la cu\u00e1l tiene los mismos par\u00e1metros que text-shadow ), aplicar\u00eda una sombra que respetar\u00e1 exactamente la forma de la imagen. img { filter : drop-shadow ( 5 px 5 px 10 px #444 ); }","title":"Sombras flexibles"},{"location":"desarrollo/css/09-efectos/#filtros-css","text":"Los filtros CSS son una caracter\u00edstica muy atractiva de CSS que permite aplicar ciertos efectos de imagen, propios de aplicaciones de retoque fotogr\u00e1fico, como sepia , variaciones de brillo o contraste ( u otros ) al vuelo en el propio navegador, sin hacer cambios permanentes sobre una imagen. Dichos filtros funcionan a trav\u00e9s de la propiedad filter , a la cu\u00e1l hay que especificarle una funci\u00f3n concreta de las existentes, como por ejemplo la funci\u00f3n de blanco y negro ( grayscale ): img { filter : grayscale ( 75 % ); } Nota: Aunque es la que se ha utilizado en el ejemplo, esta propiedad funciona con otros elementos, es decir, no debe aplicarse necesariamente sobre una imagen.","title":"Filtros CSS"},{"location":"desarrollo/css/09-efectos/#funciones-de-filtros","text":"Los filtros de CSS tienen a nuestra disposici\u00f3n un amplio abanico de funciones, listas para utilizar mediante la propiedad filter y aplicarlas a los elementos que queramos: Funci\u00f3n Significado Valor M\u00ednimo M\u00e1ximo >100% grayscale Escala de blanco y negro 0% \u00b9 100% = B&N blur Grado de difuminado Tama\u00f1o de radio (desenfoque) sepia Grado de color sepia 0% \u00b9 100% = sepia saturate Grado de saturaci\u00f3n 0% = B&N 100% \u00b9 S\u00ed opacity Grado de transparencia 0% = invisible 100% = visible \u00b9 brightness Brillo 0% = negro 100% \u00b9 S\u00ed contrast Contraste 0% = gris 100% \u00b9 S\u00ed hue-rotate Rotaci\u00f3n de color (matiz) 0/360deg \u00b9 invert Invertir 0% \u00b9 100% = invertido drop-shadow Sombra id\u00e9ntica (Ver apartado de sombras CSS ) ( \u00b9 ) Es el valor considerado como original Nota : En las cantidades de se pueden utilizar indistintamente porcentajes ( entre 0% y 100% ) o valores num\u00e9ricos con decimales ( entre 0 y 1 ). Por ejemplo, filter: contrast(0.5) es lo mismo que filter: contrast(50%) . Estas propiedades permiten alterar los colores, tonalidades o diferentes aspectos visuales, tal como se har\u00edan desde un programa de dise\u00f1o gr\u00e1fico. Por ejemplo, la rotaci\u00f3n de colores ( hue-rotate ) se representa mediante una rueda de colores, donde el grado definido especifica el matiz que se le da a los colores, pudiendo alterarlo ligera o intensamente: Nota: La funci\u00f3n opacity ya existe en CSS fuera de los filtros CSS. Puede utilizarse de forma independientemente, con el siguiente formato: opacity: 0.75 .","title":"Funciones de filtros"},{"location":"desarrollo/css/09-efectos/#modos-de-fusion-css","text":"Los filtros CSS est\u00e1n muy bien en multitud de situaciones, pero hay casos en los que se nos pueden quedar cortos. Los modos de fusi\u00f3n son un interesante a\u00f1adido que aparece en CSS para dotar de otra caracter\u00edstica muy com\u00fan en los programas de dise\u00f1o y edici\u00f3n de imagen: la fusi\u00f3n de dos elementos sumando la informaci\u00f3n de color de los p\u00edxeles de cada uno de ellos. Mediante las propiedades mix-blend-mode y background-blend-mode podemos utilizar modos de fusi\u00f3n en los diferentes elementos que seleccionemos en una p\u00e1gina web, aplicando composici\u00f3n para mezclar los colores, superponiendo dos elementos, consiguiendo una variaci\u00f3n como resultado final. Dichas propiedades son las siguientes: Propiedad Valor Significado mix-blend-mode normal background-blend-mode normal isolation auto isolate La diferencia entre ambas propiedades es que la primera de ellas, mix-blend-mode , se utiliza para elementos, mientras que la segunda, background-blend-mode , se utiliza para aplicar modos de fusi\u00f3n en fondos. Por ejemplo, us\u00e1ndola con una imagen: body { background : green ; } img { mix-blend-mode : multiply ; } Entre los diferentes modos de fusi\u00f3n que podemos utilizar en dichas propiedades, se encuentran las siguientes: multiply ( multiplicar ) screen ( trama ) overlay ( superponer ) darken ( oscurecer ) lighten ( aclarar ) color-dodge ( sobreexponer color ) color-burn ( subexponer color ) hard-light ( luz fuerte ) soft-light ( luz suave ) difference ( diferencia ) exclusion ( exclusi\u00f3n ) hue ( tono ) saturation ( saturaci\u00f3n ) color luminosity ( luminosidad ) Si no tenemos ning\u00fan modo de fusi\u00f3n aplicado, el valor por defecto de la propiedad es normal . Como ejemplo, a continuaci\u00f3n tenemos una imagen de Smudge aplicado con un modo de fusi\u00f3n sobre un fondo rojo. Puedes mover el rat\u00f3n por encima de \u00e9l para comparar la fotograf\u00eda sin modo de fusi\u00f3n: Podemos hacer uso de la propiedad isolation con valor auto o isolate , para que, en el \u00faltimo caso, se proteja un elemento de la mezcla de fusi\u00f3n y aislarlo sin que se aplique. Nota: Lo mismo que hemos hecho en el ejemplo anterior con una imagen y un color de fondo, se podr\u00eda hacer con 2 o varias im\u00e1genes. El soporte de estas propiedades en navegadores modernos es relativamente bueno, como se ve a continuaci\u00f3n en la siguiente tabla: https://caniuse.com/#feat=css-mixblendmode Fuente: Lenguaje de CSS por Manz","title":"Modos de fusi\u00f3n CSS"},{"location":"desarrollo/css/10-responsive_Web_Design/","text":"Responsive Web Design \u00b6 \u00bfQu\u00e9 es Responsive Design? \u00b6 En la actualidad, el uso de todo tipo de dispositivos m\u00f3viles se ha disparado, no s\u00f3lo de < >, sino tambi\u00e9n de tablets, < >, lectores de ebooks y m\u00faltiples tipos de dispositivos con capacidad de conexi\u00f3n a Internet. Cada vez es m\u00e1s frecuente acceder a Internet con diferentes tipos de dispositivos, que a su vez tienen diferentes pantallas y resoluciones , con distintos tama\u00f1os y formas, que hacen que se consuman las p\u00e1ginas webs de formas diferentes, apareciendo por el camino tambi\u00e9n diferentes necesidades, problemas y soluciones. Por lo tanto, en la actualidad, cuando dise\u00f1amos una web, esta debe estar preparada para verse correctamente en diferentes resoluciones, cosa que, a priori no es sencilla. Antiguamente, se lleg\u00f3 al punto de preparar una web diferente dependiendo del dispositivo o navegador que utilizaba el usuario, pero era algo que se termin\u00f3 descartando, ya que no era pr\u00e1ctico. Por suerte, esos tiempos han quedado atr\u00e1s, y la m\u00e1xima que se sigue hoy es dise\u00f1ar una sola web, que se adapte visualmente al dispositivo utilizado . Hoy en d\u00eda se le denomina Responsive Web Design ( o RWD ) a los dise\u00f1os web que tienen la capacidad de adaptarse al tama\u00f1o y formato de la pantalla en la que se visualiza el contenido, respecto a los dise\u00f1os tradicionales en los que las p\u00e1ginas web estaban dise\u00f1adas s\u00f3lo para un tama\u00f1o o formato espec\u00edfico, y no ten\u00edan esa capacidad de adaptaci\u00f3n. Aunque en principio el concepto de web adaptativa es muy sencillo de comprender, aplicarlo puede ser todo un quebradero de cabeza si no se conocen bien las bases y se adquiere experiencia. En MediaQueri.es puedes encontrar algunos ejemplos de p\u00e1ginas que utilizan Responsive Web Design para tener clara la idea. Conceptos b\u00e1sicos \u00b6 En el excelente art\u00edculo 9 basic principles of responsive web design, de Froont , hay una estupenda explicaci\u00f3n visual de algunos conceptos b\u00e1sicos necesarios para entender correctamente el Responsive Web Design . Son los siguientes: El primero de ellos es la diferencia entre dise\u00f1o responsivo y dise\u00f1o adaptativo . Como se puede ver en la imagen a continuaci\u00f3n, un dise\u00f1o responsive responde ( valga la rebuznancia ) en todo momento a las dimensiones del dispositivo, mientras que un dise\u00f1o adaptable es aquel que se adapta, pero no necesariamente responde en todo momento: Veremos que esto puede ser la diferencia entre aplicar correctamente conceptos como media queries, porcentajes y propiedades de ancho m\u00e1ximo y m\u00ednimo, que veremos m\u00e1s adelante. Por otro lado, para trabajar correctamente en dise\u00f1os responsive hay que tener en cuenta que debemos trabajar con unidades relativas e intentar evitar las unidades fijas o est\u00e1ticas, las cuales no responden a la adaptaci\u00f3n de nuestros dise\u00f1os flexibles: Otra forma interesante de trabajar esa respuesta de los dise\u00f1os responsive es utilizar propiedades como min-width o max-width , donde definimos tama\u00f1os m\u00ednimos o m\u00e1ximos, para que los elementos de nuestra p\u00e1gina puedan ampliar o reducirse seg\u00fan sea necesario dependiendo de la pantalla del dispositivo utilizado. Con estas propiedades podemos crear dise\u00f1os que aprovechen al m\u00e1ximo toda la pantalla de dispositivos peque\u00f1os ( como m\u00f3viles o tablets ), mientras que establecemos unos m\u00e1ximos en pantallas de dispositivos grandes, para crear unos espacios visuales que hacen que el dise\u00f1o sea m\u00e1s agradable: Otro concepto, que a la misma vez es una caracter\u00edstica muy atractiva en nuestros dise\u00f1os responsive es la de mantener el flujo de los elementos cuando cambian de tama\u00f1o y evitar que estos se solapen unos con otros. Si estamos habituados a trabajar en dise\u00f1os m\u00e1s est\u00e1ticos que no est\u00e1n preparados para m\u00f3viles, suele ser duro hacer ese cambio. Sin embargo, una vez lo conseguimos, todo resulta mucho m\u00e1s f\u00e1cil y conseguiremos transmitir una buena respuesta y fluidez visual: Esto \u00faltimo va muy de la mano del sistema habitual de recolocaci\u00f3n de elementos que se suele seguir en los dise\u00f1os Responsive Design . Como se puede ver en la siguiente imagen, en un dise\u00f1o responsive se utilizan ciertos < >. Por ejemplo, se suele pensar que en una resoluci\u00f3n de escritorio queremos mostrar la informaci\u00f3n dentro de una cuadr\u00edcula ( grid ) de 4 \u00f3 5 celdas de ancho, mientras que en la versi\u00f3n de tablet ser\u00e1 s\u00f3lo de 3 celdas de ancho ( el resto se desplazar\u00e1 a la siguiente fila ) y en m\u00f3viles ser\u00e1 una sola celda de ancho, mostr\u00e1ndose el resto de celdas haciendo scroll hacia abajo: Esta forma de trabajar nos proporciona m\u00faltiples ventajas: Es mucho m\u00e1s sencillo mostrar la misma informaci\u00f3n desde dise\u00f1os de pantalla grande. Ayuda a evitar la mala pr\u00e1ctica de ocultar bloques de informaci\u00f3n en dispositivos m\u00f3viles. Incentiva a dise\u00f1ar siguiendo buenas pr\u00e1cticas para facilitar la creaci\u00f3n responsive. Preparaci\u00f3n previa \u00b6 Antes de comenzar a crear un dise\u00f1o web preparado para m\u00f3viles, es importante tener claro ciertos detalles: A priori, \u00bfCu\u00e1l es tu p\u00fablico objetivo? \u00bfm\u00f3vil o escritorio? \u00bfambos? Debes conocer las resoluciones m\u00e1s utilizadas por tu p\u00fablico potencial Debes elegir una estrategia acorde a los datos anteriores En primer lugar, es importante conocer los formatos de pantalla m\u00e1s comunes con los cuales nos vamos a encontrar. Podemos consultar p\u00e1ginas como MyDevices , la cu\u00e1l tiene un apartado de comparaci\u00f3n de dispositivos , donde se nos muestra un listado de dispositivos categorizados en smartphones, tablets u otros dispositivos con las caracter\u00edsticas de cada uno: dimensiones de ancho, alto, radio de p\u00edxels, etc... Una vez est\u00e9s familiarizado con estos detalles, es importante conocer el p\u00fablico de tu sitio web . \u00bfAcceden m\u00e1s usuarios desde m\u00f3vil o desde escritorio? \u00bfPredominan las tablets o los m\u00f3viles? \u00bfTu objetivo es tener m\u00e1s usuarios de m\u00f3vil o de escritorio? Consulta con alg\u00fan sistema de estad\u00edsticas como Google Analytics para comprobar que tipo de p\u00fablico tienes actualmente. Tambi\u00e9n es aconsejable echar un vistazo a informaci\u00f3n externa como las que nos proporcionan estad\u00edsticas globales an\u00f3nimas de Global StatCounter , para hacernos una idea de los atributos m\u00e1s comunes. Estrategias de dise\u00f1o \u00b6 Por \u00faltimo, es aconsejable decidirse por una estrategia de dise\u00f1o antes de comenzar. Aunque existen otras estrategias, las dos vertientes principales m\u00e1s populares son las siguientes: Estrategia Descripci\u00f3n Mobile first Primero nos enfocamos en dispositivos m\u00f3viles y luego pensamos en otros. Desktop first Primero nos enfocamos en dispositivos de escritorio, y luego pensamos en otros. La estrategia Mobile-first es la que utilizan los dise\u00f1adores de sitios webs en las que su p\u00fablico objetivo es mayoritariamente usuario de m\u00f3vil. Ejemplos como una web para comprar billetes de transporte, la web de un juego o aplicaci\u00f3n m\u00f3vil o una web para pedir cita en un restaurante podr\u00edan ser, a priori, una buena elecci\u00f3n para utilizar Mobile-first . Esta estrategia hace que el desarrollo en escritorio sea muy sencillo, ya que se reduce a tener un dise\u00f1o de m\u00f3vil en escritorio e ir a\u00f1adiendo nuevas secciones o partes para < > el dise\u00f1o en resoluciones grandes. Por otro lado, la estrategia Desktop-first suele interesar m\u00e1s a los dise\u00f1adores de sitios webs en las que el p\u00fablico objetivo son usuarios de escritorio. Por ejemplo, una p\u00e1gina de una aplicaci\u00f3n para PC/Mac o similares, podr\u00eda ser una buena opci\u00f3n para la estrategia Desktop-first . En ella, hacemos justo lo contrario que en la anterior, lo primero que dise\u00f1amos es la versi\u00f3n de escritorio, y luego vamos descargando detalles o recolocando informaci\u00f3n hasta tener la versi\u00f3n para dispositivos m\u00f3viles. Bases del Responsive Design \u00b6 Como explicamos en el cap\u00edtulo anterior, hay ciertos conceptos que hay que tener claros antes de comenzar con el Responsive Design . En esta secci\u00f3n vamos a ver como llevarlos a la pr\u00e1ctica con c\u00f3digo. Dise\u00f1o con porcentajes \u00b6 El primer paso para crear un dise\u00f1o que se adapte correctamente, es comenzar a familiarizarse con un tipo de unidades relativas: los porcentajes . Recordemos que los porcentajes son relativos al contenedor padre, por lo que si especificamos un porcentaje a un elemento, el navegador va a tomar dicho porcentaje del contenedor. Nota: Al comenzar, algunos dise\u00f1adores tienen una percepci\u00f3n incorrecta de que los porcentajes toman el tama\u00f1o dependiendo de lo que mide la ventana del navegador. Realmente los porcentajes dependen siempre del tama\u00f1o del elemento padre que los contiene. Si queremos basarnos en el tama\u00f1o del navegador, hay que usar unidades de viewport . Podemos comenzar usando porcentajes con las propiedades width en un ejemplo sencillo. Si establecemos un ancho de 100% ( valor por defecto en elementos de tipo block, no hace falta indicarlo ) a los elementos grises que vemos a continuaci\u00f3n ( #header, #page y #footer ), un 30% al azul ( #menu ) y un 70% al gris claro ( #content ) podr\u00edamos obtener este dise\u00f1o: El c\u00f3digo utilizado ser\u00eda algo parecido a lo siguiente: < div id = \"header\" ></ div > < div id = \"page\" > < div id = \"menu\" ></ div > < div id = \"content\" ></ div > </ div > < div id = \"footer\" ></ div > N\u00f3tese que los elementos #menu y #content se encuentran dentro de #page . Tengan en cuenta que, estamos utilizando id en este ejemplo, aunque hab\u00edamos comentado que lo ideal quiz\u00e1s ser\u00eda utilizar clases. Por su parte, el c\u00f3digo CSS tendr\u00eda esta pinta: div { /* Ponemos un alto m\u00ednimo, por defecto es 0 */ min-height : 200 px ; /* Dibujamos un borde para ver l\u00edmites */ border : 2 px solid black ; } # header , # page , # footer { background : grey ; } # menu , # content { /* Necesario para que los elementos est\u00e9n en horizontal */ display : inline-block ; } # menu { background : blue ; width : 30 % ; } # content { background : lightgrey ; width : 70 % ; } Sin embargo, utilizar porcentajes no nos garantiza un dise\u00f1o adaptativo de calidad, hay que comprender otros detalles. El primer problema que encontraremos ser\u00e1 que si sumamos el tama\u00f1o de los elementos ( 70% + 30% ) junto a los bordes ( 2px por cada lado ), la suma es superior al 100% del contenedor padre, por lo que no cabe en su interior y el segundo elemento se desplaza a la zona inferior, descuadrando todo el dise\u00f1o. Lo mismo puede ocurrir si intentamos a\u00f1adir margin o padding . Esto es algo muy habitual en CSS. Y frustrante al principio. Hay varias formas de solucionar esto: Eliminar los bordes y reducir los porcentajes hasta que quepan en el 100% del padre. Usar box-sizing: border-box para cambiar el modo en el que se gestionan los tama\u00f1os. Utilizar un sistema moderno como Flexbox o Grid ( recomendado ). Una forma simple de solucionar el problema en el ejemplo anterior, es hacer los siguientes cambios en el CSS del documento: /* Eliminamos este bloque */ # menu , # content { display : inline-block ; } /* A\u00f1adimos este */ # page { display : flex ; } De esta forma, conseguimos que nuestro dise\u00f1o se adapte de forma adecuada a la p\u00e1gina, sin necesidad de tener que ajustar los m\u00e1rgenes, rellenos, bordes o tama\u00f1o de los contenidos. Tama\u00f1os m\u00e1ximos y m\u00ednimos \u00b6 Si buscamos un cierto grado de control a\u00fan mayor, podr\u00edamos recurrir a las propiedades max-width y min-width , con las que podemos indicar el ancho de un elemento como m\u00e1ximo y el ancho de un elemento como m\u00ednimo respectivamente, consiguiendo as\u00ed garantizar cierto control del dise\u00f1o: . picture { min-height : 200 px ; /* Por defecto, height es 0 */ background : grey ; /* Simplemente, para verlo visualmente */ max-width : 1024 px ; min-width : 800 px ; } En este caso, el elemento tiene un tama\u00f1o m\u00e1ximo de 1024 p\u00edxeles, y un tama\u00f1o m\u00ednimo de 800 p\u00edxeles, por lo que si ajustamos el ancho de la ventana del navegador, dicho elemento ir\u00eda variando en un rango de 800 a 1024 p\u00edxeles, nunca haci\u00e9ndose m\u00e1s peque\u00f1o de 800 o m\u00e1s grande de 1024. Nota : Es importante darse cuenta de que este ejemplo funciona porque no hay definido un width ( por omisi\u00f3n, es igual a width: 100% ). Desde que exista un width , las otras propiedades pierden efecto porque se est\u00e1 obligando a que tenga un tama\u00f1o fijo concreto. Con las im\u00e1genes, videos y contenidos multimedia, se puede hacer lo mismo, consiguiendo as\u00ed que las im\u00e1genes se escalen y adapten al formato especificado o incluso al tama\u00f1o de pantalla de los diferentes dispositivos utilizados: img , video , object , embed { max-width : 100 % ; height : auto ; } El viewport \u00b6 En muchos casos puede que oigas hablar del viewport del navegador. Esa palabra hace referencia a la regi\u00f3n visible del navegador , o sea, la parte de la p\u00e1gina que est\u00e1 visualiz\u00e1ndose actualmente en el navegador. Los usuarios podemos redimensionar la ventana del navegador para reducir el tama\u00f1o del viewport y simular que se trata de una pantalla y dispositivo m\u00e1s peque\u00f1o. Si queremos editar ciertos comportamientos del viewport del navegador, podemos editar el documento HTML para especificar el siguiente campo meta, antes de la parte del </head> : < meta name = \"viewport\" content = \"initial-scale=1, width=device-width\" > Con esta etiqueta <meta> , estamos estableciendo unos par\u00e1metros de comportamiento para el viewport del navegador. Veamos que significan y cuales m\u00e1s existen: Propiedades Valor Significado width device-width Indica un ancho para el viewport. height device-height Indica un alto para el viewport. initial-scale 1 Escala inicial con la que se visualiza la p\u00e1gina web. minimum-scale 0.1 Escala m\u00ednima a la que se puede reducir al hacer zoom. maximum-scale 10 Escala m\u00e1xima a la que se puede aumentar al hacer zoom. user-scalable no/fixed yes/zoom Las propiedades initial-scale , minimum-scale y maximum-scale permiten valores desde el 0.1 al 10 , aunque ciertos valores se traducen autom\u00e1ticamente a ciertos n\u00fameros determinados: yes = 1 no = 0.1 device-width = 10 device-height = 10 Por otra parte, user-scalable permite definir si es posible que el usuario pueda < > la pantalla para ampliar o reducir el zoom. Ojo: Aunque es posible utilizar algunos de estos par\u00e1metros, es aconsejable revisar detalladamente las consecuencias de especificar estos par\u00e1metros. Lo recomendable es utilizar s\u00f3lo los que se mencionan en el fragmento de c\u00f3digo superior, para evitar problemas de accesibilidad que impidan ciertas acciones. Media Queries \u00b6 Una vez nos adentramos en el mundo del Responsive Design , nos damos cuenta en que hay situaciones en las que determinados aspectos o componentes visuales deben aparecer en un tipo de dispositivos, o deben existir ciertas diferencias. Por ejemplo, una zona donde se encuentra el buscador de la p\u00e1gina puede estar colocada en un sitio concreto en la versi\u00f3n de escritorio, pero en m\u00f3vil quiz\u00e1s nos interesa que ocupe otra zona ( o que tenga otro tama\u00f1o o forma ) para aprovechar mejor el poco espacio que tenemos en la versi\u00f3n m\u00f3vil de la p\u00e1gina. Para ello, utilizaremos un concepto denominado media queries , con los que podemos hacer esas excepciones para que s\u00f3lo se apliquen a un tipo de dise\u00f1o concreto. \u00bfQu\u00e9 son las media queries? \u00b6 Las reglas media queries ( tambi\u00e9n denominadas MQ a veces ) son un tipo de reglas de CSS que permiten crear un bloque de c\u00f3digo que s\u00f3lo se procesar\u00e1 en los dispositivos que cumplan los criterios especificados como condici\u00f3n: @ media screen and (* condici\u00f3n *) { /* reglas CSS */ /* reglas CSS */ } @ media screen and not (* condici\u00f3n *) { /* reglas CSS */ /* reglas CSS */ } Con este m\u00e9todo, especificamos que queremos aplicar los estilos CSS para tipos de medios concretos ( screen : s\u00f3lo en pantallas, en este caso ) que cumplan las condiciones especificadas entre par\u00e9ntesis. De esta forma, una estrategia aconsejable es crear reglas CSS generales ( como hemos hecho hasta ahora ) aplicadas a todo el documento: colores, tipo de fuente, etc. y luego, las particularidades que se aplicar\u00edan s\u00f3lo en el dispositivo en cuesti\u00f3n. Aunque suele ser menos habitual, tambi\u00e9n se pueden indicar reglas @media negadas mediante la palabra clave not , que aplicar\u00e1 CSS siempre y cuando no se cumpla una determinada condici\u00f3n. Tambien pueden separarse por comas varias condiciones de media queries. Truco: Al igual que not , tambi\u00e9n existe una palabra clave only que, suele usarse a modo de hack . El comportamiento por defecto ya incluye los dispositivos que encajan con la condici\u00f3n, pero con la palabra clave only conseguimos que navegadores antiguos que no la entienden, no procesen la informaci\u00f3n, dej\u00e1ndola s\u00f3lo para navegadores modernos. Existen los siguientes tipos de medios : Tipo de medio Significado screen Monitores o pantallas de ordenador. Es el m\u00e1s com\u00fan. print Documentos de medios impresos o pantallas de previsualizaci\u00f3n de impresi\u00f3n. speech Lectores de texto para invidentes (Antes aural , el cu\u00e1l ya est\u00e1 obsoleto). all Todos los dispositivos o medios. El que se utiliza por defecto . Otros tipos de medios como braille , embossed , handheld , projection , tty o tv a\u00fan son v\u00e1lidos, pero est\u00e1n marcados como obsoletos a favor de utilizar tipos de medios de la lista anterior y restringir sus caracter\u00edsticas posteriormente. Recordemos que con el siguiente fragmento de c\u00f3digo HTML estamos indicando que el nuevo ancho de la pantalla es el ancho del dispositivo , por lo que el aspecto del viewport se va a adaptar consecuentemente: < meta name = \"viewport\" content = \"initial-scale=1, width=device-width\" > Con esto conseguiremos preparar nuestra web para dispositivos m\u00f3viles y prepararnos para la introducci\u00f3n de reglas media query en el documento CSS. Ejemplos de media queries \u00b6 Veamos un ejemplo cl\u00e1sico de media queries en el que definimos diferentes estilos dependiendo del dispositivo que estamos utilizando. Observese que en el c\u00f3digo existen 3 bloques @media donde se definen estilos CSS para cada uno de esos tipos de dispositivos. El c\u00f3digo ser\u00eda el siguiente: @ media screen and ( max-width : 640px ) { . menu { background : blue ; } } @ media screen and ( min-width : 640px ) and ( max-width : 1280px ) { . menu { background : red ; } } @ media screen and ( min-width : 1280px ) { . menu { background : green ; } } El ejemplo anterior muestra un elemento ( con clase menu ) con un color de fondo concreto, dependiendo del tipo de medio con el que se visualice la p\u00e1gina: Azul para resoluciones menores a 640 p\u00edxeles de ancho ( m\u00f3viles ). Rojo para resoluciones entre 640 p\u00edxeles y 1280 p\u00edxeles de ancho ( tablets ). Verde para resoluciones mayores a 1280 p\u00edxeles ( desktop ). El n\u00famero de bloques de reglas @media que se utilicen depende del desarrollador web, ya que no es obligatorio utilizar un n\u00famero concreto. Se pueden utilizar desde un s\u00f3lo media query, hasta m\u00faltiples de ellos a lo largo de todo el documento CSS. Hay que tener en cuenta que los media queries tambi\u00e9n es posible indicarlos desde HTML, utilizando la etiqueta <link> : < link rel = \"stylesheet\" href = \"mobile.css\" media = \"screen and (max-width: 640px)\" > < link rel = \"stylesheet\" href = \"tablet.css\" media = \"screen and (min-width: 640px) and (max-width: 1280px)\" > < link rel = \"stylesheet\" href = \"desktop.css\" media = \"screen and (min-width: 1280px)\" > Estos estilos quedar\u00e1n separados en varios archivos diferentes. Ten en cuenta que todos ser\u00e1n descargados al cargar la p\u00e1gina, s\u00f3lo que no ser\u00e1n aplicados al documento hasta que cumplan los requisitos indicados en el atributo media . Tipos de caracter\u00edsticas \u00b6 En los ejemplos anteriores solo hemos utilizado max-width y min-width como tipos de caracter\u00edsticas a utilizar en condiciones de media query. Sin embargo, tenemos una lista de tipos de caracter\u00edsticas que podemos utilizar: Tipo de caracter\u00edstica Valores \u00bfCu\u00e1ndo se aplica? width Si el dispositivo tiene el tama\u00f1o indicado exactamente. min-width Si el dispositivo tiene un tama\u00f1o de ancho mayor al indicado. max-width Si el dispositivo tiene un tama\u00f1o de ancho menor al indicado. aspect-ratio aspect-ratio Si el dispositivo encaja con la proporci\u00f3n de aspecto indicada. orientation landscape portrait Existen otras caracter\u00edsticas minoritarias que en algunos casos l\u00edmite pueden ser interesantes, como por ejemplo scan , resolution , monochrome , grid , color-index , color , etc... Condicionales CSS \u00b6 Aunque no forman parte de las media queries en s\u00ed, podemos utilizar la regla @supports para establecer condicionales y crear reglas similares a @media pero dependiendo de si el navegador del usuario soporta una caracter\u00edstica concreta. @ supports not ( display : grid ) and ( display : flex ) { . content { display : flex ; justify-content : center ; } } @ supports not ( display : flex ) { . content { display : block ; } } Estas reglas son muy interesantes para casos particulares donde queremos dar soporte a navegadores antiguos, pero hay que tener en cuenta que navegadores como Internet Explorer ( quiz\u00e1s uno de los m\u00e1s interesantes para utilizarlo ) no tienen soporte para la regla @supports , a\u00fan ni en su versi\u00f3n 11. Medios impresos \u00b6 Ahora que ya disponemos de un conocimiento amplio y extenso de CSS, debemos saber que CSS no se limita s\u00f3lo a p\u00e1ginas webs. Por ejemplo, muy probablemente conozcas uno de los formatos m\u00e1s populares de ebooks ( libros electronicos ): el formato EPUB . Este formato no es m\u00e1s que un archivo comprimido en formato .zip , que en su interior contiene HTML ( m\u00e1s concretamente, XML ) y CSS. Algunos programas o aplicaciones, como por ejemplo el editor Visual Studio Code , la versi\u00f3n de escritorio de WhatsApp o Slack est\u00e1n hechos con Electron , que b\u00e1sicamente utilizan HTML y Javascript para crear la interfaz visual que utiliza el usuario y mediante CSS cambian el aspecto visual de la aplicaci\u00f3n. Esto s\u00f3lo son algunos casos en los que CSS forma parte de nuestra vida casi sin darnos cuenta. \u00bfQu\u00e9 son los medios impresos? \u00b6 Otra de las caracter\u00edsticas de CSS que nos puede interesar es la de para preparar hojas de estilo destinadas a la impresi\u00f3n de documentos . Esto es, un documento CSS especialmente dise\u00f1ado para que se aplique unicamente cuando el usuario desee imprimir una p\u00e1gina . Este sistema no es m\u00e1s que una de las posibilidades de los media queries . En lugar de aplicar una regla @media a screen ( pantallas ), lo aplicaramos a print ( documentos de impresi\u00f3n ): @ media print { /* Reglas de CSS */ } Tambi\u00e9n se puede hacer desde el HTML, a trav\u00e9s de la etiqueta <link> : < link rel = \"stylesheet\" media = \"print\" href = \"print.css\" > La raz\u00f3n es obvia, en una impresi\u00f3n nos pueden interesar ciertos detalles: Eliminar fondos negros o intentar que predomine el texto blanco ( gastar menos tinta ). Usar tipograf\u00edas apropiadas para impresi\u00f3n ( cansar menos la vista, reducir gasto de tinta ). Ocultar publicidad, men\u00fas, navegaci\u00f3n, etc... ( no tienen sentido en un documento impreso ). Mostrar ciertos detalles necesarios ( la URL de los enlaces, por ejemplo ). Ejemplo de medios impresos \u00b6 Quiz\u00e1s, la forma m\u00e1s sencilla de a\u00f1adir medios impresos a un documento CSS ya existente, es simplemente a\u00f1adir las reglas de impresi\u00f3n @media print al final del documento, para que se apliquen sobre las anteriores que ya existen. De esta forma partimos del dise\u00f1o actual que ya tenemos, haciendo peque\u00f1os cambios en la versi\u00f3n de impresi\u00f3n: @ media print { /* Ocultar zonas no relevantes */ . navigation , . banner , . menu { display : none ; } /* Cambiar tipograf\u00eda o alternar colores */ body , . content { font-family : Ecofont , sans-serif ; background : white ; color : black ; } /* Mostrar enlaces */ a :: after { content : \"(\" attr ( href ) \")\" ; padding : 0 5 px ; } } Si imprimes muy a menudo documentos, puedes utilizar tipograf\u00edas ecol\u00f3gicas como EcoFont o EcoSans , una tipograf\u00eda que tiene peque\u00f1os agujeros en su interior para ahorrar tinta en la impresi\u00f3n de borradores y que mantiene casi el mismo aspecto visual: Obviamente, depende del desarrollador preferir escribir unas reglas @media print al final del documento CSS aplicando herencia con el resto de los estilos de la p\u00e1gina, o crear un documento CSS individual a parte, donde colocar\u00e1 todos los estilos de impresi\u00f3n y cargar\u00e1 a trav\u00e9s de su elemento <link media=\"print\"> correspondiente. Medios paginados \u00b6 Existe una particularidad de CSS denominada CSS Paged Media , que no es m\u00e1s que un conjunto de caracter\u00edsticas y propiedades espec\u00edficas para medios paginados , como por ejemplo podr\u00edan ser, documentos impresos o la exportaci\u00f3n en archivos .pdf . La regla @page \u00b6 Existen varias propiedades CSS interesantes para estos medios, que pueden ser utilizadas dentro de un bloque @page : Propiedad Valores Significado size auto tipo documento margin Id\u00e9ntica a la propiedad margin que conocemos. Mediante la propiedad size se puede establecer el formato de la p\u00e1gina, tanto mediante los valores predefinidos portrait o landscape ( vertical o apaisado ), como especificando las medidas mediante unidades: @ page { size : 8 . 27in 11 . 69in ; /* DIN A4 */ margin : . 5in . 5in . 5in . 5in ; } De forma adicional, tambi\u00e9n puedes indicar el tipo de documento mediante algunas palabras clave como valor de la propiedad size ( las cuales se pueden usar junto a landscape o portrait para definir su orientaci\u00f3n ): Valor Medidas Significado A5 148mm\u00d7210mm Documento de mitad de tama\u00f1o de un folio DIN A4. B5 176mm\u00d7250mm Documento de tama\u00f1o entre A5 y A4. A4 210mm\u00d7297mm Documento de exactamente el tama\u00f1o folio DIN A4. B4 250mm\u00d7353mm Documento de tama\u00f1o entre A4 y A3. A3 297mm\u00d7420mm Documento del doble de tama\u00f1o de un folio DIN A4. letter 215.9mm\u00d7279.4mm Documento de tama\u00f1o de las cartas americanas. legal 215.9mm\u00d7355.6mm Documento de tama\u00f1o de notificaci\u00f3n legal americana. ledger 279.4mm\u00d7431.8mm Documento de tama\u00f1o libro americano. Nota : Cualquier propiedad utilizada dentro de una regla @page que no sea una de las anteriores ser\u00e1 ignorada. Una vez tenemos definida la estructura de cada p\u00e1gina del documento, pasaremos de una p\u00e1gina web que tiene una estructura continua a un documento paginado, donde cada cierto tama\u00f1o tiene un salto de p\u00e1gina que interrumpe el contenido. Al establecer dichos saltos de p\u00e1gina, el contenido se adapta al tama\u00f1o de cada p\u00e1gina especificado, pero puede ocurrir que debido a los l\u00edmites impuestos por los saltos de p\u00e1gina, un cierto contenido se corte a la mitad y se vea continuado en la siguiente p\u00e1gina, comportamiento no deseable en pr\u00e1cticamente el 100% de los casos. Orphans & Widows \u00b6 Existen casos en los que el comportamiento descrito anteriormente no sea un problema, sin embargo, pueden darse muchos casos en los que s\u00ed lo ser\u00eda: Una imagen o una tabla empieza al final de una p\u00e1gina ( se muestra cortada ). Un p\u00e1rrafo de texto comienza en la \u00faltima l\u00ednea de una p\u00e1gina ( es poco atractivo ). Un nuevo tema comienza a mitad de p\u00e1gina ( lo ideal ser\u00eda comenzar a principio de p\u00e1gina ). Para evitar estos problemas de paginaci\u00f3n se suelen utilizar algunas propiedades interesantes: Propiedad Valores Significado orphans N\u00famero de l\u00edneas < > permitidas ( antes de salto ) widows N\u00famero de l\u00edneas < > permitidas ( despu\u00e9s de salto ) Mediante la propiedad orphans ( l\u00edneas hu\u00e9rfanas ) indicamos hasta que n\u00famero de l\u00edneas no vamos a permitir que aparezcan de forma aislada al final de una p\u00e1gina. Por ejemplo, si especificamos orphans: 3 , significa que cualquier p\u00e1rrafo cortado con el salto de p\u00e1gina, debe mostrar m\u00e1s de 3 l\u00edneas al final de la p\u00e1gina. En caso contrario, se mover\u00e1 el p\u00e1rrafo completo a la siguiente p\u00e1gina. p { orphans : 3 ; widows : 3 ; } Por otra parte, la propiedad widows ( l\u00edneas viudas ) es la propiedad opuesta a orphans . Si al principio de una p\u00e1gina quedan menos de ese n\u00famero de l\u00edneas indicado en widows , se ajusta para que lo supere. Saltos de p\u00e1gina \u00b6 Por \u00faltimo, mencionar las propiedades de salto de p\u00e1gina, muy \u00fatiles para evitar comportamientos que pueden quedar poco atractivos en un documento paginado: Propiedad Valores Significado page-break-inside auto avoid page-break-before auto always page-break-after auto always La propiedad page-break-inside se utiliza para evitar que un cierto elemento pueda ser cortado a la mitad en un salto de p\u00e1gina, como por ejemplo im\u00e1genes, tablas o fragmentos de c\u00f3digo: @ media print { table , img , pre , code { page-break-inside : avoid ; } } De forma similar, las propiedades page-break-before y page-break-after se utilizan para evitar o forzar al generar el documento paginado que ciertos elementos se mantengan antes o despu\u00e9s del salto de p\u00e1gina. Pseudoclases de p\u00e1gina \u00b6 Tambi\u00e9n existen algunas pseudoclases espec\u00edficas para paginaci\u00f3n, que permiten hacer referencia a p\u00e1ginas concretas del documento generado, pudiendo aplicar estilos s\u00f3lo a este tipo de p\u00e1ginas: Pseudo-clase Significado :first Primera p\u00e1gina del documento paginado. :left P\u00e1ginas izquierdas del documento paginado. :right P\u00e1ginas derechas del documento paginado. :blank P\u00e1ginas en blanco (generadas por los saltos de p\u00e1gina). S\u00f3lo algunas propiedades CSS como margin , padding , background u otras pueden estar permitidas dentro de estas pseudoclases especiales. Preferencias de usuario \u00b6 Dentro del apartado de media queries disponemos de una mec\u00e1nica para detectar ciertas preferencias de usuario , o lo que es lo mismo, si el usuario ha indicado algunas preferencias por ciertos detalles en su dispositivo, sistema operativo o navegador que utiliza. Tipo de preferencia Valores Detecta si el usuario tiene preferencia por... prefers-color-scheme dark light prefers-reduced-motion reduce no-preference prefers-reduced-data reduce no-preference Echemos un vistazo detenidamente a cada una de ellas: Dark mode / Light mode \u00b6 Por ejemplo, una de las caracter\u00edsticas m\u00e1s recurrentes en interfaces de usuario es la posibilidad de elegir un dark mode o dark theme , es decir, un sistema que permita al usuario seleccionar un tema claro ( generalmente con fondo blanco ) o un tema oscuro ( generalmente con fondo negro ). Aunque podemos hacer esto de forma manual , existe una regla @media especial denominada prefers-color-scheme donde podemos detectar si el usuario tiene preferencia por uno de estos dos valores ( establecido en las opciones del sistema operativo ) y actuar en consecuencia. Los valores que es posible indicar son light o dark : @ media ( prefers-color-scheme : dark ) { : root { -- background-color : #333 ; -- foreground-color : #eee ; } } @ media ( prefers-color-scheme : light ) { : root { -- background-color : #eee ; -- foreground-color : #111 ; } } body { background-color : var ( -- background - color ); color : var ( -- foreground - color ); } El soporte de dicha propiedad es bastante bueno en la actualidad, incluso en dispositivos m\u00f3viles, por lo que se puede utilizar con seguridad. Movimiento reducido \u00b6 Las interfaces modernas en la actualidad suelen apostar por dise\u00f1os con animaciones y transiciones que hacen m\u00e1s agradables los cambios de estado y acciones espec\u00edficas en una web. Sin embargo, por cuestiones de accesibilidad estas animaciones tambi\u00e9n pueden suponer molestias a usuarios que son especialmente sensibles a este tipo de est\u00edmulos. En CSS tenemos una caracter\u00edstica que permite notificar al desarrollador web si un usuario ha elegido en su sistema que prefiere eliminar o desactivar este tipo de animaciones o transiciones, mediante prefers-reduced-motion , la cu\u00e1l tiene los valores no-preference o reduce : @ media ( prefers-reduced-motion : reduce ) { : root { -- preferred-animation : soft ; } } . animated { animation : var ( -- preferred - animation , hard ) 2 s linear infinite ; } En el ejemplo anterior, utilizamos la variable --preferred-animation para seleccionar el tipo de animaci\u00f3n preferida. Por defecto, se utilizar\u00e1 hard , pero en el caso de tener esta caracter\u00edstica activada, la animaci\u00f3n utilizada ser\u00e1 soft . De la misma forma, tambi\u00e9n podemos utilizar la propiedad animation-name a none , para desactivar las animaciones por completo. El soporte de esta caracter\u00edstica tambi\u00e9n es bastante bueno, por lo que puede ser utilizado de forma segura: Ancho de banda reducido \u00b6 De la misma forma que en ejemplos anteriores, el usuario puede preferir usar su ancho de banda disponible de forma reducida, evitando as\u00ed descargas que consuman gran cantidad de datos, con su correspondiente gasto que en ciertas situaciones puede ser un ancho de banda l\u00edmitado. La caracter\u00edstica prefers-reduced-data nos permite recuperar del sistema o navegador del usuario la opci\u00f3n reduce o no-preference para saber que preferencia tiene seleccionada. De esta forma podemos crear estilos donde se establezcan im\u00e1genes de bajo tama\u00f1o, o incluso utilizar gradientes o colores s\u00f3lidos en lugar de im\u00e1genes. @ media ( prefers-reduced-data : reduce ) { : root { -- preferred-background : linear-gradient ( 120 deg , steelblue , blue , black ); } } body { background : var ( -- preferred - background , url ( /assets/background.png )); } Desgraciadamente, esta caracter\u00edstica no tiene soporte a\u00fan en los navegadores. Habr\u00e1 que mantenerse a la espera de que los navegadores comiencen a implementarla. Fuente: Lenguaje de CSS por Manz","title":"Responsive Web Design"},{"location":"desarrollo/css/10-responsive_Web_Design/#responsive-web-design","text":"","title":"Responsive Web Design"},{"location":"desarrollo/css/10-responsive_Web_Design/#que-es-responsive-design","text":"En la actualidad, el uso de todo tipo de dispositivos m\u00f3viles se ha disparado, no s\u00f3lo de < >, sino tambi\u00e9n de tablets, < >, lectores de ebooks y m\u00faltiples tipos de dispositivos con capacidad de conexi\u00f3n a Internet. Cada vez es m\u00e1s frecuente acceder a Internet con diferentes tipos de dispositivos, que a su vez tienen diferentes pantallas y resoluciones , con distintos tama\u00f1os y formas, que hacen que se consuman las p\u00e1ginas webs de formas diferentes, apareciendo por el camino tambi\u00e9n diferentes necesidades, problemas y soluciones. Por lo tanto, en la actualidad, cuando dise\u00f1amos una web, esta debe estar preparada para verse correctamente en diferentes resoluciones, cosa que, a priori no es sencilla. Antiguamente, se lleg\u00f3 al punto de preparar una web diferente dependiendo del dispositivo o navegador que utilizaba el usuario, pero era algo que se termin\u00f3 descartando, ya que no era pr\u00e1ctico. Por suerte, esos tiempos han quedado atr\u00e1s, y la m\u00e1xima que se sigue hoy es dise\u00f1ar una sola web, que se adapte visualmente al dispositivo utilizado . Hoy en d\u00eda se le denomina Responsive Web Design ( o RWD ) a los dise\u00f1os web que tienen la capacidad de adaptarse al tama\u00f1o y formato de la pantalla en la que se visualiza el contenido, respecto a los dise\u00f1os tradicionales en los que las p\u00e1ginas web estaban dise\u00f1adas s\u00f3lo para un tama\u00f1o o formato espec\u00edfico, y no ten\u00edan esa capacidad de adaptaci\u00f3n. Aunque en principio el concepto de web adaptativa es muy sencillo de comprender, aplicarlo puede ser todo un quebradero de cabeza si no se conocen bien las bases y se adquiere experiencia. En MediaQueri.es puedes encontrar algunos ejemplos de p\u00e1ginas que utilizan Responsive Web Design para tener clara la idea.","title":"\u00bfQu\u00e9 es Responsive Design?"},{"location":"desarrollo/css/10-responsive_Web_Design/#conceptos-basicos","text":"En el excelente art\u00edculo 9 basic principles of responsive web design, de Froont , hay una estupenda explicaci\u00f3n visual de algunos conceptos b\u00e1sicos necesarios para entender correctamente el Responsive Web Design . Son los siguientes: El primero de ellos es la diferencia entre dise\u00f1o responsivo y dise\u00f1o adaptativo . Como se puede ver en la imagen a continuaci\u00f3n, un dise\u00f1o responsive responde ( valga la rebuznancia ) en todo momento a las dimensiones del dispositivo, mientras que un dise\u00f1o adaptable es aquel que se adapta, pero no necesariamente responde en todo momento: Veremos que esto puede ser la diferencia entre aplicar correctamente conceptos como media queries, porcentajes y propiedades de ancho m\u00e1ximo y m\u00ednimo, que veremos m\u00e1s adelante. Por otro lado, para trabajar correctamente en dise\u00f1os responsive hay que tener en cuenta que debemos trabajar con unidades relativas e intentar evitar las unidades fijas o est\u00e1ticas, las cuales no responden a la adaptaci\u00f3n de nuestros dise\u00f1os flexibles: Otra forma interesante de trabajar esa respuesta de los dise\u00f1os responsive es utilizar propiedades como min-width o max-width , donde definimos tama\u00f1os m\u00ednimos o m\u00e1ximos, para que los elementos de nuestra p\u00e1gina puedan ampliar o reducirse seg\u00fan sea necesario dependiendo de la pantalla del dispositivo utilizado. Con estas propiedades podemos crear dise\u00f1os que aprovechen al m\u00e1ximo toda la pantalla de dispositivos peque\u00f1os ( como m\u00f3viles o tablets ), mientras que establecemos unos m\u00e1ximos en pantallas de dispositivos grandes, para crear unos espacios visuales que hacen que el dise\u00f1o sea m\u00e1s agradable: Otro concepto, que a la misma vez es una caracter\u00edstica muy atractiva en nuestros dise\u00f1os responsive es la de mantener el flujo de los elementos cuando cambian de tama\u00f1o y evitar que estos se solapen unos con otros. Si estamos habituados a trabajar en dise\u00f1os m\u00e1s est\u00e1ticos que no est\u00e1n preparados para m\u00f3viles, suele ser duro hacer ese cambio. Sin embargo, una vez lo conseguimos, todo resulta mucho m\u00e1s f\u00e1cil y conseguiremos transmitir una buena respuesta y fluidez visual: Esto \u00faltimo va muy de la mano del sistema habitual de recolocaci\u00f3n de elementos que se suele seguir en los dise\u00f1os Responsive Design . Como se puede ver en la siguiente imagen, en un dise\u00f1o responsive se utilizan ciertos < >. Por ejemplo, se suele pensar que en una resoluci\u00f3n de escritorio queremos mostrar la informaci\u00f3n dentro de una cuadr\u00edcula ( grid ) de 4 \u00f3 5 celdas de ancho, mientras que en la versi\u00f3n de tablet ser\u00e1 s\u00f3lo de 3 celdas de ancho ( el resto se desplazar\u00e1 a la siguiente fila ) y en m\u00f3viles ser\u00e1 una sola celda de ancho, mostr\u00e1ndose el resto de celdas haciendo scroll hacia abajo: Esta forma de trabajar nos proporciona m\u00faltiples ventajas: Es mucho m\u00e1s sencillo mostrar la misma informaci\u00f3n desde dise\u00f1os de pantalla grande. Ayuda a evitar la mala pr\u00e1ctica de ocultar bloques de informaci\u00f3n en dispositivos m\u00f3viles. Incentiva a dise\u00f1ar siguiendo buenas pr\u00e1cticas para facilitar la creaci\u00f3n responsive.","title":"Conceptos b\u00e1sicos"},{"location":"desarrollo/css/10-responsive_Web_Design/#preparacion-previa","text":"Antes de comenzar a crear un dise\u00f1o web preparado para m\u00f3viles, es importante tener claro ciertos detalles: A priori, \u00bfCu\u00e1l es tu p\u00fablico objetivo? \u00bfm\u00f3vil o escritorio? \u00bfambos? Debes conocer las resoluciones m\u00e1s utilizadas por tu p\u00fablico potencial Debes elegir una estrategia acorde a los datos anteriores En primer lugar, es importante conocer los formatos de pantalla m\u00e1s comunes con los cuales nos vamos a encontrar. Podemos consultar p\u00e1ginas como MyDevices , la cu\u00e1l tiene un apartado de comparaci\u00f3n de dispositivos , donde se nos muestra un listado de dispositivos categorizados en smartphones, tablets u otros dispositivos con las caracter\u00edsticas de cada uno: dimensiones de ancho, alto, radio de p\u00edxels, etc... Una vez est\u00e9s familiarizado con estos detalles, es importante conocer el p\u00fablico de tu sitio web . \u00bfAcceden m\u00e1s usuarios desde m\u00f3vil o desde escritorio? \u00bfPredominan las tablets o los m\u00f3viles? \u00bfTu objetivo es tener m\u00e1s usuarios de m\u00f3vil o de escritorio? Consulta con alg\u00fan sistema de estad\u00edsticas como Google Analytics para comprobar que tipo de p\u00fablico tienes actualmente. Tambi\u00e9n es aconsejable echar un vistazo a informaci\u00f3n externa como las que nos proporcionan estad\u00edsticas globales an\u00f3nimas de Global StatCounter , para hacernos una idea de los atributos m\u00e1s comunes.","title":"Preparaci\u00f3n previa"},{"location":"desarrollo/css/10-responsive_Web_Design/#estrategias-de-diseno","text":"Por \u00faltimo, es aconsejable decidirse por una estrategia de dise\u00f1o antes de comenzar. Aunque existen otras estrategias, las dos vertientes principales m\u00e1s populares son las siguientes: Estrategia Descripci\u00f3n Mobile first Primero nos enfocamos en dispositivos m\u00f3viles y luego pensamos en otros. Desktop first Primero nos enfocamos en dispositivos de escritorio, y luego pensamos en otros. La estrategia Mobile-first es la que utilizan los dise\u00f1adores de sitios webs en las que su p\u00fablico objetivo es mayoritariamente usuario de m\u00f3vil. Ejemplos como una web para comprar billetes de transporte, la web de un juego o aplicaci\u00f3n m\u00f3vil o una web para pedir cita en un restaurante podr\u00edan ser, a priori, una buena elecci\u00f3n para utilizar Mobile-first . Esta estrategia hace que el desarrollo en escritorio sea muy sencillo, ya que se reduce a tener un dise\u00f1o de m\u00f3vil en escritorio e ir a\u00f1adiendo nuevas secciones o partes para < > el dise\u00f1o en resoluciones grandes. Por otro lado, la estrategia Desktop-first suele interesar m\u00e1s a los dise\u00f1adores de sitios webs en las que el p\u00fablico objetivo son usuarios de escritorio. Por ejemplo, una p\u00e1gina de una aplicaci\u00f3n para PC/Mac o similares, podr\u00eda ser una buena opci\u00f3n para la estrategia Desktop-first . En ella, hacemos justo lo contrario que en la anterior, lo primero que dise\u00f1amos es la versi\u00f3n de escritorio, y luego vamos descargando detalles o recolocando informaci\u00f3n hasta tener la versi\u00f3n para dispositivos m\u00f3viles.","title":"Estrategias de dise\u00f1o"},{"location":"desarrollo/css/10-responsive_Web_Design/#bases-del-responsive-design","text":"Como explicamos en el cap\u00edtulo anterior, hay ciertos conceptos que hay que tener claros antes de comenzar con el Responsive Design . En esta secci\u00f3n vamos a ver como llevarlos a la pr\u00e1ctica con c\u00f3digo.","title":"Bases del Responsive Design"},{"location":"desarrollo/css/10-responsive_Web_Design/#diseno-con-porcentajes","text":"El primer paso para crear un dise\u00f1o que se adapte correctamente, es comenzar a familiarizarse con un tipo de unidades relativas: los porcentajes . Recordemos que los porcentajes son relativos al contenedor padre, por lo que si especificamos un porcentaje a un elemento, el navegador va a tomar dicho porcentaje del contenedor. Nota: Al comenzar, algunos dise\u00f1adores tienen una percepci\u00f3n incorrecta de que los porcentajes toman el tama\u00f1o dependiendo de lo que mide la ventana del navegador. Realmente los porcentajes dependen siempre del tama\u00f1o del elemento padre que los contiene. Si queremos basarnos en el tama\u00f1o del navegador, hay que usar unidades de viewport . Podemos comenzar usando porcentajes con las propiedades width en un ejemplo sencillo. Si establecemos un ancho de 100% ( valor por defecto en elementos de tipo block, no hace falta indicarlo ) a los elementos grises que vemos a continuaci\u00f3n ( #header, #page y #footer ), un 30% al azul ( #menu ) y un 70% al gris claro ( #content ) podr\u00edamos obtener este dise\u00f1o: El c\u00f3digo utilizado ser\u00eda algo parecido a lo siguiente: < div id = \"header\" ></ div > < div id = \"page\" > < div id = \"menu\" ></ div > < div id = \"content\" ></ div > </ div > < div id = \"footer\" ></ div > N\u00f3tese que los elementos #menu y #content se encuentran dentro de #page . Tengan en cuenta que, estamos utilizando id en este ejemplo, aunque hab\u00edamos comentado que lo ideal quiz\u00e1s ser\u00eda utilizar clases. Por su parte, el c\u00f3digo CSS tendr\u00eda esta pinta: div { /* Ponemos un alto m\u00ednimo, por defecto es 0 */ min-height : 200 px ; /* Dibujamos un borde para ver l\u00edmites */ border : 2 px solid black ; } # header , # page , # footer { background : grey ; } # menu , # content { /* Necesario para que los elementos est\u00e9n en horizontal */ display : inline-block ; } # menu { background : blue ; width : 30 % ; } # content { background : lightgrey ; width : 70 % ; } Sin embargo, utilizar porcentajes no nos garantiza un dise\u00f1o adaptativo de calidad, hay que comprender otros detalles. El primer problema que encontraremos ser\u00e1 que si sumamos el tama\u00f1o de los elementos ( 70% + 30% ) junto a los bordes ( 2px por cada lado ), la suma es superior al 100% del contenedor padre, por lo que no cabe en su interior y el segundo elemento se desplaza a la zona inferior, descuadrando todo el dise\u00f1o. Lo mismo puede ocurrir si intentamos a\u00f1adir margin o padding . Esto es algo muy habitual en CSS. Y frustrante al principio. Hay varias formas de solucionar esto: Eliminar los bordes y reducir los porcentajes hasta que quepan en el 100% del padre. Usar box-sizing: border-box para cambiar el modo en el que se gestionan los tama\u00f1os. Utilizar un sistema moderno como Flexbox o Grid ( recomendado ). Una forma simple de solucionar el problema en el ejemplo anterior, es hacer los siguientes cambios en el CSS del documento: /* Eliminamos este bloque */ # menu , # content { display : inline-block ; } /* A\u00f1adimos este */ # page { display : flex ; } De esta forma, conseguimos que nuestro dise\u00f1o se adapte de forma adecuada a la p\u00e1gina, sin necesidad de tener que ajustar los m\u00e1rgenes, rellenos, bordes o tama\u00f1o de los contenidos.","title":"Dise\u00f1o con porcentajes"},{"location":"desarrollo/css/10-responsive_Web_Design/#tamanos-maximos-y-minimos","text":"Si buscamos un cierto grado de control a\u00fan mayor, podr\u00edamos recurrir a las propiedades max-width y min-width , con las que podemos indicar el ancho de un elemento como m\u00e1ximo y el ancho de un elemento como m\u00ednimo respectivamente, consiguiendo as\u00ed garantizar cierto control del dise\u00f1o: . picture { min-height : 200 px ; /* Por defecto, height es 0 */ background : grey ; /* Simplemente, para verlo visualmente */ max-width : 1024 px ; min-width : 800 px ; } En este caso, el elemento tiene un tama\u00f1o m\u00e1ximo de 1024 p\u00edxeles, y un tama\u00f1o m\u00ednimo de 800 p\u00edxeles, por lo que si ajustamos el ancho de la ventana del navegador, dicho elemento ir\u00eda variando en un rango de 800 a 1024 p\u00edxeles, nunca haci\u00e9ndose m\u00e1s peque\u00f1o de 800 o m\u00e1s grande de 1024. Nota : Es importante darse cuenta de que este ejemplo funciona porque no hay definido un width ( por omisi\u00f3n, es igual a width: 100% ). Desde que exista un width , las otras propiedades pierden efecto porque se est\u00e1 obligando a que tenga un tama\u00f1o fijo concreto. Con las im\u00e1genes, videos y contenidos multimedia, se puede hacer lo mismo, consiguiendo as\u00ed que las im\u00e1genes se escalen y adapten al formato especificado o incluso al tama\u00f1o de pantalla de los diferentes dispositivos utilizados: img , video , object , embed { max-width : 100 % ; height : auto ; }","title":"Tama\u00f1os m\u00e1ximos y m\u00ednimos"},{"location":"desarrollo/css/10-responsive_Web_Design/#el-viewport","text":"En muchos casos puede que oigas hablar del viewport del navegador. Esa palabra hace referencia a la regi\u00f3n visible del navegador , o sea, la parte de la p\u00e1gina que est\u00e1 visualiz\u00e1ndose actualmente en el navegador. Los usuarios podemos redimensionar la ventana del navegador para reducir el tama\u00f1o del viewport y simular que se trata de una pantalla y dispositivo m\u00e1s peque\u00f1o. Si queremos editar ciertos comportamientos del viewport del navegador, podemos editar el documento HTML para especificar el siguiente campo meta, antes de la parte del </head> : < meta name = \"viewport\" content = \"initial-scale=1, width=device-width\" > Con esta etiqueta <meta> , estamos estableciendo unos par\u00e1metros de comportamiento para el viewport del navegador. Veamos que significan y cuales m\u00e1s existen: Propiedades Valor Significado width device-width Indica un ancho para el viewport. height device-height Indica un alto para el viewport. initial-scale 1 Escala inicial con la que se visualiza la p\u00e1gina web. minimum-scale 0.1 Escala m\u00ednima a la que se puede reducir al hacer zoom. maximum-scale 10 Escala m\u00e1xima a la que se puede aumentar al hacer zoom. user-scalable no/fixed yes/zoom Las propiedades initial-scale , minimum-scale y maximum-scale permiten valores desde el 0.1 al 10 , aunque ciertos valores se traducen autom\u00e1ticamente a ciertos n\u00fameros determinados: yes = 1 no = 0.1 device-width = 10 device-height = 10 Por otra parte, user-scalable permite definir si es posible que el usuario pueda < > la pantalla para ampliar o reducir el zoom. Ojo: Aunque es posible utilizar algunos de estos par\u00e1metros, es aconsejable revisar detalladamente las consecuencias de especificar estos par\u00e1metros. Lo recomendable es utilizar s\u00f3lo los que se mencionan en el fragmento de c\u00f3digo superior, para evitar problemas de accesibilidad que impidan ciertas acciones.","title":"El viewport"},{"location":"desarrollo/css/10-responsive_Web_Design/#media-queries","text":"Una vez nos adentramos en el mundo del Responsive Design , nos damos cuenta en que hay situaciones en las que determinados aspectos o componentes visuales deben aparecer en un tipo de dispositivos, o deben existir ciertas diferencias. Por ejemplo, una zona donde se encuentra el buscador de la p\u00e1gina puede estar colocada en un sitio concreto en la versi\u00f3n de escritorio, pero en m\u00f3vil quiz\u00e1s nos interesa que ocupe otra zona ( o que tenga otro tama\u00f1o o forma ) para aprovechar mejor el poco espacio que tenemos en la versi\u00f3n m\u00f3vil de la p\u00e1gina. Para ello, utilizaremos un concepto denominado media queries , con los que podemos hacer esas excepciones para que s\u00f3lo se apliquen a un tipo de dise\u00f1o concreto.","title":"Media Queries"},{"location":"desarrollo/css/10-responsive_Web_Design/#que-son-las-media-queries","text":"Las reglas media queries ( tambi\u00e9n denominadas MQ a veces ) son un tipo de reglas de CSS que permiten crear un bloque de c\u00f3digo que s\u00f3lo se procesar\u00e1 en los dispositivos que cumplan los criterios especificados como condici\u00f3n: @ media screen and (* condici\u00f3n *) { /* reglas CSS */ /* reglas CSS */ } @ media screen and not (* condici\u00f3n *) { /* reglas CSS */ /* reglas CSS */ } Con este m\u00e9todo, especificamos que queremos aplicar los estilos CSS para tipos de medios concretos ( screen : s\u00f3lo en pantallas, en este caso ) que cumplan las condiciones especificadas entre par\u00e9ntesis. De esta forma, una estrategia aconsejable es crear reglas CSS generales ( como hemos hecho hasta ahora ) aplicadas a todo el documento: colores, tipo de fuente, etc. y luego, las particularidades que se aplicar\u00edan s\u00f3lo en el dispositivo en cuesti\u00f3n. Aunque suele ser menos habitual, tambi\u00e9n se pueden indicar reglas @media negadas mediante la palabra clave not , que aplicar\u00e1 CSS siempre y cuando no se cumpla una determinada condici\u00f3n. Tambien pueden separarse por comas varias condiciones de media queries. Truco: Al igual que not , tambi\u00e9n existe una palabra clave only que, suele usarse a modo de hack . El comportamiento por defecto ya incluye los dispositivos que encajan con la condici\u00f3n, pero con la palabra clave only conseguimos que navegadores antiguos que no la entienden, no procesen la informaci\u00f3n, dej\u00e1ndola s\u00f3lo para navegadores modernos. Existen los siguientes tipos de medios : Tipo de medio Significado screen Monitores o pantallas de ordenador. Es el m\u00e1s com\u00fan. print Documentos de medios impresos o pantallas de previsualizaci\u00f3n de impresi\u00f3n. speech Lectores de texto para invidentes (Antes aural , el cu\u00e1l ya est\u00e1 obsoleto). all Todos los dispositivos o medios. El que se utiliza por defecto . Otros tipos de medios como braille , embossed , handheld , projection , tty o tv a\u00fan son v\u00e1lidos, pero est\u00e1n marcados como obsoletos a favor de utilizar tipos de medios de la lista anterior y restringir sus caracter\u00edsticas posteriormente. Recordemos que con el siguiente fragmento de c\u00f3digo HTML estamos indicando que el nuevo ancho de la pantalla es el ancho del dispositivo , por lo que el aspecto del viewport se va a adaptar consecuentemente: < meta name = \"viewport\" content = \"initial-scale=1, width=device-width\" > Con esto conseguiremos preparar nuestra web para dispositivos m\u00f3viles y prepararnos para la introducci\u00f3n de reglas media query en el documento CSS.","title":"\u00bfQu\u00e9 son las media queries?"},{"location":"desarrollo/css/10-responsive_Web_Design/#ejemplos-de-media-queries","text":"Veamos un ejemplo cl\u00e1sico de media queries en el que definimos diferentes estilos dependiendo del dispositivo que estamos utilizando. Observese que en el c\u00f3digo existen 3 bloques @media donde se definen estilos CSS para cada uno de esos tipos de dispositivos. El c\u00f3digo ser\u00eda el siguiente: @ media screen and ( max-width : 640px ) { . menu { background : blue ; } } @ media screen and ( min-width : 640px ) and ( max-width : 1280px ) { . menu { background : red ; } } @ media screen and ( min-width : 1280px ) { . menu { background : green ; } } El ejemplo anterior muestra un elemento ( con clase menu ) con un color de fondo concreto, dependiendo del tipo de medio con el que se visualice la p\u00e1gina: Azul para resoluciones menores a 640 p\u00edxeles de ancho ( m\u00f3viles ). Rojo para resoluciones entre 640 p\u00edxeles y 1280 p\u00edxeles de ancho ( tablets ). Verde para resoluciones mayores a 1280 p\u00edxeles ( desktop ). El n\u00famero de bloques de reglas @media que se utilicen depende del desarrollador web, ya que no es obligatorio utilizar un n\u00famero concreto. Se pueden utilizar desde un s\u00f3lo media query, hasta m\u00faltiples de ellos a lo largo de todo el documento CSS. Hay que tener en cuenta que los media queries tambi\u00e9n es posible indicarlos desde HTML, utilizando la etiqueta <link> : < link rel = \"stylesheet\" href = \"mobile.css\" media = \"screen and (max-width: 640px)\" > < link rel = \"stylesheet\" href = \"tablet.css\" media = \"screen and (min-width: 640px) and (max-width: 1280px)\" > < link rel = \"stylesheet\" href = \"desktop.css\" media = \"screen and (min-width: 1280px)\" > Estos estilos quedar\u00e1n separados en varios archivos diferentes. Ten en cuenta que todos ser\u00e1n descargados al cargar la p\u00e1gina, s\u00f3lo que no ser\u00e1n aplicados al documento hasta que cumplan los requisitos indicados en el atributo media .","title":"Ejemplos de media queries"},{"location":"desarrollo/css/10-responsive_Web_Design/#tipos-de-caracteristicas","text":"En los ejemplos anteriores solo hemos utilizado max-width y min-width como tipos de caracter\u00edsticas a utilizar en condiciones de media query. Sin embargo, tenemos una lista de tipos de caracter\u00edsticas que podemos utilizar: Tipo de caracter\u00edstica Valores \u00bfCu\u00e1ndo se aplica? width Si el dispositivo tiene el tama\u00f1o indicado exactamente. min-width Si el dispositivo tiene un tama\u00f1o de ancho mayor al indicado. max-width Si el dispositivo tiene un tama\u00f1o de ancho menor al indicado. aspect-ratio aspect-ratio Si el dispositivo encaja con la proporci\u00f3n de aspecto indicada. orientation landscape portrait Existen otras caracter\u00edsticas minoritarias que en algunos casos l\u00edmite pueden ser interesantes, como por ejemplo scan , resolution , monochrome , grid , color-index , color , etc...","title":"Tipos de caracter\u00edsticas"},{"location":"desarrollo/css/10-responsive_Web_Design/#condicionales-css","text":"Aunque no forman parte de las media queries en s\u00ed, podemos utilizar la regla @supports para establecer condicionales y crear reglas similares a @media pero dependiendo de si el navegador del usuario soporta una caracter\u00edstica concreta. @ supports not ( display : grid ) and ( display : flex ) { . content { display : flex ; justify-content : center ; } } @ supports not ( display : flex ) { . content { display : block ; } } Estas reglas son muy interesantes para casos particulares donde queremos dar soporte a navegadores antiguos, pero hay que tener en cuenta que navegadores como Internet Explorer ( quiz\u00e1s uno de los m\u00e1s interesantes para utilizarlo ) no tienen soporte para la regla @supports , a\u00fan ni en su versi\u00f3n 11.","title":"Condicionales CSS"},{"location":"desarrollo/css/10-responsive_Web_Design/#medios-impresos","text":"Ahora que ya disponemos de un conocimiento amplio y extenso de CSS, debemos saber que CSS no se limita s\u00f3lo a p\u00e1ginas webs. Por ejemplo, muy probablemente conozcas uno de los formatos m\u00e1s populares de ebooks ( libros electronicos ): el formato EPUB . Este formato no es m\u00e1s que un archivo comprimido en formato .zip , que en su interior contiene HTML ( m\u00e1s concretamente, XML ) y CSS. Algunos programas o aplicaciones, como por ejemplo el editor Visual Studio Code , la versi\u00f3n de escritorio de WhatsApp o Slack est\u00e1n hechos con Electron , que b\u00e1sicamente utilizan HTML y Javascript para crear la interfaz visual que utiliza el usuario y mediante CSS cambian el aspecto visual de la aplicaci\u00f3n. Esto s\u00f3lo son algunos casos en los que CSS forma parte de nuestra vida casi sin darnos cuenta.","title":"Medios impresos"},{"location":"desarrollo/css/10-responsive_Web_Design/#que-son-los-medios-impresos","text":"Otra de las caracter\u00edsticas de CSS que nos puede interesar es la de para preparar hojas de estilo destinadas a la impresi\u00f3n de documentos . Esto es, un documento CSS especialmente dise\u00f1ado para que se aplique unicamente cuando el usuario desee imprimir una p\u00e1gina . Este sistema no es m\u00e1s que una de las posibilidades de los media queries . En lugar de aplicar una regla @media a screen ( pantallas ), lo aplicaramos a print ( documentos de impresi\u00f3n ): @ media print { /* Reglas de CSS */ } Tambi\u00e9n se puede hacer desde el HTML, a trav\u00e9s de la etiqueta <link> : < link rel = \"stylesheet\" media = \"print\" href = \"print.css\" > La raz\u00f3n es obvia, en una impresi\u00f3n nos pueden interesar ciertos detalles: Eliminar fondos negros o intentar que predomine el texto blanco ( gastar menos tinta ). Usar tipograf\u00edas apropiadas para impresi\u00f3n ( cansar menos la vista, reducir gasto de tinta ). Ocultar publicidad, men\u00fas, navegaci\u00f3n, etc... ( no tienen sentido en un documento impreso ). Mostrar ciertos detalles necesarios ( la URL de los enlaces, por ejemplo ).","title":"\u00bfQu\u00e9 son los medios impresos?"},{"location":"desarrollo/css/10-responsive_Web_Design/#ejemplo-de-medios-impresos","text":"Quiz\u00e1s, la forma m\u00e1s sencilla de a\u00f1adir medios impresos a un documento CSS ya existente, es simplemente a\u00f1adir las reglas de impresi\u00f3n @media print al final del documento, para que se apliquen sobre las anteriores que ya existen. De esta forma partimos del dise\u00f1o actual que ya tenemos, haciendo peque\u00f1os cambios en la versi\u00f3n de impresi\u00f3n: @ media print { /* Ocultar zonas no relevantes */ . navigation , . banner , . menu { display : none ; } /* Cambiar tipograf\u00eda o alternar colores */ body , . content { font-family : Ecofont , sans-serif ; background : white ; color : black ; } /* Mostrar enlaces */ a :: after { content : \"(\" attr ( href ) \")\" ; padding : 0 5 px ; } } Si imprimes muy a menudo documentos, puedes utilizar tipograf\u00edas ecol\u00f3gicas como EcoFont o EcoSans , una tipograf\u00eda que tiene peque\u00f1os agujeros en su interior para ahorrar tinta en la impresi\u00f3n de borradores y que mantiene casi el mismo aspecto visual: Obviamente, depende del desarrollador preferir escribir unas reglas @media print al final del documento CSS aplicando herencia con el resto de los estilos de la p\u00e1gina, o crear un documento CSS individual a parte, donde colocar\u00e1 todos los estilos de impresi\u00f3n y cargar\u00e1 a trav\u00e9s de su elemento <link media=\"print\"> correspondiente.","title":"Ejemplo de medios impresos"},{"location":"desarrollo/css/10-responsive_Web_Design/#medios-paginados","text":"Existe una particularidad de CSS denominada CSS Paged Media , que no es m\u00e1s que un conjunto de caracter\u00edsticas y propiedades espec\u00edficas para medios paginados , como por ejemplo podr\u00edan ser, documentos impresos o la exportaci\u00f3n en archivos .pdf .","title":"Medios paginados"},{"location":"desarrollo/css/10-responsive_Web_Design/#la-regla-page","text":"Existen varias propiedades CSS interesantes para estos medios, que pueden ser utilizadas dentro de un bloque @page : Propiedad Valores Significado size auto tipo documento margin Id\u00e9ntica a la propiedad margin que conocemos. Mediante la propiedad size se puede establecer el formato de la p\u00e1gina, tanto mediante los valores predefinidos portrait o landscape ( vertical o apaisado ), como especificando las medidas mediante unidades: @ page { size : 8 . 27in 11 . 69in ; /* DIN A4 */ margin : . 5in . 5in . 5in . 5in ; } De forma adicional, tambi\u00e9n puedes indicar el tipo de documento mediante algunas palabras clave como valor de la propiedad size ( las cuales se pueden usar junto a landscape o portrait para definir su orientaci\u00f3n ): Valor Medidas Significado A5 148mm\u00d7210mm Documento de mitad de tama\u00f1o de un folio DIN A4. B5 176mm\u00d7250mm Documento de tama\u00f1o entre A5 y A4. A4 210mm\u00d7297mm Documento de exactamente el tama\u00f1o folio DIN A4. B4 250mm\u00d7353mm Documento de tama\u00f1o entre A4 y A3. A3 297mm\u00d7420mm Documento del doble de tama\u00f1o de un folio DIN A4. letter 215.9mm\u00d7279.4mm Documento de tama\u00f1o de las cartas americanas. legal 215.9mm\u00d7355.6mm Documento de tama\u00f1o de notificaci\u00f3n legal americana. ledger 279.4mm\u00d7431.8mm Documento de tama\u00f1o libro americano. Nota : Cualquier propiedad utilizada dentro de una regla @page que no sea una de las anteriores ser\u00e1 ignorada. Una vez tenemos definida la estructura de cada p\u00e1gina del documento, pasaremos de una p\u00e1gina web que tiene una estructura continua a un documento paginado, donde cada cierto tama\u00f1o tiene un salto de p\u00e1gina que interrumpe el contenido. Al establecer dichos saltos de p\u00e1gina, el contenido se adapta al tama\u00f1o de cada p\u00e1gina especificado, pero puede ocurrir que debido a los l\u00edmites impuestos por los saltos de p\u00e1gina, un cierto contenido se corte a la mitad y se vea continuado en la siguiente p\u00e1gina, comportamiento no deseable en pr\u00e1cticamente el 100% de los casos.","title":"La regla @page"},{"location":"desarrollo/css/10-responsive_Web_Design/#orphans-widows","text":"Existen casos en los que el comportamiento descrito anteriormente no sea un problema, sin embargo, pueden darse muchos casos en los que s\u00ed lo ser\u00eda: Una imagen o una tabla empieza al final de una p\u00e1gina ( se muestra cortada ). Un p\u00e1rrafo de texto comienza en la \u00faltima l\u00ednea de una p\u00e1gina ( es poco atractivo ). Un nuevo tema comienza a mitad de p\u00e1gina ( lo ideal ser\u00eda comenzar a principio de p\u00e1gina ). Para evitar estos problemas de paginaci\u00f3n se suelen utilizar algunas propiedades interesantes: Propiedad Valores Significado orphans N\u00famero de l\u00edneas < > permitidas ( antes de salto ) widows N\u00famero de l\u00edneas < > permitidas ( despu\u00e9s de salto ) Mediante la propiedad orphans ( l\u00edneas hu\u00e9rfanas ) indicamos hasta que n\u00famero de l\u00edneas no vamos a permitir que aparezcan de forma aislada al final de una p\u00e1gina. Por ejemplo, si especificamos orphans: 3 , significa que cualquier p\u00e1rrafo cortado con el salto de p\u00e1gina, debe mostrar m\u00e1s de 3 l\u00edneas al final de la p\u00e1gina. En caso contrario, se mover\u00e1 el p\u00e1rrafo completo a la siguiente p\u00e1gina. p { orphans : 3 ; widows : 3 ; } Por otra parte, la propiedad widows ( l\u00edneas viudas ) es la propiedad opuesta a orphans . Si al principio de una p\u00e1gina quedan menos de ese n\u00famero de l\u00edneas indicado en widows , se ajusta para que lo supere.","title":"Orphans &amp; Widows"},{"location":"desarrollo/css/10-responsive_Web_Design/#saltos-de-pagina","text":"Por \u00faltimo, mencionar las propiedades de salto de p\u00e1gina, muy \u00fatiles para evitar comportamientos que pueden quedar poco atractivos en un documento paginado: Propiedad Valores Significado page-break-inside auto avoid page-break-before auto always page-break-after auto always La propiedad page-break-inside se utiliza para evitar que un cierto elemento pueda ser cortado a la mitad en un salto de p\u00e1gina, como por ejemplo im\u00e1genes, tablas o fragmentos de c\u00f3digo: @ media print { table , img , pre , code { page-break-inside : avoid ; } } De forma similar, las propiedades page-break-before y page-break-after se utilizan para evitar o forzar al generar el documento paginado que ciertos elementos se mantengan antes o despu\u00e9s del salto de p\u00e1gina.","title":"Saltos de p\u00e1gina"},{"location":"desarrollo/css/10-responsive_Web_Design/#pseudoclases-de-pagina","text":"Tambi\u00e9n existen algunas pseudoclases espec\u00edficas para paginaci\u00f3n, que permiten hacer referencia a p\u00e1ginas concretas del documento generado, pudiendo aplicar estilos s\u00f3lo a este tipo de p\u00e1ginas: Pseudo-clase Significado :first Primera p\u00e1gina del documento paginado. :left P\u00e1ginas izquierdas del documento paginado. :right P\u00e1ginas derechas del documento paginado. :blank P\u00e1ginas en blanco (generadas por los saltos de p\u00e1gina). S\u00f3lo algunas propiedades CSS como margin , padding , background u otras pueden estar permitidas dentro de estas pseudoclases especiales.","title":"Pseudoclases de p\u00e1gina"},{"location":"desarrollo/css/10-responsive_Web_Design/#preferencias-de-usuario","text":"Dentro del apartado de media queries disponemos de una mec\u00e1nica para detectar ciertas preferencias de usuario , o lo que es lo mismo, si el usuario ha indicado algunas preferencias por ciertos detalles en su dispositivo, sistema operativo o navegador que utiliza. Tipo de preferencia Valores Detecta si el usuario tiene preferencia por... prefers-color-scheme dark light prefers-reduced-motion reduce no-preference prefers-reduced-data reduce no-preference Echemos un vistazo detenidamente a cada una de ellas:","title":"Preferencias de usuario"},{"location":"desarrollo/css/10-responsive_Web_Design/#dark-mode-light-mode","text":"Por ejemplo, una de las caracter\u00edsticas m\u00e1s recurrentes en interfaces de usuario es la posibilidad de elegir un dark mode o dark theme , es decir, un sistema que permita al usuario seleccionar un tema claro ( generalmente con fondo blanco ) o un tema oscuro ( generalmente con fondo negro ). Aunque podemos hacer esto de forma manual , existe una regla @media especial denominada prefers-color-scheme donde podemos detectar si el usuario tiene preferencia por uno de estos dos valores ( establecido en las opciones del sistema operativo ) y actuar en consecuencia. Los valores que es posible indicar son light o dark : @ media ( prefers-color-scheme : dark ) { : root { -- background-color : #333 ; -- foreground-color : #eee ; } } @ media ( prefers-color-scheme : light ) { : root { -- background-color : #eee ; -- foreground-color : #111 ; } } body { background-color : var ( -- background - color ); color : var ( -- foreground - color ); } El soporte de dicha propiedad es bastante bueno en la actualidad, incluso en dispositivos m\u00f3viles, por lo que se puede utilizar con seguridad.","title":"Dark mode / Light mode"},{"location":"desarrollo/css/10-responsive_Web_Design/#movimiento-reducido","text":"Las interfaces modernas en la actualidad suelen apostar por dise\u00f1os con animaciones y transiciones que hacen m\u00e1s agradables los cambios de estado y acciones espec\u00edficas en una web. Sin embargo, por cuestiones de accesibilidad estas animaciones tambi\u00e9n pueden suponer molestias a usuarios que son especialmente sensibles a este tipo de est\u00edmulos. En CSS tenemos una caracter\u00edstica que permite notificar al desarrollador web si un usuario ha elegido en su sistema que prefiere eliminar o desactivar este tipo de animaciones o transiciones, mediante prefers-reduced-motion , la cu\u00e1l tiene los valores no-preference o reduce : @ media ( prefers-reduced-motion : reduce ) { : root { -- preferred-animation : soft ; } } . animated { animation : var ( -- preferred - animation , hard ) 2 s linear infinite ; } En el ejemplo anterior, utilizamos la variable --preferred-animation para seleccionar el tipo de animaci\u00f3n preferida. Por defecto, se utilizar\u00e1 hard , pero en el caso de tener esta caracter\u00edstica activada, la animaci\u00f3n utilizada ser\u00e1 soft . De la misma forma, tambi\u00e9n podemos utilizar la propiedad animation-name a none , para desactivar las animaciones por completo. El soporte de esta caracter\u00edstica tambi\u00e9n es bastante bueno, por lo que puede ser utilizado de forma segura:","title":"Movimiento reducido"},{"location":"desarrollo/css/10-responsive_Web_Design/#ancho-de-banda-reducido","text":"De la misma forma que en ejemplos anteriores, el usuario puede preferir usar su ancho de banda disponible de forma reducida, evitando as\u00ed descargas que consuman gran cantidad de datos, con su correspondiente gasto que en ciertas situaciones puede ser un ancho de banda l\u00edmitado. La caracter\u00edstica prefers-reduced-data nos permite recuperar del sistema o navegador del usuario la opci\u00f3n reduce o no-preference para saber que preferencia tiene seleccionada. De esta forma podemos crear estilos donde se establezcan im\u00e1genes de bajo tama\u00f1o, o incluso utilizar gradientes o colores s\u00f3lidos en lugar de im\u00e1genes. @ media ( prefers-reduced-data : reduce ) { : root { -- preferred-background : linear-gradient ( 120 deg , steelblue , blue , black ); } } body { background : var ( -- preferred - background , url ( /assets/background.png )); } Desgraciadamente, esta caracter\u00edstica no tiene soporte a\u00fan en los navegadores. Habr\u00e1 que mantenerse a la espera de que los navegadores comiencen a implementarla. Fuente: Lenguaje de CSS por Manz","title":"Ancho de banda reducido"},{"location":"desarrollo/css/11-animaciones_CSS/","text":"Animaciones CSS \u00b6 Transiciones CSS \u00b6 En CSS aparecen uno de los aspectos m\u00e1s interesantes de la web interactiva: las transiciones . En versiones anteriores de CSS s\u00f3lo se pod\u00edan utilizar ciertas funcionalidades interactivas con pseudoclases como :hover o :focus . Sin embargo, dichas transiciones ocurr\u00edan de golpe, pasando de un estado inicial a otro final. Mediante las transiciones, tenemos a nuestra disposici\u00f3n una gran flexibilidad que nos permitir\u00e1 dotar de atractivos y elegantes efectos de transici\u00f3n que multiplicar\u00e1n por mil las posibilidades de nuestros dise\u00f1os. Las transiciones se basan en un principio muy b\u00e1sico, conseguir un efecto suavizado entre un estado inicial y un estado final. Las propiedades relacionadas que existen son las siguientes: Propiedades Valor transition-property all transition-duration 0 transition-timing-function ease transition-delay 0 En primer lugar, la propiedad transition-property se utiliza para especificar la propiedad a la que que afectar\u00e1 la transici\u00f3n . Podemos especificar la propiedad concreta ( width o color , por ejemplo ) o simplemente especificar all para que se aplique a todos los elementos con los que se encuentre. Por otro lado, none hace que no se aplique ninguna transici\u00f3n. Nota : Debes saber que no todos los elementos permiten animaci\u00f3n debido a su complejidad. Por ejemplo, los background-image de gradientes no son animables actualmente. Con la propiedad transition-duration especificaremos la duraci\u00f3n de la transici\u00f3n , desde el inicio de la transici\u00f3n, hasta su finalizaci\u00f3n. Se recomienda siempre comenzar con valores cortos, para que las transiciones sean r\u00e1pidas y elegantes. Si establecemos una duraci\u00f3n demasiado grande, el navegador realizar\u00e1 la transici\u00f3n con detenci\u00f3n intermitentes, lo que har\u00e1 que la transici\u00f3n vaya a golpes. Adem\u00e1s, transiciones muy largas pueden resultar molestas a muchos usuarios. Funci\u00f3n de tiempo \u00b6 La propiedad transition-timing-function permite indicar el ritmo de la transici\u00f3n que queremos conseguir. Cuando estamos aprendiendo CSS, recomiendo utilizar linear , que realiza una transici\u00f3n a un ritmo constante. Sin embargo, podemos utilizar otros valores para conseguir que el ritmo sea diferente al inicio y/o al final de la transici\u00f3n. Los valores que puede tomar la propiedad son los siguientes: Valor Inicio Transcurso Final Equivalente en cubic-beizer ease Lento R\u00e1pido Lento (0.25, 0.1, 0.25, 1) linear Normal Normal Normal (0, 0, 1, 1) ease-in Lento Normal Normal (0.42, 0, 1, 1) ease-out Normal Normal Lento (0, 0, 0.58, 1) ease-in-out Lento Normal Lento (0.42, 0, 0.58, 1) cubic-bezier( A , B , C , D ) - - - Transici\u00f3n personalizada Una funci\u00f3n de tiempo linear siempre es constante, mientras que ease comienza suavemente, continua de forma m\u00e1s r\u00e1pida y termina suavemente de nuevo. Ease-in y ease-out son variaciones que van m\u00e1s lento al principio o al final, y ease-in-out una mezcla de las dos. Cubic-Bezier() \u00b6 La funci\u00f3n de tiempo cubic-bezier() es una funci\u00f3n personalizada, donde podemos darle unos valores concretos depediendo de la velocidad que queramos que tenga la transici\u00f3n. En la \u00faltima columna de la tabla anterior podemos ver los valores equivalentes a cada una de las palabras clave mencionadas. En principio, el formato de la funci\u00f3n es cubic-bezier( A , B , C , D ) , donde: Par\u00e1metro Valor Descripci\u00f3n Pertenece a A X 1 Eje X del primer punto que orienta la curva bezier. P 1 B Y 1 Eje Y del primer punto que orienta la curva bezier. P 1 C X 2 Eje X del segundo punto que orienta la curva bezier. P 2 D Y 2 Eje Y del segundo punto que orienta la curva bezier. P 2 Tambi\u00e9n puedes utilizar la p\u00e1gina Cubic Bezier , donde puedes ver de forma interactiva la velocidad de las transiciones dependiendo de los par\u00e1metros utilizados. Por \u00faltimo, la propiedad transition-delay nos ofrece la posibilidad de retrasar el inicio de la transici\u00f3n los segundos especificados. Veamos un peque\u00f1o ejemplo de todo ello: a { background : #DDD ; color : #222 ; padding : 2 px ; border : 1 px solid #AAA ; } a : hover { background : #FFF ; color : #666 ; padding : 8 px 14 px ; border : 1 px solid #888 ; transition-property : all ; transition-duration : 0.2 s ; transition-timing-function : ease-in ; } Truco : Si nos fijamos bien, este estilo se aplica s\u00f3lo al mover el rat\u00f3n sobre el enlace ( transici\u00f3n de entrada ). Sin embargo, si movemos el rat\u00f3n fuera del enlace, no se produce transici\u00f3n sino que realiza el cambio de forma brusca. Si movemos las propiedades de transici\u00f3n al primer bloque, se aplicar\u00e1n tanto en las transiciones de entrada como en las de salida . Atajo: Transiciones \u00b6 Como siempre, podemos resumir todas estas operaciones en una propiedad de atajo denominada transition . Los valores del ejemplo superior, se podr\u00edan escribir como se puede ver a continuaci\u00f3n ( si no necesitas alg\u00fan valor, se puede omitir ): div { /* transition: <property> <duration> <timing-function> <delay> */ transition : all 0.2 s ease-in ; } \u00b6 Animaciones CSS \u00b6 Una vez conocemos las transiciones CSS , es muy f\u00e1cil adaptarnos al concepto de animaciones de CSS, el cual amplia el concepto de transiciones convirti\u00e9ndolo en algo mucho m\u00e1s flexible y potente. Las transiciones son una manera de suavizar un cambio de un estado inicial a un estado final. La idea de las animaciones CSS parte del mismo concepto, permitiendo a\u00f1adir m\u00e1s estados, pudiendo realizar cambios desde un estado inicial, a un estado posterior, a otro estado posterior, y as\u00ed sucesivamente. Adem\u00e1s, esto ser\u00e1 posible de forma autom\u00e1tica, sin que el usuario tenga que realizar una acci\u00f3n concreta. El primer paso para crear animaciones es tener dos cosas claras. Por un lado, utilizaremos la regla @keyframes , que incluye los fotogramas de la animaci\u00f3n. Por otro lado, tendremos que utilizar las propiedades de las animaciones , que definen el comportamiento de la misma. Propiedades de animaci\u00f3n CSS \u00b6 Para definir dicho comportamiento necesitamos conocer las siguientes propiedades, que son una ampliaci\u00f3n de las transiciones CSS: Propiedades Valor animation-name none animation-duration 0 animation-timing-function ease animation-delay 0 animation-iteration-count 1 animation-direction normal animation-fill-mode none animation-play-state running La propiedad animation-name permite especificar el nombre del fotograma a utilizar, mientras que las propiedades animation-duration , animation-timing-function y animation-delay funcionan exactamente igual que en el tema anterior de transiciones . La propiedad animation-iteration-count permite indicar el n\u00famero de veces que se repite la animaci\u00f3n, pudiendo establecer un n\u00famero concreto de repeticiones o indicando infinite para que se repita continuamente. Por otra parte, especificando un valor en animation-direction conseguiremos indicar el orden en el que se reproducir\u00e1n los fotogramas, pudiendo escoger un valor de los siguientes: Valor Significado normal Los fotogramas se reproducen desde el principio al final. reverse Los fotogramas se reproducen desde el final al principio. alternate En iteraciones par, de forma normal. Impares, a la inversa. alternate-reverse En iteraciones impares, de forma normal. Pares, normal. Por defecto, cuando se termina una animaci\u00f3n que se ha indicado que se reproduzca s\u00f3lo una vez, la animaci\u00f3n vuelve a su estado inicial ( primer fotograma ). Mediante la propiedad animation-fill-mode podemos indicar que debe mostrar la animaci\u00f3n cuando ha finalizado y ya no se est\u00e1 reproduciendo; si mostrar el estado inicial ( backwards ), el estado final ( forwards ) o una combinaci\u00f3n de ambas ( both ). Por \u00faltimo, la propiedad animation-play-state nos permite establecer la animaci\u00f3n a estado de reproducci\u00f3n ( running ) o pausarla ( paused ). Atajo: Animaciones \u00b6 Nuevamente, CSS ofrece la posibilidad de resumir todas estas propiedades en una sola, para hacer nuestras hojas de estilos m\u00e1s espec\u00edficas. El orden de la propiedad de atajo ser\u00eda el siguiente: div { /* animation: <name> <duration> <timing-function> <delay> <iteration-count> <direction> <fill-mode> <play-state> */ animation : changeColor 5 s linear 0.5 s 4 normal forwards running ; } Consejo : Mucho cuidado al indicar los segundos en las propiedades de duraci\u00f3n. Al ser una unidad diferente a las que solemos manejar ( px, em, etc... ) hay que especificar siempre la s , aunque sea un valor igual a 0 . Fotogramas (keyframes) \u00b6 Ya sabemos como indicar a ciertas etiquetas HTML que reproduzcan una animaci\u00f3n, con ciertas propiedades. Sin embargo, nos falta la parte m\u00e1s importante: definir los fotogramas de dicha animaci\u00f3n. Para ello utilizaremos la regla @keyframes , la cu\u00e1l es muy sencilla de utilizar y se basa en el siguiente esquema: En primer lugar elegiremos un nombre para la animaci\u00f3n ( el cu\u00e1l utilizamos en el apartado anterior, para hacer referencia a la animaci\u00f3n, ya que podemos tener varias en una misma p\u00e1gina ), mientras que podremos utilizar varios selectores para definir el transcurso de los fotogramas en la animaci\u00f3n. Veamos algunos ejemplos: @ keyframes changeColor { from { background : red ; } /* Primer fotograma */ to { background : green ; } /* \u00daltimo fotograma */ } . anim { background : grey ; color : #FFF ; width : 150 px ; height : 150 px ; animation : changeColor 2 s ease 0 infinite ; /* Relaciona con @keyframes */ } En este ejemplo nombrado changeColor , partimos de un primer fotograma en el que el elemento en cuesti\u00f3n ser\u00e1 de color de fondo rojo. Si observamos el \u00faltimo fotograma, le ordenamos que termine con el color de fondo verde. As\u00ed pues, la regla @keyframes se inventar\u00e1 la animaci\u00f3n intermedia para conseguir que el elemento cambie de color. Los selectores from y to son realmente sin\u00f3nimos de 0% y 100% , as\u00ed que los modificaremos y de esta forma podremos ir a\u00f1adiendo nuevos fotogramas intermedios. Vamos a modificar el ejemplo anterior a\u00f1adiendo un fotograma intermedio e indentando, ahora s\u00ed, correctamente el c\u00f3digo: @ keyframes changeColor { 0 % { background : red ; /* Primer fotograma */ } 50 % { background : yellow ; /* Segundo fotograma */ width : 400 px ; } 100 % { background : green ; /* \u00daltimo fotograma */ } } . anim { background : grey ; color : #FFF ; width : 150 px ; height : 150 px ; animation : changeColor 2 s ease 0 infinite ; /* Relaciona con @keyframes */ } Truco : Si tienes fotogramas que van a utilizar los mismos estilos que uno anterior, siempre puedes separarlos con comas, por ejemplo: 0%, 75% { ... } , que utilizar\u00edan dichos estilos al inicio de la animaci\u00f3n y al 75% de la misma. Encadenar animaciones \u00b6 Es posible encadenar m\u00faltiples animaciones, separando con comas las animaciones individuales y estableciendo un tiempo de tardo a cada animaci\u00f3n posterior: . animated { animation : moveRight 5 s linear 0 , /* Comienza a los 0s */ lookUp 2.5 s linear 5 s , /* Comienza a los 5s */ moveLeft 5 s linear 7.5 s , /* Comienza a los 7.5s (5 + 2.5) */ dissapear 2 s linear 9.5 s ; /* Comienza a los 9.5s (5 + 2.5 + 2) */ } En este caso, lo que hemos hecho es aplicar varias animaciones a la vez, pero estableciendo un retardo ( cuarto par\u00e1metro ) que es la suma de la duraci\u00f3n de las animaciones anteriores. De esta forma, encadenamos una animaci\u00f3n con otra. Transformaciones CSS \u00b6 Las transformaciones es uno de los elementos m\u00e1s interesantes que se introducen en CSS3 para convertir el lenguaje de hojas de estilo en un sistema capaz de realizar todo tipo de efectos visuales, incluido 2D y 3D. Las propiedades principales para realizar transformaciones son las siguientes: Propiedades Formato Significado transform funci\u00f3n1 , funci\u00f3n2 , ... Aplica una o varias funciones de transformaci\u00f3n sobre un elemento. transform-origin Cambia el punto de origen del elemento en una transformaci\u00f3n. transform-style flat preserve-3d Comencemos por la propiedad transform , mediante la cual podemos indicar una o varias transformaciones para realizar sobre un elemento, ya sean 2D ( sobre dos ejes ) o 3D ( sobre tres ejes ). Funciones 2D \u00b6 Existen m\u00faltiples propiedades CSS que ofrecen diferentes funcionalidades de transformaci\u00f3n en dos dimensiones, que veremos a continuaci\u00f3n: Translaciones \u00b6 Las funciones de translaci\u00f3n son aquellas que realizan una transformaci\u00f3n en la que mueven un elemento de un lugar a otro. Si especificamos un valor positivo en el eje X ( horizontal ), lo moveremos hacia la derecha, y si especificamos un valor negativo, lo moveremos hacia la izquierda. Lo mismo con el eje Y ( vertical ): Funciones Significado translateX(x) Traslada el elemento una distancia de x horizontalmente. translateY(y) Traslada el elemento una distancia de y verticalmente. translate(x, y) Propiedad de atajo de las dos anteriores. Por ejemplo, transform: translate(20px, -30px) traslada el elemento 20 p\u00edxeles a la derecha y 30 p\u00edxeles hacia arriba, que es equivalente a utilizar transform: translateX(20px) translateY(-30px) . Escalado \u00b6 Las funciones de escalado realizan una transformaci\u00f3n en la que aumentan o reducen el tama\u00f1o de un elemento, bas\u00e1ndose en el par\u00e1metro indicado, que no es m\u00e1s que un factor de escala: Funciones Significado scaleX(fx) Reescala el elemento a un nuevo tama\u00f1o con un factor fx horizontal. scaleY(fy) Reescala el elemento a un nuevo tama\u00f1o con un factor fy vertical. scale(fx, fy) Propiedad de atajo de las dos anteriores. En este ejemplo, transform: scale(2, 2) realiza una transformaci\u00f3n de escalado del elemento, ampli\u00e1ndolo al doble de su tama\u00f1o original. Si utilizamos scale() con dos par\u00e1metros iguales, estamos manteniendo la proporci\u00f3n del elemento, pero si utilizamos diferentes valores, acabar\u00eda deform\u00e1ndose. Rotaciones \u00b6 Las funciones de rotaci\u00f3n simplemente giran el elemento el n\u00famero de grados indicado: Funciones Significado rotateX(xdeg) Establece una rotaci\u00f3n 2D en xdeg grados s\u00f3lo para el eje horizontal X. rotateY(ydeg) Establece una rotaci\u00f3n 2D en ydeg grados s\u00f3lo para el eje vertical Y. rotate(deg) Establece una rotaci\u00f3n 2D en deg grados sobre si mismo. Con transform: rotate(5deg) realizamos una rotaci\u00f3n de 5 grados del elemento sobre si mismo. Utilizando rotateX() y rotateY() podemos hacer lo mismo respecto al eje X o el eje Y respectivamente. Deformaciones \u00b6 Por \u00faltimo, las funciones de deformaci\u00f3n establecen un \u00e1ngulo para torcer, tumbar o inclinar un elemento en 2D: Funciones Significado skewX(xdeg) Establece un \u00e1ngulo de xdeg para una deformaci\u00f3n 2D respecto al eje X skewY(ydeg) Establece un \u00e1ngulo de ydeg para una deformaci\u00f3n 2D respecto al eje Y Aunque la funci\u00f3n skew() existe, no deber\u00eda ser utilizada, ya que est\u00e1 marcada como obsoleta y ser\u00e1n retiradas de los navegadores en el futuro. En su lugar deber\u00edan utilizarse skewX() o skewY() . Funciones 3D \u00b6 Sin embargo, esto no es todo. A las funciones anteriores, tambi\u00e9n podemos a\u00f1adir las funciones equivalentes de CSS para hacer uso del eje Z, o lo que es lo mismo, las tres dimensiones o 3D. Basta con utilizar el eje Z o las funciones espec\u00edficas de 3D para poner estas animaciones en pr\u00e1ctica. Recordar siempre que el eje X es el eje horizontal, el eje Y es el eje vertical y el eje Z es el eje de profundidad. Las propiedades de transformaci\u00f3n que completar\u00edan la colecci\u00f3n de transformaciones 2D que vimos anteriormente, son las siguientes: Funciones Significado translateZ(z) Traslada el elemento una distancia de z en el eje de profundidad. translate3d(x, y, z) Establece una translaci\u00f3n 3D, donde aplica los par\u00e1metros de a cada eje. scaleZ(fz) Reescala el elemento a un nuevo tama\u00f1o con factor fz de profundidad. scale3d(fx, fy, fz) Establece un escalado 3D, donde aplica los factores a cada eje. rotateZ(zdeg) Establece una rotaci\u00f3n 2D en zdeg grados s\u00f3lo para el eje de profundidad Z. rotate3d(x, y, z, deg) Establece una rotaci\u00f3n 3D, aplicando un vector [ x, y, z ] y el \u00e1ngulo en deg . perspective(n) Establece una perspectiva 3D de n matrix3d(n, n, ...) Establece una matriz de transformaci\u00f3n 3D ( 16 valores ) Veamos un ejemplo con rotate3d() : @ keyframes rotation { 0 % { transform : rotate3d ( 1 , 0 , 0 , 5 deg ); } 100 % { transform : rotate3d ( 1 , 1 , 0 , 220 deg ); } } . anim { background : #000 ; color : #FFF ; width : 100 px ; animation : rotation 2 s ease-in-out 0 infinite alternate none running ; } Finalmente, se puede utilizar la funci\u00f3n matrix() y matrix3d() para obtener transformaciones personalizadas m\u00e1s complejas y espec\u00edficas. Tienes m\u00e1s informaci\u00f3n sobre ellas en el art\u00edculo Understanding the CSS Transforms Matrix de los desarrolladores del navegador Opera . Transformaciones m\u00faltiples \u00b6 Recuerda que si estableces varias propiedades transform en el mismo elemento con diferentes funciones de transformaci\u00f3n, la segunda propiedad de transformaci\u00f3n sobreescribir\u00e1 a la anterior, como lo har\u00eda cualquier propiedad de CSS: div { transform : rotate ( 5 deg ); transform : scale ( 2 , 2 ); /* Sobreescribe la anterior */ } Para evitar este comportamiento, una forma sencilla se basa en emplear m\u00faltiples transformaciones separ\u00e1ndolas mediante un espacio. En el siguiente ejemplo, aplicamos una funci\u00f3n de rotaci\u00f3n, una funci\u00f3n de escalado y una funci\u00f3n de traslaci\u00f3n de forma simult\u00e1nea: div { transform : rotate ( 5 deg ) scale ( 2 , 2 ) translate ( 20 px , 40 px ); } Si lo que queremos hacer no es posible realizarlo de esta forma, probablemente lo m\u00e1s apropiado ser\u00eda guardar los valores en atributos de metadatos como data-tx , data-ty , data-sx , data-sy y data-rz o similares y manipul\u00e1ndolos desde Javascript. El soporte de estas propiedades es muy bueno en el ecosistema de navegadores actual, por lo que puede utilizarse con seguridad: Fuente: Lenguaje de CSS por Manz","title":"Animaciones CSS"},{"location":"desarrollo/css/11-animaciones_CSS/#animaciones-css","text":"","title":"Animaciones CSS"},{"location":"desarrollo/css/11-animaciones_CSS/#transiciones-css","text":"En CSS aparecen uno de los aspectos m\u00e1s interesantes de la web interactiva: las transiciones . En versiones anteriores de CSS s\u00f3lo se pod\u00edan utilizar ciertas funcionalidades interactivas con pseudoclases como :hover o :focus . Sin embargo, dichas transiciones ocurr\u00edan de golpe, pasando de un estado inicial a otro final. Mediante las transiciones, tenemos a nuestra disposici\u00f3n una gran flexibilidad que nos permitir\u00e1 dotar de atractivos y elegantes efectos de transici\u00f3n que multiplicar\u00e1n por mil las posibilidades de nuestros dise\u00f1os. Las transiciones se basan en un principio muy b\u00e1sico, conseguir un efecto suavizado entre un estado inicial y un estado final. Las propiedades relacionadas que existen son las siguientes: Propiedades Valor transition-property all transition-duration 0 transition-timing-function ease transition-delay 0 En primer lugar, la propiedad transition-property se utiliza para especificar la propiedad a la que que afectar\u00e1 la transici\u00f3n . Podemos especificar la propiedad concreta ( width o color , por ejemplo ) o simplemente especificar all para que se aplique a todos los elementos con los que se encuentre. Por otro lado, none hace que no se aplique ninguna transici\u00f3n. Nota : Debes saber que no todos los elementos permiten animaci\u00f3n debido a su complejidad. Por ejemplo, los background-image de gradientes no son animables actualmente. Con la propiedad transition-duration especificaremos la duraci\u00f3n de la transici\u00f3n , desde el inicio de la transici\u00f3n, hasta su finalizaci\u00f3n. Se recomienda siempre comenzar con valores cortos, para que las transiciones sean r\u00e1pidas y elegantes. Si establecemos una duraci\u00f3n demasiado grande, el navegador realizar\u00e1 la transici\u00f3n con detenci\u00f3n intermitentes, lo que har\u00e1 que la transici\u00f3n vaya a golpes. Adem\u00e1s, transiciones muy largas pueden resultar molestas a muchos usuarios.","title":"Transiciones CSS"},{"location":"desarrollo/css/11-animaciones_CSS/#funcion-de-tiempo","text":"La propiedad transition-timing-function permite indicar el ritmo de la transici\u00f3n que queremos conseguir. Cuando estamos aprendiendo CSS, recomiendo utilizar linear , que realiza una transici\u00f3n a un ritmo constante. Sin embargo, podemos utilizar otros valores para conseguir que el ritmo sea diferente al inicio y/o al final de la transici\u00f3n. Los valores que puede tomar la propiedad son los siguientes: Valor Inicio Transcurso Final Equivalente en cubic-beizer ease Lento R\u00e1pido Lento (0.25, 0.1, 0.25, 1) linear Normal Normal Normal (0, 0, 1, 1) ease-in Lento Normal Normal (0.42, 0, 1, 1) ease-out Normal Normal Lento (0, 0, 0.58, 1) ease-in-out Lento Normal Lento (0.42, 0, 0.58, 1) cubic-bezier( A , B , C , D ) - - - Transici\u00f3n personalizada Una funci\u00f3n de tiempo linear siempre es constante, mientras que ease comienza suavemente, continua de forma m\u00e1s r\u00e1pida y termina suavemente de nuevo. Ease-in y ease-out son variaciones que van m\u00e1s lento al principio o al final, y ease-in-out una mezcla de las dos.","title":"Funci\u00f3n de tiempo"},{"location":"desarrollo/css/11-animaciones_CSS/#cubic-bezier","text":"La funci\u00f3n de tiempo cubic-bezier() es una funci\u00f3n personalizada, donde podemos darle unos valores concretos depediendo de la velocidad que queramos que tenga la transici\u00f3n. En la \u00faltima columna de la tabla anterior podemos ver los valores equivalentes a cada una de las palabras clave mencionadas. En principio, el formato de la funci\u00f3n es cubic-bezier( A , B , C , D ) , donde: Par\u00e1metro Valor Descripci\u00f3n Pertenece a A X 1 Eje X del primer punto que orienta la curva bezier. P 1 B Y 1 Eje Y del primer punto que orienta la curva bezier. P 1 C X 2 Eje X del segundo punto que orienta la curva bezier. P 2 D Y 2 Eje Y del segundo punto que orienta la curva bezier. P 2 Tambi\u00e9n puedes utilizar la p\u00e1gina Cubic Bezier , donde puedes ver de forma interactiva la velocidad de las transiciones dependiendo de los par\u00e1metros utilizados. Por \u00faltimo, la propiedad transition-delay nos ofrece la posibilidad de retrasar el inicio de la transici\u00f3n los segundos especificados. Veamos un peque\u00f1o ejemplo de todo ello: a { background : #DDD ; color : #222 ; padding : 2 px ; border : 1 px solid #AAA ; } a : hover { background : #FFF ; color : #666 ; padding : 8 px 14 px ; border : 1 px solid #888 ; transition-property : all ; transition-duration : 0.2 s ; transition-timing-function : ease-in ; } Truco : Si nos fijamos bien, este estilo se aplica s\u00f3lo al mover el rat\u00f3n sobre el enlace ( transici\u00f3n de entrada ). Sin embargo, si movemos el rat\u00f3n fuera del enlace, no se produce transici\u00f3n sino que realiza el cambio de forma brusca. Si movemos las propiedades de transici\u00f3n al primer bloque, se aplicar\u00e1n tanto en las transiciones de entrada como en las de salida .","title":"Cubic-Bezier()"},{"location":"desarrollo/css/11-animaciones_CSS/#atajo-transiciones","text":"Como siempre, podemos resumir todas estas operaciones en una propiedad de atajo denominada transition . Los valores del ejemplo superior, se podr\u00edan escribir como se puede ver a continuaci\u00f3n ( si no necesitas alg\u00fan valor, se puede omitir ):","title":"Atajo: Transiciones"},{"location":"desarrollo/css/11-animaciones_CSS/#div-transition-property-duration-timing-function-delay-transition-all-02s-ease-in","text":"","title":"div {\n      /* transition: &lt;property&gt; &lt;duration&gt; &lt;timing-function&gt; &lt;delay&gt; */\n      transition: all 0.2s ease-in;\n    }\n"},{"location":"desarrollo/css/11-animaciones_CSS/#animaciones-css_1","text":"Una vez conocemos las transiciones CSS , es muy f\u00e1cil adaptarnos al concepto de animaciones de CSS, el cual amplia el concepto de transiciones convirti\u00e9ndolo en algo mucho m\u00e1s flexible y potente. Las transiciones son una manera de suavizar un cambio de un estado inicial a un estado final. La idea de las animaciones CSS parte del mismo concepto, permitiendo a\u00f1adir m\u00e1s estados, pudiendo realizar cambios desde un estado inicial, a un estado posterior, a otro estado posterior, y as\u00ed sucesivamente. Adem\u00e1s, esto ser\u00e1 posible de forma autom\u00e1tica, sin que el usuario tenga que realizar una acci\u00f3n concreta. El primer paso para crear animaciones es tener dos cosas claras. Por un lado, utilizaremos la regla @keyframes , que incluye los fotogramas de la animaci\u00f3n. Por otro lado, tendremos que utilizar las propiedades de las animaciones , que definen el comportamiento de la misma.","title":"Animaciones CSS"},{"location":"desarrollo/css/11-animaciones_CSS/#propiedades-de-animacion-css","text":"Para definir dicho comportamiento necesitamos conocer las siguientes propiedades, que son una ampliaci\u00f3n de las transiciones CSS: Propiedades Valor animation-name none animation-duration 0 animation-timing-function ease animation-delay 0 animation-iteration-count 1 animation-direction normal animation-fill-mode none animation-play-state running La propiedad animation-name permite especificar el nombre del fotograma a utilizar, mientras que las propiedades animation-duration , animation-timing-function y animation-delay funcionan exactamente igual que en el tema anterior de transiciones . La propiedad animation-iteration-count permite indicar el n\u00famero de veces que se repite la animaci\u00f3n, pudiendo establecer un n\u00famero concreto de repeticiones o indicando infinite para que se repita continuamente. Por otra parte, especificando un valor en animation-direction conseguiremos indicar el orden en el que se reproducir\u00e1n los fotogramas, pudiendo escoger un valor de los siguientes: Valor Significado normal Los fotogramas se reproducen desde el principio al final. reverse Los fotogramas se reproducen desde el final al principio. alternate En iteraciones par, de forma normal. Impares, a la inversa. alternate-reverse En iteraciones impares, de forma normal. Pares, normal. Por defecto, cuando se termina una animaci\u00f3n que se ha indicado que se reproduzca s\u00f3lo una vez, la animaci\u00f3n vuelve a su estado inicial ( primer fotograma ). Mediante la propiedad animation-fill-mode podemos indicar que debe mostrar la animaci\u00f3n cuando ha finalizado y ya no se est\u00e1 reproduciendo; si mostrar el estado inicial ( backwards ), el estado final ( forwards ) o una combinaci\u00f3n de ambas ( both ). Por \u00faltimo, la propiedad animation-play-state nos permite establecer la animaci\u00f3n a estado de reproducci\u00f3n ( running ) o pausarla ( paused ).","title":"Propiedades de animaci\u00f3n CSS"},{"location":"desarrollo/css/11-animaciones_CSS/#atajo-animaciones","text":"Nuevamente, CSS ofrece la posibilidad de resumir todas estas propiedades en una sola, para hacer nuestras hojas de estilos m\u00e1s espec\u00edficas. El orden de la propiedad de atajo ser\u00eda el siguiente: div { /* animation: <name> <duration> <timing-function> <delay> <iteration-count> <direction> <fill-mode> <play-state> */ animation : changeColor 5 s linear 0.5 s 4 normal forwards running ; } Consejo : Mucho cuidado al indicar los segundos en las propiedades de duraci\u00f3n. Al ser una unidad diferente a las que solemos manejar ( px, em, etc... ) hay que especificar siempre la s , aunque sea un valor igual a 0 .","title":"Atajo: Animaciones"},{"location":"desarrollo/css/11-animaciones_CSS/#fotogramas-keyframes","text":"Ya sabemos como indicar a ciertas etiquetas HTML que reproduzcan una animaci\u00f3n, con ciertas propiedades. Sin embargo, nos falta la parte m\u00e1s importante: definir los fotogramas de dicha animaci\u00f3n. Para ello utilizaremos la regla @keyframes , la cu\u00e1l es muy sencilla de utilizar y se basa en el siguiente esquema: En primer lugar elegiremos un nombre para la animaci\u00f3n ( el cu\u00e1l utilizamos en el apartado anterior, para hacer referencia a la animaci\u00f3n, ya que podemos tener varias en una misma p\u00e1gina ), mientras que podremos utilizar varios selectores para definir el transcurso de los fotogramas en la animaci\u00f3n. Veamos algunos ejemplos: @ keyframes changeColor { from { background : red ; } /* Primer fotograma */ to { background : green ; } /* \u00daltimo fotograma */ } . anim { background : grey ; color : #FFF ; width : 150 px ; height : 150 px ; animation : changeColor 2 s ease 0 infinite ; /* Relaciona con @keyframes */ } En este ejemplo nombrado changeColor , partimos de un primer fotograma en el que el elemento en cuesti\u00f3n ser\u00e1 de color de fondo rojo. Si observamos el \u00faltimo fotograma, le ordenamos que termine con el color de fondo verde. As\u00ed pues, la regla @keyframes se inventar\u00e1 la animaci\u00f3n intermedia para conseguir que el elemento cambie de color. Los selectores from y to son realmente sin\u00f3nimos de 0% y 100% , as\u00ed que los modificaremos y de esta forma podremos ir a\u00f1adiendo nuevos fotogramas intermedios. Vamos a modificar el ejemplo anterior a\u00f1adiendo un fotograma intermedio e indentando, ahora s\u00ed, correctamente el c\u00f3digo: @ keyframes changeColor { 0 % { background : red ; /* Primer fotograma */ } 50 % { background : yellow ; /* Segundo fotograma */ width : 400 px ; } 100 % { background : green ; /* \u00daltimo fotograma */ } } . anim { background : grey ; color : #FFF ; width : 150 px ; height : 150 px ; animation : changeColor 2 s ease 0 infinite ; /* Relaciona con @keyframes */ } Truco : Si tienes fotogramas que van a utilizar los mismos estilos que uno anterior, siempre puedes separarlos con comas, por ejemplo: 0%, 75% { ... } , que utilizar\u00edan dichos estilos al inicio de la animaci\u00f3n y al 75% de la misma.","title":"Fotogramas (keyframes)"},{"location":"desarrollo/css/11-animaciones_CSS/#encadenar-animaciones","text":"Es posible encadenar m\u00faltiples animaciones, separando con comas las animaciones individuales y estableciendo un tiempo de tardo a cada animaci\u00f3n posterior: . animated { animation : moveRight 5 s linear 0 , /* Comienza a los 0s */ lookUp 2.5 s linear 5 s , /* Comienza a los 5s */ moveLeft 5 s linear 7.5 s , /* Comienza a los 7.5s (5 + 2.5) */ dissapear 2 s linear 9.5 s ; /* Comienza a los 9.5s (5 + 2.5 + 2) */ } En este caso, lo que hemos hecho es aplicar varias animaciones a la vez, pero estableciendo un retardo ( cuarto par\u00e1metro ) que es la suma de la duraci\u00f3n de las animaciones anteriores. De esta forma, encadenamos una animaci\u00f3n con otra.","title":"Encadenar animaciones"},{"location":"desarrollo/css/11-animaciones_CSS/#transformaciones-css","text":"Las transformaciones es uno de los elementos m\u00e1s interesantes que se introducen en CSS3 para convertir el lenguaje de hojas de estilo en un sistema capaz de realizar todo tipo de efectos visuales, incluido 2D y 3D. Las propiedades principales para realizar transformaciones son las siguientes: Propiedades Formato Significado transform funci\u00f3n1 , funci\u00f3n2 , ... Aplica una o varias funciones de transformaci\u00f3n sobre un elemento. transform-origin Cambia el punto de origen del elemento en una transformaci\u00f3n. transform-style flat preserve-3d Comencemos por la propiedad transform , mediante la cual podemos indicar una o varias transformaciones para realizar sobre un elemento, ya sean 2D ( sobre dos ejes ) o 3D ( sobre tres ejes ).","title":"Transformaciones CSS"},{"location":"desarrollo/css/11-animaciones_CSS/#funciones-2d","text":"Existen m\u00faltiples propiedades CSS que ofrecen diferentes funcionalidades de transformaci\u00f3n en dos dimensiones, que veremos a continuaci\u00f3n:","title":"Funciones 2D"},{"location":"desarrollo/css/11-animaciones_CSS/#translaciones","text":"Las funciones de translaci\u00f3n son aquellas que realizan una transformaci\u00f3n en la que mueven un elemento de un lugar a otro. Si especificamos un valor positivo en el eje X ( horizontal ), lo moveremos hacia la derecha, y si especificamos un valor negativo, lo moveremos hacia la izquierda. Lo mismo con el eje Y ( vertical ): Funciones Significado translateX(x) Traslada el elemento una distancia de x horizontalmente. translateY(y) Traslada el elemento una distancia de y verticalmente. translate(x, y) Propiedad de atajo de las dos anteriores. Por ejemplo, transform: translate(20px, -30px) traslada el elemento 20 p\u00edxeles a la derecha y 30 p\u00edxeles hacia arriba, que es equivalente a utilizar transform: translateX(20px) translateY(-30px) .","title":"Translaciones"},{"location":"desarrollo/css/11-animaciones_CSS/#escalado","text":"Las funciones de escalado realizan una transformaci\u00f3n en la que aumentan o reducen el tama\u00f1o de un elemento, bas\u00e1ndose en el par\u00e1metro indicado, que no es m\u00e1s que un factor de escala: Funciones Significado scaleX(fx) Reescala el elemento a un nuevo tama\u00f1o con un factor fx horizontal. scaleY(fy) Reescala el elemento a un nuevo tama\u00f1o con un factor fy vertical. scale(fx, fy) Propiedad de atajo de las dos anteriores. En este ejemplo, transform: scale(2, 2) realiza una transformaci\u00f3n de escalado del elemento, ampli\u00e1ndolo al doble de su tama\u00f1o original. Si utilizamos scale() con dos par\u00e1metros iguales, estamos manteniendo la proporci\u00f3n del elemento, pero si utilizamos diferentes valores, acabar\u00eda deform\u00e1ndose.","title":"Escalado"},{"location":"desarrollo/css/11-animaciones_CSS/#rotaciones","text":"Las funciones de rotaci\u00f3n simplemente giran el elemento el n\u00famero de grados indicado: Funciones Significado rotateX(xdeg) Establece una rotaci\u00f3n 2D en xdeg grados s\u00f3lo para el eje horizontal X. rotateY(ydeg) Establece una rotaci\u00f3n 2D en ydeg grados s\u00f3lo para el eje vertical Y. rotate(deg) Establece una rotaci\u00f3n 2D en deg grados sobre si mismo. Con transform: rotate(5deg) realizamos una rotaci\u00f3n de 5 grados del elemento sobre si mismo. Utilizando rotateX() y rotateY() podemos hacer lo mismo respecto al eje X o el eje Y respectivamente.","title":"Rotaciones"},{"location":"desarrollo/css/11-animaciones_CSS/#deformaciones","text":"Por \u00faltimo, las funciones de deformaci\u00f3n establecen un \u00e1ngulo para torcer, tumbar o inclinar un elemento en 2D: Funciones Significado skewX(xdeg) Establece un \u00e1ngulo de xdeg para una deformaci\u00f3n 2D respecto al eje X skewY(ydeg) Establece un \u00e1ngulo de ydeg para una deformaci\u00f3n 2D respecto al eje Y Aunque la funci\u00f3n skew() existe, no deber\u00eda ser utilizada, ya que est\u00e1 marcada como obsoleta y ser\u00e1n retiradas de los navegadores en el futuro. En su lugar deber\u00edan utilizarse skewX() o skewY() .","title":"Deformaciones"},{"location":"desarrollo/css/11-animaciones_CSS/#funciones-3d","text":"Sin embargo, esto no es todo. A las funciones anteriores, tambi\u00e9n podemos a\u00f1adir las funciones equivalentes de CSS para hacer uso del eje Z, o lo que es lo mismo, las tres dimensiones o 3D. Basta con utilizar el eje Z o las funciones espec\u00edficas de 3D para poner estas animaciones en pr\u00e1ctica. Recordar siempre que el eje X es el eje horizontal, el eje Y es el eje vertical y el eje Z es el eje de profundidad. Las propiedades de transformaci\u00f3n que completar\u00edan la colecci\u00f3n de transformaciones 2D que vimos anteriormente, son las siguientes: Funciones Significado translateZ(z) Traslada el elemento una distancia de z en el eje de profundidad. translate3d(x, y, z) Establece una translaci\u00f3n 3D, donde aplica los par\u00e1metros de a cada eje. scaleZ(fz) Reescala el elemento a un nuevo tama\u00f1o con factor fz de profundidad. scale3d(fx, fy, fz) Establece un escalado 3D, donde aplica los factores a cada eje. rotateZ(zdeg) Establece una rotaci\u00f3n 2D en zdeg grados s\u00f3lo para el eje de profundidad Z. rotate3d(x, y, z, deg) Establece una rotaci\u00f3n 3D, aplicando un vector [ x, y, z ] y el \u00e1ngulo en deg . perspective(n) Establece una perspectiva 3D de n matrix3d(n, n, ...) Establece una matriz de transformaci\u00f3n 3D ( 16 valores ) Veamos un ejemplo con rotate3d() : @ keyframes rotation { 0 % { transform : rotate3d ( 1 , 0 , 0 , 5 deg ); } 100 % { transform : rotate3d ( 1 , 1 , 0 , 220 deg ); } } . anim { background : #000 ; color : #FFF ; width : 100 px ; animation : rotation 2 s ease-in-out 0 infinite alternate none running ; } Finalmente, se puede utilizar la funci\u00f3n matrix() y matrix3d() para obtener transformaciones personalizadas m\u00e1s complejas y espec\u00edficas. Tienes m\u00e1s informaci\u00f3n sobre ellas en el art\u00edculo Understanding the CSS Transforms Matrix de los desarrolladores del navegador Opera .","title":"Funciones 3D"},{"location":"desarrollo/css/11-animaciones_CSS/#transformaciones-multiples","text":"Recuerda que si estableces varias propiedades transform en el mismo elemento con diferentes funciones de transformaci\u00f3n, la segunda propiedad de transformaci\u00f3n sobreescribir\u00e1 a la anterior, como lo har\u00eda cualquier propiedad de CSS: div { transform : rotate ( 5 deg ); transform : scale ( 2 , 2 ); /* Sobreescribe la anterior */ } Para evitar este comportamiento, una forma sencilla se basa en emplear m\u00faltiples transformaciones separ\u00e1ndolas mediante un espacio. En el siguiente ejemplo, aplicamos una funci\u00f3n de rotaci\u00f3n, una funci\u00f3n de escalado y una funci\u00f3n de traslaci\u00f3n de forma simult\u00e1nea: div { transform : rotate ( 5 deg ) scale ( 2 , 2 ) translate ( 20 px , 40 px ); } Si lo que queremos hacer no es posible realizarlo de esta forma, probablemente lo m\u00e1s apropiado ser\u00eda guardar los valores en atributos de metadatos como data-tx , data-ty , data-sx , data-sy y data-rz o similares y manipul\u00e1ndolos desde Javascript. El soporte de estas propiedades es muy bueno en el ecosistema de navegadores actual, por lo que puede utilizarse con seguridad: Fuente: Lenguaje de CSS por Manz","title":"Transformaciones m\u00faltiples"},{"location":"desarrollo/html/01-introduccion_a_HTML5/","text":"Introducci\u00f3n a HTML5 \u00b6 Que es HTML \u00b6 Cuando accedemos a una p\u00e1gina web, debemos tener en cuenta que lo que realmente est\u00e1 ocurriendo es que nuestro navegador web est\u00e1 pidiendo un documento de texto al sistema ( m\u00e1quina ) donde est\u00e1 almacenada esa p\u00e1gina web. En cualquier navegador, existe una opci\u00f3n para ver el c\u00f3digo fuente de la p\u00e1gina web, la cu\u00e1l nos mostrar\u00e1 exactamente el texto de dicho documento. El navegador normalmente no nos muestra esa informaci\u00f3n literalmente, sino que la interpreta y va dibujando los elementos de una p\u00e1gina web. El documento que lee el navegador est\u00e1 escrito en un lenguaje de marcado llamado HTML , que son las siglas de HyperText Markup Language ( Lenguaje de marcas de hipertexto ), o lo que es lo mismo, un lenguaje de etiquetas que permite incluir o hacer referencia a todo tipo de informaci\u00f3n. \u00bfQu\u00e9 es una etiqueta HTML? \u00b6 En el navegador Chrome, puedes pulsar la combinaci\u00f3n de teclas CTRL+U para ver el c\u00f3digo fuente de la p\u00e1gina en la que te encuentras. Dicho documento esta formado por etiquetas , que son la base del lenguaje HTML . Existen muchas etiquetas y cada una se utiliza para contener informaci\u00f3n y darle un cierto significado a dicha informaci\u00f3n, dependiendo de la etiqueta que se trate. Las etiquetas HTML tienen la siguiente estructura: < etiqueta > contenido </ etiqueta > En HTML no se puede utilizar cualquier palabra como etiqueta ( en el ejemplo anterior, es incorrecto utilizar la etiqueta \u00abetiqueta\u00bb ). En su lugar, existen una serie de etiquetas concretas, cada una de ellas con su finalidad y caracter\u00edsticas propias, que tendremos que utilizar seg\u00fan requiera la ocasi\u00f3n. Por norma general, las etiquetas deben cerrarse para indicar donde finaliza su contenido. A continuaci\u00f3n, utilicemos la etiqueta <strong> ( etiqueta utilizada para darle importancia a una palabra sobre el resto ) en el siguiente ejemplo: <p>Dentro de este texto, esta <strong>palabra</strong> es m\u00e1s importante que el resto.</p> Obs\u00e9rvese que en el ejemplo estamos utilizando dos etiquetas diferentes. La etiqueta <p> , que contiene toda la frase, y la etiqueta <strong> , que contiene s\u00f3lo la palabra palabra . La primera etiqueta, <p> , se utiliza para contener p\u00e1rrafos, mientras que la segunda etiqueta, <strong> , indica la palabra que tiene mayor importancia del texto. Tambi\u00e9n se habr\u00e1 observado que se pueden anidar etiquetas, esto es, incluir etiquetas dentro de otras. Es algo que se hace continuamente en HTML y que a medida que avancemos se tornar\u00e1 habitual. \u00bfQu\u00e9 es la sem\u00e1ntica? \u00b6 Uno de los principales objetivos de HTML5 es introducir informaci\u00f3n en un documento HTML5 de forma que sea sem\u00e1ntico y no visual. Con esto queremos decir que todos los aspectos visuales deben dejarse para el apartado de presentaci\u00f3n, que se gestiona desde el lenguaje CSS . En el documento HTML debe aparecer informaci\u00f3n correctamente individualizada, de modo que al leer una p\u00e1gina HTML comprendamos su significado, y si queremos cambiar la apariencia, lo hagamos en el documento CSS. Esto es lo que comunmente se conoce como separaci\u00f3n de la presentaci\u00f3n del contenido . Un ejemplo donde se ve claramente esto es con la etiqueta <b> de HTML4 y anteriores. Dicha etiqueta se utilizaba para poner en negrita ( bold ) un texto espec\u00edfico: Hola, quiero resaltar esta <b>palabra</b>. En este caso, se est\u00e1 utilizando una propiedad de presentaci\u00f3n ( visual ) en el HTML, algo que no se debe hacer en HTML5. La misi\u00f3n de HTML5 es mantener s\u00f3lo contenido e informaci\u00f3n sem\u00e1ntica en HTML5. Por ello, la forma de hacerlo en HTML5 es la siguiente: Hola, quiero resaltar esta <strong>palabra</strong>. En este nuevo ejemplo, se reemplaza la etiqueta <b> ( negrita, caracter\u00edstica de presentaci\u00f3n ) por <strong> , una etiqueta que indica informaci\u00f3n sem\u00e1ntica ( importante, caracter\u00edstica sem\u00e1ntica ). De esta forma, en el HTML5 s\u00f3lo se est\u00e1 a\u00f1adiendo informaci\u00f3n particular sobre fragmentos de texto, y si queremos dotar de presentaci\u00f3n visual, lo haremos desde CSS: strong { font-weight : bold ; color : black ; } De esta forma podr\u00edamos cambiar el estilo ( negrita, colores, tipo de letra, etc... ) independientemente de la informaci\u00f3n y contenido que existe en el HTML. Incluso podr\u00edamos establecer el mismo estilo que en el texto, para que visualmente se vea todo de forma uniforme, pero sin embargo, al leer la p\u00e1gina HTML, el navegador sabr\u00e1 siempre que fragmentos de texto son m\u00e1s importantes, aunque tenga el mismo estilo visual. El objetivo de crear documentos HTML sem\u00e1nticos es que, aunque estamos acostumbrados a crear p\u00e1ginas para usuarios ( o m\u00e1s concretamente, para navegadores ), cada vez tendemos m\u00e1s a una Internet capaz de procesar informaci\u00f3n de forma aut\u00f3noma. Muestra de ello son, por ejemplo, los robots o crawlers de buscadores como Googlebot ( el robot de b\u00fasqueda de Google ) que es capaz de acceder a p\u00e1ginas web para analizar la informaci\u00f3n de la misma, entenderla e indexarla en su buscador. Estructura de etiqueta HTML \u00b6 Como hab\u00edamos mencionado, las p\u00e1ginas webs son realmente documentos de texto que contienen informaci\u00f3n y muchas etiquetas HTML que indican que tipo de contenido se va a mostrar en el navegador al cargar la p\u00e1gina web. La estructura de las etiquetas HTML tiene el siguiente formato: Etiqueta HTML \u00b6 La parte esencial de una etiqueta HTML es lo que se denomina la etiqueta de apertura . Se trata de escribir el nombre de la etiqueta en cuesti\u00f3n, coloc\u00e1ndola entre los car\u00e1cteres < y > . Aunque no es terminantemente obligatorio, se recomienda y considera una buena costumbre escribir las etiquetas siempre en min\u00fasculas. En HTML5 no se puede colocar cualquier palabra como etiqueta, sino que existen una serie espec\u00edfica de etiquetas, cada una con una misi\u00f3n y objetivo diferente. Por ejemplo, la etiqueta <strong> : < strong > Contenido </ strong > Como se puede ver, la mayor\u00eda de las etiquetas requieren que se especifique un cierre de etiqueta para saber donde termina de actuar. Se caracteriza en que se escribe igual que la etiqueta de apertura, pero con la barra / inmediatamente despu\u00e9s del < . Atributo \u00b6 En algunas etiquetas HTML, existen algunos atributos espec\u00edficos ( que pueden ser opcionales u obligatorios ). Los atributos determinan cierta informaci\u00f3n sobre la etiqueta ( o su modo de actuar ) y generalmente van asociados a un valor determinado. Este par atributo-valor se escribe despu\u00e9s del nombre de la etiqueta, separ\u00e1ndola por espacio y antes del car\u00e1cter > de la etiqueta de apertura: < strong id = \"dato\" > Contenido </ strong > En este caso, la etiqueta ser\u00eda strong , el atributo id , el valor de id ser\u00eda dato , mientras que el contenido de la etiqueta es Contenido . Por otro lado, y al igual que las etiquetas, cada atributo tiene una misi\u00f3n y comportamiento concreto. Aunque los valores pueden ir rodeados por comillas simples, se recomienda escribir el valor siempre entre comillas dobles . Existen 3 tipos de atributos dependiendo de sus valores: Conjunto finito de valores : Son los atributos en los que puedes especificarle una serie de valores limitada. Cualquier otro valor que no sea uno de ellos, no ser\u00e1 v\u00e1lido. Valores libres : Son los atributos en los que puedes especificar un valor libremente, como una direcci\u00f3n URL o un texto, y no existe una serie de valores espec\u00edficos para escribir. Valores booleanos : Son los atributos que deben tener un valor verdadero ( true ) o un valor falso ( false ). En HTML5 estos atributos se escriben sin valor ( solo el atributo ) si son verdaderos y se omiten para indicar que son falsos. Contenido de la etiqueta \u00b6 En el interior de la etiqueta HTML ( despu\u00e9s de la etiqueta de apertura y antes de la etiqueta de cierre ) se debe colocar la informaci\u00f3n que queremos que sea afectada por dicha etiqueta. En el siguiente ejemplo se ve como contiene un fragmento de texto : < strong id = \"dato\" class = \"clase1\" lang = \"es\" > Contenido de texto </ strong > Ten en cuenta que una etiqueta puede tener varios pares atributo-valor, como se ve en el ejemplo anterior, pero nunca se debe repetir el mismo atributo en una misma etiqueta varias veces, ya que sobreescribir\u00eda al anterior. El orden de los atributos no importa. M\u00e1s adelante explicaremos que tipos de atributos existen y para que sirven. Sin embargo, una etiqueta puede contener desde un fragmento de texto hasta un grupo de etiquetas . Esto depende mucho de la etiqueta a utilizar, y se ver\u00e1 m\u00e1s adelante en el apartado de etiquetas. Un posible ejemplo ser\u00eda el siguiente: < div id = \"pagina\" > < strong > Contenido importante </ strong > </ div > N\u00f3tese que dentro de la etiqueta <div> vemos que no s\u00f3lo hay un fragmento de texto, sino que adem\u00e1s incluye otra etiqueta, <strong> en este caso. Esto ocurre en las etiquetas de agrupaci\u00f3n, que veremos m\u00e1s adelante. Comentario HTML \u00b6 Los comentarios son una pr\u00e1ctica muy com\u00fan y habitual en los desarrolladores o programadores. Se basa en introducir breves fragmentos de texto que el navegador ignora y no tendr\u00e1 en cuenta a la hora de crear la p\u00e1gina visualmente, pero que a nosotros nos sirven de ayuda para documentar alg\u00fan detalle, explicar algo importante o simplemente introducir alg\u00fan texto que consideramos relevante: <!-- Esto es un comentario de ejemplo que el navegador ignorar\u00e1 --> Como se puede ver, para introducir estos comentarios en el c\u00f3digo HTML, basta con escribir los fragmentos de texto <!-- y --> entre el comentario en cuesti\u00f3n que queramos incluir. Atributos comunes en HTML \u00b6 Como hemos visto, el HTML est\u00e1 formado por etiquetas. Muchas etiquetas. Cada etiqueta tiene una misi\u00f3n y tarea y contendr\u00e1 cierto contenido relacionado con su misi\u00f3n. Y adem\u00e1s tenemos los atributos , que son palabras clave de texto que modifican ligeramente el comportamiento de la etiqueta que lo contiene. En este apartado vamos a ver una lista de atributos comunes que pueden ser utilizados en cualquier etiqueta HTML : Atributo Valor Descripci\u00f3n id nombre Establece un identificador a la etiqueta HTML (s\u00f3lo una por p\u00e1gina con ese nombre). class nombre Establece una clase (g\u00e9nero) a una etiqueta HTML. Puede repetirse por p\u00e1gina. lang idioma Indica el idioma del contenido de la etiqueta HTML. translate yes | no Indica si el contenido de la etiqueta es traducible o no. title t\u00edtulo Mensaje mostrado en un tooltip (aviso amarillo emergente) al mover el rat\u00f3n encima. data-* nombre Metadatos en la propia etiqueta. Se puede usar cualquier nombre con prefijo data- . accesskey atajo Combinaci\u00f3n de teclas que puede pulsar el usuario para activar el elemento. dir ltr | rtl Establece la direccionalidad del texto ( left to right o right to left ). style estilos Aplica propiedades CSS directamente al elemento en cuesti\u00f3n. Esta secci\u00f3n no es absolutamente necesaria para usuarios iniciados, y quiz\u00e1s requiera adquirir m\u00e1s pr\u00e1ctica con HTML antes de comenzar a leer esta parte. Identificador de etiqueta (id) \u00b6 En HTML, podemos darle un identificador a una etiqueta HTML y de esta forma darle un nombre. Simplemente, a\u00f1adimos el atributo id y colocamos el nombre como valor de ese atributo. Ese nombre de identificador no debe empezar nunca por un n\u00famero y puede contener letras may\u00fasculas, min\u00fasculas, signos especiales ( gui\u00f3n, gui\u00f3n bajo... ) o n\u00fameros: < div id = \"pagina\" > < div > Aqu\u00ed ir\u00e1 un anuncio </ div > < div id = \"articulo\" > Aqu\u00ed ir\u00e1 el contenido de texto del art\u00edculo </ div > < div > Aqu\u00ed ir\u00e1 un anuncio </ div > </ div > Los id se suelen indicar cuando queremos localizar zonas espec\u00edficas que sabemos que no se van a repetir en esa misma p\u00e1gina . Uno de los detalles importantes de los id, es que no pueden haber dos con el mismo nombre en una p\u00e1gina. Ejemplos correctos de id ser\u00edan \u00abpagina\u00bb ( para contener toda la p\u00e1gina completa ), \u00abcomentarios\u00bb ( para contener toda la zona de comentarios de la p\u00e1gina ) o \u00abheader\u00bb ( para contener la parte con el logo y la cabecera de la p\u00e1gina ). Lo que debe quedar claro de los ids, es que no se puede tener el mismo id en varias etiquetas HTML en una misma p\u00e1gina. M\u00e1s adelante, en el apartado de enlaces o hiperv\u00ednculos , veremos que tambi\u00e9n podemos utilizarlos para acceder r\u00e1pidamente, desde un enlace, a esa secci\u00f3n concreta de la p\u00e1gina. Clases de etiquetas (class) \u00b6 Las clases funcionan de una forma muy similar a los id, pero son mucho m\u00e1s flexibles. En primer lugar, no tienen la limitaci\u00f3n de los ids, por lo que su nombre se puede repetir y no es necesario que aparezca s\u00f3lo una vez por p\u00e1gina. De hecho, la idea de las clases es establecer g\u00e9neros o tipos de etiquetas, a los que les asociemos caracter\u00edsticas comunes. Sigamos con el ejemplo anterior: < div id = \"pagina\" > < div class = \"anuncio\" > Aqu\u00ed ir\u00e1 un anuncio </ div > < div id = \"articulo\" > Aqu\u00ed ir\u00e1 el contenido de texto del art\u00edculo </ div > < div class = \"anuncio\" > Aqu\u00ed ir\u00e1 un anuncio </ div > </ div > Obs\u00e9rvese que, al tener la misma clase \u00abanuncio\u00bb, podemos realizar acciones para todas las etiquetas de ese tipo y no tener que hacerlo para cada una de ellas por separado. Un ejemplo cl\u00e1sico donde se ve bien su utilidad, es respecto a utilizar ids y clases para dar estilo CSS , donde aplicaremos unos estilos concretos a todas las etiquetas HTML con clase \u00abanuncio\u00bb. Adem\u00e1s, una etiqueta puede tener m\u00faltiples clases diferentes, no una sola. Esto nos da m\u00e1s flexibilidad a la hora de crear clases espec\u00edficas: < div id = \"pagina\" > < div class = \"anuncio primero\" > Aqu\u00ed ir\u00e1 un anuncio </ div > < div id = \"articulo\" > Aqu\u00ed ir\u00e1 el contenido de texto del art\u00edculo </ div > < div class = \"anuncio ultimo\" > Aqu\u00ed ir\u00e1 un anuncio </ div > </ div > N\u00f3tese que en la primera etiqueta del anuncio hemos aplicado las clases anuncio y primero , mientras que en el \u00faltimo anuncio hemos aplicado las clases anuncio y \u00faltimo . Esto nos permitir\u00eda asignar atributos comunes al anuncio en la clase anuncio, y atributos que s\u00f3lo dependan de la posici\u00f3n donde esta colocado en primero y/o ultimo . Recordar siempre que para indicar m\u00faltiples clases se debe separar las clases por espacio dentro de un mismoa atributo class . No se debe nunca indicar varios atributos class en una misma etiqueta, ya que el navegador lo que har\u00eda es sobreescribir el valor del \u00faltimo class con los de los primeros. Idioma del contenido \u00b6 Mediante el atributo lang podemos indicar el idioma del contenido de la etiqueta. El valor de dicho atributo tendr\u00e1 que ser el c\u00f3digo ISO 639-1 del idioma al que queremos hacer referencia. Tambi\u00e9n podemos utilizar el atributo translate para indicar si el contenido de un texto es o no traducible: <p> Hace algunos d\u00edas fu\u00ed a ver la nueva pel\u00edcula de <span translate=\"no\">StarWars</span>. </p> De esta forma, le indicamos al navegador o a herramientas como Google Translator , que esa frase espec\u00edfica no se debe traducir porque es el t\u00edtulo que queremos que aparezca siempre. Por defecto, si no se indica el atributo translate en una etiqueta, es como si tuviera el valor yes por defecto. T\u00edtulos o tooltips \u00b6 En la mayor\u00eda de las etiquetas HTML podemos indicar el atributo title para especificar un mensaje de texto que aparezca cuando el usuario detenga el rat\u00f3n sobre el elemento un instante. Al usuario le aparece un peque\u00f1o aviso emergente, generalmente con fondo amarillo y letras negras, que muestra el texto en cuesti\u00f3n: < div > < img src = \"Gandalf.jpg\" alt = \"Gandalf el gris, utilizando un port\u00e1til para consultar su correo.\" title = \"\u00a1Este es Gandalf el gris!\" /> </ div > Es importante no confundir el atributo title con el atributo alt de las im\u00e1genes, que generalmente se confunden porque pueden tener objetivos id\u00e9nticos, pero no siempre es as\u00ed. El atributo alt debe ser un texto alternativo que describa la imagen en el caso de que no se pueda ver visualmente, mientras que el atributo title puede describir la imagen, pero no tiene porque ser una descripci\u00f3n alternativa. De la misma forma, podemos utilizar el atributo title para otros elementos, como por ejemplo, etiquetas <a> ( enlaces ) u otras. Metadatos (datasets) \u00b6 En HTML, veremos que la mayor\u00eda de los metadatos ( informaci\u00f3n adicional ) se incluyen en la etiqueta <head> del documento HTML. Sin embargo, tambi\u00e9n se puede incluir metadatos en la propia etiqueta HTML a trav\u00e9s de un atributo con prefijo data- . De esta forma, podemos inventarnos cualquier atributo que contenga informaci\u00f3n, habitualmente orientada a utilizarse desde Javascript: < div id = \"compartir\" > < a href = \"https://twitter.com/share/?url=https://lenguajehtml.com/\" data-share = \"43\" > Twitter </ a > < a href = \"https://www.facebook.com/sharer/sharer.php?u=https://lenguajehtml.com/\" data-share = \"66\" > Facebook </ a > < a href = \"https://plus.google.com/share?url=https://lenguajehtml.com/\" data-share = \"38\" > Google+ </ a > </ div > En este ejemplo guardamos, a trav\u00e9s de Javascript, el n\u00famero de veces que ha sido compartido un enlace de la p\u00e1gina, pudiendo reutilizarlo posteriormente en nuestro c\u00f3digo. Si queremos hacer referencia a estos elementos desde Javascript, debemos hacerlo mediante la propiedad .dataset : var links = document . querySelectorAll ( \"#compartir a\" ); links [ 0 ]. dataset . share ; // 43 links [ 1 ]. dataset . share ; // 66 links [ 2 ]. dataset . share ; // 38 Atajo de teclado (accesskey) \u00b6 En HTML es posible a\u00f1adir el atributo accesskey para indicar un atajo de teclado que puede pulsar el usuario para activar ese elemento. En el siguiente ejemplo, tenemos 4 elementos: dos campos de texto, un enlace y un bot\u00f3n. Cada uno de ellos tiene su atributo accesskey para que cuando el usuario pulse ALT+tecla, se active ese elemento: <form> <input accesskey=\"N\" placeholder=\"Nombre (ALT+N)\" /> <!-- Campo de datos --> <input accesskey=\"A\" placeholder=\"Apellidos (ALT+A)\" /> <!-- Campo de datos --> <a accesskey=\"L\" href=\"#\">Enlace (ALT+L)</a> <!-- Enlace HTML --> <button accesskey=\"B\">Bot\u00f3n (ALT+B)</button> <!-- Bot\u00f3n HTML --> </form> De esta forma, si pulsamos ALT+N, se colocar\u00e1 el foco en el primer campo de texto, si pulsamos ALT+L ser\u00e1 como si hubieramos pulsado el enlace con el rat\u00f3n y si pulsamos ALT+B se pulsar\u00e1 el bot\u00f3n. Sin embargo, una de las desventajas de este sistema, es que no est\u00e1 demasiado unificado entre navegadores y sistemas, lo que lo hacen bastante complejo. Por ejemplo, si establecemos un atajo con la tecla A , es decir, con el atributo accesskey a A , tendr\u00edamos que pulsar la siguiente combinaci\u00f3n de teclas: Navegador Plataforma Windows Plataforma Linux Plataforma Mac Chrome ALT+A ALT+A CTRL+ALT+A Firefox ALT+SHIFT+A ALT+SHIFT+A CTRL+A IE/Edge ALT+A No aplicable No aplicable Safari No aplicable No aplicable CTRL+ALT+A Opera ALT+A ALT+A CTRL+ALT+A Esto hace que la combinaci\u00f3n de teclas para un usuario poco familiarizado con este proceso, adem\u00e1s de la incertidumbre de no saber que navegador va a utilizar, hagan que este proceso sea poco pr\u00e1ctico. Direccionalidad del contenido \u00b6 Existe un atributo dir que permite al desarrollador indicar la direccionalidad del texto en el documento, ideal para idiomas en los que se escribe de derecha a izquierda. El valor por defecto de este atributo es ltr ( left to right, de izquierda a derecha ), pero podemos modificarlo y establecer el valor rtl ( right to left, de derecha a izquierda ): <p>Esto es un ejemplo de texto con direccionalidad de izquierda a derecha.</p> <p dir=\"rtl\">Esto es un ejemplo de texto con direccionalidad de derecha a izquierda.</p> Tambi\u00e9n es posible conseguir este efecto utilizando la propiedad CSS direction , que puede establecer su valor a ltr ( por defecto ) o a rtl . Estilos en l\u00ednea \u00b6 El atributo style es un atributo que se utiliza en las etiquetas HTML para incrustar c\u00f3digo CSS directamente en la propia etiqueta. Tambi\u00e9n se suele denominar CSS embebido o CSS incrustado . Aunque generalmente, la mejor forma de aplicar estilos CSS es colocarlos en un documento CSS al margen de la p\u00e1gina ( lo que garantiza que todo est\u00e9 bien separado y modularizado ), hay situaciones en las que es conveniente o incluso necesario, a\u00f1adir el c\u00f3digo CSS en la propia etiqueta. En ese caso, se har\u00eda de la siguiente forma: <p style=\"background: red; color: white;\">Esto es un mensaje con estilos CSS</p> N\u00f3tese que estamos indicando dos reglas CSS dentro de una misma etiqueta. En \u00bfC\u00f3mo usar CSS? tienes otros m\u00e9todos para indicar CSS en una p\u00e1gina web. Estructura del documento HTML \u00b6 Un documento HTML debe tener siempre una estructura inicial, con algunas etiquetas y caracter\u00edsticas obligatorias y otras recomendables. Ese esquema es el siguiente, donde se diferencian tres zonas principales: Tipo de documento : En la primera l\u00ednea del documento HTML debe ir especificado siempre de que tipo de documento HTML se trata. No es absolutamente obligatorio indicarlo ( de hecho, hay p\u00e1ginas webs que no lo tienen ), pero eso trae algunas consecuencias que veremos m\u00e1s adelante. Head : En el documento HTML hay una primera secci\u00f3n donde se especificar\u00e1n todos los metadatos del documento, es decir, la parte \u00abque no se ve\u00bb directamente en el navegador de forma visual. Body : La segunda secci\u00f3n es el cuerpo de la p\u00e1gina, donde si aparecen todos los elementos que aparecer\u00e1n visualmente en el navegador del usuario. Las dos \u00faltimas secciones deben estar dentro de la etiqueta <html> , que es la que debe contener cualquier tipo de etiqueta HTML ( salvo el tipo de documento, que debe especificarse antes ): Tipo de documento \u00b6 Antes de comenzar un documento HTML, en su primera l\u00ednea, es siempre conveniente indicar el tipo de documento a utilizar. Para indicar que se trata de un documento HTML5 colocaremos la siguiente linea: <!DOCTYPE html> En versiones anteriores, como HTML4 o XHTML , el tipo de documento se especificaba en la primera l\u00ednea de la siguiente forma ( m\u00e1s compleja ): <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"> Los navegadores, antes de comenzar a dibujar una p\u00e1gina web, lo primero que hacen es leer la l\u00ednea donde se indica el tipo de documento del que se trata. De esta forma, el navegador ya est\u00e1 preparado para actuar adapt\u00e1ndose perfectamente a cada tipo de documento. En el caso de no indicar el tipo de documento en una p\u00e1gina HTML, el navegador entra en lo que se llama Quirk mode ( modo peculiar o modo no est\u00e1ndar ), donde se activa un modo de retrocompatibilidad con p\u00e1ginas antiguas, que procesar\u00e1 de forma diferente muchas etiquetas HTML o propiedades CSS. Cabecera HTML \u00b6 La zona de la cabecera de una p\u00e1gina web es la parte que se incluye en el interior de las etiquetas <head> , que son las primeras etiquetas que se encuentran en el documento y a su vez est\u00e1n dentro de las etiquetas <html> que engloban todo el documento HTML. En esta zona se indicar\u00e1n, en su mayor\u00eda, metadatos como el t\u00edtulo y descripci\u00f3n de la p\u00e1gina o elementos relacionados que no se representar\u00e1n visualmente en el navegador del usuario. Tambi\u00e9n es el lugar indicado para incluir etiquetas que relacionen el documento actual con otros documentos externos ( por ejemplo, para cargar estilos CSS o scripts ). Cuerpo de p\u00e1gina \u00b6 La zona del cuerpo de p\u00e1gina es la parte que se incluye en el interior de las etiquetas <body> , la segunda parte de un documento HTML, que va inmediatamente despu\u00e9s del cierre de la etiqueta <head> . En esta zona se incluyen todas las etiquetas HTML que si tienen repercusi\u00f3n visual en el navegador del usuario, generalmente utilizadas para dibujar secciones o partes de una p\u00e1gina. Validacion de errores en HTML \u00b6 Si estamos empezando con nuestro primer documento HTML y queremos comprobar si hay errores o hemos hecho mal, \u00bfqu\u00e9 podemos hacer? Los programadores suelen estar acostumbrados a los lenguajes de programaci\u00f3n , donde si tenemos un error en nuestro c\u00f3digo, debemos corregirlo para continuar, ya que en caso contrario no podremos utilizar ese programa. En los lenguajes de marcas como HTML, los navegadores son m\u00e1s permisivos, ya que en el caso de encontrar un error, intentan \u00abintuir\u00bb lo que se quiso decir y prosiguen con la carga del documento. De esta forma tenemos un m\u00e9todo m\u00e1s flexible a errores, pero tambi\u00e9n es un arma de doble filo donde podemos experimentar problemas derivado de ello. Validador HTML5 de W3C \u00b6 Para evitar esto y asegurarnos de que nuestro c\u00f3digo est\u00e1 correctamente escrito, podemos utilizar un Validador HTML , que no es m\u00e1s que un sistema que analiza nuestro c\u00f3digo y nos dice el n\u00famero de errores que tenemos, junto a una breve descripci\u00f3n del mismo. Para realizar ese proceso de validaci\u00f3n podemos utilizar HTML Validator , de W3C, que contiene Nu HTML Checker , un validador de HTML5 a\u00fan en fase experimental, pero que actualmente puede ser utilizado sin problemas para este proceso de b\u00fasqueda de errores: Existen 3 formas de enviar nuestro documento HTML a este validador HTML: Address : Indicando la direcci\u00f3n URL de la p\u00e1gina que se quiere validar. Obviamente, es necesario que la p\u00e1gina est\u00e9 colgada en Internet. File Upload : Seleccionando el archivo HTML de nuestro equipo, subirlo al validador y, posterior y finalmente, realizar el proceso de an\u00e1lisis. Text Input : Escribiendo ( o pegando ) directamente el c\u00f3digo HTML del documento HTML \u00edntegro a analizar. Adem\u00e1s, si nos fijamos en la parte superior de la herramienta de validaci\u00f3n, veremos que hay tres casillas disponibles para marcar, con las que podemos agregar nuevas caracter\u00edsticas que se mostrar\u00e1n tras la validaci\u00f3n. Dichas caracter\u00edsticas son las siguientes: Source : Nos muestra el c\u00f3digo fuente, numerado por l\u00edneas. \u00datil para corregir problemas sobre la marcha o comprobar los errores en las l\u00edneas especificadas. Outline : Nos muestra una especie de \u00e1rbol o esquema de la p\u00e1gina. Image report : Genera un informe de las im\u00e1genes del sitio web, con una miniatura y sus caracter\u00edsticas asociadas. Es una buena pr\u00e1ctica acostumbrarse a utilizar el validador para acostumbrarse a crear c\u00f3digo HTML de calidad y sin errores, ya que si tenemos documentos sin errores de validaci\u00f3n, es m\u00e1s probable que se vean correctamente en cualquier tipo de dispositivo. En el editor VSCode podemos encontrar el paquete w3c-validation , que nos permite analizar los documentos HTML directamente desde el editor. Tabla peri\u00f3dica de HTML5 \u00b6 https://lenguajehtml.com/html/introduccion/tabla-periodica-html5/ Fuente: Lenguaje de Html por Manz","title":"Introduccion a HTML"},{"location":"desarrollo/html/01-introduccion_a_HTML5/#introduccion-a-html5","text":"","title":"Introducci\u00f3n a HTML5"},{"location":"desarrollo/html/01-introduccion_a_HTML5/#que-es-html","text":"Cuando accedemos a una p\u00e1gina web, debemos tener en cuenta que lo que realmente est\u00e1 ocurriendo es que nuestro navegador web est\u00e1 pidiendo un documento de texto al sistema ( m\u00e1quina ) donde est\u00e1 almacenada esa p\u00e1gina web. En cualquier navegador, existe una opci\u00f3n para ver el c\u00f3digo fuente de la p\u00e1gina web, la cu\u00e1l nos mostrar\u00e1 exactamente el texto de dicho documento. El navegador normalmente no nos muestra esa informaci\u00f3n literalmente, sino que la interpreta y va dibujando los elementos de una p\u00e1gina web. El documento que lee el navegador est\u00e1 escrito en un lenguaje de marcado llamado HTML , que son las siglas de HyperText Markup Language ( Lenguaje de marcas de hipertexto ), o lo que es lo mismo, un lenguaje de etiquetas que permite incluir o hacer referencia a todo tipo de informaci\u00f3n.","title":"Que es HTML"},{"location":"desarrollo/html/01-introduccion_a_HTML5/#que-es-una-etiqueta-html","text":"En el navegador Chrome, puedes pulsar la combinaci\u00f3n de teclas CTRL+U para ver el c\u00f3digo fuente de la p\u00e1gina en la que te encuentras. Dicho documento esta formado por etiquetas , que son la base del lenguaje HTML . Existen muchas etiquetas y cada una se utiliza para contener informaci\u00f3n y darle un cierto significado a dicha informaci\u00f3n, dependiendo de la etiqueta que se trate. Las etiquetas HTML tienen la siguiente estructura: < etiqueta > contenido </ etiqueta > En HTML no se puede utilizar cualquier palabra como etiqueta ( en el ejemplo anterior, es incorrecto utilizar la etiqueta \u00abetiqueta\u00bb ). En su lugar, existen una serie de etiquetas concretas, cada una de ellas con su finalidad y caracter\u00edsticas propias, que tendremos que utilizar seg\u00fan requiera la ocasi\u00f3n. Por norma general, las etiquetas deben cerrarse para indicar donde finaliza su contenido. A continuaci\u00f3n, utilicemos la etiqueta <strong> ( etiqueta utilizada para darle importancia a una palabra sobre el resto ) en el siguiente ejemplo: <p>Dentro de este texto, esta <strong>palabra</strong> es m\u00e1s importante que el resto.</p> Obs\u00e9rvese que en el ejemplo estamos utilizando dos etiquetas diferentes. La etiqueta <p> , que contiene toda la frase, y la etiqueta <strong> , que contiene s\u00f3lo la palabra palabra . La primera etiqueta, <p> , se utiliza para contener p\u00e1rrafos, mientras que la segunda etiqueta, <strong> , indica la palabra que tiene mayor importancia del texto. Tambi\u00e9n se habr\u00e1 observado que se pueden anidar etiquetas, esto es, incluir etiquetas dentro de otras. Es algo que se hace continuamente en HTML y que a medida que avancemos se tornar\u00e1 habitual.","title":"\u00bfQu\u00e9 es una etiqueta HTML?"},{"location":"desarrollo/html/01-introduccion_a_HTML5/#que-es-la-semantica","text":"Uno de los principales objetivos de HTML5 es introducir informaci\u00f3n en un documento HTML5 de forma que sea sem\u00e1ntico y no visual. Con esto queremos decir que todos los aspectos visuales deben dejarse para el apartado de presentaci\u00f3n, que se gestiona desde el lenguaje CSS . En el documento HTML debe aparecer informaci\u00f3n correctamente individualizada, de modo que al leer una p\u00e1gina HTML comprendamos su significado, y si queremos cambiar la apariencia, lo hagamos en el documento CSS. Esto es lo que comunmente se conoce como separaci\u00f3n de la presentaci\u00f3n del contenido . Un ejemplo donde se ve claramente esto es con la etiqueta <b> de HTML4 y anteriores. Dicha etiqueta se utilizaba para poner en negrita ( bold ) un texto espec\u00edfico: Hola, quiero resaltar esta <b>palabra</b>. En este caso, se est\u00e1 utilizando una propiedad de presentaci\u00f3n ( visual ) en el HTML, algo que no se debe hacer en HTML5. La misi\u00f3n de HTML5 es mantener s\u00f3lo contenido e informaci\u00f3n sem\u00e1ntica en HTML5. Por ello, la forma de hacerlo en HTML5 es la siguiente: Hola, quiero resaltar esta <strong>palabra</strong>. En este nuevo ejemplo, se reemplaza la etiqueta <b> ( negrita, caracter\u00edstica de presentaci\u00f3n ) por <strong> , una etiqueta que indica informaci\u00f3n sem\u00e1ntica ( importante, caracter\u00edstica sem\u00e1ntica ). De esta forma, en el HTML5 s\u00f3lo se est\u00e1 a\u00f1adiendo informaci\u00f3n particular sobre fragmentos de texto, y si queremos dotar de presentaci\u00f3n visual, lo haremos desde CSS: strong { font-weight : bold ; color : black ; } De esta forma podr\u00edamos cambiar el estilo ( negrita, colores, tipo de letra, etc... ) independientemente de la informaci\u00f3n y contenido que existe en el HTML. Incluso podr\u00edamos establecer el mismo estilo que en el texto, para que visualmente se vea todo de forma uniforme, pero sin embargo, al leer la p\u00e1gina HTML, el navegador sabr\u00e1 siempre que fragmentos de texto son m\u00e1s importantes, aunque tenga el mismo estilo visual. El objetivo de crear documentos HTML sem\u00e1nticos es que, aunque estamos acostumbrados a crear p\u00e1ginas para usuarios ( o m\u00e1s concretamente, para navegadores ), cada vez tendemos m\u00e1s a una Internet capaz de procesar informaci\u00f3n de forma aut\u00f3noma. Muestra de ello son, por ejemplo, los robots o crawlers de buscadores como Googlebot ( el robot de b\u00fasqueda de Google ) que es capaz de acceder a p\u00e1ginas web para analizar la informaci\u00f3n de la misma, entenderla e indexarla en su buscador.","title":"\u00bfQu\u00e9 es la sem\u00e1ntica?"},{"location":"desarrollo/html/01-introduccion_a_HTML5/#estructura-de-etiqueta-html","text":"Como hab\u00edamos mencionado, las p\u00e1ginas webs son realmente documentos de texto que contienen informaci\u00f3n y muchas etiquetas HTML que indican que tipo de contenido se va a mostrar en el navegador al cargar la p\u00e1gina web. La estructura de las etiquetas HTML tiene el siguiente formato:","title":"Estructura de etiqueta HTML"},{"location":"desarrollo/html/01-introduccion_a_HTML5/#etiqueta-html","text":"La parte esencial de una etiqueta HTML es lo que se denomina la etiqueta de apertura . Se trata de escribir el nombre de la etiqueta en cuesti\u00f3n, coloc\u00e1ndola entre los car\u00e1cteres < y > . Aunque no es terminantemente obligatorio, se recomienda y considera una buena costumbre escribir las etiquetas siempre en min\u00fasculas. En HTML5 no se puede colocar cualquier palabra como etiqueta, sino que existen una serie espec\u00edfica de etiquetas, cada una con una misi\u00f3n y objetivo diferente. Por ejemplo, la etiqueta <strong> : < strong > Contenido </ strong > Como se puede ver, la mayor\u00eda de las etiquetas requieren que se especifique un cierre de etiqueta para saber donde termina de actuar. Se caracteriza en que se escribe igual que la etiqueta de apertura, pero con la barra / inmediatamente despu\u00e9s del < .","title":"Etiqueta HTML"},{"location":"desarrollo/html/01-introduccion_a_HTML5/#atributo","text":"En algunas etiquetas HTML, existen algunos atributos espec\u00edficos ( que pueden ser opcionales u obligatorios ). Los atributos determinan cierta informaci\u00f3n sobre la etiqueta ( o su modo de actuar ) y generalmente van asociados a un valor determinado. Este par atributo-valor se escribe despu\u00e9s del nombre de la etiqueta, separ\u00e1ndola por espacio y antes del car\u00e1cter > de la etiqueta de apertura: < strong id = \"dato\" > Contenido </ strong > En este caso, la etiqueta ser\u00eda strong , el atributo id , el valor de id ser\u00eda dato , mientras que el contenido de la etiqueta es Contenido . Por otro lado, y al igual que las etiquetas, cada atributo tiene una misi\u00f3n y comportamiento concreto. Aunque los valores pueden ir rodeados por comillas simples, se recomienda escribir el valor siempre entre comillas dobles . Existen 3 tipos de atributos dependiendo de sus valores: Conjunto finito de valores : Son los atributos en los que puedes especificarle una serie de valores limitada. Cualquier otro valor que no sea uno de ellos, no ser\u00e1 v\u00e1lido. Valores libres : Son los atributos en los que puedes especificar un valor libremente, como una direcci\u00f3n URL o un texto, y no existe una serie de valores espec\u00edficos para escribir. Valores booleanos : Son los atributos que deben tener un valor verdadero ( true ) o un valor falso ( false ). En HTML5 estos atributos se escriben sin valor ( solo el atributo ) si son verdaderos y se omiten para indicar que son falsos.","title":"Atributo"},{"location":"desarrollo/html/01-introduccion_a_HTML5/#contenido-de-la-etiqueta","text":"En el interior de la etiqueta HTML ( despu\u00e9s de la etiqueta de apertura y antes de la etiqueta de cierre ) se debe colocar la informaci\u00f3n que queremos que sea afectada por dicha etiqueta. En el siguiente ejemplo se ve como contiene un fragmento de texto : < strong id = \"dato\" class = \"clase1\" lang = \"es\" > Contenido de texto </ strong > Ten en cuenta que una etiqueta puede tener varios pares atributo-valor, como se ve en el ejemplo anterior, pero nunca se debe repetir el mismo atributo en una misma etiqueta varias veces, ya que sobreescribir\u00eda al anterior. El orden de los atributos no importa. M\u00e1s adelante explicaremos que tipos de atributos existen y para que sirven. Sin embargo, una etiqueta puede contener desde un fragmento de texto hasta un grupo de etiquetas . Esto depende mucho de la etiqueta a utilizar, y se ver\u00e1 m\u00e1s adelante en el apartado de etiquetas. Un posible ejemplo ser\u00eda el siguiente: < div id = \"pagina\" > < strong > Contenido importante </ strong > </ div > N\u00f3tese que dentro de la etiqueta <div> vemos que no s\u00f3lo hay un fragmento de texto, sino que adem\u00e1s incluye otra etiqueta, <strong> en este caso. Esto ocurre en las etiquetas de agrupaci\u00f3n, que veremos m\u00e1s adelante.","title":"Contenido de la etiqueta"},{"location":"desarrollo/html/01-introduccion_a_HTML5/#comentario-html","text":"Los comentarios son una pr\u00e1ctica muy com\u00fan y habitual en los desarrolladores o programadores. Se basa en introducir breves fragmentos de texto que el navegador ignora y no tendr\u00e1 en cuenta a la hora de crear la p\u00e1gina visualmente, pero que a nosotros nos sirven de ayuda para documentar alg\u00fan detalle, explicar algo importante o simplemente introducir alg\u00fan texto que consideramos relevante: <!-- Esto es un comentario de ejemplo que el navegador ignorar\u00e1 --> Como se puede ver, para introducir estos comentarios en el c\u00f3digo HTML, basta con escribir los fragmentos de texto <!-- y --> entre el comentario en cuesti\u00f3n que queramos incluir.","title":"Comentario HTML"},{"location":"desarrollo/html/01-introduccion_a_HTML5/#atributos-comunes-en-html","text":"Como hemos visto, el HTML est\u00e1 formado por etiquetas. Muchas etiquetas. Cada etiqueta tiene una misi\u00f3n y tarea y contendr\u00e1 cierto contenido relacionado con su misi\u00f3n. Y adem\u00e1s tenemos los atributos , que son palabras clave de texto que modifican ligeramente el comportamiento de la etiqueta que lo contiene. En este apartado vamos a ver una lista de atributos comunes que pueden ser utilizados en cualquier etiqueta HTML : Atributo Valor Descripci\u00f3n id nombre Establece un identificador a la etiqueta HTML (s\u00f3lo una por p\u00e1gina con ese nombre). class nombre Establece una clase (g\u00e9nero) a una etiqueta HTML. Puede repetirse por p\u00e1gina. lang idioma Indica el idioma del contenido de la etiqueta HTML. translate yes | no Indica si el contenido de la etiqueta es traducible o no. title t\u00edtulo Mensaje mostrado en un tooltip (aviso amarillo emergente) al mover el rat\u00f3n encima. data-* nombre Metadatos en la propia etiqueta. Se puede usar cualquier nombre con prefijo data- . accesskey atajo Combinaci\u00f3n de teclas que puede pulsar el usuario para activar el elemento. dir ltr | rtl Establece la direccionalidad del texto ( left to right o right to left ). style estilos Aplica propiedades CSS directamente al elemento en cuesti\u00f3n. Esta secci\u00f3n no es absolutamente necesaria para usuarios iniciados, y quiz\u00e1s requiera adquirir m\u00e1s pr\u00e1ctica con HTML antes de comenzar a leer esta parte.","title":"Atributos comunes en HTML"},{"location":"desarrollo/html/01-introduccion_a_HTML5/#identificador-de-etiqueta-id","text":"En HTML, podemos darle un identificador a una etiqueta HTML y de esta forma darle un nombre. Simplemente, a\u00f1adimos el atributo id y colocamos el nombre como valor de ese atributo. Ese nombre de identificador no debe empezar nunca por un n\u00famero y puede contener letras may\u00fasculas, min\u00fasculas, signos especiales ( gui\u00f3n, gui\u00f3n bajo... ) o n\u00fameros: < div id = \"pagina\" > < div > Aqu\u00ed ir\u00e1 un anuncio </ div > < div id = \"articulo\" > Aqu\u00ed ir\u00e1 el contenido de texto del art\u00edculo </ div > < div > Aqu\u00ed ir\u00e1 un anuncio </ div > </ div > Los id se suelen indicar cuando queremos localizar zonas espec\u00edficas que sabemos que no se van a repetir en esa misma p\u00e1gina . Uno de los detalles importantes de los id, es que no pueden haber dos con el mismo nombre en una p\u00e1gina. Ejemplos correctos de id ser\u00edan \u00abpagina\u00bb ( para contener toda la p\u00e1gina completa ), \u00abcomentarios\u00bb ( para contener toda la zona de comentarios de la p\u00e1gina ) o \u00abheader\u00bb ( para contener la parte con el logo y la cabecera de la p\u00e1gina ). Lo que debe quedar claro de los ids, es que no se puede tener el mismo id en varias etiquetas HTML en una misma p\u00e1gina. M\u00e1s adelante, en el apartado de enlaces o hiperv\u00ednculos , veremos que tambi\u00e9n podemos utilizarlos para acceder r\u00e1pidamente, desde un enlace, a esa secci\u00f3n concreta de la p\u00e1gina.","title":"Identificador de etiqueta (id)"},{"location":"desarrollo/html/01-introduccion_a_HTML5/#clases-de-etiquetas-class","text":"Las clases funcionan de una forma muy similar a los id, pero son mucho m\u00e1s flexibles. En primer lugar, no tienen la limitaci\u00f3n de los ids, por lo que su nombre se puede repetir y no es necesario que aparezca s\u00f3lo una vez por p\u00e1gina. De hecho, la idea de las clases es establecer g\u00e9neros o tipos de etiquetas, a los que les asociemos caracter\u00edsticas comunes. Sigamos con el ejemplo anterior: < div id = \"pagina\" > < div class = \"anuncio\" > Aqu\u00ed ir\u00e1 un anuncio </ div > < div id = \"articulo\" > Aqu\u00ed ir\u00e1 el contenido de texto del art\u00edculo </ div > < div class = \"anuncio\" > Aqu\u00ed ir\u00e1 un anuncio </ div > </ div > Obs\u00e9rvese que, al tener la misma clase \u00abanuncio\u00bb, podemos realizar acciones para todas las etiquetas de ese tipo y no tener que hacerlo para cada una de ellas por separado. Un ejemplo cl\u00e1sico donde se ve bien su utilidad, es respecto a utilizar ids y clases para dar estilo CSS , donde aplicaremos unos estilos concretos a todas las etiquetas HTML con clase \u00abanuncio\u00bb. Adem\u00e1s, una etiqueta puede tener m\u00faltiples clases diferentes, no una sola. Esto nos da m\u00e1s flexibilidad a la hora de crear clases espec\u00edficas: < div id = \"pagina\" > < div class = \"anuncio primero\" > Aqu\u00ed ir\u00e1 un anuncio </ div > < div id = \"articulo\" > Aqu\u00ed ir\u00e1 el contenido de texto del art\u00edculo </ div > < div class = \"anuncio ultimo\" > Aqu\u00ed ir\u00e1 un anuncio </ div > </ div > N\u00f3tese que en la primera etiqueta del anuncio hemos aplicado las clases anuncio y primero , mientras que en el \u00faltimo anuncio hemos aplicado las clases anuncio y \u00faltimo . Esto nos permitir\u00eda asignar atributos comunes al anuncio en la clase anuncio, y atributos que s\u00f3lo dependan de la posici\u00f3n donde esta colocado en primero y/o ultimo . Recordar siempre que para indicar m\u00faltiples clases se debe separar las clases por espacio dentro de un mismoa atributo class . No se debe nunca indicar varios atributos class en una misma etiqueta, ya que el navegador lo que har\u00eda es sobreescribir el valor del \u00faltimo class con los de los primeros.","title":"Clases de etiquetas (class)"},{"location":"desarrollo/html/01-introduccion_a_HTML5/#idioma-del-contenido","text":"Mediante el atributo lang podemos indicar el idioma del contenido de la etiqueta. El valor de dicho atributo tendr\u00e1 que ser el c\u00f3digo ISO 639-1 del idioma al que queremos hacer referencia. Tambi\u00e9n podemos utilizar el atributo translate para indicar si el contenido de un texto es o no traducible: <p> Hace algunos d\u00edas fu\u00ed a ver la nueva pel\u00edcula de <span translate=\"no\">StarWars</span>. </p> De esta forma, le indicamos al navegador o a herramientas como Google Translator , que esa frase espec\u00edfica no se debe traducir porque es el t\u00edtulo que queremos que aparezca siempre. Por defecto, si no se indica el atributo translate en una etiqueta, es como si tuviera el valor yes por defecto.","title":"Idioma del contenido"},{"location":"desarrollo/html/01-introduccion_a_HTML5/#titulos-o-tooltips","text":"En la mayor\u00eda de las etiquetas HTML podemos indicar el atributo title para especificar un mensaje de texto que aparezca cuando el usuario detenga el rat\u00f3n sobre el elemento un instante. Al usuario le aparece un peque\u00f1o aviso emergente, generalmente con fondo amarillo y letras negras, que muestra el texto en cuesti\u00f3n: < div > < img src = \"Gandalf.jpg\" alt = \"Gandalf el gris, utilizando un port\u00e1til para consultar su correo.\" title = \"\u00a1Este es Gandalf el gris!\" /> </ div > Es importante no confundir el atributo title con el atributo alt de las im\u00e1genes, que generalmente se confunden porque pueden tener objetivos id\u00e9nticos, pero no siempre es as\u00ed. El atributo alt debe ser un texto alternativo que describa la imagen en el caso de que no se pueda ver visualmente, mientras que el atributo title puede describir la imagen, pero no tiene porque ser una descripci\u00f3n alternativa. De la misma forma, podemos utilizar el atributo title para otros elementos, como por ejemplo, etiquetas <a> ( enlaces ) u otras.","title":"T\u00edtulos o tooltips"},{"location":"desarrollo/html/01-introduccion_a_HTML5/#metadatos-datasets","text":"En HTML, veremos que la mayor\u00eda de los metadatos ( informaci\u00f3n adicional ) se incluyen en la etiqueta <head> del documento HTML. Sin embargo, tambi\u00e9n se puede incluir metadatos en la propia etiqueta HTML a trav\u00e9s de un atributo con prefijo data- . De esta forma, podemos inventarnos cualquier atributo que contenga informaci\u00f3n, habitualmente orientada a utilizarse desde Javascript: < div id = \"compartir\" > < a href = \"https://twitter.com/share/?url=https://lenguajehtml.com/\" data-share = \"43\" > Twitter </ a > < a href = \"https://www.facebook.com/sharer/sharer.php?u=https://lenguajehtml.com/\" data-share = \"66\" > Facebook </ a > < a href = \"https://plus.google.com/share?url=https://lenguajehtml.com/\" data-share = \"38\" > Google+ </ a > </ div > En este ejemplo guardamos, a trav\u00e9s de Javascript, el n\u00famero de veces que ha sido compartido un enlace de la p\u00e1gina, pudiendo reutilizarlo posteriormente en nuestro c\u00f3digo. Si queremos hacer referencia a estos elementos desde Javascript, debemos hacerlo mediante la propiedad .dataset : var links = document . querySelectorAll ( \"#compartir a\" ); links [ 0 ]. dataset . share ; // 43 links [ 1 ]. dataset . share ; // 66 links [ 2 ]. dataset . share ; // 38","title":"Metadatos (datasets)"},{"location":"desarrollo/html/01-introduccion_a_HTML5/#atajo-de-teclado-accesskey","text":"En HTML es posible a\u00f1adir el atributo accesskey para indicar un atajo de teclado que puede pulsar el usuario para activar ese elemento. En el siguiente ejemplo, tenemos 4 elementos: dos campos de texto, un enlace y un bot\u00f3n. Cada uno de ellos tiene su atributo accesskey para que cuando el usuario pulse ALT+tecla, se active ese elemento: <form> <input accesskey=\"N\" placeholder=\"Nombre (ALT+N)\" /> <!-- Campo de datos --> <input accesskey=\"A\" placeholder=\"Apellidos (ALT+A)\" /> <!-- Campo de datos --> <a accesskey=\"L\" href=\"#\">Enlace (ALT+L)</a> <!-- Enlace HTML --> <button accesskey=\"B\">Bot\u00f3n (ALT+B)</button> <!-- Bot\u00f3n HTML --> </form> De esta forma, si pulsamos ALT+N, se colocar\u00e1 el foco en el primer campo de texto, si pulsamos ALT+L ser\u00e1 como si hubieramos pulsado el enlace con el rat\u00f3n y si pulsamos ALT+B se pulsar\u00e1 el bot\u00f3n. Sin embargo, una de las desventajas de este sistema, es que no est\u00e1 demasiado unificado entre navegadores y sistemas, lo que lo hacen bastante complejo. Por ejemplo, si establecemos un atajo con la tecla A , es decir, con el atributo accesskey a A , tendr\u00edamos que pulsar la siguiente combinaci\u00f3n de teclas: Navegador Plataforma Windows Plataforma Linux Plataforma Mac Chrome ALT+A ALT+A CTRL+ALT+A Firefox ALT+SHIFT+A ALT+SHIFT+A CTRL+A IE/Edge ALT+A No aplicable No aplicable Safari No aplicable No aplicable CTRL+ALT+A Opera ALT+A ALT+A CTRL+ALT+A Esto hace que la combinaci\u00f3n de teclas para un usuario poco familiarizado con este proceso, adem\u00e1s de la incertidumbre de no saber que navegador va a utilizar, hagan que este proceso sea poco pr\u00e1ctico.","title":"Atajo de teclado (accesskey)"},{"location":"desarrollo/html/01-introduccion_a_HTML5/#direccionalidad-del-contenido","text":"Existe un atributo dir que permite al desarrollador indicar la direccionalidad del texto en el documento, ideal para idiomas en los que se escribe de derecha a izquierda. El valor por defecto de este atributo es ltr ( left to right, de izquierda a derecha ), pero podemos modificarlo y establecer el valor rtl ( right to left, de derecha a izquierda ): <p>Esto es un ejemplo de texto con direccionalidad de izquierda a derecha.</p> <p dir=\"rtl\">Esto es un ejemplo de texto con direccionalidad de derecha a izquierda.</p> Tambi\u00e9n es posible conseguir este efecto utilizando la propiedad CSS direction , que puede establecer su valor a ltr ( por defecto ) o a rtl .","title":"Direccionalidad del contenido"},{"location":"desarrollo/html/01-introduccion_a_HTML5/#estilos-en-linea","text":"El atributo style es un atributo que se utiliza en las etiquetas HTML para incrustar c\u00f3digo CSS directamente en la propia etiqueta. Tambi\u00e9n se suele denominar CSS embebido o CSS incrustado . Aunque generalmente, la mejor forma de aplicar estilos CSS es colocarlos en un documento CSS al margen de la p\u00e1gina ( lo que garantiza que todo est\u00e9 bien separado y modularizado ), hay situaciones en las que es conveniente o incluso necesario, a\u00f1adir el c\u00f3digo CSS en la propia etiqueta. En ese caso, se har\u00eda de la siguiente forma: <p style=\"background: red; color: white;\">Esto es un mensaje con estilos CSS</p> N\u00f3tese que estamos indicando dos reglas CSS dentro de una misma etiqueta. En \u00bfC\u00f3mo usar CSS? tienes otros m\u00e9todos para indicar CSS en una p\u00e1gina web.","title":"Estilos en l\u00ednea"},{"location":"desarrollo/html/01-introduccion_a_HTML5/#estructura-del-documento-html","text":"Un documento HTML debe tener siempre una estructura inicial, con algunas etiquetas y caracter\u00edsticas obligatorias y otras recomendables. Ese esquema es el siguiente, donde se diferencian tres zonas principales: Tipo de documento : En la primera l\u00ednea del documento HTML debe ir especificado siempre de que tipo de documento HTML se trata. No es absolutamente obligatorio indicarlo ( de hecho, hay p\u00e1ginas webs que no lo tienen ), pero eso trae algunas consecuencias que veremos m\u00e1s adelante. Head : En el documento HTML hay una primera secci\u00f3n donde se especificar\u00e1n todos los metadatos del documento, es decir, la parte \u00abque no se ve\u00bb directamente en el navegador de forma visual. Body : La segunda secci\u00f3n es el cuerpo de la p\u00e1gina, donde si aparecen todos los elementos que aparecer\u00e1n visualmente en el navegador del usuario. Las dos \u00faltimas secciones deben estar dentro de la etiqueta <html> , que es la que debe contener cualquier tipo de etiqueta HTML ( salvo el tipo de documento, que debe especificarse antes ):","title":"Estructura del documento HTML"},{"location":"desarrollo/html/01-introduccion_a_HTML5/#tipo-de-documento","text":"Antes de comenzar un documento HTML, en su primera l\u00ednea, es siempre conveniente indicar el tipo de documento a utilizar. Para indicar que se trata de un documento HTML5 colocaremos la siguiente linea: <!DOCTYPE html> En versiones anteriores, como HTML4 o XHTML , el tipo de documento se especificaba en la primera l\u00ednea de la siguiente forma ( m\u00e1s compleja ): <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"> Los navegadores, antes de comenzar a dibujar una p\u00e1gina web, lo primero que hacen es leer la l\u00ednea donde se indica el tipo de documento del que se trata. De esta forma, el navegador ya est\u00e1 preparado para actuar adapt\u00e1ndose perfectamente a cada tipo de documento. En el caso de no indicar el tipo de documento en una p\u00e1gina HTML, el navegador entra en lo que se llama Quirk mode ( modo peculiar o modo no est\u00e1ndar ), donde se activa un modo de retrocompatibilidad con p\u00e1ginas antiguas, que procesar\u00e1 de forma diferente muchas etiquetas HTML o propiedades CSS.","title":"Tipo de documento"},{"location":"desarrollo/html/01-introduccion_a_HTML5/#cabecera-html","text":"La zona de la cabecera de una p\u00e1gina web es la parte que se incluye en el interior de las etiquetas <head> , que son las primeras etiquetas que se encuentran en el documento y a su vez est\u00e1n dentro de las etiquetas <html> que engloban todo el documento HTML. En esta zona se indicar\u00e1n, en su mayor\u00eda, metadatos como el t\u00edtulo y descripci\u00f3n de la p\u00e1gina o elementos relacionados que no se representar\u00e1n visualmente en el navegador del usuario. Tambi\u00e9n es el lugar indicado para incluir etiquetas que relacionen el documento actual con otros documentos externos ( por ejemplo, para cargar estilos CSS o scripts ).","title":"Cabecera HTML"},{"location":"desarrollo/html/01-introduccion_a_HTML5/#cuerpo-de-pagina","text":"La zona del cuerpo de p\u00e1gina es la parte que se incluye en el interior de las etiquetas <body> , la segunda parte de un documento HTML, que va inmediatamente despu\u00e9s del cierre de la etiqueta <head> . En esta zona se incluyen todas las etiquetas HTML que si tienen repercusi\u00f3n visual en el navegador del usuario, generalmente utilizadas para dibujar secciones o partes de una p\u00e1gina.","title":"Cuerpo de p\u00e1gina"},{"location":"desarrollo/html/01-introduccion_a_HTML5/#validacion-de-errores-en-html","text":"Si estamos empezando con nuestro primer documento HTML y queremos comprobar si hay errores o hemos hecho mal, \u00bfqu\u00e9 podemos hacer? Los programadores suelen estar acostumbrados a los lenguajes de programaci\u00f3n , donde si tenemos un error en nuestro c\u00f3digo, debemos corregirlo para continuar, ya que en caso contrario no podremos utilizar ese programa. En los lenguajes de marcas como HTML, los navegadores son m\u00e1s permisivos, ya que en el caso de encontrar un error, intentan \u00abintuir\u00bb lo que se quiso decir y prosiguen con la carga del documento. De esta forma tenemos un m\u00e9todo m\u00e1s flexible a errores, pero tambi\u00e9n es un arma de doble filo donde podemos experimentar problemas derivado de ello.","title":"Validacion de errores en HTML"},{"location":"desarrollo/html/01-introduccion_a_HTML5/#validador-html5-de-w3c","text":"Para evitar esto y asegurarnos de que nuestro c\u00f3digo est\u00e1 correctamente escrito, podemos utilizar un Validador HTML , que no es m\u00e1s que un sistema que analiza nuestro c\u00f3digo y nos dice el n\u00famero de errores que tenemos, junto a una breve descripci\u00f3n del mismo. Para realizar ese proceso de validaci\u00f3n podemos utilizar HTML Validator , de W3C, que contiene Nu HTML Checker , un validador de HTML5 a\u00fan en fase experimental, pero que actualmente puede ser utilizado sin problemas para este proceso de b\u00fasqueda de errores: Existen 3 formas de enviar nuestro documento HTML a este validador HTML: Address : Indicando la direcci\u00f3n URL de la p\u00e1gina que se quiere validar. Obviamente, es necesario que la p\u00e1gina est\u00e9 colgada en Internet. File Upload : Seleccionando el archivo HTML de nuestro equipo, subirlo al validador y, posterior y finalmente, realizar el proceso de an\u00e1lisis. Text Input : Escribiendo ( o pegando ) directamente el c\u00f3digo HTML del documento HTML \u00edntegro a analizar. Adem\u00e1s, si nos fijamos en la parte superior de la herramienta de validaci\u00f3n, veremos que hay tres casillas disponibles para marcar, con las que podemos agregar nuevas caracter\u00edsticas que se mostrar\u00e1n tras la validaci\u00f3n. Dichas caracter\u00edsticas son las siguientes: Source : Nos muestra el c\u00f3digo fuente, numerado por l\u00edneas. \u00datil para corregir problemas sobre la marcha o comprobar los errores en las l\u00edneas especificadas. Outline : Nos muestra una especie de \u00e1rbol o esquema de la p\u00e1gina. Image report : Genera un informe de las im\u00e1genes del sitio web, con una miniatura y sus caracter\u00edsticas asociadas. Es una buena pr\u00e1ctica acostumbrarse a utilizar el validador para acostumbrarse a crear c\u00f3digo HTML de calidad y sin errores, ya que si tenemos documentos sin errores de validaci\u00f3n, es m\u00e1s probable que se vean correctamente en cualquier tipo de dispositivo. En el editor VSCode podemos encontrar el paquete w3c-validation , que nos permite analizar los documentos HTML directamente desde el editor.","title":"Validador HTML5 de W3C"},{"location":"desarrollo/html/01-introduccion_a_HTML5/#tabla-periodica-de-html5","text":"https://lenguajehtml.com/html/introduccion/tabla-periodica-html5/ Fuente: Lenguaje de Html por Manz","title":"Tabla peri\u00f3dica de HTML5"},{"location":"desarrollo/html/02-etiquetas_semanticas/","text":"Etiquetas semanticas \u00b6 Etiquetas HTML obsoletas \u00b6 Con el paso y transici\u00f3n de versiones anteriores ( HTML4 o XHTML ) a HTML5 , hay muchas etiquetas HTML que han sido marcadas como obsoletas y se recomienda dejar de utilizarlas cuanto antes. Es posible que algunas de ellas a\u00fan funcionen en navegadores actuales, pero llegar\u00e1 un momento que dejar\u00e1n de ser soportadas por el navegador. Aqu\u00ed tienen una lista de las etiquetas HTML obsoletas que no deber\u00edan utilizarse: Etiquetas obsoletas \u00b6 Las siguientes etiquetas ya no se utilizan en HTML5 y han sido marcadas como obsoletas . Se recomienda no utilizarlas o utilizar una de las alternativas propuestas : Etiqueta obsoleta Descripci\u00f3n Alternativa <applet> Etiqueta para applets Java. <embed> , <object> <acronym> Indica un acr\u00f3nimo. <acronym> <bgsound> Especifica un sonido de fondo. <audio> <dir> Indica una lista de archivos o carpetas. <ul> <frame> Define un marco espec\u00edfico. <iframe> <frameset> Define un conjunto de marcos. - <noframes> Indica una alternativa si el navegador no soporta marcos. - <hgroup> Agrupa encabezados. <header> , <div> <isindex> Campo para b\u00fascar en el documento. <input> <listing> , <xmp> Fragmentos de c\u00f3digo fuente. <pre><code> <noembed> Alternativa (fallback) para contenidos. <object> <strike> Muestra un texto tachado. <del> , <s> <basefont> Define una tipograf\u00eda por defecto. CSS: font-family <big> Aumenta el tama\u00f1o del texto. CSS: font-size <blink> Muestra el texto de forma parpadeante. - <center> Centra el texto. CSS: text-align <font> Cambia la tipograf\u00eda o sus caracter\u00edsticas. CSS: font-family <marquee> Muestra el texto movi\u00e9ndose de un lado a otro. - <multicol> Columnas m\u00faltiples. CSS: columnas <nobr> Evita que un texto haga un salto de l\u00ednea. CSS: white-space <spacer> Inserta un espacio horizontal. &nbsp; <tt> Muestra el texto con una fuente monoespaciada. CSS: font-family <menu> Crea men\u00fas de listados. <ul> Atributos obsoletos \u00b6 De la misma forma que ocurre con las etiquetas, existen una serie de atributos de ciertas etiquetas que han pasado a dejar de utilizarse. A continuaci\u00f3n tienes una lista con algunos de dichos atributos: Atributo obsoleto Pertenece a... Descripci\u00f3n Alternativa charset <a> , <link> Codificaci\u00f3n del enlace. name <a> , <embed> , <img> , <option> Establece un ancla. id language <script> Indica el lenguaje utilizado. type link <body> Indica el color de los enlaces. CSS: :link alink <body> Indica el color de los enlaces. CSS: :active vlink <body> Indica el color de los enlaces. CSS: :visited bgcolor <body> Indica el color de fondo de p\u00e1gina. CSS: background-color align , valign <table> Indica la alineaci\u00f3n vertical/horizontal. CSS: alineaciones hspace , vspace <table> , <iframe> Indica espacios en tablas/marcos. CSS: modelo de cajas allowtransparency <iframe> Permite transparencia. frameborder <iframe> Indica el borde de los marcos flotantes. scrolling <iframe> Permite o no hacer scroll en un marco. align , border <img> , <table> Indica que alineaci\u00f3n o borde utilizar. cellpadding <table> Indica espacios entre celdas de tabla. CSS: tablas cellspacing <table> Indica espacios entre celdas de tabla. CSS: tablas nowrap <td> , <th> Establece fijo el tama\u00f1o de una celda. CSS: tama\u00f1os Etiquetas HTML de texto \u00b6 A grandes rasgos, en un documento HTML existen dos tipos de etiquetas HTML : las etiquetas que contienen fragmentos de texto ( se utilizan para dar significado a esas palabras o fragmentos ) y las etiquetas que agrupan conjunto de informaci\u00f3n ( fragmentos de texto y/u otras etiquetas ). En el siguiente ejemplo, tenemos la etiqueta <p> , que pertenece al segundo grupo ( agrupaci\u00f3n ), mientras que la etiqueta <strong> forma parte del primer grupo, que es del que vamos a hablar en esta secci\u00f3n: < p > Hola, esto es un peque\u00f1o < strong > ejemplo </ strong > . </ p > Fragmentos de texto \u00b6 En primer lugar, existe una serie de etiquetas HTML simples para seleccionar un fragmento de texto y dotarlo de un significado especial. Por ejemplo: Etiqueta Descripci\u00f3n <strong> Fragmento de texto importante o palabras clave . <em> Fragmento de texto enfatizado respecto a la frase que lo contiene. <mark> Fragmento de texto resaltado, simulando estar marcado con rotulador amarillo. <i> Fragmento de texto con voz o tono alternativo al resto. <b> Fragmento de texto sin importancia destacable ( fines utilitarios ). <u> Fragmento de texto para nombres propios o escritura incorrecta intencionada (sic). <s> Fragmento de texto inexacto o que ya no es relevante. (errores o inexactitudes) <span> Fragmento de texto sin significado (\u00fatil para seleccionar). <cite> Fragmento de texto con el t\u00edtulo de un trabajo creativo: obras, libros... Ojo, algunas de estas etiquetas, en versiones anteriores de HTML ten\u00edan un significado diferente, como por ejemplo la etiqueta <b> , que antiguamente simbolizaba un fragmento de texto en negrita o la etiqueta <i> , que representaba un fragmento de texto en cursiva . Por su parte, la etiqueta <span> es una versi\u00f3n en linea de la etiqueta <div> , ya que su misi\u00f3n es agrupar contenido de texto, mientras que la misi\u00f3n del <div> es agrupar otras etiquetas HTML que a su vez pueden agrupar otras y otras etiquetas HTML. Modificaci\u00f3n de significado \u00b6 Con las siguientes etiquetas HTML tambi\u00e9n podemos modificar el significado de la informaci\u00f3n que contienen: Etiqueta Atributos Descripci\u00f3n <sup> Super\u00edndice (242) 2 . <sub> Sub\u00edndice (242) 2 . <small> Anotaciones menores peque\u00f1as puntualizaciones. <q> cite Cita o frase extra\u00edda de otro contexto. <dfn> title Definici\u00f3n (t\u00e9rmino que posteriormente ser\u00e1 definido). <abbr> title Abreviatura o acr\u00f3nimo. Las etiquetas HTML <sup> y <sub> se utilizan para indicar super\u00edndices y sub\u00edndices. De esta forma tenemos un mecanismo que nos permite diferenciar el n\u00famero 242 del n\u00famero 242 2 : <p>El resultado de 24<sup>2</sup> es el valor de X<sub>a</sub>.</p> Por otra parte, la etiqueta HTML <q> nos permite hacer referencia a una cita o frase extra\u00edda de otro contexto. Obs\u00e9rvese que en esta etiqueta disponemos de un atributo opcional cite , mediante el cu\u00e1l podemos hacer referencia a una URL ( en este caso a la ficha de la pel\u00edcula de Batman ) que en este caso es de donde procede la frase: < p > < q cite = \"http://www.imdb.com/title/tt0468569/\" > Hay hombres que solo quieren ver arder el mundo. </ q > </ p > Es importante tener en cuenta que no se trata de la creaci\u00f3n de un enlace para que el usuario haga clic, ya que estos se crean mediante la etiqueta <a> que veremos m\u00e1s adelante. Tambi\u00e9n tenemos las etiquetas <dfn> y <abbr> que nos permiten indicar definiciones y abreviaturas , y que ambas permiten el uso del atributo opcional title para indicar el significado de dicho t\u00e9rmino o abreviatura. Un ejemplo de ambas etiquetas combinadas: < p > El t\u00e9rmino < dfn >< abbr title = \"Kil\u00f3metro\" > Km </ abrr ></ dfn > es una unidad de longitud. </ p > Los saltos de l\u00ednea son etiquetas especiales de HTML para comenzar en una l\u00ednea nueva ( emular el efecto al pulsar ENTER ). Al contrario que todas las que hemos visto, las etiquetas <br> son etiquetas que no necesitan etiqueta de cierre, por lo que s\u00f3lo se escribe la etiqueta de apertura. Etiqueta Descripci\u00f3n <br> Salto de l\u00ednea ( nueva l\u00ednea ). <wbr> Oportunidad de salto de l\u00ednea ( divisi\u00f3n sil\u00e1bica con gui\u00f3n ). Tambi\u00e9n existe la etiqueta <wbr> que se denomina oportunidad de salto de l\u00ednea y posee el mismo funcionamiento de la divisi\u00f3n sil\u00e1bica con gui\u00f3n, es decir, indicamos donde es posible hacer un salto de l\u00ednea si la situaci\u00f3n lo requiere, como por ejemplo, si la palabra no cabe dentro de un elemento y se quiere evitar que desborde el contenido. Aspectos inform\u00e1ticos \u00b6 Existen una serie de etiquetas HTML ligeramente orientadas a aspectos inform\u00e1ticos como combinaciones de teclado del usuario o para representar variables matem\u00e1ticas o inform\u00e1ticas: Etiqueta Atributos Descripci\u00f3n <kbd> Entrada de informaci\u00f3n del usuario ( generalmente, combinaci\u00f3n de teclado ). <samp> Salida de informaci\u00f3n de un programa inform\u00e1tico. <var> Variable (contexto matem\u00e1tico o inform\u00e1tico). <time> datetime Indica una fecha/hora legible para humanos, con formato para m\u00e1quinas opcional. <data> value Informaci\u00f3n equivalente orientado a m\u00e1quinas. <code> Fragmento de c\u00f3digo fuente ( en l\u00ednea ). Un ejemplo pr\u00e1ctico de la etiqueta <kbd> ser\u00eda modificar sus estilos CSS para obtener algo similar a CTRL+T, simplemente combinando el siguiente c\u00f3digo HTML y CSS: < p > Pulsa las teclas < kbd > CTRL </ kbd > + < kbd > T </ kbd > ... </ p > < style > kbd { font-family : \"Victor Mono\" , monospace ; padding : 2 px 6 px ; background : #eee ; border : 3 px solid #bbb ; border-top-width : 1 px ; border-bottom : 3 px solid #777 ; } </ style > Si <kbd> muestra una entrada, por otro lado tenemos la etiqueta inversa, <samp> , que muestra la salida de un programa ( mensaje, error o informaci\u00f3n ) o <var> que nos permite indicar variables utilizadas en ejemplos matem\u00e1ticos o inform\u00e1ticos. Con la etiqueta <time> podemos indicar una fecha y/o hora en formato legible para humanos, indicando de forma opcional el atributo datetime con la fecha en un formato orientado a m\u00e1quinas. De la misma forma se utiliza la etiqueta <data> para informaci\u00f3n gen\u00e9rica, en la que se puede usar su atributo value para indicar el texto equivalente orientado a m\u00e1quinas: < p > < time datetime = \"2001-01-04\" > 4 de Enero </ time > < data value = \"ESDLA3\" > El retorno del Rey </ data > </ p > N\u00f3tese tambi\u00e9n que la etiqueta <code> se utiliza para fragmentos de c\u00f3digo fuente cortos, en l\u00ednea, o lo que es lo mismo, de una sola l\u00ednea. Para bloques de c\u00f3digo m\u00e1s extensos se usa combin\u00e1ndola con otra etiqueta que veremos m\u00e1s adelante. Etiquetas de edici\u00f3n \u00b6 Por \u00faltimo, tenemos unas etiquetas orientadas a la edici\u00f3n posterior a la publicaci\u00f3n de un texto o p\u00e1gina web: Etiqueta Atributos Descripci\u00f3n <ins> cite , datetime Fragmento de texto o informaci\u00f3n a\u00f1adida a posteriori de la publicaci\u00f3n inicial. <del> cite , datetime Fragmento de texto o informaci\u00f3n eliminada a posteriori de la publicaci\u00f3n inicial. Imaginemos que publicamos una p\u00e1gina pero queremos editar la publicaci\u00f3n para modificar o a\u00f1adir informaci\u00f3n ( o simplemente corregir errores ), pero queremos reflejar esos cambios para que se vean que han sido insertados a posteriori. Para ello podemos utilizar la etiqueta <ins> , pudiendo asociarle unos estilos CSS determinados. De la misma forma, podemos utilizar <del> para la eliminaci\u00f3n de informaci\u00f3n sin eliminarla por completo, sino que aparezca tachada o con alg\u00fan estilo visual que sugiera que ya no es v\u00e1lida ( en gris y tachada, por ejemplo ). Ambas etiquetas admiten el uso de los atributos opcionales cite , que permite incluir una URL con m\u00e1s informaci\u00f3n sobre la informaci\u00f3n a\u00f1adida/eliminada ( id\u00e9ntico al atributo cite de la etiqueta q ) y datetime , que permite incluir la fecha/hora cuando se a\u00f1adi\u00f3/elimin\u00f3 la informaci\u00f3n ( funcionamiento id\u00e9ntico al atributo datetime de la etiqueta time ). Etiquetas HTML de agrupaci\u00f3n \u00b6 Hab\u00edamos comentado que exist\u00edan dos tipos de etiquetas HTML : las etiquetas que contienen fragmentos de texto ( se utilizan para dar significado a esas palabras o fragmentos ) y las etiquetas que agrupan conjunto de informaci\u00f3n ( fragmentos de texto y/u otras etiquetas ). En esta ocasi\u00f3n, vamos a ver el segundo grupo , que son las etiquetas que se utilizan para agrupar y organizar informaci\u00f3n ( y otras etiquetas ). Veamos un ejemplo: < div > < p > Hola, esto es un primer p\u00e1rrafo de ejemplo. </ p > < p > Y esto, es un segundo p\u00e1rrafo de ejemplo. </ p > </ div > Agrupaciones \u00b6 Las siguientes etiquetas se utilizan para agrupar informaci\u00f3n, como es el caso de las etiquetas <div> o <p> que vimos en el ejemplo mostrado anteriormente: Etiqueta Atributos Descripci\u00f3n <div> Capa o divisi\u00f3n utilizado para agrupar varias etiquetas HTML. <p> Define un p\u00e1rrafo de texto ( con sus etiquetas HTML para texto ). <pre> Establece un texto preformateado ( respetando espacios y saltos de l\u00ednea ). <blockquote> cite Agrupa informaci\u00f3n y caracter\u00edsticas de una cita ( autor, fuente, etc... ). <main> Contenedor para englobar la parte principal de la p\u00e1gina. <hr> Indica una separaci\u00f3n tem\u00e1tica del texto. La etiqueta <pre> se utiliza para mostrar texto respetando el formato con el que est\u00e1 escrito ( espacios en blanco, saltos de l\u00ednea, etc... ). Tambi\u00e9n es muy habitual utilizarlo junto a la etiqueta <code> anidada en su interior, de forma que tenemos un bloque de c\u00f3digo preformateado: < pre > < code class = \"language-javascript\" > function mensaje(s) { console.log(s); } </ code > </ pre > Como se puede ver, en el caso de crear bloques de c\u00f3digo, suele ser una buena pr\u00e1ctica incluir un atributo class con el lenguaje que estamos utilizando. Esto no es una funcionalidad nativa de HTML5, pero muchas librer\u00edas de Javascript nos permiten resaltar la sintaxis dependiendo del lenguaje de programaci\u00f3n indicado ( ya que var\u00eda de uno a otro ). Por otro lado, la etiqueta <blockquote> suele utilizarse para agrupar informaci\u00f3n referida a una cita o frase: < blockquote cite = \"http://es.wikiquote.org/wiki/Fight_Club\" > < p > La primera regla del Club de la Lucha es: Nadie habla sobre el Club de la Lucha. </ p > < footer > < cite class = \"author\" > Tyler Durden </ cite > en < cite class = \"title\" > El Club de la Lucha </ cite > </ footer > </ blockquote > Obs\u00e9rvese que utilizamos el atributo opcional cite para indicar una referencia externa de la fuente de la cita. Luego, en su interior, tenemos un p\u00e1rrafo que contiene la frase en cuesti\u00f3n, seguida de una secci\u00f3n sem\u00e1ntica ( pie de cita ) que a su vez contiene referencias al autor de la cita y el t\u00edtulo de la pel\u00edcula. Listas \u00b6 En HTML podemos crear listas de informaci\u00f3n de una forma muy sencilla. Empecemos por las etiquetas disponibles: Etiqueta Atributos Descripci\u00f3n <ul> Define una lista sin orden. Se trata de la etiqueta contenedora. <ol> start , reversed , type Define una lista numerada (con orden). Etiqueta contenedora. <li> value Define un \u00edtem de la lista. En primer lugar debemos elegir la etiqueta <ul> o la etiqueta <ol> dependiendo de si queremos una lista donde no importa el orden ( lista de objetos que tengo en el bolsillo ) o una lista en la que si importa el orden ( lista de canciones preferidas de mayor a menor ). Una vez elegido, comenzamos a a\u00f1adir \u00edtems, uno por etiqueta <li> . La forma m\u00e1s b\u00e1sica de crear una lista ser\u00eda la siguiente: < ul > < li > Primer \u00edtem. </ li > < li > Segundo \u00edtem. </ li > < li > Tercer \u00edtem. </ li > </ ul > Esto crear\u00eda una lista, donde cada uno de los \u00edtems aparecer\u00eda con un circulo negro cada uno. Una particularidad poco conocida es que HTML nos permite omitir las etiquetas de cierre </li> si van seguidas de otra etiqueta de apertura <li> . Si reemplazamos la etiqueta <ul> por <ol> los \u00edtems pasan a ser \u00edtems numerados ( por defecto, n\u00fameros enteros a partir de 1 ). Las etiquetas <ol> permiten indicar varios atributos opcionales para modificar la forma en que se numera cada \u00edtem: Atributo Valor Significado start [ n\u00famero ] Indica el n\u00famero del primer \u00edtem de la lista y del que empezar\u00e1 a contar. reversed - type 1 | a | A | i | I Lista con n\u00fameros enteros, letras o n\u00fameros romanos (en min\u00fasculas o may\u00fasculas). El siguiente ejemplo muestra una lista numerada con letras min\u00fasculas, que empiezan en c , pero ir\u00e1n en orden inverso, por lo que terminar\u00e1n en c : < ol start = \"c\" type = \"a\" reversed > < li value = \"1\" > Primer \u00edtem. </ li > < li value = \"2\" > Segundo \u00edtem. </ li > < li value = \"3\" > Tercer \u00edtem. </ li > </ ol > Obs\u00e9rvese que tambi\u00e9n se puede establecer el atributo value a cada \u00edtem de la lista para asignarle, por ejemplo, un valor num\u00e9rico o ponderarlos. Listas de descripciones \u00b6 De la misma forma que podemos crear listas gen\u00e9ricas, podemos crear listas de descripciones. La diferencia es que este tipo de listas se suele utilizar cuando queremos asociar pares de nombre-valor. Primero veamos las etiquetas: Etiqueta Descripci\u00f3n <dl> Define una lista de descripciones. Es la etiqueta contenedora. <dt> T\u00e9rmino de la descripci\u00f3n. Contiene el nombre o t\u00e9rmino a describir. <dd> Descripci\u00f3n o valor asociado al t\u00e9rmino. Pueden existir varios por t\u00e9rmino. Veamos un ejemplo pr\u00e1ctico de este tipo de listas: < dl > < dt > Gallina </ dt > < dd > Ave dom\u00e9stica del orden de las galliformes. </ dd > < dd > Cobarde, pusil\u00e1nime. </ dd > </ dl > Ilustraciones (figuras) \u00b6 Por \u00faltimo, dentro del apartado de etiquetas de agrupaci\u00f3n tenemos las nuevas etiquetas <figure> y <figcaption> . Estas etiquetas se utilizan para agrupar conceptos formados por una ilustraci\u00f3n ( figura ) y una leyenda. Con estos elementos de agrupaci\u00f3n se puede agrupar una imagen y su correspondiente pie de foto, pudiendo ampliar a otro tipo de contenidos multimedia como video o audio. Etiqueta Descripci\u00f3n <figure> Establece una figura, que puede contener una serie de elementos diversos. <figcaption> Asocia una leyenda, generalmente texto, a la figura anterior. Opcional. Veamos un ejemplo: < figure > < img src = \"http://lenguajehtml.com/img/html5-logo.png\" alt = \"Logotipo de HTML5\" /> < figcaption > Logotipo oficial del lenguaje de marcas HTML5. </ figcaption > </ figure > N\u00f3tese que en la ilustraci\u00f3n o figura, se puede contener todo tipo de elementos, no solo im\u00e1genes. Ejemplos v\u00e1lidos podr\u00edan ser videos, p\u00e1rrafos de texto o incluso contenido multimedia. Enlaces o hiperv\u00ednculos \u00b6 Una de las etiquetas m\u00e1s importantes de HTML ( sino la que m\u00e1s ) es la etiqueta <a> . Esta etiqueta se utiliza para crear los llamados enlaces , v\u00ednculos o hiperv\u00ednculos . La idea es establecer una referencia a una direcci\u00f3n o URL donde est\u00e1 alojado ese otro documento de destino, que puede ser una p\u00e1gina web, un archivo PDF, una imagen o cualquier otro tipo de documento. Etiqueta Descripci\u00f3n <a> Etiqueta para hacer referencia a otras p\u00e1ginas web o recursos como documentos o archivos. Esta etiqueta debe tener, como m\u00ednimo, el atributo href , ya que es el atributo con el que se especifica la direcci\u00f3n URL al documento que se quiere enlazar. A\u00fan as\u00ed, la etiqueta <a> tambi\u00e9n tiene varios atributos opcionales, veamos un resumen de todos ellos: Atributo Valor Descripci\u00f3n href URL Enlace al documento que se quiere cargar. Atributo obligatorio . download nombre.ext Descarga el enlace (href) en lugar de abrirlo. Si se indica valor, se renombra. target _blank Abre el enlace en una nueva pesta\u00f1a. _self Abre el enlace en la pesta\u00f1a o <iframe> actual. _parent Abre el enlace en el documento padre. _top Abre el enlace en el documento ra\u00edz (padre global). nombre Abre el enlace en el <iframe> con el nombre especificado. rel alternate Indica que el enlace es una versi\u00f3n alternativa (idioma o formato diferente). author Indica que el enlace es la web del autor de la p\u00e1gina actual. bookmark El enlace es un permalink a la secci\u00f3n de la p\u00e1gina actual. help Indica que el enlace ofrece ayuda para la p\u00e1gina actual. license Indica que la p\u00e1gina actual est\u00e1 cubierta por la licencia referenciada. prev Indica que el enlace es la parte previa del documento actual. next Indica que el enlace es la parte siguiente del documento actual. nofollow Indica que el enlace no est\u00e1 supervisado por el autor del sitio web. noreferrer El navegador no env\u00eda la p\u00e1gina de procedencia al visitar el enlace. prefetch El navegador precarga el enlace (es probable que se haga clic) search Indica que el enlace es una p\u00e1gina para realizar b\u00fasquedas. tag Asocia una etiqueta al enlace especificado, en relaci\u00f3n al documento actual. hreflang Idioma C\u00f3digo ISO 639-1 del idioma del documento. type Tipo Tipo de contenido MIME al que se enlaza. Atributo no obligatorio. El soporte del atributo download podr\u00eda no funcionar en navegadores no actuales, como versiones antiguas de Chrome o Firefox, o desde Internet Explorer: Veamos a continuaci\u00f3n algunos ejemplos de enlaces utilizando algunos atributos indicados en la tabla superior para comprender as\u00ed su funcionamiento: < ul > < li >< a rel = \"author\" href = \"http://www.emezeta.com/\" > Emezeta </ a ></ li > < li >< a href = \"http://lenguajecss.com/\" target = \"_blank\" > LenguajeCSS </ a ></ li > < li >< a href = \"http://pagina.com/documento.pdf\" download = \"A-38.pdf\" > PDF </ a ></ li > < li >< a href = \"http://pagina.com/documento-en.pdf\" hreflang = \"en\" > PDF </ a ></ li > </ ul > Esquema de una URL \u00b6 Al indicarse una URL, tenemos varias formas de escribirla. Conviene conocer bien la estructura de una URL, para diferenciar cada una de sus partes. Este ser\u00eda el esquema completo de un enlace completo: Protocolo \u00b6 Existen varios protocolos diferentes y es la parte inicial de la URL. Probablemente, el m\u00e1s utilizado sea http:// , aunque https:// tambi\u00e9n es frecuentemente muy utilizado, ya que se utiliza para cifrar informaci\u00f3n y que la transmisi\u00f3n sea m\u00e1s segura. Al escribir una URL nunca debemos olvidarnos del protocolo y escribir s\u00f3lamente la direcci\u00f3n, ya que el v\u00ednculo podr\u00eda no funcionar correctamente. Algunos protocolos de ejemplo: Protocolo Descripci\u00f3n http:// Protocolo de transferencia de hipertexto. Es el que se usa habitualmente para p\u00e1ginas webs. https:// Protocolo seguro de transferencia de hipertexto. Usado para cifrar informaci\u00f3n sensible. ftp:// Protocolo de transferencia de ficheros. Similar a HTTP, pero orientado a enviar ficheros. whatsapp:// Protocolo de WhatsApp. Se puede interactuar con WhatsApp si el usuario lo tiene instalado. // Protocolo utilizado en la URL actual. Utiliza http o https seg\u00fan la p\u00e1gina original. !!! Un detalle importante sobre la \u00faltima opci\u00f3n de la tabla anterior. Al indicar // al inicio de un enlace, le decimos al navegador que establezca http:// o https:// dependiendo de como se cargara el documento actual. Si el documento actual se carg\u00f3 como http:// reemplazar\u00e1 // por http:// , pero si el documento actual se carg\u00f3 como https:// reemplazar\u00e1 // por https:// . Esto nos permite m\u00e1s flexibilidad a la hora de cargar documentos o recursos. Dominio \u00b6 La siguiente parte de la URL es el dominio del sitio web que queremos enlazar. El dominio generalmente se compone de un subdominio ( opcional ), el nombre de dominio y el dominio de nivel superior o TLD. Por ejemplo, las famosas www no son m\u00e1s que un subdominio utilizado tradicionalmente para p\u00e1ginas webs. Por otra parte, hay much\u00edsimos TLD para sitios web: Dominio Descripci\u00f3n .com Originalmente para sitios comerciales, actualmente el m\u00e1s utilizado. Dif\u00edcil conseguir dominio libre. .net Quiz\u00e1s, la segunda opci\u00f3n por excelencia. Su nombre proviene de la palabra Internet. .org Originalmente para organizaciones, actualmente es la tercera opci\u00f3n m\u00e1s utilizada. .es Sitios webs orientados a Espa\u00f1a. .com.es Dominio de segundo nivel orientado a Espa\u00f1a. .cat Sitios webs orientados a Catalu\u00f1a. Muy usado para sitios webs de gatos. .la Sitios webs orientados a Laos. Muy usado para domain-hacks . .me Sitios webs orietnados a Montenegro. Muy usado para domain-hacks . .io Sitios webs orientados al Territorio Brit\u00e1nico de Oc\u00e9ano \u00cdndico. Muy usado como Input/Output. .dev Sitios webs orientados al mundo del desarrollo o programaci\u00f3n ( developers ). .blog Nuevos gTLD ( dominios gen\u00e9ricos ) orientados a categor\u00edas. En este caso, a blogs. .viajes Nuevos gTLD ( dominios gen\u00e9ricos ) orientados a categor\u00edas. En este caso, a webs sobre viajes. Partes de la URL \u00b6 Rutas : La parte de la ruta de una p\u00e1gina web es equivalente a las carpetas o directorios donde almacenamos nuestros archivos. En el caso que una direcci\u00f3n termine en esta parte y no indique nada m\u00e1s, generalmente, el servidor que aloja la p\u00e1gina web dirige al usuario a una p\u00e1gina llamada index.html o index.htm por defecto. Esto es configurable en la parte del servidor, y depende de totalmente de la configuraci\u00f3n del servidor web utilizado. P\u00e1gina o documento : La \u00faltima parte de la URL suele ser un documento HTML como el del ejemplo: pagina.html . En algunos casos, la extensi\u00f3n .html es abreviada como .htm . Dependiendo del servidor web y los componentes instalados, es posible que se utilicen otro tipo de documentos con lenguajes de programaci\u00f3n del lado del servidor, como podr\u00eda ser por ejemplo pagina.php . Si se trata de otro documento, como un archivo PDF o un video, el navegador intentar\u00e1 abrirlo directamente, y si no puede, lo descargar\u00e1 para que el usuario lo abra con alguna aplicaci\u00f3n de su sistema. Query strings : Una parte no mencionada en el esquema anterior son las cadenas de consulta del usuario, m\u00e1s frecuentemente utilizadas en lenguajes como Javascript o lenguajes del servidor. B\u00e1sicamente, son variables que contienen informaci\u00f3n y se env\u00edan en la URL, como por ejemplo, en la b\u00fasqueda de Google: URL Variable Contenido Significado https://www.google.com/search?q=gato q gato Busca \"gato\" https://www.google.es/search?q=gato&tbm=isch q gato Busca \"gato\" tbm isch Ancla : Por \u00faltimo tenemos el ancla, que no es m\u00e1s que un fragmento de texto precedido por el car\u00e1cter # . Al encontrarse con esto, el navegador busca una etiqueta HTML que tenga un atributo id con ese texto, y posiciona al usuario en esa parte de la p\u00e1gina. Se utiliza para acceder directamente a permalinks o secciones concretas de una p\u00e1gina. Obviamente, esta parte es opcional. !!! Recientemente tambi\u00e9n ha parecido una nueva caracter\u00edstica llamada scroll to text fragments . Se basa en escribir el texto #:~:text=<palabrainicial>,<palabrafinal> a continuaci\u00f3n de la URL. Con esto, el navegador hace scroll a la parte de la p\u00e1gina donde se encuentra el fragmento de texto que comienza por la palabra inicial y termina por la palabra final. Tambi\u00e9n se pueden indicar frases en lugar de palabras. Estado de un enlace \u00b6 Por defecto, los enlaces tienen 3 estados diferentes: Enlaces sin visitas : Un enlace que no ha sido visitado a\u00fan ( pseudoclase :link en CSS ) es representado por los navegadores como un enlace de color azul y subrayado. Se suele aconsejar no realizas cambios bruscos en los estilos de los enlaces, ya que los usuarios que no est\u00e9n acostumbrados al sitio web no reconocer\u00e1n instant\u00e1neamente un enlace si no es de color azul y/o est\u00e1 subrayado. Enlaces visitados : Un enlace que ha sido visitado previamente ( pseudoclase :visited en CSS ) es representado por los navegadores como un enlace de color lila y subrayado. Enlaces activos : Un enlace est\u00e1 en estado activo ( pseudoclase :active en CSS ) cuando el usuario est\u00e1 pulsando sobre el enlace con el rat\u00f3n y a la misma vez no ha dejado de pulsar en \u00e9l. Se suele utilizar para destacar el clic visualmente. Rutas relativas o absolutas \u00b6 A la hora de indicar una URL, generalmente se puede hacer de varias formas: Tipo de ruta Ejemplo \u00bfD\u00f3nde busca el archivo? Sin ruta imagen.jpg En la misma carpeta del .html actual. Relativa ascendente img/imagen.jpg En la carpeta img de la carpeta actual. Relativa descendente ../imagen.jpg En la carpeta anterior a la actual. Evitar . Relativa global /img/imagen.jpg El primer / simboliza el principio de la URL. Absoluta https://pagina.com/img/imagen.jpg Exactamente en la URL indicada. El usuario puede utilizar la forma de indicar la ruta que prefiera, eso s\u00ed, se aconseja ser coherente y utilizar siempre que se pueda un mismo formato de ruta. Particularmente, tiendo a evitar el tipo de ruta relativa descendente, ya que podr\u00eda generar un c\u00f3digo feo y ofuscado. Etiquetas HTML de secci\u00f3n \u00b6 En versiones anteriores a HTML5, al crear la estructura de una p\u00e1gina, normalmente utilizabamos etiquetas <div> para ir agrupando secciones de la p\u00e1gina. Unido a esto, ibamos a\u00f1adiendo id o clases ( atributos ) dependiendo de nuestro inter\u00e9s, para que quedase m\u00e1s claro. Una estructura como la que menciono podr\u00eda ser la siguiente: < div class = \"articulo\" > < h1 > T\u00edtulo del art\u00edculo </ h1 > < p class = \"intro\" > Peque\u00f1a introducci\u00f3n. </ p > < p class = \"contenido\" > Aqu\u00ed va el texto del art\u00edculo en cuesti\u00f3n con sus detalles. </ p > < p class = \"pie\" > Escrito por Manz </ p > </ div > Vemos que en esta estructura tenemos una agrupaci\u00f3n que contiene todos los elementos de un art\u00edculo, donde el primer elemento es un encabezado <h1> ( titular ), luego un p\u00e1rrafo de introducci\u00f3n, seguido de un p\u00e1rrafo de contenido y un \u00faltimo p\u00e1rrafo a pie de art\u00edculo. La estructura podr\u00eda ser m\u00e1s sencilla o m\u00e1s complicada, pero nos viene bien como ejemplo de introducci\u00f3n a este tema. N\u00f3tese que los elementos utilizados <div> y <p> no tienen una sem\u00e1ntica espec\u00edfica, salvo que son etiquetas de agrupaci\u00f3n y que la segunda contiene un p\u00e1rrafo. En HTML5 se introducen una serie de etiquetas de agrupaci\u00f3n que funcionan exactamente como un <div> , pero que adem\u00e1s tienen un significado sem\u00e1ntico porque indican la naturaleza del contenido que agrupar\u00e1n. Veamos el ejemplo anterior, utilizando etiquetas sem\u00e1nticas: < article > < header > < h1 > T\u00edtulo del art\u00edculo </ h1 > < p class = \"intro\" > Peque\u00f1a introducci\u00f3n. </ p > </ header > < p class = \"contenido\" > Aqu\u00ed va el texto del art\u00edculo en cuesti\u00f3n con sus detalles. </ p > < footer > < p > Escrito por Manz. </ p > </ footer > </ article > De esta forma, preparamos nuestro documento HTML para que cualquier navegador, robot de buscador o aplicaci\u00f3n o sistema inform\u00e1tico sea capaz de leer el documento HTML y conocer perfectamente la naturaleza del contenido de dicha secci\u00f3n. Etiquetas sem\u00e1nticas \u00b6 Veamos un listado de las etiquetas sem\u00e1nticas que se introducen en HTML5 ( los encabezados ya exist\u00edan en versiones anteriores ): Etiqueta Descripci\u00f3n <article> Art\u00edculo. Parte principal de un escrito ( posts, mensaje en foros, comentario... ) <nav> Apartado de navegaci\u00f3n ( enlaces de secciones, categor\u00edas, etc... ) <header> Cabecera visual de la p\u00e1gina ( logotipo, t\u00edtulo, etc... ). No confundir con <head> . <h1> Encabezado de nivel 1. Equivalente al t\u00edtulo del documento. <h2> Encabezado de nivel 2. Equivalente al tema del documento. <h3> Encabezado de nivel 3. Equivalente a la secci\u00f3n de un tema. <h4> Encabezado de nivel 4. Equivalente a un apartado de la secci\u00f3n. <h5> Encabezado de nivel 5. Equivalente a un ejemplo del apartado. <h6> Encabezado de nivel 6. Equivalente a un subapartado del ejemplo. <footer> Pie de p\u00e1gina de una secci\u00f3n ( o del documento completo ). <section> Secci\u00f3n o grupo tem\u00e1tico de contenido. No usar s\u00f3lo para dar estilo. <aside> Agrupaci\u00f3n de contenido no relacionado con el tema principal del documento. <address> Agrupaci\u00f3n con la informaci\u00f3n de contacto del autor del art\u00edculo o documento. N\u00f3tese que las etiquetas <article> pueden contener otras etiquetas <article> , como por ejemplo comentarios dentro de art\u00edculos: < article class = \"post\" > < p > Este ser\u00eda el texto del art\u00edculo. </ p > < article class = \"comentario\" > < p > Aqu\u00ed ir\u00eda el texto del comentario. </ p > </ article > </ article > Etiquetas HTML de tablas \u00b6 Las tablas est\u00e1n incluidas en HTML desde sus primeras versiones y son una forma fant\u00e1stica de mostrar datos claramente. Adem\u00e1s, si las construimos de forma sem\u00e1ntica y correctamente, es muy sencillo darle estilos desde CSS y cambiar su dise\u00f1o con unas cuantas propiedades CSS, puesto que mediante las etiquetas que la componen se puede hacer referencia a cada parte de la misma. Tablas b\u00e1sicas \u00b6 Una tabla puede ser sencilla o compleja, dependiendo de nuestro objetivo y la cantidad de etiquetas o atributos a utilizar. As\u00ed pues, veamos primero las etiquetas b\u00e1sicas para crear una tabla de la forma m\u00e1s sencilla posible: Etiqueta Descripci\u00f3n <table> Etiqueta contenedora que tendr\u00e1 en su interior toda la tabla. <tr> Table Row . Etiqueta contenedora de cada fila de la tabla. <td> Table Data . Cada una de las celdas de la tabla. <th> Table Header . Cada una de las celdas de cabecera de la tabla. La etiqueta <table> ser\u00eda el elemento que contendr\u00eda todos los elementos de la tabla, mientras que <th> y <td> se utilizar\u00edan para cada uno de los campos de la tabla ( cabecera y celda respectivamente ). Cada vez que se quisiera a\u00f1adir una nueva fila, habr\u00eda que incluirlo todo dentro de una etiqueta <tr> . Estas cuatro etiquetas ser\u00edan las etiquetas necesarias para crear una tabla. Un ejemplo muy sencillo de una tabla de 3x2 celdas ( exceptuando las cabeceras ), ser\u00eda la siguiente: < table > <!-- Cabecera --> < tr > < th > T\u00edtulo columna 1 </ th > <!-- Celda de cabecera de la columna 1 --> < th > T\u00edtulo columna 2 </ th > <!-- Celda de cabecera de la columna 2 --> < th > T\u00edtulo columna 3 </ th > <!-- Celda de cabecera de la columna 3 --> </ tr > <!-- Primera fila --> < tr > < td > Celda 1x1 </ td > <!-- Primera celda de la primera fila --> < td > Celda 2x1 </ td > <!-- Segunda celda de la primera fila --> < td > Celda 3x1 </ td > <!-- Tercera celda de la primera fila --> </ tr > <!-- Segunda fila --> < tr > < td > Celda 1x2 </ td > <!-- Primera celda de la segunda fila --> < td > Celda 2x2 </ td > <!-- Segunda celda de la segunda fila --> < td > Celda 3x2 </ td > <!-- Tercera celda de la segunda fila --> </ tr > </ table > En este caso de ejemplo tendr\u00edamos una sencilla tabla de 3x2 celdas. Por defecto, en la tabla se crea de forma que se adapta al n\u00famero de celdas que tiene la primera fila. Es decir, si en el primer elemento <tr> se indican 3 elementos <th> , la tabla esperar\u00e1 siempre 3 elementos en cada fila. Si indicaramos menos, las celdas correspondientes donde deber\u00edan estar aparecer\u00edan vac\u00edas ( sin celda ). Si a\u00f1adieramos una de m\u00e1s, se saldr\u00eda de la tabla. Adem\u00e1s, si al c\u00f3digo HTML anterior le aplicamos unos apropiados estilos CSS de tablas , junto a cambios de colores, fuentes, m\u00e1rgenes, rellenos y otros aspectos visuales, podremos cambiar el dise\u00f1o de la tabla en poco m\u00e1s que un par de l\u00edneas. El siguiente c\u00f3digo CSS puede ser utilizado para mostrar esos cambios sobre la tabla anterior: < style > /* Cambios sobre la propia tabla */ table { border-collapse : collapse ; border : 1 px solid #ccc ; } /* Espacio de relleno en celdas y cabeceras */ td , th { padding : 10 px ; } /* Modificaci\u00f3n de estilos en cabeceras */ th { background : #000 ; color : #fff ; text-transform : uppercase ; } /* Modificaci\u00f3n de estilos en celdas */ td { text-align : center ; border-bottom : 2 px solid #111 ; color : #333 ; font-size : 18 px ; } </ style > < table > <!-- Cabecera --> < tr > < th > T\u00edtulo columna 1 </ th > <!-- Celda de cabecera de la columna 1 --> < th > T\u00edtulo columna 2 </ th > <!-- Celda de cabecera de la columna 2 --> < th > T\u00edtulo columna 3 </ th > <!-- Celda de cabecera de la columna 3 --> </ tr > <!-- Primera fila --> < tr > < td > Celda 1x1 </ td > <!-- Primera celda de la primera fila --> < td > Celda 2x1 </ td > <!-- Segunda celda de la primera fila --> < td > Celda 3x1 </ td > <!-- Tercera celda de la primera fila --> </ tr > <!-- Segunda fila --> < tr > < td > Celda 1x2 </ td > <!-- Primera celda de la segunda fila --> < td > Celda 2x2 </ td > <!-- Segunda celda de la segunda fila --> < td > Celda 3x2 </ td > <!-- Tercera celda de la segunda fila --> </ tr > </ table > Combinar celdas \u00b6 Cada etiqueta <td> y <th> puede incluir una serie de atributos para modificar su comportamiento o para establecer relaciones sem\u00e1nticas entre celdas. Probablemente, las m\u00e1s interesantes sean colspan y rowspan : Atributo Valor Descripci\u00f3n colspan n\u00famero N\u00famero de columnas que la celda abarcar\u00e1. rowspan n\u00famero N\u00famero de filas que la celda abarcar\u00e1. headers ids Id de los elementos <th> con los que tiene relaci\u00f3n la celda. scope (solo <th> ) row La cabecera se aplica a alguna de las filas adyacentes. col rowgroup colgroup auto abbr (solo <th> ) nombre Abreviatura o informaci\u00f3n alternativa sobre la cabecera. Con estos atributos podemos indicar que ciertas celdas abarquen m\u00e1s espacio y se combinen con el espacio que ocupar\u00eda otra celda adyacente y as\u00ed crear estructuras de tabla m\u00e1s flexibles. Imaginemos que al c\u00f3digo HTML de la tabla anterior, le a\u00f1adimos antes de la primera fila de <td> , una nueva fila con una sola celda <td> con un atributo colspan a 3 . Con esto estar\u00edamos indicando que esa nueva fila ( originalmente, de 3 celdas ) va a abarcar las 3 celdas de espacio con una sola celda: < style > td { border : 1 px solid black ; } </ style > < table > <!-- ... --> < tr > < td colspan = \"3\" > Datos adicionales </ td > <!-- Abarca 3 celdas --> </ tr > <!-- Primera fila --> < tr > < td > Celda 1x1 </ td > <!-- Primera celda de la primera fila --> < td > Celda 2x1 </ td > <!-- Segunda celda de la primera fila --> < td > Celda 3x1 </ td > <!-- Tercera celda de la primera fila --> </ tr > <!-- ... --> </ table > El atributo rowspan actuar\u00eda exactamente igual, pero abarcando filas en vertical, en lugar de columnas en horizontal. Tambi\u00e9n se podr\u00edan combinar. Los atributos colspan y rowspan podr\u00e1n tener como m\u00e1ximo el n\u00famero de columnas o filas de la tabla, si tuviera un n\u00famero mayor, simplemente se utilizar\u00e1 el m\u00e1ximo de la tabla. Organizaci\u00f3n de tablas \u00b6 Por defecto, al crear una tabla, el navegador se encarga de crearla a medida que va leyendo las etiquetas, por lo que la tabla se crea en el orden que se han especificado sus elementos, de arriba a abajo. Sin embargo, podemos utilizar una serie de etiquetas contenedoras que establecer\u00e1n la zona de la tabla donde deben aparecer su contenido: Etiqueta Descripci\u00f3n <thead> Etiqueta contenedora de la cabecera de la tabla. Parte superior de la tabla. <tbody> Etiqueta contenedora del cuerpo de la tabla. Parte central de la tabla. <tfoot> Etiqueta contenedora del pie de la tabla. Parte inferior de la tabla. <caption> Establece un t\u00edtulo de la tabla, independientemente de su posici\u00f3n. A las etiquetas de tabla ya vistas, podemos a\u00f1adir estas etiquetas, pudiendo definir la zona donde aparecer\u00e1n sin que, necesariamente tengan el orden correcto. Veamos un ejemplo: < table > <!-- Table footer: pie de la tabla (tfoot) --> < tfoot > < tr > < td > Pie de tabla 1 </ td > < td > Pie de tabla 2 </ td > </ tr > </ tfoot > <!-- Table header: cabecera de la tabla (thead) --> < thead > < tr > < th > Columna 1 </ th > < th > Columna 2 </ th > </ tr > </ thead > <!-- Table body: cuerpo de la tabla (tbody) --> < tbody > < tr > < td > Celda 1 </ td > < td > Celda 2 </ td > </ tr > </ tbody > <!-- Leyenda o t\u00edtulo de la tabla --> < caption > T\u00edtulo de la tabla </ caption > </ table > En este ejemplo, a pesar de seguir el orden tfoot, thead, tbody, caption definido en el HTML, el navegador lee la tabla y la redistribuye seg\u00fan su significado sem\u00e1ntico, de modo que lo organiza dej\u00e1ndolo con el orden caption, thead, tbody, tfoot . De esta forma, estas etiquetas nos pueden servir para indicar secciones concretas de la tabla, independientemente del lugar donde estemos escribiendo, algo que puede ser muy \u00fatil si estamos creando la tabla de forma din\u00e1mica mediante alg\u00fan lenguaje de programaci\u00f3n. Agrupaci\u00f3n de columnas \u00b6 Las tablas, al definirse en el c\u00f3digo siguiendo una estructura horizontal, hacen complejo el aplicar o realizar una serie de cambios a una columna. Existe una serie de etiquetas para agrupar o seleccionar columnas y as\u00ed poder realizar tareas sobre ellas, como por ejemplo, asociarle una clase espec\u00edfica o darle estilos CSS a una columna concreta de la tabla, sin necesidad de ir celda por celda. Para ello, utilizaremos las dos siguientes etiquetas: Etiqueta Descripci\u00f3n <colgroup> Etiqueta contenedora de columnas. Crea una agrupaci\u00f3n de columnas. <col> Etiqueta que representa a una columna de la tabla. Estas etiquetas pueden tener especificado un atributo llamado span para as\u00ed aplicar los atributos de la etiqueta <col> al n\u00famero de columnas adyacentes que se indiquen en dicho atributo. Veamos un ejemplo: < table > < tr > < th > Columna 1 </ th > < th > Columna 2 </ th > < th > Columna 3 </ th > </ tr > < tr > < td > Data 1 </ td > < td > Data 2 </ td > < td > Data 3 </ td > </ tr > < tr > < td > Data 4 </ td > < td > Data 5 </ td > < td > Data 6 </ td > </ tr > < colgroup > < col style = \"background:red\" > < col span = \"2\" style = \"background:yellow\" > </ colgroup > </ table > Vemos que en el ejemplo se est\u00e1 aplicando un color de fondo rojo a la primera columna, mientras que a las dos siguientes un color de fondo amarillo , ya que tiene indicado el atributo span a 2 y se aplica a las dos siguientes columnas: la segunda y la tercera. !!! Existen una serie de atributos de etiquetas relacionadas con las tablas que est\u00e1n obsoletos y ya no se deben utilizar, como por ejemplo align , bgcolor o valign . Tienes m\u00e1s informaci\u00f3n en etiquetas HTML obsoletas . Fuente: Lenguaje de Html por Manz","title":"Etiquetas sem\u00e1nticas"},{"location":"desarrollo/html/02-etiquetas_semanticas/#etiquetas-semanticas","text":"","title":"Etiquetas semanticas"},{"location":"desarrollo/html/02-etiquetas_semanticas/#etiquetas-html-obsoletas","text":"Con el paso y transici\u00f3n de versiones anteriores ( HTML4 o XHTML ) a HTML5 , hay muchas etiquetas HTML que han sido marcadas como obsoletas y se recomienda dejar de utilizarlas cuanto antes. Es posible que algunas de ellas a\u00fan funcionen en navegadores actuales, pero llegar\u00e1 un momento que dejar\u00e1n de ser soportadas por el navegador. Aqu\u00ed tienen una lista de las etiquetas HTML obsoletas que no deber\u00edan utilizarse:","title":"Etiquetas HTML obsoletas"},{"location":"desarrollo/html/02-etiquetas_semanticas/#etiquetas-obsoletas","text":"Las siguientes etiquetas ya no se utilizan en HTML5 y han sido marcadas como obsoletas . Se recomienda no utilizarlas o utilizar una de las alternativas propuestas : Etiqueta obsoleta Descripci\u00f3n Alternativa <applet> Etiqueta para applets Java. <embed> , <object> <acronym> Indica un acr\u00f3nimo. <acronym> <bgsound> Especifica un sonido de fondo. <audio> <dir> Indica una lista de archivos o carpetas. <ul> <frame> Define un marco espec\u00edfico. <iframe> <frameset> Define un conjunto de marcos. - <noframes> Indica una alternativa si el navegador no soporta marcos. - <hgroup> Agrupa encabezados. <header> , <div> <isindex> Campo para b\u00fascar en el documento. <input> <listing> , <xmp> Fragmentos de c\u00f3digo fuente. <pre><code> <noembed> Alternativa (fallback) para contenidos. <object> <strike> Muestra un texto tachado. <del> , <s> <basefont> Define una tipograf\u00eda por defecto. CSS: font-family <big> Aumenta el tama\u00f1o del texto. CSS: font-size <blink> Muestra el texto de forma parpadeante. - <center> Centra el texto. CSS: text-align <font> Cambia la tipograf\u00eda o sus caracter\u00edsticas. CSS: font-family <marquee> Muestra el texto movi\u00e9ndose de un lado a otro. - <multicol> Columnas m\u00faltiples. CSS: columnas <nobr> Evita que un texto haga un salto de l\u00ednea. CSS: white-space <spacer> Inserta un espacio horizontal. &nbsp; <tt> Muestra el texto con una fuente monoespaciada. CSS: font-family <menu> Crea men\u00fas de listados. <ul>","title":"Etiquetas obsoletas"},{"location":"desarrollo/html/02-etiquetas_semanticas/#atributos-obsoletos","text":"De la misma forma que ocurre con las etiquetas, existen una serie de atributos de ciertas etiquetas que han pasado a dejar de utilizarse. A continuaci\u00f3n tienes una lista con algunos de dichos atributos: Atributo obsoleto Pertenece a... Descripci\u00f3n Alternativa charset <a> , <link> Codificaci\u00f3n del enlace. name <a> , <embed> , <img> , <option> Establece un ancla. id language <script> Indica el lenguaje utilizado. type link <body> Indica el color de los enlaces. CSS: :link alink <body> Indica el color de los enlaces. CSS: :active vlink <body> Indica el color de los enlaces. CSS: :visited bgcolor <body> Indica el color de fondo de p\u00e1gina. CSS: background-color align , valign <table> Indica la alineaci\u00f3n vertical/horizontal. CSS: alineaciones hspace , vspace <table> , <iframe> Indica espacios en tablas/marcos. CSS: modelo de cajas allowtransparency <iframe> Permite transparencia. frameborder <iframe> Indica el borde de los marcos flotantes. scrolling <iframe> Permite o no hacer scroll en un marco. align , border <img> , <table> Indica que alineaci\u00f3n o borde utilizar. cellpadding <table> Indica espacios entre celdas de tabla. CSS: tablas cellspacing <table> Indica espacios entre celdas de tabla. CSS: tablas nowrap <td> , <th> Establece fijo el tama\u00f1o de una celda. CSS: tama\u00f1os","title":"Atributos obsoletos"},{"location":"desarrollo/html/02-etiquetas_semanticas/#etiquetas-html-de-texto","text":"A grandes rasgos, en un documento HTML existen dos tipos de etiquetas HTML : las etiquetas que contienen fragmentos de texto ( se utilizan para dar significado a esas palabras o fragmentos ) y las etiquetas que agrupan conjunto de informaci\u00f3n ( fragmentos de texto y/u otras etiquetas ). En el siguiente ejemplo, tenemos la etiqueta <p> , que pertenece al segundo grupo ( agrupaci\u00f3n ), mientras que la etiqueta <strong> forma parte del primer grupo, que es del que vamos a hablar en esta secci\u00f3n: < p > Hola, esto es un peque\u00f1o < strong > ejemplo </ strong > . </ p >","title":"Etiquetas HTML de texto"},{"location":"desarrollo/html/02-etiquetas_semanticas/#fragmentos-de-texto","text":"En primer lugar, existe una serie de etiquetas HTML simples para seleccionar un fragmento de texto y dotarlo de un significado especial. Por ejemplo: Etiqueta Descripci\u00f3n <strong> Fragmento de texto importante o palabras clave . <em> Fragmento de texto enfatizado respecto a la frase que lo contiene. <mark> Fragmento de texto resaltado, simulando estar marcado con rotulador amarillo. <i> Fragmento de texto con voz o tono alternativo al resto. <b> Fragmento de texto sin importancia destacable ( fines utilitarios ). <u> Fragmento de texto para nombres propios o escritura incorrecta intencionada (sic). <s> Fragmento de texto inexacto o que ya no es relevante. (errores o inexactitudes) <span> Fragmento de texto sin significado (\u00fatil para seleccionar). <cite> Fragmento de texto con el t\u00edtulo de un trabajo creativo: obras, libros... Ojo, algunas de estas etiquetas, en versiones anteriores de HTML ten\u00edan un significado diferente, como por ejemplo la etiqueta <b> , que antiguamente simbolizaba un fragmento de texto en negrita o la etiqueta <i> , que representaba un fragmento de texto en cursiva . Por su parte, la etiqueta <span> es una versi\u00f3n en linea de la etiqueta <div> , ya que su misi\u00f3n es agrupar contenido de texto, mientras que la misi\u00f3n del <div> es agrupar otras etiquetas HTML que a su vez pueden agrupar otras y otras etiquetas HTML.","title":"Fragmentos de texto"},{"location":"desarrollo/html/02-etiquetas_semanticas/#modificacion-de-significado","text":"Con las siguientes etiquetas HTML tambi\u00e9n podemos modificar el significado de la informaci\u00f3n que contienen: Etiqueta Atributos Descripci\u00f3n <sup> Super\u00edndice (242) 2 . <sub> Sub\u00edndice (242) 2 . <small> Anotaciones menores peque\u00f1as puntualizaciones. <q> cite Cita o frase extra\u00edda de otro contexto. <dfn> title Definici\u00f3n (t\u00e9rmino que posteriormente ser\u00e1 definido). <abbr> title Abreviatura o acr\u00f3nimo. Las etiquetas HTML <sup> y <sub> se utilizan para indicar super\u00edndices y sub\u00edndices. De esta forma tenemos un mecanismo que nos permite diferenciar el n\u00famero 242 del n\u00famero 242 2 : <p>El resultado de 24<sup>2</sup> es el valor de X<sub>a</sub>.</p> Por otra parte, la etiqueta HTML <q> nos permite hacer referencia a una cita o frase extra\u00edda de otro contexto. Obs\u00e9rvese que en esta etiqueta disponemos de un atributo opcional cite , mediante el cu\u00e1l podemos hacer referencia a una URL ( en este caso a la ficha de la pel\u00edcula de Batman ) que en este caso es de donde procede la frase: < p > < q cite = \"http://www.imdb.com/title/tt0468569/\" > Hay hombres que solo quieren ver arder el mundo. </ q > </ p > Es importante tener en cuenta que no se trata de la creaci\u00f3n de un enlace para que el usuario haga clic, ya que estos se crean mediante la etiqueta <a> que veremos m\u00e1s adelante. Tambi\u00e9n tenemos las etiquetas <dfn> y <abbr> que nos permiten indicar definiciones y abreviaturas , y que ambas permiten el uso del atributo opcional title para indicar el significado de dicho t\u00e9rmino o abreviatura. Un ejemplo de ambas etiquetas combinadas: < p > El t\u00e9rmino < dfn >< abbr title = \"Kil\u00f3metro\" > Km </ abrr ></ dfn > es una unidad de longitud. </ p > Los saltos de l\u00ednea son etiquetas especiales de HTML para comenzar en una l\u00ednea nueva ( emular el efecto al pulsar ENTER ). Al contrario que todas las que hemos visto, las etiquetas <br> son etiquetas que no necesitan etiqueta de cierre, por lo que s\u00f3lo se escribe la etiqueta de apertura. Etiqueta Descripci\u00f3n <br> Salto de l\u00ednea ( nueva l\u00ednea ). <wbr> Oportunidad de salto de l\u00ednea ( divisi\u00f3n sil\u00e1bica con gui\u00f3n ). Tambi\u00e9n existe la etiqueta <wbr> que se denomina oportunidad de salto de l\u00ednea y posee el mismo funcionamiento de la divisi\u00f3n sil\u00e1bica con gui\u00f3n, es decir, indicamos donde es posible hacer un salto de l\u00ednea si la situaci\u00f3n lo requiere, como por ejemplo, si la palabra no cabe dentro de un elemento y se quiere evitar que desborde el contenido.","title":"Modificaci\u00f3n de significado"},{"location":"desarrollo/html/02-etiquetas_semanticas/#aspectos-informaticos","text":"Existen una serie de etiquetas HTML ligeramente orientadas a aspectos inform\u00e1ticos como combinaciones de teclado del usuario o para representar variables matem\u00e1ticas o inform\u00e1ticas: Etiqueta Atributos Descripci\u00f3n <kbd> Entrada de informaci\u00f3n del usuario ( generalmente, combinaci\u00f3n de teclado ). <samp> Salida de informaci\u00f3n de un programa inform\u00e1tico. <var> Variable (contexto matem\u00e1tico o inform\u00e1tico). <time> datetime Indica una fecha/hora legible para humanos, con formato para m\u00e1quinas opcional. <data> value Informaci\u00f3n equivalente orientado a m\u00e1quinas. <code> Fragmento de c\u00f3digo fuente ( en l\u00ednea ). Un ejemplo pr\u00e1ctico de la etiqueta <kbd> ser\u00eda modificar sus estilos CSS para obtener algo similar a CTRL+T, simplemente combinando el siguiente c\u00f3digo HTML y CSS: < p > Pulsa las teclas < kbd > CTRL </ kbd > + < kbd > T </ kbd > ... </ p > < style > kbd { font-family : \"Victor Mono\" , monospace ; padding : 2 px 6 px ; background : #eee ; border : 3 px solid #bbb ; border-top-width : 1 px ; border-bottom : 3 px solid #777 ; } </ style > Si <kbd> muestra una entrada, por otro lado tenemos la etiqueta inversa, <samp> , que muestra la salida de un programa ( mensaje, error o informaci\u00f3n ) o <var> que nos permite indicar variables utilizadas en ejemplos matem\u00e1ticos o inform\u00e1ticos. Con la etiqueta <time> podemos indicar una fecha y/o hora en formato legible para humanos, indicando de forma opcional el atributo datetime con la fecha en un formato orientado a m\u00e1quinas. De la misma forma se utiliza la etiqueta <data> para informaci\u00f3n gen\u00e9rica, en la que se puede usar su atributo value para indicar el texto equivalente orientado a m\u00e1quinas: < p > < time datetime = \"2001-01-04\" > 4 de Enero </ time > < data value = \"ESDLA3\" > El retorno del Rey </ data > </ p > N\u00f3tese tambi\u00e9n que la etiqueta <code> se utiliza para fragmentos de c\u00f3digo fuente cortos, en l\u00ednea, o lo que es lo mismo, de una sola l\u00ednea. Para bloques de c\u00f3digo m\u00e1s extensos se usa combin\u00e1ndola con otra etiqueta que veremos m\u00e1s adelante.","title":"Aspectos inform\u00e1ticos"},{"location":"desarrollo/html/02-etiquetas_semanticas/#etiquetas-de-edicion","text":"Por \u00faltimo, tenemos unas etiquetas orientadas a la edici\u00f3n posterior a la publicaci\u00f3n de un texto o p\u00e1gina web: Etiqueta Atributos Descripci\u00f3n <ins> cite , datetime Fragmento de texto o informaci\u00f3n a\u00f1adida a posteriori de la publicaci\u00f3n inicial. <del> cite , datetime Fragmento de texto o informaci\u00f3n eliminada a posteriori de la publicaci\u00f3n inicial. Imaginemos que publicamos una p\u00e1gina pero queremos editar la publicaci\u00f3n para modificar o a\u00f1adir informaci\u00f3n ( o simplemente corregir errores ), pero queremos reflejar esos cambios para que se vean que han sido insertados a posteriori. Para ello podemos utilizar la etiqueta <ins> , pudiendo asociarle unos estilos CSS determinados. De la misma forma, podemos utilizar <del> para la eliminaci\u00f3n de informaci\u00f3n sin eliminarla por completo, sino que aparezca tachada o con alg\u00fan estilo visual que sugiera que ya no es v\u00e1lida ( en gris y tachada, por ejemplo ). Ambas etiquetas admiten el uso de los atributos opcionales cite , que permite incluir una URL con m\u00e1s informaci\u00f3n sobre la informaci\u00f3n a\u00f1adida/eliminada ( id\u00e9ntico al atributo cite de la etiqueta q ) y datetime , que permite incluir la fecha/hora cuando se a\u00f1adi\u00f3/elimin\u00f3 la informaci\u00f3n ( funcionamiento id\u00e9ntico al atributo datetime de la etiqueta time ).","title":"Etiquetas de edici\u00f3n"},{"location":"desarrollo/html/02-etiquetas_semanticas/#etiquetas-html-de-agrupacion","text":"Hab\u00edamos comentado que exist\u00edan dos tipos de etiquetas HTML : las etiquetas que contienen fragmentos de texto ( se utilizan para dar significado a esas palabras o fragmentos ) y las etiquetas que agrupan conjunto de informaci\u00f3n ( fragmentos de texto y/u otras etiquetas ). En esta ocasi\u00f3n, vamos a ver el segundo grupo , que son las etiquetas que se utilizan para agrupar y organizar informaci\u00f3n ( y otras etiquetas ). Veamos un ejemplo: < div > < p > Hola, esto es un primer p\u00e1rrafo de ejemplo. </ p > < p > Y esto, es un segundo p\u00e1rrafo de ejemplo. </ p > </ div >","title":"Etiquetas HTML de agrupaci\u00f3n"},{"location":"desarrollo/html/02-etiquetas_semanticas/#agrupaciones","text":"Las siguientes etiquetas se utilizan para agrupar informaci\u00f3n, como es el caso de las etiquetas <div> o <p> que vimos en el ejemplo mostrado anteriormente: Etiqueta Atributos Descripci\u00f3n <div> Capa o divisi\u00f3n utilizado para agrupar varias etiquetas HTML. <p> Define un p\u00e1rrafo de texto ( con sus etiquetas HTML para texto ). <pre> Establece un texto preformateado ( respetando espacios y saltos de l\u00ednea ). <blockquote> cite Agrupa informaci\u00f3n y caracter\u00edsticas de una cita ( autor, fuente, etc... ). <main> Contenedor para englobar la parte principal de la p\u00e1gina. <hr> Indica una separaci\u00f3n tem\u00e1tica del texto. La etiqueta <pre> se utiliza para mostrar texto respetando el formato con el que est\u00e1 escrito ( espacios en blanco, saltos de l\u00ednea, etc... ). Tambi\u00e9n es muy habitual utilizarlo junto a la etiqueta <code> anidada en su interior, de forma que tenemos un bloque de c\u00f3digo preformateado: < pre > < code class = \"language-javascript\" > function mensaje(s) { console.log(s); } </ code > </ pre > Como se puede ver, en el caso de crear bloques de c\u00f3digo, suele ser una buena pr\u00e1ctica incluir un atributo class con el lenguaje que estamos utilizando. Esto no es una funcionalidad nativa de HTML5, pero muchas librer\u00edas de Javascript nos permiten resaltar la sintaxis dependiendo del lenguaje de programaci\u00f3n indicado ( ya que var\u00eda de uno a otro ). Por otro lado, la etiqueta <blockquote> suele utilizarse para agrupar informaci\u00f3n referida a una cita o frase: < blockquote cite = \"http://es.wikiquote.org/wiki/Fight_Club\" > < p > La primera regla del Club de la Lucha es: Nadie habla sobre el Club de la Lucha. </ p > < footer > < cite class = \"author\" > Tyler Durden </ cite > en < cite class = \"title\" > El Club de la Lucha </ cite > </ footer > </ blockquote > Obs\u00e9rvese que utilizamos el atributo opcional cite para indicar una referencia externa de la fuente de la cita. Luego, en su interior, tenemos un p\u00e1rrafo que contiene la frase en cuesti\u00f3n, seguida de una secci\u00f3n sem\u00e1ntica ( pie de cita ) que a su vez contiene referencias al autor de la cita y el t\u00edtulo de la pel\u00edcula.","title":"Agrupaciones"},{"location":"desarrollo/html/02-etiquetas_semanticas/#listas","text":"En HTML podemos crear listas de informaci\u00f3n de una forma muy sencilla. Empecemos por las etiquetas disponibles: Etiqueta Atributos Descripci\u00f3n <ul> Define una lista sin orden. Se trata de la etiqueta contenedora. <ol> start , reversed , type Define una lista numerada (con orden). Etiqueta contenedora. <li> value Define un \u00edtem de la lista. En primer lugar debemos elegir la etiqueta <ul> o la etiqueta <ol> dependiendo de si queremos una lista donde no importa el orden ( lista de objetos que tengo en el bolsillo ) o una lista en la que si importa el orden ( lista de canciones preferidas de mayor a menor ). Una vez elegido, comenzamos a a\u00f1adir \u00edtems, uno por etiqueta <li> . La forma m\u00e1s b\u00e1sica de crear una lista ser\u00eda la siguiente: < ul > < li > Primer \u00edtem. </ li > < li > Segundo \u00edtem. </ li > < li > Tercer \u00edtem. </ li > </ ul > Esto crear\u00eda una lista, donde cada uno de los \u00edtems aparecer\u00eda con un circulo negro cada uno. Una particularidad poco conocida es que HTML nos permite omitir las etiquetas de cierre </li> si van seguidas de otra etiqueta de apertura <li> . Si reemplazamos la etiqueta <ul> por <ol> los \u00edtems pasan a ser \u00edtems numerados ( por defecto, n\u00fameros enteros a partir de 1 ). Las etiquetas <ol> permiten indicar varios atributos opcionales para modificar la forma en que se numera cada \u00edtem: Atributo Valor Significado start [ n\u00famero ] Indica el n\u00famero del primer \u00edtem de la lista y del que empezar\u00e1 a contar. reversed - type 1 | a | A | i | I Lista con n\u00fameros enteros, letras o n\u00fameros romanos (en min\u00fasculas o may\u00fasculas). El siguiente ejemplo muestra una lista numerada con letras min\u00fasculas, que empiezan en c , pero ir\u00e1n en orden inverso, por lo que terminar\u00e1n en c : < ol start = \"c\" type = \"a\" reversed > < li value = \"1\" > Primer \u00edtem. </ li > < li value = \"2\" > Segundo \u00edtem. </ li > < li value = \"3\" > Tercer \u00edtem. </ li > </ ol > Obs\u00e9rvese que tambi\u00e9n se puede establecer el atributo value a cada \u00edtem de la lista para asignarle, por ejemplo, un valor num\u00e9rico o ponderarlos.","title":"Listas"},{"location":"desarrollo/html/02-etiquetas_semanticas/#listas-de-descripciones","text":"De la misma forma que podemos crear listas gen\u00e9ricas, podemos crear listas de descripciones. La diferencia es que este tipo de listas se suele utilizar cuando queremos asociar pares de nombre-valor. Primero veamos las etiquetas: Etiqueta Descripci\u00f3n <dl> Define una lista de descripciones. Es la etiqueta contenedora. <dt> T\u00e9rmino de la descripci\u00f3n. Contiene el nombre o t\u00e9rmino a describir. <dd> Descripci\u00f3n o valor asociado al t\u00e9rmino. Pueden existir varios por t\u00e9rmino. Veamos un ejemplo pr\u00e1ctico de este tipo de listas: < dl > < dt > Gallina </ dt > < dd > Ave dom\u00e9stica del orden de las galliformes. </ dd > < dd > Cobarde, pusil\u00e1nime. </ dd > </ dl >","title":"Listas de descripciones"},{"location":"desarrollo/html/02-etiquetas_semanticas/#ilustraciones-figuras","text":"Por \u00faltimo, dentro del apartado de etiquetas de agrupaci\u00f3n tenemos las nuevas etiquetas <figure> y <figcaption> . Estas etiquetas se utilizan para agrupar conceptos formados por una ilustraci\u00f3n ( figura ) y una leyenda. Con estos elementos de agrupaci\u00f3n se puede agrupar una imagen y su correspondiente pie de foto, pudiendo ampliar a otro tipo de contenidos multimedia como video o audio. Etiqueta Descripci\u00f3n <figure> Establece una figura, que puede contener una serie de elementos diversos. <figcaption> Asocia una leyenda, generalmente texto, a la figura anterior. Opcional. Veamos un ejemplo: < figure > < img src = \"http://lenguajehtml.com/img/html5-logo.png\" alt = \"Logotipo de HTML5\" /> < figcaption > Logotipo oficial del lenguaje de marcas HTML5. </ figcaption > </ figure > N\u00f3tese que en la ilustraci\u00f3n o figura, se puede contener todo tipo de elementos, no solo im\u00e1genes. Ejemplos v\u00e1lidos podr\u00edan ser videos, p\u00e1rrafos de texto o incluso contenido multimedia.","title":"Ilustraciones (figuras)"},{"location":"desarrollo/html/02-etiquetas_semanticas/#enlaces-o-hipervinculos","text":"Una de las etiquetas m\u00e1s importantes de HTML ( sino la que m\u00e1s ) es la etiqueta <a> . Esta etiqueta se utiliza para crear los llamados enlaces , v\u00ednculos o hiperv\u00ednculos . La idea es establecer una referencia a una direcci\u00f3n o URL donde est\u00e1 alojado ese otro documento de destino, que puede ser una p\u00e1gina web, un archivo PDF, una imagen o cualquier otro tipo de documento. Etiqueta Descripci\u00f3n <a> Etiqueta para hacer referencia a otras p\u00e1ginas web o recursos como documentos o archivos. Esta etiqueta debe tener, como m\u00ednimo, el atributo href , ya que es el atributo con el que se especifica la direcci\u00f3n URL al documento que se quiere enlazar. A\u00fan as\u00ed, la etiqueta <a> tambi\u00e9n tiene varios atributos opcionales, veamos un resumen de todos ellos: Atributo Valor Descripci\u00f3n href URL Enlace al documento que se quiere cargar. Atributo obligatorio . download nombre.ext Descarga el enlace (href) en lugar de abrirlo. Si se indica valor, se renombra. target _blank Abre el enlace en una nueva pesta\u00f1a. _self Abre el enlace en la pesta\u00f1a o <iframe> actual. _parent Abre el enlace en el documento padre. _top Abre el enlace en el documento ra\u00edz (padre global). nombre Abre el enlace en el <iframe> con el nombre especificado. rel alternate Indica que el enlace es una versi\u00f3n alternativa (idioma o formato diferente). author Indica que el enlace es la web del autor de la p\u00e1gina actual. bookmark El enlace es un permalink a la secci\u00f3n de la p\u00e1gina actual. help Indica que el enlace ofrece ayuda para la p\u00e1gina actual. license Indica que la p\u00e1gina actual est\u00e1 cubierta por la licencia referenciada. prev Indica que el enlace es la parte previa del documento actual. next Indica que el enlace es la parte siguiente del documento actual. nofollow Indica que el enlace no est\u00e1 supervisado por el autor del sitio web. noreferrer El navegador no env\u00eda la p\u00e1gina de procedencia al visitar el enlace. prefetch El navegador precarga el enlace (es probable que se haga clic) search Indica que el enlace es una p\u00e1gina para realizar b\u00fasquedas. tag Asocia una etiqueta al enlace especificado, en relaci\u00f3n al documento actual. hreflang Idioma C\u00f3digo ISO 639-1 del idioma del documento. type Tipo Tipo de contenido MIME al que se enlaza. Atributo no obligatorio. El soporte del atributo download podr\u00eda no funcionar en navegadores no actuales, como versiones antiguas de Chrome o Firefox, o desde Internet Explorer: Veamos a continuaci\u00f3n algunos ejemplos de enlaces utilizando algunos atributos indicados en la tabla superior para comprender as\u00ed su funcionamiento: < ul > < li >< a rel = \"author\" href = \"http://www.emezeta.com/\" > Emezeta </ a ></ li > < li >< a href = \"http://lenguajecss.com/\" target = \"_blank\" > LenguajeCSS </ a ></ li > < li >< a href = \"http://pagina.com/documento.pdf\" download = \"A-38.pdf\" > PDF </ a ></ li > < li >< a href = \"http://pagina.com/documento-en.pdf\" hreflang = \"en\" > PDF </ a ></ li > </ ul >","title":"Enlaces o hiperv\u00ednculos"},{"location":"desarrollo/html/02-etiquetas_semanticas/#esquema-de-una-url","text":"Al indicarse una URL, tenemos varias formas de escribirla. Conviene conocer bien la estructura de una URL, para diferenciar cada una de sus partes. Este ser\u00eda el esquema completo de un enlace completo:","title":"Esquema de una URL"},{"location":"desarrollo/html/02-etiquetas_semanticas/#protocolo","text":"Existen varios protocolos diferentes y es la parte inicial de la URL. Probablemente, el m\u00e1s utilizado sea http:// , aunque https:// tambi\u00e9n es frecuentemente muy utilizado, ya que se utiliza para cifrar informaci\u00f3n y que la transmisi\u00f3n sea m\u00e1s segura. Al escribir una URL nunca debemos olvidarnos del protocolo y escribir s\u00f3lamente la direcci\u00f3n, ya que el v\u00ednculo podr\u00eda no funcionar correctamente. Algunos protocolos de ejemplo: Protocolo Descripci\u00f3n http:// Protocolo de transferencia de hipertexto. Es el que se usa habitualmente para p\u00e1ginas webs. https:// Protocolo seguro de transferencia de hipertexto. Usado para cifrar informaci\u00f3n sensible. ftp:// Protocolo de transferencia de ficheros. Similar a HTTP, pero orientado a enviar ficheros. whatsapp:// Protocolo de WhatsApp. Se puede interactuar con WhatsApp si el usuario lo tiene instalado. // Protocolo utilizado en la URL actual. Utiliza http o https seg\u00fan la p\u00e1gina original. !!! Un detalle importante sobre la \u00faltima opci\u00f3n de la tabla anterior. Al indicar // al inicio de un enlace, le decimos al navegador que establezca http:// o https:// dependiendo de como se cargara el documento actual. Si el documento actual se carg\u00f3 como http:// reemplazar\u00e1 // por http:// , pero si el documento actual se carg\u00f3 como https:// reemplazar\u00e1 // por https:// . Esto nos permite m\u00e1s flexibilidad a la hora de cargar documentos o recursos.","title":"Protocolo"},{"location":"desarrollo/html/02-etiquetas_semanticas/#dominio","text":"La siguiente parte de la URL es el dominio del sitio web que queremos enlazar. El dominio generalmente se compone de un subdominio ( opcional ), el nombre de dominio y el dominio de nivel superior o TLD. Por ejemplo, las famosas www no son m\u00e1s que un subdominio utilizado tradicionalmente para p\u00e1ginas webs. Por otra parte, hay much\u00edsimos TLD para sitios web: Dominio Descripci\u00f3n .com Originalmente para sitios comerciales, actualmente el m\u00e1s utilizado. Dif\u00edcil conseguir dominio libre. .net Quiz\u00e1s, la segunda opci\u00f3n por excelencia. Su nombre proviene de la palabra Internet. .org Originalmente para organizaciones, actualmente es la tercera opci\u00f3n m\u00e1s utilizada. .es Sitios webs orientados a Espa\u00f1a. .com.es Dominio de segundo nivel orientado a Espa\u00f1a. .cat Sitios webs orientados a Catalu\u00f1a. Muy usado para sitios webs de gatos. .la Sitios webs orientados a Laos. Muy usado para domain-hacks . .me Sitios webs orietnados a Montenegro. Muy usado para domain-hacks . .io Sitios webs orientados al Territorio Brit\u00e1nico de Oc\u00e9ano \u00cdndico. Muy usado como Input/Output. .dev Sitios webs orientados al mundo del desarrollo o programaci\u00f3n ( developers ). .blog Nuevos gTLD ( dominios gen\u00e9ricos ) orientados a categor\u00edas. En este caso, a blogs. .viajes Nuevos gTLD ( dominios gen\u00e9ricos ) orientados a categor\u00edas. En este caso, a webs sobre viajes.","title":"Dominio"},{"location":"desarrollo/html/02-etiquetas_semanticas/#partes-de-la-url","text":"Rutas : La parte de la ruta de una p\u00e1gina web es equivalente a las carpetas o directorios donde almacenamos nuestros archivos. En el caso que una direcci\u00f3n termine en esta parte y no indique nada m\u00e1s, generalmente, el servidor que aloja la p\u00e1gina web dirige al usuario a una p\u00e1gina llamada index.html o index.htm por defecto. Esto es configurable en la parte del servidor, y depende de totalmente de la configuraci\u00f3n del servidor web utilizado. P\u00e1gina o documento : La \u00faltima parte de la URL suele ser un documento HTML como el del ejemplo: pagina.html . En algunos casos, la extensi\u00f3n .html es abreviada como .htm . Dependiendo del servidor web y los componentes instalados, es posible que se utilicen otro tipo de documentos con lenguajes de programaci\u00f3n del lado del servidor, como podr\u00eda ser por ejemplo pagina.php . Si se trata de otro documento, como un archivo PDF o un video, el navegador intentar\u00e1 abrirlo directamente, y si no puede, lo descargar\u00e1 para que el usuario lo abra con alguna aplicaci\u00f3n de su sistema. Query strings : Una parte no mencionada en el esquema anterior son las cadenas de consulta del usuario, m\u00e1s frecuentemente utilizadas en lenguajes como Javascript o lenguajes del servidor. B\u00e1sicamente, son variables que contienen informaci\u00f3n y se env\u00edan en la URL, como por ejemplo, en la b\u00fasqueda de Google: URL Variable Contenido Significado https://www.google.com/search?q=gato q gato Busca \"gato\" https://www.google.es/search?q=gato&tbm=isch q gato Busca \"gato\" tbm isch Ancla : Por \u00faltimo tenemos el ancla, que no es m\u00e1s que un fragmento de texto precedido por el car\u00e1cter # . Al encontrarse con esto, el navegador busca una etiqueta HTML que tenga un atributo id con ese texto, y posiciona al usuario en esa parte de la p\u00e1gina. Se utiliza para acceder directamente a permalinks o secciones concretas de una p\u00e1gina. Obviamente, esta parte es opcional. !!! Recientemente tambi\u00e9n ha parecido una nueva caracter\u00edstica llamada scroll to text fragments . Se basa en escribir el texto #:~:text=<palabrainicial>,<palabrafinal> a continuaci\u00f3n de la URL. Con esto, el navegador hace scroll a la parte de la p\u00e1gina donde se encuentra el fragmento de texto que comienza por la palabra inicial y termina por la palabra final. Tambi\u00e9n se pueden indicar frases en lugar de palabras.","title":"Partes de la URL"},{"location":"desarrollo/html/02-etiquetas_semanticas/#estado-de-un-enlace","text":"Por defecto, los enlaces tienen 3 estados diferentes: Enlaces sin visitas : Un enlace que no ha sido visitado a\u00fan ( pseudoclase :link en CSS ) es representado por los navegadores como un enlace de color azul y subrayado. Se suele aconsejar no realizas cambios bruscos en los estilos de los enlaces, ya que los usuarios que no est\u00e9n acostumbrados al sitio web no reconocer\u00e1n instant\u00e1neamente un enlace si no es de color azul y/o est\u00e1 subrayado. Enlaces visitados : Un enlace que ha sido visitado previamente ( pseudoclase :visited en CSS ) es representado por los navegadores como un enlace de color lila y subrayado. Enlaces activos : Un enlace est\u00e1 en estado activo ( pseudoclase :active en CSS ) cuando el usuario est\u00e1 pulsando sobre el enlace con el rat\u00f3n y a la misma vez no ha dejado de pulsar en \u00e9l. Se suele utilizar para destacar el clic visualmente.","title":"Estado de un enlace"},{"location":"desarrollo/html/02-etiquetas_semanticas/#rutas-relativas-o-absolutas","text":"A la hora de indicar una URL, generalmente se puede hacer de varias formas: Tipo de ruta Ejemplo \u00bfD\u00f3nde busca el archivo? Sin ruta imagen.jpg En la misma carpeta del .html actual. Relativa ascendente img/imagen.jpg En la carpeta img de la carpeta actual. Relativa descendente ../imagen.jpg En la carpeta anterior a la actual. Evitar . Relativa global /img/imagen.jpg El primer / simboliza el principio de la URL. Absoluta https://pagina.com/img/imagen.jpg Exactamente en la URL indicada. El usuario puede utilizar la forma de indicar la ruta que prefiera, eso s\u00ed, se aconseja ser coherente y utilizar siempre que se pueda un mismo formato de ruta. Particularmente, tiendo a evitar el tipo de ruta relativa descendente, ya que podr\u00eda generar un c\u00f3digo feo y ofuscado.","title":"Rutas relativas o absolutas"},{"location":"desarrollo/html/02-etiquetas_semanticas/#etiquetas-html-de-seccion","text":"En versiones anteriores a HTML5, al crear la estructura de una p\u00e1gina, normalmente utilizabamos etiquetas <div> para ir agrupando secciones de la p\u00e1gina. Unido a esto, ibamos a\u00f1adiendo id o clases ( atributos ) dependiendo de nuestro inter\u00e9s, para que quedase m\u00e1s claro. Una estructura como la que menciono podr\u00eda ser la siguiente: < div class = \"articulo\" > < h1 > T\u00edtulo del art\u00edculo </ h1 > < p class = \"intro\" > Peque\u00f1a introducci\u00f3n. </ p > < p class = \"contenido\" > Aqu\u00ed va el texto del art\u00edculo en cuesti\u00f3n con sus detalles. </ p > < p class = \"pie\" > Escrito por Manz </ p > </ div > Vemos que en esta estructura tenemos una agrupaci\u00f3n que contiene todos los elementos de un art\u00edculo, donde el primer elemento es un encabezado <h1> ( titular ), luego un p\u00e1rrafo de introducci\u00f3n, seguido de un p\u00e1rrafo de contenido y un \u00faltimo p\u00e1rrafo a pie de art\u00edculo. La estructura podr\u00eda ser m\u00e1s sencilla o m\u00e1s complicada, pero nos viene bien como ejemplo de introducci\u00f3n a este tema. N\u00f3tese que los elementos utilizados <div> y <p> no tienen una sem\u00e1ntica espec\u00edfica, salvo que son etiquetas de agrupaci\u00f3n y que la segunda contiene un p\u00e1rrafo. En HTML5 se introducen una serie de etiquetas de agrupaci\u00f3n que funcionan exactamente como un <div> , pero que adem\u00e1s tienen un significado sem\u00e1ntico porque indican la naturaleza del contenido que agrupar\u00e1n. Veamos el ejemplo anterior, utilizando etiquetas sem\u00e1nticas: < article > < header > < h1 > T\u00edtulo del art\u00edculo </ h1 > < p class = \"intro\" > Peque\u00f1a introducci\u00f3n. </ p > </ header > < p class = \"contenido\" > Aqu\u00ed va el texto del art\u00edculo en cuesti\u00f3n con sus detalles. </ p > < footer > < p > Escrito por Manz. </ p > </ footer > </ article > De esta forma, preparamos nuestro documento HTML para que cualquier navegador, robot de buscador o aplicaci\u00f3n o sistema inform\u00e1tico sea capaz de leer el documento HTML y conocer perfectamente la naturaleza del contenido de dicha secci\u00f3n.","title":"Etiquetas HTML de secci\u00f3n"},{"location":"desarrollo/html/02-etiquetas_semanticas/#etiquetas-semanticas_1","text":"Veamos un listado de las etiquetas sem\u00e1nticas que se introducen en HTML5 ( los encabezados ya exist\u00edan en versiones anteriores ): Etiqueta Descripci\u00f3n <article> Art\u00edculo. Parte principal de un escrito ( posts, mensaje en foros, comentario... ) <nav> Apartado de navegaci\u00f3n ( enlaces de secciones, categor\u00edas, etc... ) <header> Cabecera visual de la p\u00e1gina ( logotipo, t\u00edtulo, etc... ). No confundir con <head> . <h1> Encabezado de nivel 1. Equivalente al t\u00edtulo del documento. <h2> Encabezado de nivel 2. Equivalente al tema del documento. <h3> Encabezado de nivel 3. Equivalente a la secci\u00f3n de un tema. <h4> Encabezado de nivel 4. Equivalente a un apartado de la secci\u00f3n. <h5> Encabezado de nivel 5. Equivalente a un ejemplo del apartado. <h6> Encabezado de nivel 6. Equivalente a un subapartado del ejemplo. <footer> Pie de p\u00e1gina de una secci\u00f3n ( o del documento completo ). <section> Secci\u00f3n o grupo tem\u00e1tico de contenido. No usar s\u00f3lo para dar estilo. <aside> Agrupaci\u00f3n de contenido no relacionado con el tema principal del documento. <address> Agrupaci\u00f3n con la informaci\u00f3n de contacto del autor del art\u00edculo o documento. N\u00f3tese que las etiquetas <article> pueden contener otras etiquetas <article> , como por ejemplo comentarios dentro de art\u00edculos: < article class = \"post\" > < p > Este ser\u00eda el texto del art\u00edculo. </ p > < article class = \"comentario\" > < p > Aqu\u00ed ir\u00eda el texto del comentario. </ p > </ article > </ article >","title":"Etiquetas sem\u00e1nticas"},{"location":"desarrollo/html/02-etiquetas_semanticas/#etiquetas-html-de-tablas","text":"Las tablas est\u00e1n incluidas en HTML desde sus primeras versiones y son una forma fant\u00e1stica de mostrar datos claramente. Adem\u00e1s, si las construimos de forma sem\u00e1ntica y correctamente, es muy sencillo darle estilos desde CSS y cambiar su dise\u00f1o con unas cuantas propiedades CSS, puesto que mediante las etiquetas que la componen se puede hacer referencia a cada parte de la misma.","title":"Etiquetas HTML de tablas"},{"location":"desarrollo/html/02-etiquetas_semanticas/#tablas-basicas","text":"Una tabla puede ser sencilla o compleja, dependiendo de nuestro objetivo y la cantidad de etiquetas o atributos a utilizar. As\u00ed pues, veamos primero las etiquetas b\u00e1sicas para crear una tabla de la forma m\u00e1s sencilla posible: Etiqueta Descripci\u00f3n <table> Etiqueta contenedora que tendr\u00e1 en su interior toda la tabla. <tr> Table Row . Etiqueta contenedora de cada fila de la tabla. <td> Table Data . Cada una de las celdas de la tabla. <th> Table Header . Cada una de las celdas de cabecera de la tabla. La etiqueta <table> ser\u00eda el elemento que contendr\u00eda todos los elementos de la tabla, mientras que <th> y <td> se utilizar\u00edan para cada uno de los campos de la tabla ( cabecera y celda respectivamente ). Cada vez que se quisiera a\u00f1adir una nueva fila, habr\u00eda que incluirlo todo dentro de una etiqueta <tr> . Estas cuatro etiquetas ser\u00edan las etiquetas necesarias para crear una tabla. Un ejemplo muy sencillo de una tabla de 3x2 celdas ( exceptuando las cabeceras ), ser\u00eda la siguiente: < table > <!-- Cabecera --> < tr > < th > T\u00edtulo columna 1 </ th > <!-- Celda de cabecera de la columna 1 --> < th > T\u00edtulo columna 2 </ th > <!-- Celda de cabecera de la columna 2 --> < th > T\u00edtulo columna 3 </ th > <!-- Celda de cabecera de la columna 3 --> </ tr > <!-- Primera fila --> < tr > < td > Celda 1x1 </ td > <!-- Primera celda de la primera fila --> < td > Celda 2x1 </ td > <!-- Segunda celda de la primera fila --> < td > Celda 3x1 </ td > <!-- Tercera celda de la primera fila --> </ tr > <!-- Segunda fila --> < tr > < td > Celda 1x2 </ td > <!-- Primera celda de la segunda fila --> < td > Celda 2x2 </ td > <!-- Segunda celda de la segunda fila --> < td > Celda 3x2 </ td > <!-- Tercera celda de la segunda fila --> </ tr > </ table > En este caso de ejemplo tendr\u00edamos una sencilla tabla de 3x2 celdas. Por defecto, en la tabla se crea de forma que se adapta al n\u00famero de celdas que tiene la primera fila. Es decir, si en el primer elemento <tr> se indican 3 elementos <th> , la tabla esperar\u00e1 siempre 3 elementos en cada fila. Si indicaramos menos, las celdas correspondientes donde deber\u00edan estar aparecer\u00edan vac\u00edas ( sin celda ). Si a\u00f1adieramos una de m\u00e1s, se saldr\u00eda de la tabla. Adem\u00e1s, si al c\u00f3digo HTML anterior le aplicamos unos apropiados estilos CSS de tablas , junto a cambios de colores, fuentes, m\u00e1rgenes, rellenos y otros aspectos visuales, podremos cambiar el dise\u00f1o de la tabla en poco m\u00e1s que un par de l\u00edneas. El siguiente c\u00f3digo CSS puede ser utilizado para mostrar esos cambios sobre la tabla anterior: < style > /* Cambios sobre la propia tabla */ table { border-collapse : collapse ; border : 1 px solid #ccc ; } /* Espacio de relleno en celdas y cabeceras */ td , th { padding : 10 px ; } /* Modificaci\u00f3n de estilos en cabeceras */ th { background : #000 ; color : #fff ; text-transform : uppercase ; } /* Modificaci\u00f3n de estilos en celdas */ td { text-align : center ; border-bottom : 2 px solid #111 ; color : #333 ; font-size : 18 px ; } </ style > < table > <!-- Cabecera --> < tr > < th > T\u00edtulo columna 1 </ th > <!-- Celda de cabecera de la columna 1 --> < th > T\u00edtulo columna 2 </ th > <!-- Celda de cabecera de la columna 2 --> < th > T\u00edtulo columna 3 </ th > <!-- Celda de cabecera de la columna 3 --> </ tr > <!-- Primera fila --> < tr > < td > Celda 1x1 </ td > <!-- Primera celda de la primera fila --> < td > Celda 2x1 </ td > <!-- Segunda celda de la primera fila --> < td > Celda 3x1 </ td > <!-- Tercera celda de la primera fila --> </ tr > <!-- Segunda fila --> < tr > < td > Celda 1x2 </ td > <!-- Primera celda de la segunda fila --> < td > Celda 2x2 </ td > <!-- Segunda celda de la segunda fila --> < td > Celda 3x2 </ td > <!-- Tercera celda de la segunda fila --> </ tr > </ table >","title":"Tablas b\u00e1sicas"},{"location":"desarrollo/html/02-etiquetas_semanticas/#combinar-celdas","text":"Cada etiqueta <td> y <th> puede incluir una serie de atributos para modificar su comportamiento o para establecer relaciones sem\u00e1nticas entre celdas. Probablemente, las m\u00e1s interesantes sean colspan y rowspan : Atributo Valor Descripci\u00f3n colspan n\u00famero N\u00famero de columnas que la celda abarcar\u00e1. rowspan n\u00famero N\u00famero de filas que la celda abarcar\u00e1. headers ids Id de los elementos <th> con los que tiene relaci\u00f3n la celda. scope (solo <th> ) row La cabecera se aplica a alguna de las filas adyacentes. col rowgroup colgroup auto abbr (solo <th> ) nombre Abreviatura o informaci\u00f3n alternativa sobre la cabecera. Con estos atributos podemos indicar que ciertas celdas abarquen m\u00e1s espacio y se combinen con el espacio que ocupar\u00eda otra celda adyacente y as\u00ed crear estructuras de tabla m\u00e1s flexibles. Imaginemos que al c\u00f3digo HTML de la tabla anterior, le a\u00f1adimos antes de la primera fila de <td> , una nueva fila con una sola celda <td> con un atributo colspan a 3 . Con esto estar\u00edamos indicando que esa nueva fila ( originalmente, de 3 celdas ) va a abarcar las 3 celdas de espacio con una sola celda: < style > td { border : 1 px solid black ; } </ style > < table > <!-- ... --> < tr > < td colspan = \"3\" > Datos adicionales </ td > <!-- Abarca 3 celdas --> </ tr > <!-- Primera fila --> < tr > < td > Celda 1x1 </ td > <!-- Primera celda de la primera fila --> < td > Celda 2x1 </ td > <!-- Segunda celda de la primera fila --> < td > Celda 3x1 </ td > <!-- Tercera celda de la primera fila --> </ tr > <!-- ... --> </ table > El atributo rowspan actuar\u00eda exactamente igual, pero abarcando filas en vertical, en lugar de columnas en horizontal. Tambi\u00e9n se podr\u00edan combinar. Los atributos colspan y rowspan podr\u00e1n tener como m\u00e1ximo el n\u00famero de columnas o filas de la tabla, si tuviera un n\u00famero mayor, simplemente se utilizar\u00e1 el m\u00e1ximo de la tabla.","title":"Combinar celdas"},{"location":"desarrollo/html/02-etiquetas_semanticas/#organizacion-de-tablas","text":"Por defecto, al crear una tabla, el navegador se encarga de crearla a medida que va leyendo las etiquetas, por lo que la tabla se crea en el orden que se han especificado sus elementos, de arriba a abajo. Sin embargo, podemos utilizar una serie de etiquetas contenedoras que establecer\u00e1n la zona de la tabla donde deben aparecer su contenido: Etiqueta Descripci\u00f3n <thead> Etiqueta contenedora de la cabecera de la tabla. Parte superior de la tabla. <tbody> Etiqueta contenedora del cuerpo de la tabla. Parte central de la tabla. <tfoot> Etiqueta contenedora del pie de la tabla. Parte inferior de la tabla. <caption> Establece un t\u00edtulo de la tabla, independientemente de su posici\u00f3n. A las etiquetas de tabla ya vistas, podemos a\u00f1adir estas etiquetas, pudiendo definir la zona donde aparecer\u00e1n sin que, necesariamente tengan el orden correcto. Veamos un ejemplo: < table > <!-- Table footer: pie de la tabla (tfoot) --> < tfoot > < tr > < td > Pie de tabla 1 </ td > < td > Pie de tabla 2 </ td > </ tr > </ tfoot > <!-- Table header: cabecera de la tabla (thead) --> < thead > < tr > < th > Columna 1 </ th > < th > Columna 2 </ th > </ tr > </ thead > <!-- Table body: cuerpo de la tabla (tbody) --> < tbody > < tr > < td > Celda 1 </ td > < td > Celda 2 </ td > </ tr > </ tbody > <!-- Leyenda o t\u00edtulo de la tabla --> < caption > T\u00edtulo de la tabla </ caption > </ table > En este ejemplo, a pesar de seguir el orden tfoot, thead, tbody, caption definido en el HTML, el navegador lee la tabla y la redistribuye seg\u00fan su significado sem\u00e1ntico, de modo que lo organiza dej\u00e1ndolo con el orden caption, thead, tbody, tfoot . De esta forma, estas etiquetas nos pueden servir para indicar secciones concretas de la tabla, independientemente del lugar donde estemos escribiendo, algo que puede ser muy \u00fatil si estamos creando la tabla de forma din\u00e1mica mediante alg\u00fan lenguaje de programaci\u00f3n.","title":"Organizaci\u00f3n de tablas"},{"location":"desarrollo/html/02-etiquetas_semanticas/#agrupacion-de-columnas","text":"Las tablas, al definirse en el c\u00f3digo siguiendo una estructura horizontal, hacen complejo el aplicar o realizar una serie de cambios a una columna. Existe una serie de etiquetas para agrupar o seleccionar columnas y as\u00ed poder realizar tareas sobre ellas, como por ejemplo, asociarle una clase espec\u00edfica o darle estilos CSS a una columna concreta de la tabla, sin necesidad de ir celda por celda. Para ello, utilizaremos las dos siguientes etiquetas: Etiqueta Descripci\u00f3n <colgroup> Etiqueta contenedora de columnas. Crea una agrupaci\u00f3n de columnas. <col> Etiqueta que representa a una columna de la tabla. Estas etiquetas pueden tener especificado un atributo llamado span para as\u00ed aplicar los atributos de la etiqueta <col> al n\u00famero de columnas adyacentes que se indiquen en dicho atributo. Veamos un ejemplo: < table > < tr > < th > Columna 1 </ th > < th > Columna 2 </ th > < th > Columna 3 </ th > </ tr > < tr > < td > Data 1 </ td > < td > Data 2 </ td > < td > Data 3 </ td > </ tr > < tr > < td > Data 4 </ td > < td > Data 5 </ td > < td > Data 6 </ td > </ tr > < colgroup > < col style = \"background:red\" > < col span = \"2\" style = \"background:yellow\" > </ colgroup > </ table > Vemos que en el ejemplo se est\u00e1 aplicando un color de fondo rojo a la primera columna, mientras que a las dos siguientes un color de fondo amarillo , ya que tiene indicado el atributo span a 2 y se aplica a las dos siguientes columnas: la segunda y la tercera. !!! Existen una serie de atributos de etiquetas relacionadas con las tablas que est\u00e1n obsoletos y ya no se deben utilizar, como por ejemplo align , bgcolor o valign . Tienes m\u00e1s informaci\u00f3n en etiquetas HTML obsoletas . Fuente: Lenguaje de Html por Manz","title":"Agrupaci\u00f3n de columnas"},{"location":"desarrollo/html/03-etiquetas_multimedia/","text":"Etiquetas multimedia \u00b6 Etiquetas HTML de im\u00e1genes \u00b6 Antes de colocar una imagen en una p\u00e1gina web debemos tener claro en que clasificaci\u00f3n se encuentra. Las im\u00e1genes utilizadas en una p\u00e1gina web pueden ser de dos tipos: de contenido o de decoraci\u00f3n . En el primer caso, si la imagen pertenece al contenido y tema tratado en esa p\u00e1gina, deber\u00eda incluirse mediante una etiqueta HTML <img> , pero si por el contrario pertenece a la decoraci\u00f3n de la p\u00e1gina, deber\u00edamos incluirla como un fondo mediante la propiedad CSS background-image . Etiquetas para im\u00e1genes \u00b6 Para incluir im\u00e1genes en el contenido de una p\u00e1gina utilizaremos la etiqueta <img> , que es una etiqueta muy sencilla, que dispone de varios atributos para modificar como se ver\u00e1 la imagen ( los atributos src y alt son siempre obligatorios ): Atributo Descripci\u00f3n src Indica el nombre o la URL de la imagen a mostrar. Atributo obligatorio . alt Establece un texto alternativo que describa la imagen a mostrar. Atributo obligatorio . width Indica el ancho de la imagen. No se debe indicar unidad. Se aconseja hacerlo desde CSS. height Indica el alto de la imagen. No se debe indicar unidad. Se aconseja hacerlo desde CSS. Un ejemplo b\u00e1sico para colocar una imagen ser\u00eda el siguiente: <img src=\"https://lenguajehtml.com/img/logo.png\" alt=\"Logotipo de HTML5\" width=\"400\" height=\"453\" /> Nota que los atributos width y height redimensionan la imagen al vuelo, esto es, la imagen tendr\u00e1 unas dimensiones concretas y se descargar\u00e1 siempre a m\u00e1xima resoluci\u00f3n. Con estos atributos redimensionas la imagen al tama\u00f1o de ancho y alto indicado, pero la imagen realmente tiene su propio tama\u00f1o. Puedes omitir estos atributos siempre que quieras, ya que no son obligatorios, pero se consideran una buena pr\u00e1ctica para evitar los molestos cambios repentinos de posici\u00f3n o tama\u00f1o en una p\u00e1gina. Formatos de im\u00e1genes \u00b6 En el \u00e1mbito inform\u00e1tico existen m\u00faltiples formatos de im\u00e1genes ( \u00a1much\u00edsimos! ) pero no todos son aptos para utilizar en web. Vamos a dar un repaso a los formatos m\u00e1s utilizados y cuales son m\u00e1s apropiados: Formato Caracter\u00edsticas \u00bfSe recomienda? PNG Soporta transparencia. Compresi\u00f3n sin p\u00e9rdidas. Im\u00e1genes \u00ablisas\u00bb. S\u00ed JPG Compresi\u00f3n con p\u00e9rdidas. Ideal para im\u00e1genes con texturas. S\u00ed SVG Formato vectorial. Ideal para im\u00e1genes escalables. S\u00ed GIF Formato para im\u00e1genes peque\u00f1as y animadas. S\u00ed, pero evitar. WEBP Alternativa libre de Google al JPEG. Soporta transparencias. Con precauci\u00f3n JPEG2000 Evoluci\u00f3n del JPEG. No, poco soporte JPEG-XR Alternativa libre de Microsoft al JPEG. No, poco soporte APNG Alternativa libre a GIF. Compatible con PNG. Soporta animaciones. Con precauci\u00f3n AVIF Formato de imagen basado en AV1. No confundir con videos AVI. No, poco soporte Cualquier otro formato no mostrado en esta lista no est\u00e1 recomendado para utilizar en web. Formatos como BMP , TIFF , RAW , NEF , PSD , CDR son formatos muy pesados, propietarios o no orientados para su uso en la web. !!! Si quieres saber m\u00e1s sobre formatos de im\u00e1genes y como conseguir reducir su tama\u00f1o sin disminuir su calidad, te sugiero leer Formatos de imagen: Gu\u00eda de optimizaci\u00f3n . Nuevas etiquetas de im\u00e1genes \u00b6 HTML 5.1 incorporar\u00e1 un nuevo sistema para utilizar im\u00e1genes en nuestros documentos HTML de forma mucho m\u00e1s flexible que la antigua etiqueta <img> que nos permitir\u00e1 mostrar im\u00e1genes dependiendo de nuestras necesidades. Para ello, utilizaremos las dos siguientes etiquetas: Etiqueta Atributos Descripci\u00f3n <picture> Agrupa una serie de im\u00e1genes. Etiqueta contenedora. <source> srcset , sizes , media , type Mostrar\u00e1 la imagen que cumpla una serie de criterios opcionales. Como podemos ver, lo interesante est\u00e1 en la etiqueta <source> , que tiene una serie de atributos disponibles para utilizar. Vamos a ver para que sirve cada uno: Atributo Descripci\u00f3n srcset Serie de im\u00e1genes ( separadas por coma ) que se utilizar\u00e1n. Atributo obligatorio . sizes Tama\u00f1o espec\u00edfico de la imagen que finalmente se mostrar\u00e1. media Condici\u00f3n que se debe cumplir para que muestre la imagen. Ver media queries . type Tipo de formato de imagen. Opcional. Im\u00e1genes alternativas \u00b6 Una de las primeras ventajas que nos ofrecen estas etiquetas es la de utilizar formatos diferentes, dependiendo del soporte del navegador. As\u00ed pues, podr\u00edamos hacer algo como esto: < picture > < source srcset = \"imagen.webp\" /> <!-- Formato WebP --> < source srcset = \"imagen.jxr\" /> <!-- Formato JPEG XR --> < img src = \"imagen.jpg\" alt = \"Descripci\u00f3n de la imagen\" /> <!-- Fallback --> </ picture > En este caso, indicamos que el navegador utilice la imagen con el formato WebP . En caso de no soportarlo, lo intentar\u00e1 con el formato JPEG XR . Si tampoco lo soporta, mostrar\u00e1 la imagen en formato JPEG , que es la que est\u00e1 soportada por todos los navegadores, y si utilizamos alg\u00fan navegador de texto como Lynx u otro que no pueda mostrar im\u00e1genes, mostrar\u00e1 el texto alternativo. Im\u00e1genes responsive \u00b6 Otra ventaja interesante es que con <picture> podemos crear im\u00e1genes responsive que cambien dependiendo de caracter\u00edsticas de las media queries ( CSS ). Por ejemplo, utilicemos min-width ( tama\u00f1o m\u00ednimo de ancho de la pantalla ) en el siguiente ejemplo: < picture > < source media = \"(min-width: 600px)\" srcset = \"html5-logo-xl.png\" /> < source media = \"(min-width: 300px) and (max-width: 600px)\" srcset = \"html5-logo-large.png\" /> < source media = \"(max-width: 50px)\" srcset = \"html5-logo-small.png\" /> < img src = \"html5-logo-medium.png\" alt = \"HTML5 logo\" /> </ picture > De esta forma, estamos indicando que se muestren diferentes im\u00e1genes dependiendo de la resoluci\u00f3n de pantalla ( ancho ) del dispositivo: Dispositivos muy grandes (m\u00e1s de 600px): Muestra la imagen html5-logo-xl.png Dispositivos grandes (entre 300-600px): Muestra la imagen html5-logo-large.png Dispositivos peque\u00f1os (menos de 50px): Muestra la imagen html5-logo-small.png Si no cumple las anteriores (o no soporta HTML5.1): Muestra la imagen html5-logo-medium.png N\u00f3tese que esto s\u00f3lo har\u00e1 cambio de imagen efectivo justo en los l\u00edmites indicados (50, 300, 600). Si se desea que la imagen se adapte proporcionalmente, lo mejor es recurrir a tama\u00f1os m\u00e1ximos y m\u00ednimos de CSS . Diferentes densidades \u00b6 Adem\u00e1s, este sistema tambi\u00e9n permite especificar diferentes im\u00e1genes dependiendo de la densidad de pantalla del dispositivo ( alto que var\u00eda actualmente en las diferentes gamas de smartphones ). Para ello, tenemos que usar un descriptor despu\u00e9s del nombre de la imagen utilizado en el atributo srcset ( si no se incluye, por omisi\u00f3n es igual a 1x ): < picture > < source media = \"(min-width: 600px)\" srcset = \"html5-logo-xl.png, html5-logo-xl-hd.png 2x, html5-logo-xl-fhd.png 3x\" /> < source media = \"(min-width: 300px) and (max-width: 600px)\" srcset = \"html5-logo-large.png, html5-logo-large-hd.png 2x, html5-logo-large-fhd.png 3x\" /> < source media = \"(max-width: 50px)\" srcset = \"html5-logo-small.png, html5-logo-small-hd.png 2x, html5-logo-small-fhd.png 3x\" /> < img srcset = \"html5-logo-medium.png, html5-logo-medium-hd.png 2x, html5-logo-medium-fhd.png 3x\" alt = \"HTML5 logo\" /> </ picture > N\u00f3tese que en cada etiqueta <source> , e incluso en la etiqueta <img> , se puede especificar el atributo srcset e indicar varias im\u00e1genes preparadas para pantallas de alta densidad. Por \u00faltimo, recuerda que la etiqueta <picture> y la etiqueta <source> dentro de la anterior son caracter\u00edsticas de HTML5.1 y a\u00fan no est\u00e1n soportadas en todos los navegadores. Se recomienda ser cuidadoso con este detalle. Etiquetas de contenido externo \u00b6 Cuando tenemos una p\u00e1gina web y queremos colocar contenido en ella, lo conveniente es utilizar formatos libres para garantizar que sean accesibles desde cualquier tipo de dispositivo. \u00bfPero que ocurre si lo que quiero colocar no son formatos de video, de audio o de imagen? Por ejemplo, servicios como Youtube, Vimeo, SoundCloud, SlideShare u otros similares. Se trata de servicios que ofrecen contenido externo para incrustar en nuestra p\u00e1gina, pero no nos proporcionan directamente im\u00e1genes, video o audio en formatos que reconozca el navegador, sino que nos ofrecen un enlace o contenidos que requieren un plugin externo instalado en el navegador. En esas situaciones, lo m\u00e1s probable es que necesites una de las siguientes etiquetas. Contenido externo \u00b6 Las siguientes etiquetas sirven para incrustar contenido externo: Etiqueta Atributos Descripci\u00f3n <iframe> src , srcdoc , name , width , height Permite incrustar contenido externo en \u00abvivo\u00bb. <embed> src , type , width , height Permite incrustar contenido interactivo. <object> data , type , name , form , width , height Permite incrustar contenido externo con fallbacks. <param> name , value Define par\u00e1metros de un elemento <object> . Veamos ejemplos de cada una de ellas en los siguientes apartados. Marcos en l\u00ednea (iframes) \u00b6 Antiguamente, en versiones anteriores de HTML, existieron unas etiquetas llamadas marcos, mediante las cuales se permit\u00eda dividir la pantalla en varias secciones. Actualmente, ese modo de desarrollo ya no se utiliza ya que acarreaba m\u00faltiples problemas de accesibilidad, posicionamiento, etc. Sin embargo, de toda la familia de etiquetas de marcos, han sobrevivido los <iframe> , que siguen siendo \u00fatiles para incrustar contenido externo. Veamos un ejemplo extra\u00eddo de servicios como YouTube o SoundCloud : < iframe src = \"https://www.youtube.com/embed/Imeq3GeRttw\" width = \"560\" height = \"315\" > </ iframe > < a href = \"http://www.bing.com/\" target = \"marco\" > Abrir buscador Bing </ a > < iframe name = \"marco\" width = \"100%\" height = \"450\" src = \"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/38289724&visual=true\" > </ iframe > Esta etiqueta permite incrustar contenido externo anidado en nuestro propio documento. Es decir, podemos crear un recuadro que en su interior va a tener otra direcci\u00f3n URL de otra p\u00e1gina web, documento o recurso que queramos cargar en \u00e9l. Generalmente, es la etiqueta m\u00e1s utilizada para todo tipo de contenido externo. Tambi\u00e9n podemos utilizar el atributo name para darle un nombre al marco y cargar direcciones URL diferentes a trav\u00e9s de una etiqueta <a> , haciendo referencia al marco a trav\u00e9s del atributo target . Por su parte, el atributo srcdoc nos permite indicar directamente el c\u00f3digo fuente del iframe en su valor: < iframe src = \"http://pagina.com/apartado/\" srcdoc = \"<p>\u00a1Hola! \u00a1Soy el <strong>texto del iframe</strong>!</p>\" ></ iframe > Como se puede ver, se puede indicar el atributo srcdoc y el atributo src a la misma vez, dando prioridad al atributo srcdoc y manteniendo el atributo src como fallback, para navegadores que no soporten srcdoc . Contenido incrustado \u00b6 La etiqueta <embed> se ide\u00f3 antiguamente como una etiqueta no est\u00e1ndar para incluir contenido que requer\u00eda el uso de un plugin externo para funcionar, ya que se trataba de tecnolog\u00edas propietarias y los navegadores no las soportan. La etiqueta fue retirada en HTML4, pero en HTML5 fue inclu\u00edda de nuevo. Se puede utilizar, por ejemplo, para incrustar contenido flash en una p\u00e1gina web: < embed src = \"catgame.swf\" width = \"400\" height = \"250\" /> Tradicionalmente, tambi\u00e9n se empez\u00f3 a utilizar la etiqueta <object> para incrustar contenido flash, pudiendo especificar par\u00e1metros en su interior. El siguiente fragmento de c\u00f3digo es equivalente al anterior: < object data = \"catgame.swf\" > < param name = \"quality\" value = \"high\" /> </ object > As\u00ed pues, la etiqueta <object> se ofrec\u00eda como una alternativa m\u00e1s apropiada para cargar todo tipo de contenidos. Y no s\u00f3lo eso, sino que ofrece la posibilidad de especificar el tipo de formato del que se trata, as\u00ed como a\u00f1adir m\u00faltiples par\u00e1metros o la opci\u00f3n de a\u00f1adir en su interior etiquetas HTML o texto que funcionen a modo de fallback ( plan B ), o lo que es lo mismo, en el caso de que el navegador no pueda cargar ese formato, cargar\u00e1 la imagen, video, texto o la etiqueta que se incluya en su interior. Algunos ejemplos: < object data = \"clock.html\" ></ object > < object type = \"application/x-shockwave-flash\" > < param name = \"movie\" value = \"http://video.example.com/library/watch.swf\" /> < param name = \"allowfullscreen\" value = \"true\" /> < param name = \"flashvars\" value = \"http://video.example.com/vids/315981\" /> Contenido multimedia no soportado. </ object > Etiquetas HTML de video \u00b6 En HTML5 se introduce la interesante posibilidad de mostrar videos directamente desde nuestro navegador. De hecho, si arrastramos un video a la ventana del navegador, veremos que comienza a reproducirse en \u00e9l. Para poder insertar videos en nuestras p\u00e1ginas HTML tenemos que utilizar la etiqueta <video> , que junto a la etiqueta <source> podremos utilizar estas capacidades multimedia de HTML5. Ojo Si lo que quieres es insertar videos desde Youtube, Vimeo u otro servicio alternativa, debes utilizar la etiqueta HTML iframe en lugar de la etiqueta <video> . Video (modo b\u00e1sico) \u00b6 La etiqueta <video> tiene varios atributos a nuestra disposici\u00f3n: Atributo Valor Descripci\u00f3n src Direcci\u00f3n URL Video a reproducir. Obligatoria si actua como etiqueta contenedora. poster Direcci\u00f3n URL Muestra una imagen a modo de presentaci\u00f3n. preload auto | metadata | none Indica como realizar la precarga del video. mediagroup nombre Establece un nombre para un grupo de contenidos multimedia. autoplay Boolean Comienza a reproducir el video autom\u00e1ticamente. loop Boolean Vuelve a iniciar el video cuando finaliza su reproducci\u00f3n (bucle). muted Boolean Establece el video sin sonido (silenciado). controls Boolean Muestra los controles de reproducci\u00f3n. Por defecto no se muestran. width tama\u00f1o Indica el tama\u00f1o de ancho del video. height tama\u00f1o Indica el tama\u00f1o de alto del video. Un primer ejemplo muy b\u00e1sico para colocar un video en nuestra p\u00e1gina web: < video src = \"video.mp4\" width = \"640\" height = \"480\" ></ video > Sin embargo, esto mostrar\u00e1 el primer fotograma del video, con un tama\u00f1o de 640x480, pero se ver\u00e1 como una imagen, ya que no muestra los controles del video y tampoco tiene la autoreproducci\u00f3n activada. Podr\u00edamos solucionarlo indicando los atributos controls o autoplay . Otro ejemplos b\u00e1sicos para colocar videos en nuestra p\u00e1gina: <!-- Ejemplo 1 --> < video src = \"video.webm\" poster = \"presentacion.jpg\" controls ></ video > <!-- Ejemplo 2 --> < video src = \"video.mp4\" autoplay muted loop ></ video > En este caso cargamos un video, pero que no se mostrar\u00e1 porque se ha indicado que se utilice una imagen de presentaci\u00f3n que se mostrar\u00e1 hasta que el usuario pulse en el bot\u00f3n de reproducir de los controles. En el segundo ejemplo, tenemos un video que se reproduce autom\u00e1ticamente al cargar la p\u00e1gina, en silencio y en bucle, inici\u00e1ndose una y otra vez. Formatos de video \u00b6 Antes de continuar con el modo avanzado de etiquetas de video, debemos conocer una serie de conceptos b\u00e1sicos y los diferentes formatos de video que existen actualmente. En primer lugar, debemos saber que un archivo de video tiene dos partes principales: el formato contenedor , que es el formato del video en s\u00ed, mientras que en su interior puede tener m\u00faltiples componentes codificados con diferentes codecs . De hecho, un video b\u00e1sico suele tener, como m\u00ednimo, un componente de video y otro de audio, pero puede tener muchos m\u00e1s ( subt\u00edtulos, im\u00e1genes, etc... ). Estos detalles son muy importantes, ya que dependiendo del formato y/o codec de un video, puede que sea factible utilizarlo para web o no, as\u00ed que hay que conocer un poco sobre estos conceptos. A continuaci\u00f3n tenemos un listado de los formatos/codecs m\u00e1s conocidos y utilizados: Formato Codec utilizado Caracter\u00edsticas \u00bfRecomendado? MP4 x264 , DivX H264 Alta calidad. Codec x264 libre. S\u00ed, buen soporte WebM VP8, VP9 Alternativa libre a MP4 de Google. S\u00ed, soporte medio AV1 Basado en VP10, Daala y Thor Compite con HEVC/H.265 No, soporte bajo HEVC x265 , DivX HEVC Futura evoluci\u00f3n de MP4. No, poco soporte OGV Theora Alternativa libre a MP4. Con precauci\u00f3n MKV Matroska Buena compresi\u00f3n. Potente. No, alto consumo CPU AVI XviD , DivX \u2157 Menor compresi\u00f3n que MP4. No, anticuado Otros formatos como MOV , FLV , 3GP , MPG , RMVB o ASF / WMV no se recomiendan para su utilizaci\u00f3n en web ya que son anticuados, propietarios o poco eficientes. Si te interesa saber m\u00e1s sobre estos temas, aconsejo la lectura del art\u00edculo Formatos de video: Todo lo que deber\u00edas saber . Video (modo avanzado) \u00b6 Sin embargo, a\u00fan con toda esta informaci\u00f3n, no hemos visto ni la mitad de posibilidades multimedia que tenemos con HTML5. La etiqueta <video> tambi\u00e9n puede actuar como etiqueta contenedora e incluir varias etiquetas HTML para dotar de mayor compatibilidad, o capacidades adicionales. Etiqueta Atributos Descripci\u00f3n <source> src , type Establece un archivo de video o lo a\u00f1ade como alternativa. <track> src , srclang , label , kind , default Establece un archivo de subt\u00edtulos o lo a\u00f1ade como alternativa. Videos alternativos \u00b6 Si utilizamos la etiqueta <video> como etiqueta contenedora, podemos incluir etiquetas <source> en su interior para proporcionar formatos alternativos y tener mayor compatibilidad con otros navegadores y navegadores antiguos que no soporten HTML5: < video width = \"640\" height = \"480\" > < source src = \"video.mp4\" type = \"video/mp4\" /> < source src = \"video.webm\" type = \"video/webm\" /> < source src = \"video.ogv\" type = \"video/ogg\" /> < img src = \"imagen.png\" alt = \"Video no soportado\" /> Su navegador no soporta contenido multimedia. </ video > En este ejemplo, los navegadores no mostrar\u00e1n todos los contenidos a la vez, sino que seguir\u00e1n el siguiente procedimiento: Intenta mostrar el primer formato (MP4). Si el navegador no soporta este formato, salta al siguiente. Intenta mostrar el segundo formato (WEBM). Si el navegador no soporta este formato, salta al siguiente. Intenta mostrar el tercer formato (OGV). Si el navegador no soporta este formato, salta al siguiente. Si se trata de un navegador que no soporta HTML5, intentar\u00e1 mostrar la imagen. Si se trata de un navegador de terminal de texto ( o sin capacidades gr\u00e1ficas ), mostrar\u00e1 el texto \"Su navegador no soporta contenido multimedia\". De esta forma tenemos soporte completo para todo tipo de dispositivos. Acceso a segundos concretos \u00b6 Utilizando los fragmentos multimedia se pueden conseguir algunas acciones interesantes, como por ejemplo especificar el momento concreto del video ( o audio ) en el que se quiere empezar a reproducir o terminar de reproducir. Veamos unos ejemplos: <!-- Ejemplo 1 --> < video autoplay controls src = \"video.mp4#t=15\" ></ video > <!-- Ejemplo 2 --> < video autoplay controls src = \"video.mp4#t=25,45\" ></ video > En el primer caso, reproducimos el video a partir del segundo 15 del mismo, mientras que en el segundo caso, reproducimos el video a partir del segundo 25 y terminar\u00e1 de reproducirse en el segundo 45 . Etiquetas HTML de audio \u00b6 Al igual que vimos en el tema anterior con los videos, es posible a\u00f1adir archivos de audio a nuestras p\u00e1ginas web para colocar m\u00fasica, sonidos o simplemente usar m\u00fasica como ambientaci\u00f3n. En versiones anteriores de HTML se usaba una etiqueta HTML obsoleta denominada <bgsound> que realizaba algo similar. En este caso, utilizaremos la etiqueta <audio> que funciona exactamente igual que <video> , pero con relaci\u00f3n a archivos de audio. Audio (modo b\u00e1sico) \u00b6 La etiqueta <audio> tiene varios atributos a nuestra disposici\u00f3n: Atributo Valor Descripci\u00f3n src Direcci\u00f3n URL Audio a reproducir. Obligatoria si actua como etiqueta contenedora. preload auto | metadata | none Indica como realizar la precarga del audio. mediagroup nombre Establece un nombre para un grupo de contenidos multimedia. autoplay Boolean Comienza a reproducir el audio autom\u00e1ticamente. loop Boolean Vuelve a iniciar el audio cuando finaliza su reproducci\u00f3n (bucle). muted Boolean Establece el audio sin sonido (silenciado). controls Boolean Muestra los controles de reproducci\u00f3n. Por defecto no se muestran. Un primer ejemplo muy b\u00e1sico para colocar un audio en nuestra p\u00e1gina web: < audio src = \"audio.mp3\" ></ audio > Sin embargo esto no mostrar\u00e1 nada visualmente, ni reproducir\u00e1 ning\u00fan sonido. Realmente, el audio est\u00e1 ah\u00ed, pero no le hemos indicado el atributo controls para que muestre los controles y que el usuario pueda pulsar el bot\u00f3n \u00ab play \u00bb. Tampoco le hemos colocado el atributo autoplay , en cuyo caso tampoco mostrar\u00eda nada visualmente, pero si que se empezar\u00eda a escuchar el sonido o pista de m\u00fasica. Otro ejemplos b\u00e1sicos para colocar audios en nuestra p\u00e1gina: < audio src = \"audio.mp3\" preload = \"none\" controls ></ audio > < audio src = \"audio.ogg\" autoplay loop ></ audio > En el primer ejemplo, cargamos un audio en formato MP3, pero indicamos que no precargue nada. Empezar\u00e1 a descargarse s\u00f3lo cuando el usuario pulse en los controles de reproducci\u00f3n. Este escenario puede ser interesante para evitar consumo de ancho de banda de archivos que es probable que el usuario no escuche o en dispositivos m\u00f3viles donde las tarifas de datos son costosas. Por otro lado, el segundo ejemplo, carga un archivo de audio en formato OGG y lo reproduce autom\u00e1ticamente y en bucle, de modo que vuelve a empezar cuando termina. !!!OJO: Los navegadores han cambiado la pol\u00edtica de autoreproducci\u00f3n con autoplay . Para evitar el uso abusivo de audio en una p\u00e1gina sin permiso del usuario, los navegadores exigen que el usuario haya interactuado con la p\u00e1gina con anterioridad ( y posterior a la carga inicial ). Lo aconsejable ser\u00eda utilizar botones o areas pulsables para activar el sonido mediante JS. Formatos de audio \u00b6 Los archivos de audio estan codificados mediante un codec espec\u00edfico, y es importante conocer estos detalles para saber que formatos est\u00e1n soportados por los diferentes navegadores. A continuaci\u00f3n tenemos un listado de los formatos/codecs de audio m\u00e1s conocidos y utilizados: Formato Codec utilizado Caracter\u00edsticas \u00bfRecomendado? MP3 MPEG Layer-3 Buena calidad. S\u00ed, buen soporte AAC Advanced Audio Coding Mejora el MP3. Usado como audio en MP4. S\u00ed, buen soporte OGG Ogg Vorbis Buena calidad. Alternativa libre a MP3. S\u00ed, soporte medio Opus Opus Buena calidad. Alternativa libre a MP3. S\u00ed, soporte medio FLAC FLAC Audio Lossless Compresi\u00f3n sin p\u00e9rdidas. Alto tama\u00f1o. S\u00ed, buen soporte . WAV Wave sound Formato de Microsoft. Est\u00e1 soportado . No, muy pesado Otros formatos como ASF / WMA , RA u otros no son apropiados para web. Si te interesa saber m\u00e1s sobre estos temas, aconsejo la lectura del art\u00edculo Formatos de audio: Todo lo que deber\u00edas saber . Audio (modo avanzado) \u00b6 La etiqueta <audio> tambi\u00e9n puede actuar como etiqueta contenedora e incluir varias etiquetas HTML para dotar de mayor compatibilidad, o capacidades adicionales. Etiqueta Atributos Descripci\u00f3n <source> src , type Establece un archivo de audio o lo a\u00f1ade como alternativa. <track> src , srclang , label , kind , default Establece un archivo de subt\u00edtulos o lo a\u00f1ade como alternativa. De esta forma, pasamos de un esquema donde solo usabamos una etiqueta <audio> a otro un poco m\u00e1s avanzado, donde <audio> contiene m\u00faltiples etiquetas que act\u00faan sobre ese audio en cuesti\u00f3n. Dichas etiquetas pueden ser <source> o <track> : < audio > <!-- Aqu\u00ed etiquetas para a\u00f1adir funcionalidad extra --> </ audio > La etiqueta de subt\u00edtulos <track> la veremos un poco m\u00e1s adelante, en el cap\u00edtulo de etiquetas HTML de subt\u00edtulos . Audio alternativo (fallback) \u00b6 Si utilizamos la etiqueta <audio> como etiqueta contenedora, podemos incluir etiquetas <source> en su interior para proporcionar formatos alternativos y tener mayor compatibilidad con otros navegadores y navegadores antiguos que no soporten HTML5: < audio > < source src = \"audio.opus\" /> < source src = \"audio.ogg\" /> < source src = \"audio.mp3\" /> </ audio > En este ejemplo, el navegador intentar\u00e1 reproducir el archivo de audio en formato Opus, en caso de no estar soportado por el navegador, intentar\u00e1 reproducir el formato Ogg Vorbis, y en caso de tampoco soportarlo, reproducir\u00e1 el formato MP3. Etiquetas HTML de subtitulos \u00b6 Con la llegada de HTML5 se introduce WebVTT , un formato abierto orientado a utilizarse en web para la creaci\u00f3n de subt\u00edtulos, que proviene del extendido formato SRT. Formato WebVTT \u00b6 La sintaxis del formato de texto WebVTT es bastante legible: WEBVTT 00:04.000 --> 00:07.000 < v Capit\u00e1n Am\u00e9rica > Hola < i > Tony </ i > . 00:09.000 --> 00:11.000 < v Ironman > \u00bfMe echabas de menos? 00:12.000 --> 00:14.000 align:end size:50% *ruido* Como se puede ver, el archivo empieza con el texto WEBVTT y continua con una l\u00ednea que indica el inicio y final que permanecer\u00e1 visible la frase de la siguiente l\u00ednea. En la frase, se puede indicar el personaje que est\u00e1 hablando ( para posteriormente aplicar estilos ) e incluso incluir etiquetas simples para dar formato al texto. Tambi\u00e9n se pueden alinear textos, modificar su tama\u00f1o o cambiar la posici\u00f3n, entre otras cosas. Etiquetas para subt\u00edtulos \u00b6 Este formato se puede utilizar mediante la etiqueta <track> dentro de una etiqueta contenedora <video> y despu\u00e9s de las etiquetas <source> . La etiqueta <track> soporta varios atributos: Atributo Valor Descripci\u00f3n src Direcci\u00f3n URL Archivo o ruta del archivo de subt\u00edtulos WebVTT. Atributo obligatorio . srclang idioma C\u00f3digo ISO 639-1 del idioma de los subt\u00edtulos. label nombre T\u00edtulo que ver\u00e1 el usuario para elegir el canal de subt\u00edtulos. kind subtitles | captions - descriptions - chapters | metadata Indica el tipo o g\u00e9nero de subt\u00edtulos enlazados. default Boolean Utiliza este canal de subt\u00edtulos por defecto. En el siguiente fragmento de c\u00f3digo vemos un ejemplo de uso, en el cu\u00e1l, en la barra de los controles de reproducci\u00f3n, se nos mostrar\u00e1 un icono CC donde el usuario puede elegir uno de los canales de subt\u00edtulos indicados, que por defecto utiliza el primero que encuentra o el que tenga el atributo default : < video controls > < source src = \"video.mp4\" /> < source src = \"video.webm\" /> < track src = \"subs-es.vtt\" srclang = \"es\" label = \"Espa\u00f1ol\" default /> < track src = \"subs-en.vtt\" srclang = \"en\" label = \"English\" /> < track src = \"subs-fr.vtt\" srclang = \"fr\" label = \"Fran\u00e7ais\" /> </ video > De la misma forma tambi\u00e9n es posible utilizar subt\u00edtulos en etiquetas <audio> contenedoras, algo que puede ser muy \u00fatil por ejemplo para podcasts o reproducciones de audio donde se cuentan detalles y se quiere subtitular o describir de forma textual. Fuente: Lenguaje de Html por Manz","title":"Etiquetas multimedias"},{"location":"desarrollo/html/03-etiquetas_multimedia/#etiquetas-multimedia","text":"","title":"Etiquetas multimedia"},{"location":"desarrollo/html/03-etiquetas_multimedia/#etiquetas-html-de-imagenes","text":"Antes de colocar una imagen en una p\u00e1gina web debemos tener claro en que clasificaci\u00f3n se encuentra. Las im\u00e1genes utilizadas en una p\u00e1gina web pueden ser de dos tipos: de contenido o de decoraci\u00f3n . En el primer caso, si la imagen pertenece al contenido y tema tratado en esa p\u00e1gina, deber\u00eda incluirse mediante una etiqueta HTML <img> , pero si por el contrario pertenece a la decoraci\u00f3n de la p\u00e1gina, deber\u00edamos incluirla como un fondo mediante la propiedad CSS background-image .","title":"Etiquetas HTML de im\u00e1genes"},{"location":"desarrollo/html/03-etiquetas_multimedia/#etiquetas-para-imagenes","text":"Para incluir im\u00e1genes en el contenido de una p\u00e1gina utilizaremos la etiqueta <img> , que es una etiqueta muy sencilla, que dispone de varios atributos para modificar como se ver\u00e1 la imagen ( los atributos src y alt son siempre obligatorios ): Atributo Descripci\u00f3n src Indica el nombre o la URL de la imagen a mostrar. Atributo obligatorio . alt Establece un texto alternativo que describa la imagen a mostrar. Atributo obligatorio . width Indica el ancho de la imagen. No se debe indicar unidad. Se aconseja hacerlo desde CSS. height Indica el alto de la imagen. No se debe indicar unidad. Se aconseja hacerlo desde CSS. Un ejemplo b\u00e1sico para colocar una imagen ser\u00eda el siguiente: <img src=\"https://lenguajehtml.com/img/logo.png\" alt=\"Logotipo de HTML5\" width=\"400\" height=\"453\" /> Nota que los atributos width y height redimensionan la imagen al vuelo, esto es, la imagen tendr\u00e1 unas dimensiones concretas y se descargar\u00e1 siempre a m\u00e1xima resoluci\u00f3n. Con estos atributos redimensionas la imagen al tama\u00f1o de ancho y alto indicado, pero la imagen realmente tiene su propio tama\u00f1o. Puedes omitir estos atributos siempre que quieras, ya que no son obligatorios, pero se consideran una buena pr\u00e1ctica para evitar los molestos cambios repentinos de posici\u00f3n o tama\u00f1o en una p\u00e1gina.","title":"Etiquetas para im\u00e1genes"},{"location":"desarrollo/html/03-etiquetas_multimedia/#formatos-de-imagenes","text":"En el \u00e1mbito inform\u00e1tico existen m\u00faltiples formatos de im\u00e1genes ( \u00a1much\u00edsimos! ) pero no todos son aptos para utilizar en web. Vamos a dar un repaso a los formatos m\u00e1s utilizados y cuales son m\u00e1s apropiados: Formato Caracter\u00edsticas \u00bfSe recomienda? PNG Soporta transparencia. Compresi\u00f3n sin p\u00e9rdidas. Im\u00e1genes \u00ablisas\u00bb. S\u00ed JPG Compresi\u00f3n con p\u00e9rdidas. Ideal para im\u00e1genes con texturas. S\u00ed SVG Formato vectorial. Ideal para im\u00e1genes escalables. S\u00ed GIF Formato para im\u00e1genes peque\u00f1as y animadas. S\u00ed, pero evitar. WEBP Alternativa libre de Google al JPEG. Soporta transparencias. Con precauci\u00f3n JPEG2000 Evoluci\u00f3n del JPEG. No, poco soporte JPEG-XR Alternativa libre de Microsoft al JPEG. No, poco soporte APNG Alternativa libre a GIF. Compatible con PNG. Soporta animaciones. Con precauci\u00f3n AVIF Formato de imagen basado en AV1. No confundir con videos AVI. No, poco soporte Cualquier otro formato no mostrado en esta lista no est\u00e1 recomendado para utilizar en web. Formatos como BMP , TIFF , RAW , NEF , PSD , CDR son formatos muy pesados, propietarios o no orientados para su uso en la web. !!! Si quieres saber m\u00e1s sobre formatos de im\u00e1genes y como conseguir reducir su tama\u00f1o sin disminuir su calidad, te sugiero leer Formatos de imagen: Gu\u00eda de optimizaci\u00f3n .","title":"Formatos de im\u00e1genes"},{"location":"desarrollo/html/03-etiquetas_multimedia/#nuevas-etiquetas-de-imagenes","text":"HTML 5.1 incorporar\u00e1 un nuevo sistema para utilizar im\u00e1genes en nuestros documentos HTML de forma mucho m\u00e1s flexible que la antigua etiqueta <img> que nos permitir\u00e1 mostrar im\u00e1genes dependiendo de nuestras necesidades. Para ello, utilizaremos las dos siguientes etiquetas: Etiqueta Atributos Descripci\u00f3n <picture> Agrupa una serie de im\u00e1genes. Etiqueta contenedora. <source> srcset , sizes , media , type Mostrar\u00e1 la imagen que cumpla una serie de criterios opcionales. Como podemos ver, lo interesante est\u00e1 en la etiqueta <source> , que tiene una serie de atributos disponibles para utilizar. Vamos a ver para que sirve cada uno: Atributo Descripci\u00f3n srcset Serie de im\u00e1genes ( separadas por coma ) que se utilizar\u00e1n. Atributo obligatorio . sizes Tama\u00f1o espec\u00edfico de la imagen que finalmente se mostrar\u00e1. media Condici\u00f3n que se debe cumplir para que muestre la imagen. Ver media queries . type Tipo de formato de imagen. Opcional.","title":"Nuevas etiquetas de im\u00e1genes"},{"location":"desarrollo/html/03-etiquetas_multimedia/#imagenes-alternativas","text":"Una de las primeras ventajas que nos ofrecen estas etiquetas es la de utilizar formatos diferentes, dependiendo del soporte del navegador. As\u00ed pues, podr\u00edamos hacer algo como esto: < picture > < source srcset = \"imagen.webp\" /> <!-- Formato WebP --> < source srcset = \"imagen.jxr\" /> <!-- Formato JPEG XR --> < img src = \"imagen.jpg\" alt = \"Descripci\u00f3n de la imagen\" /> <!-- Fallback --> </ picture > En este caso, indicamos que el navegador utilice la imagen con el formato WebP . En caso de no soportarlo, lo intentar\u00e1 con el formato JPEG XR . Si tampoco lo soporta, mostrar\u00e1 la imagen en formato JPEG , que es la que est\u00e1 soportada por todos los navegadores, y si utilizamos alg\u00fan navegador de texto como Lynx u otro que no pueda mostrar im\u00e1genes, mostrar\u00e1 el texto alternativo.","title":"Im\u00e1genes alternativas"},{"location":"desarrollo/html/03-etiquetas_multimedia/#imagenes-responsive","text":"Otra ventaja interesante es que con <picture> podemos crear im\u00e1genes responsive que cambien dependiendo de caracter\u00edsticas de las media queries ( CSS ). Por ejemplo, utilicemos min-width ( tama\u00f1o m\u00ednimo de ancho de la pantalla ) en el siguiente ejemplo: < picture > < source media = \"(min-width: 600px)\" srcset = \"html5-logo-xl.png\" /> < source media = \"(min-width: 300px) and (max-width: 600px)\" srcset = \"html5-logo-large.png\" /> < source media = \"(max-width: 50px)\" srcset = \"html5-logo-small.png\" /> < img src = \"html5-logo-medium.png\" alt = \"HTML5 logo\" /> </ picture > De esta forma, estamos indicando que se muestren diferentes im\u00e1genes dependiendo de la resoluci\u00f3n de pantalla ( ancho ) del dispositivo: Dispositivos muy grandes (m\u00e1s de 600px): Muestra la imagen html5-logo-xl.png Dispositivos grandes (entre 300-600px): Muestra la imagen html5-logo-large.png Dispositivos peque\u00f1os (menos de 50px): Muestra la imagen html5-logo-small.png Si no cumple las anteriores (o no soporta HTML5.1): Muestra la imagen html5-logo-medium.png N\u00f3tese que esto s\u00f3lo har\u00e1 cambio de imagen efectivo justo en los l\u00edmites indicados (50, 300, 600). Si se desea que la imagen se adapte proporcionalmente, lo mejor es recurrir a tama\u00f1os m\u00e1ximos y m\u00ednimos de CSS .","title":"Im\u00e1genes responsive"},{"location":"desarrollo/html/03-etiquetas_multimedia/#diferentes-densidades","text":"Adem\u00e1s, este sistema tambi\u00e9n permite especificar diferentes im\u00e1genes dependiendo de la densidad de pantalla del dispositivo ( alto que var\u00eda actualmente en las diferentes gamas de smartphones ). Para ello, tenemos que usar un descriptor despu\u00e9s del nombre de la imagen utilizado en el atributo srcset ( si no se incluye, por omisi\u00f3n es igual a 1x ): < picture > < source media = \"(min-width: 600px)\" srcset = \"html5-logo-xl.png, html5-logo-xl-hd.png 2x, html5-logo-xl-fhd.png 3x\" /> < source media = \"(min-width: 300px) and (max-width: 600px)\" srcset = \"html5-logo-large.png, html5-logo-large-hd.png 2x, html5-logo-large-fhd.png 3x\" /> < source media = \"(max-width: 50px)\" srcset = \"html5-logo-small.png, html5-logo-small-hd.png 2x, html5-logo-small-fhd.png 3x\" /> < img srcset = \"html5-logo-medium.png, html5-logo-medium-hd.png 2x, html5-logo-medium-fhd.png 3x\" alt = \"HTML5 logo\" /> </ picture > N\u00f3tese que en cada etiqueta <source> , e incluso en la etiqueta <img> , se puede especificar el atributo srcset e indicar varias im\u00e1genes preparadas para pantallas de alta densidad. Por \u00faltimo, recuerda que la etiqueta <picture> y la etiqueta <source> dentro de la anterior son caracter\u00edsticas de HTML5.1 y a\u00fan no est\u00e1n soportadas en todos los navegadores. Se recomienda ser cuidadoso con este detalle.","title":"Diferentes densidades"},{"location":"desarrollo/html/03-etiquetas_multimedia/#etiquetas-de-contenido-externo","text":"Cuando tenemos una p\u00e1gina web y queremos colocar contenido en ella, lo conveniente es utilizar formatos libres para garantizar que sean accesibles desde cualquier tipo de dispositivo. \u00bfPero que ocurre si lo que quiero colocar no son formatos de video, de audio o de imagen? Por ejemplo, servicios como Youtube, Vimeo, SoundCloud, SlideShare u otros similares. Se trata de servicios que ofrecen contenido externo para incrustar en nuestra p\u00e1gina, pero no nos proporcionan directamente im\u00e1genes, video o audio en formatos que reconozca el navegador, sino que nos ofrecen un enlace o contenidos que requieren un plugin externo instalado en el navegador. En esas situaciones, lo m\u00e1s probable es que necesites una de las siguientes etiquetas.","title":"Etiquetas de contenido externo"},{"location":"desarrollo/html/03-etiquetas_multimedia/#contenido-externo","text":"Las siguientes etiquetas sirven para incrustar contenido externo: Etiqueta Atributos Descripci\u00f3n <iframe> src , srcdoc , name , width , height Permite incrustar contenido externo en \u00abvivo\u00bb. <embed> src , type , width , height Permite incrustar contenido interactivo. <object> data , type , name , form , width , height Permite incrustar contenido externo con fallbacks. <param> name , value Define par\u00e1metros de un elemento <object> . Veamos ejemplos de cada una de ellas en los siguientes apartados.","title":"Contenido externo"},{"location":"desarrollo/html/03-etiquetas_multimedia/#marcos-en-linea-iframes","text":"Antiguamente, en versiones anteriores de HTML, existieron unas etiquetas llamadas marcos, mediante las cuales se permit\u00eda dividir la pantalla en varias secciones. Actualmente, ese modo de desarrollo ya no se utiliza ya que acarreaba m\u00faltiples problemas de accesibilidad, posicionamiento, etc. Sin embargo, de toda la familia de etiquetas de marcos, han sobrevivido los <iframe> , que siguen siendo \u00fatiles para incrustar contenido externo. Veamos un ejemplo extra\u00eddo de servicios como YouTube o SoundCloud : < iframe src = \"https://www.youtube.com/embed/Imeq3GeRttw\" width = \"560\" height = \"315\" > </ iframe > < a href = \"http://www.bing.com/\" target = \"marco\" > Abrir buscador Bing </ a > < iframe name = \"marco\" width = \"100%\" height = \"450\" src = \"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/38289724&visual=true\" > </ iframe > Esta etiqueta permite incrustar contenido externo anidado en nuestro propio documento. Es decir, podemos crear un recuadro que en su interior va a tener otra direcci\u00f3n URL de otra p\u00e1gina web, documento o recurso que queramos cargar en \u00e9l. Generalmente, es la etiqueta m\u00e1s utilizada para todo tipo de contenido externo. Tambi\u00e9n podemos utilizar el atributo name para darle un nombre al marco y cargar direcciones URL diferentes a trav\u00e9s de una etiqueta <a> , haciendo referencia al marco a trav\u00e9s del atributo target . Por su parte, el atributo srcdoc nos permite indicar directamente el c\u00f3digo fuente del iframe en su valor: < iframe src = \"http://pagina.com/apartado/\" srcdoc = \"<p>\u00a1Hola! \u00a1Soy el <strong>texto del iframe</strong>!</p>\" ></ iframe > Como se puede ver, se puede indicar el atributo srcdoc y el atributo src a la misma vez, dando prioridad al atributo srcdoc y manteniendo el atributo src como fallback, para navegadores que no soporten srcdoc .","title":"Marcos en l\u00ednea (iframes)"},{"location":"desarrollo/html/03-etiquetas_multimedia/#contenido-incrustado","text":"La etiqueta <embed> se ide\u00f3 antiguamente como una etiqueta no est\u00e1ndar para incluir contenido que requer\u00eda el uso de un plugin externo para funcionar, ya que se trataba de tecnolog\u00edas propietarias y los navegadores no las soportan. La etiqueta fue retirada en HTML4, pero en HTML5 fue inclu\u00edda de nuevo. Se puede utilizar, por ejemplo, para incrustar contenido flash en una p\u00e1gina web: < embed src = \"catgame.swf\" width = \"400\" height = \"250\" /> Tradicionalmente, tambi\u00e9n se empez\u00f3 a utilizar la etiqueta <object> para incrustar contenido flash, pudiendo especificar par\u00e1metros en su interior. El siguiente fragmento de c\u00f3digo es equivalente al anterior: < object data = \"catgame.swf\" > < param name = \"quality\" value = \"high\" /> </ object > As\u00ed pues, la etiqueta <object> se ofrec\u00eda como una alternativa m\u00e1s apropiada para cargar todo tipo de contenidos. Y no s\u00f3lo eso, sino que ofrece la posibilidad de especificar el tipo de formato del que se trata, as\u00ed como a\u00f1adir m\u00faltiples par\u00e1metros o la opci\u00f3n de a\u00f1adir en su interior etiquetas HTML o texto que funcionen a modo de fallback ( plan B ), o lo que es lo mismo, en el caso de que el navegador no pueda cargar ese formato, cargar\u00e1 la imagen, video, texto o la etiqueta que se incluya en su interior. Algunos ejemplos: < object data = \"clock.html\" ></ object > < object type = \"application/x-shockwave-flash\" > < param name = \"movie\" value = \"http://video.example.com/library/watch.swf\" /> < param name = \"allowfullscreen\" value = \"true\" /> < param name = \"flashvars\" value = \"http://video.example.com/vids/315981\" /> Contenido multimedia no soportado. </ object >","title":"Contenido incrustado"},{"location":"desarrollo/html/03-etiquetas_multimedia/#etiquetas-html-de-video","text":"En HTML5 se introduce la interesante posibilidad de mostrar videos directamente desde nuestro navegador. De hecho, si arrastramos un video a la ventana del navegador, veremos que comienza a reproducirse en \u00e9l. Para poder insertar videos en nuestras p\u00e1ginas HTML tenemos que utilizar la etiqueta <video> , que junto a la etiqueta <source> podremos utilizar estas capacidades multimedia de HTML5. Ojo Si lo que quieres es insertar videos desde Youtube, Vimeo u otro servicio alternativa, debes utilizar la etiqueta HTML iframe en lugar de la etiqueta <video> .","title":"Etiquetas HTML de video"},{"location":"desarrollo/html/03-etiquetas_multimedia/#video-modo-basico","text":"La etiqueta <video> tiene varios atributos a nuestra disposici\u00f3n: Atributo Valor Descripci\u00f3n src Direcci\u00f3n URL Video a reproducir. Obligatoria si actua como etiqueta contenedora. poster Direcci\u00f3n URL Muestra una imagen a modo de presentaci\u00f3n. preload auto | metadata | none Indica como realizar la precarga del video. mediagroup nombre Establece un nombre para un grupo de contenidos multimedia. autoplay Boolean Comienza a reproducir el video autom\u00e1ticamente. loop Boolean Vuelve a iniciar el video cuando finaliza su reproducci\u00f3n (bucle). muted Boolean Establece el video sin sonido (silenciado). controls Boolean Muestra los controles de reproducci\u00f3n. Por defecto no se muestran. width tama\u00f1o Indica el tama\u00f1o de ancho del video. height tama\u00f1o Indica el tama\u00f1o de alto del video. Un primer ejemplo muy b\u00e1sico para colocar un video en nuestra p\u00e1gina web: < video src = \"video.mp4\" width = \"640\" height = \"480\" ></ video > Sin embargo, esto mostrar\u00e1 el primer fotograma del video, con un tama\u00f1o de 640x480, pero se ver\u00e1 como una imagen, ya que no muestra los controles del video y tampoco tiene la autoreproducci\u00f3n activada. Podr\u00edamos solucionarlo indicando los atributos controls o autoplay . Otro ejemplos b\u00e1sicos para colocar videos en nuestra p\u00e1gina: <!-- Ejemplo 1 --> < video src = \"video.webm\" poster = \"presentacion.jpg\" controls ></ video > <!-- Ejemplo 2 --> < video src = \"video.mp4\" autoplay muted loop ></ video > En este caso cargamos un video, pero que no se mostrar\u00e1 porque se ha indicado que se utilice una imagen de presentaci\u00f3n que se mostrar\u00e1 hasta que el usuario pulse en el bot\u00f3n de reproducir de los controles. En el segundo ejemplo, tenemos un video que se reproduce autom\u00e1ticamente al cargar la p\u00e1gina, en silencio y en bucle, inici\u00e1ndose una y otra vez.","title":"Video (modo b\u00e1sico)"},{"location":"desarrollo/html/03-etiquetas_multimedia/#formatos-de-video","text":"Antes de continuar con el modo avanzado de etiquetas de video, debemos conocer una serie de conceptos b\u00e1sicos y los diferentes formatos de video que existen actualmente. En primer lugar, debemos saber que un archivo de video tiene dos partes principales: el formato contenedor , que es el formato del video en s\u00ed, mientras que en su interior puede tener m\u00faltiples componentes codificados con diferentes codecs . De hecho, un video b\u00e1sico suele tener, como m\u00ednimo, un componente de video y otro de audio, pero puede tener muchos m\u00e1s ( subt\u00edtulos, im\u00e1genes, etc... ). Estos detalles son muy importantes, ya que dependiendo del formato y/o codec de un video, puede que sea factible utilizarlo para web o no, as\u00ed que hay que conocer un poco sobre estos conceptos. A continuaci\u00f3n tenemos un listado de los formatos/codecs m\u00e1s conocidos y utilizados: Formato Codec utilizado Caracter\u00edsticas \u00bfRecomendado? MP4 x264 , DivX H264 Alta calidad. Codec x264 libre. S\u00ed, buen soporte WebM VP8, VP9 Alternativa libre a MP4 de Google. S\u00ed, soporte medio AV1 Basado en VP10, Daala y Thor Compite con HEVC/H.265 No, soporte bajo HEVC x265 , DivX HEVC Futura evoluci\u00f3n de MP4. No, poco soporte OGV Theora Alternativa libre a MP4. Con precauci\u00f3n MKV Matroska Buena compresi\u00f3n. Potente. No, alto consumo CPU AVI XviD , DivX \u2157 Menor compresi\u00f3n que MP4. No, anticuado Otros formatos como MOV , FLV , 3GP , MPG , RMVB o ASF / WMV no se recomiendan para su utilizaci\u00f3n en web ya que son anticuados, propietarios o poco eficientes. Si te interesa saber m\u00e1s sobre estos temas, aconsejo la lectura del art\u00edculo Formatos de video: Todo lo que deber\u00edas saber .","title":"Formatos de video"},{"location":"desarrollo/html/03-etiquetas_multimedia/#video-modo-avanzado","text":"Sin embargo, a\u00fan con toda esta informaci\u00f3n, no hemos visto ni la mitad de posibilidades multimedia que tenemos con HTML5. La etiqueta <video> tambi\u00e9n puede actuar como etiqueta contenedora e incluir varias etiquetas HTML para dotar de mayor compatibilidad, o capacidades adicionales. Etiqueta Atributos Descripci\u00f3n <source> src , type Establece un archivo de video o lo a\u00f1ade como alternativa. <track> src , srclang , label , kind , default Establece un archivo de subt\u00edtulos o lo a\u00f1ade como alternativa.","title":"Video (modo avanzado)"},{"location":"desarrollo/html/03-etiquetas_multimedia/#videos-alternativos","text":"Si utilizamos la etiqueta <video> como etiqueta contenedora, podemos incluir etiquetas <source> en su interior para proporcionar formatos alternativos y tener mayor compatibilidad con otros navegadores y navegadores antiguos que no soporten HTML5: < video width = \"640\" height = \"480\" > < source src = \"video.mp4\" type = \"video/mp4\" /> < source src = \"video.webm\" type = \"video/webm\" /> < source src = \"video.ogv\" type = \"video/ogg\" /> < img src = \"imagen.png\" alt = \"Video no soportado\" /> Su navegador no soporta contenido multimedia. </ video > En este ejemplo, los navegadores no mostrar\u00e1n todos los contenidos a la vez, sino que seguir\u00e1n el siguiente procedimiento: Intenta mostrar el primer formato (MP4). Si el navegador no soporta este formato, salta al siguiente. Intenta mostrar el segundo formato (WEBM). Si el navegador no soporta este formato, salta al siguiente. Intenta mostrar el tercer formato (OGV). Si el navegador no soporta este formato, salta al siguiente. Si se trata de un navegador que no soporta HTML5, intentar\u00e1 mostrar la imagen. Si se trata de un navegador de terminal de texto ( o sin capacidades gr\u00e1ficas ), mostrar\u00e1 el texto \"Su navegador no soporta contenido multimedia\". De esta forma tenemos soporte completo para todo tipo de dispositivos.","title":"Videos alternativos"},{"location":"desarrollo/html/03-etiquetas_multimedia/#acceso-a-segundos-concretos","text":"Utilizando los fragmentos multimedia se pueden conseguir algunas acciones interesantes, como por ejemplo especificar el momento concreto del video ( o audio ) en el que se quiere empezar a reproducir o terminar de reproducir. Veamos unos ejemplos: <!-- Ejemplo 1 --> < video autoplay controls src = \"video.mp4#t=15\" ></ video > <!-- Ejemplo 2 --> < video autoplay controls src = \"video.mp4#t=25,45\" ></ video > En el primer caso, reproducimos el video a partir del segundo 15 del mismo, mientras que en el segundo caso, reproducimos el video a partir del segundo 25 y terminar\u00e1 de reproducirse en el segundo 45 .","title":"Acceso a segundos concretos"},{"location":"desarrollo/html/03-etiquetas_multimedia/#etiquetas-html-de-audio","text":"Al igual que vimos en el tema anterior con los videos, es posible a\u00f1adir archivos de audio a nuestras p\u00e1ginas web para colocar m\u00fasica, sonidos o simplemente usar m\u00fasica como ambientaci\u00f3n. En versiones anteriores de HTML se usaba una etiqueta HTML obsoleta denominada <bgsound> que realizaba algo similar. En este caso, utilizaremos la etiqueta <audio> que funciona exactamente igual que <video> , pero con relaci\u00f3n a archivos de audio.","title":"Etiquetas HTML de audio"},{"location":"desarrollo/html/03-etiquetas_multimedia/#audio-modo-basico","text":"La etiqueta <audio> tiene varios atributos a nuestra disposici\u00f3n: Atributo Valor Descripci\u00f3n src Direcci\u00f3n URL Audio a reproducir. Obligatoria si actua como etiqueta contenedora. preload auto | metadata | none Indica como realizar la precarga del audio. mediagroup nombre Establece un nombre para un grupo de contenidos multimedia. autoplay Boolean Comienza a reproducir el audio autom\u00e1ticamente. loop Boolean Vuelve a iniciar el audio cuando finaliza su reproducci\u00f3n (bucle). muted Boolean Establece el audio sin sonido (silenciado). controls Boolean Muestra los controles de reproducci\u00f3n. Por defecto no se muestran. Un primer ejemplo muy b\u00e1sico para colocar un audio en nuestra p\u00e1gina web: < audio src = \"audio.mp3\" ></ audio > Sin embargo esto no mostrar\u00e1 nada visualmente, ni reproducir\u00e1 ning\u00fan sonido. Realmente, el audio est\u00e1 ah\u00ed, pero no le hemos indicado el atributo controls para que muestre los controles y que el usuario pueda pulsar el bot\u00f3n \u00ab play \u00bb. Tampoco le hemos colocado el atributo autoplay , en cuyo caso tampoco mostrar\u00eda nada visualmente, pero si que se empezar\u00eda a escuchar el sonido o pista de m\u00fasica. Otro ejemplos b\u00e1sicos para colocar audios en nuestra p\u00e1gina: < audio src = \"audio.mp3\" preload = \"none\" controls ></ audio > < audio src = \"audio.ogg\" autoplay loop ></ audio > En el primer ejemplo, cargamos un audio en formato MP3, pero indicamos que no precargue nada. Empezar\u00e1 a descargarse s\u00f3lo cuando el usuario pulse en los controles de reproducci\u00f3n. Este escenario puede ser interesante para evitar consumo de ancho de banda de archivos que es probable que el usuario no escuche o en dispositivos m\u00f3viles donde las tarifas de datos son costosas. Por otro lado, el segundo ejemplo, carga un archivo de audio en formato OGG y lo reproduce autom\u00e1ticamente y en bucle, de modo que vuelve a empezar cuando termina. !!!OJO: Los navegadores han cambiado la pol\u00edtica de autoreproducci\u00f3n con autoplay . Para evitar el uso abusivo de audio en una p\u00e1gina sin permiso del usuario, los navegadores exigen que el usuario haya interactuado con la p\u00e1gina con anterioridad ( y posterior a la carga inicial ). Lo aconsejable ser\u00eda utilizar botones o areas pulsables para activar el sonido mediante JS.","title":"Audio (modo b\u00e1sico)"},{"location":"desarrollo/html/03-etiquetas_multimedia/#formatos-de-audio","text":"Los archivos de audio estan codificados mediante un codec espec\u00edfico, y es importante conocer estos detalles para saber que formatos est\u00e1n soportados por los diferentes navegadores. A continuaci\u00f3n tenemos un listado de los formatos/codecs de audio m\u00e1s conocidos y utilizados: Formato Codec utilizado Caracter\u00edsticas \u00bfRecomendado? MP3 MPEG Layer-3 Buena calidad. S\u00ed, buen soporte AAC Advanced Audio Coding Mejora el MP3. Usado como audio en MP4. S\u00ed, buen soporte OGG Ogg Vorbis Buena calidad. Alternativa libre a MP3. S\u00ed, soporte medio Opus Opus Buena calidad. Alternativa libre a MP3. S\u00ed, soporte medio FLAC FLAC Audio Lossless Compresi\u00f3n sin p\u00e9rdidas. Alto tama\u00f1o. S\u00ed, buen soporte . WAV Wave sound Formato de Microsoft. Est\u00e1 soportado . No, muy pesado Otros formatos como ASF / WMA , RA u otros no son apropiados para web. Si te interesa saber m\u00e1s sobre estos temas, aconsejo la lectura del art\u00edculo Formatos de audio: Todo lo que deber\u00edas saber .","title":"Formatos de audio"},{"location":"desarrollo/html/03-etiquetas_multimedia/#audio-modo-avanzado","text":"La etiqueta <audio> tambi\u00e9n puede actuar como etiqueta contenedora e incluir varias etiquetas HTML para dotar de mayor compatibilidad, o capacidades adicionales. Etiqueta Atributos Descripci\u00f3n <source> src , type Establece un archivo de audio o lo a\u00f1ade como alternativa. <track> src , srclang , label , kind , default Establece un archivo de subt\u00edtulos o lo a\u00f1ade como alternativa. De esta forma, pasamos de un esquema donde solo usabamos una etiqueta <audio> a otro un poco m\u00e1s avanzado, donde <audio> contiene m\u00faltiples etiquetas que act\u00faan sobre ese audio en cuesti\u00f3n. Dichas etiquetas pueden ser <source> o <track> : < audio > <!-- Aqu\u00ed etiquetas para a\u00f1adir funcionalidad extra --> </ audio > La etiqueta de subt\u00edtulos <track> la veremos un poco m\u00e1s adelante, en el cap\u00edtulo de etiquetas HTML de subt\u00edtulos .","title":"Audio (modo avanzado)"},{"location":"desarrollo/html/03-etiquetas_multimedia/#audio-alternativo-fallback","text":"Si utilizamos la etiqueta <audio> como etiqueta contenedora, podemos incluir etiquetas <source> en su interior para proporcionar formatos alternativos y tener mayor compatibilidad con otros navegadores y navegadores antiguos que no soporten HTML5: < audio > < source src = \"audio.opus\" /> < source src = \"audio.ogg\" /> < source src = \"audio.mp3\" /> </ audio > En este ejemplo, el navegador intentar\u00e1 reproducir el archivo de audio en formato Opus, en caso de no estar soportado por el navegador, intentar\u00e1 reproducir el formato Ogg Vorbis, y en caso de tampoco soportarlo, reproducir\u00e1 el formato MP3.","title":"Audio alternativo (fallback)"},{"location":"desarrollo/html/03-etiquetas_multimedia/#etiquetas-html-de-subtitulos","text":"Con la llegada de HTML5 se introduce WebVTT , un formato abierto orientado a utilizarse en web para la creaci\u00f3n de subt\u00edtulos, que proviene del extendido formato SRT.","title":"Etiquetas HTML de subtitulos"},{"location":"desarrollo/html/03-etiquetas_multimedia/#formato-webvtt","text":"La sintaxis del formato de texto WebVTT es bastante legible: WEBVTT 00:04.000 --> 00:07.000 < v Capit\u00e1n Am\u00e9rica > Hola < i > Tony </ i > . 00:09.000 --> 00:11.000 < v Ironman > \u00bfMe echabas de menos? 00:12.000 --> 00:14.000 align:end size:50% *ruido* Como se puede ver, el archivo empieza con el texto WEBVTT y continua con una l\u00ednea que indica el inicio y final que permanecer\u00e1 visible la frase de la siguiente l\u00ednea. En la frase, se puede indicar el personaje que est\u00e1 hablando ( para posteriormente aplicar estilos ) e incluso incluir etiquetas simples para dar formato al texto. Tambi\u00e9n se pueden alinear textos, modificar su tama\u00f1o o cambiar la posici\u00f3n, entre otras cosas.","title":"Formato WebVTT"},{"location":"desarrollo/html/03-etiquetas_multimedia/#etiquetas-para-subtitulos","text":"Este formato se puede utilizar mediante la etiqueta <track> dentro de una etiqueta contenedora <video> y despu\u00e9s de las etiquetas <source> . La etiqueta <track> soporta varios atributos: Atributo Valor Descripci\u00f3n src Direcci\u00f3n URL Archivo o ruta del archivo de subt\u00edtulos WebVTT. Atributo obligatorio . srclang idioma C\u00f3digo ISO 639-1 del idioma de los subt\u00edtulos. label nombre T\u00edtulo que ver\u00e1 el usuario para elegir el canal de subt\u00edtulos. kind subtitles | captions - descriptions - chapters | metadata Indica el tipo o g\u00e9nero de subt\u00edtulos enlazados. default Boolean Utiliza este canal de subt\u00edtulos por defecto. En el siguiente fragmento de c\u00f3digo vemos un ejemplo de uso, en el cu\u00e1l, en la barra de los controles de reproducci\u00f3n, se nos mostrar\u00e1 un icono CC donde el usuario puede elegir uno de los canales de subt\u00edtulos indicados, que por defecto utiliza el primero que encuentra o el que tenga el atributo default : < video controls > < source src = \"video.mp4\" /> < source src = \"video.webm\" /> < track src = \"subs-es.vtt\" srclang = \"es\" label = \"Espa\u00f1ol\" default /> < track src = \"subs-en.vtt\" srclang = \"en\" label = \"English\" /> < track src = \"subs-fr.vtt\" srclang = \"fr\" label = \"Fran\u00e7ais\" /> </ video > De la misma forma tambi\u00e9n es posible utilizar subt\u00edtulos en etiquetas <audio> contenedoras, algo que puede ser muy \u00fatil por ejemplo para podcasts o reproducciones de audio donde se cuentan detalles y se quiere subtitular o describir de forma textual. Fuente: Lenguaje de Html por Manz","title":"Etiquetas para subt\u00edtulos"},{"location":"desarrollo/html/04-etiquetas_de_cabecera/","text":"Etiquetas de cabecera \u00b6 Etiquetas HTML de relaci\u00f3n \u00b6 Hab\u00edamos mencionado que la estructura de un documento HTML deb\u00eda contener siempre dos etiquetas HTML principales: la cabecera de la p\u00e1gina o <head> y el cuerpo de la p\u00e1gina o <body> . El primero de ellos, del que hablaremos en este apartado, se encarga de contener etiquetas de metadatos ( informaci\u00f3n sobre el documento ) as\u00ed como establecer relaciones con otros documentos . El segundo de ellos, se encarga de la parte visual que ver\u00e1 el usuario en el navegador. Cabecera del documento \u00b6 Existen varias etiquetas que se suelen utilizar en esta secci\u00f3n de cabecera del documento: Etiqueta Atributos Descripci\u00f3n <title> T\u00edtulo de la p\u00e1gina (pesta\u00f1a o t\u00edtulo del navegador o en buscadores). <base> href , target URL base del documento ( usado para gestionar rutas relativas ). <link> href , hreflang , rel , media , type Establece una relaci\u00f3n del documento actual con otro externo. <meta> name , content , http-equiv , charset Establece un metadato espec\u00edfico en el documento actual. <style> media , type Crea estilos CSS que afectar\u00e1n \u00fanicamente al documento actual. <script> src , type , charset , async , defer Indica un script a cargar o ejecutar en la p\u00e1gina actual. Existe dos etiquetas que tradicionalmente sol\u00edan incluirse en la cabecera de un documento HTML. Sin embargo, actualmente tambi\u00e9n pueden utilizarse en el cuerpo de la p\u00e1gina. Hablamos de las etiquetas <style> y <script> . La etiqueta <style> sirve para incluir estilos CSS en la propia p\u00e1gina HTML . La etiqueta <script> sirve para incluir c\u00f3digo Javascript en la propia p\u00e1gina HTML ( o de forma externa ), pero tiene una explicaci\u00f3n mucho m\u00e1s extensa y la retomaremos m\u00e1s adelante. T\u00edtulo y codificaci\u00f3n \u00b6 En el interior de la etiqueta <head> es aconsejable, como m\u00ednimo, indicar siempre las siguientes dos etiquetas: < head > < title > T\u00edtulo del documento </ title > < meta charset = \"utf-8\" /> </ head > En este ejemplo, la etiqueta <meta> indica que el navegador utilice la codificaci\u00f3n UTF-8 para mostrar el texto. Es muy importante utilizar siempre de forma coherente una misma codificaci\u00f3n en todos nuestros documentos, de esta forma evitaremos problemas con vocales acentuadas, o car\u00e1cteres como \u00f1 , \u00bf , \u00a1 u otros. Para evitar este tipo de problemas, se recomienda siempre realizar los siguientes pasos: Utilizar la etiqueta <meta charset=\"utf-8\"> en la cabecera del documento. Guarda el archivo HTML con codificaci\u00f3n UTF-8 en las opciones del editor que utilicemos. Si a\u00fan tenemos problemas de codificaci\u00f3n, revisar la configuraci\u00f3n del servidor web ( server-side ). De esta forma reducimos la probabilidad de tener problemas de este tipo. Otros documentos \u00b6 Como hab\u00edamos comentado, la etiqueta <link> permite establecer relaciones con otros documentos. De esta forma, el navegador o cualquier sistema capaz de leer c\u00f3digo web puede saber que un documento HTML est\u00e1 relacionado con otro documento ( independientemente del formato que sea ) y as\u00ed relacionarse entre ellos. Veamos algunos ejemplos de relaciones que podemos establecer. Versiones alternativas \u00b6 Con el valor alternate en el atributo rel de la etiqueta <link> podemos indicar que el documento actual tiene versiones alternativas en otros formatos o idiomas. El siguiente ejemplo indica que el documento HTML que estamos leyendo tiene una versi\u00f3n en PDF, y adem\u00e1s, una versi\u00f3n HTML en ingl\u00e9s: < head > < link rel = \"alternate\" href = \"document.pdf\" type = \"application/pdf\" /> < link rel = \"alternate\" href = \"document-en.html\" hreflang = \"en\" /> </ head > Referencias a datos \u00b6 El atributo rel tambi\u00e9n nos permite indicar el tipo de relaci\u00f3n que tiene el documento referenciado. Por ejemplo, a continuaci\u00f3n indicamos una referencia al autor del documento, a la zona de ayuda, la zona de b\u00fasqueda y la licencia que cubre el contenido de la p\u00e1gina: < head > < link rel = \"author\" href = \"http://twitter.com/Manz\" /> < link rel = \"help\" href = \"http://lenguajehtml.com/ayuda/\" /> < link rel = \"search\" href = \"http://lenguajehtml.com/busqueda/\" /> < link rel = \"license\" href = \"http://lenguajehtml.com/licencia/\" /> </ head > Favicon (icono de pesta\u00f1as) \u00b6 Cuando tenemos varias pesta\u00f1as en nuestro navegador, para una b\u00fasqueda m\u00e1s f\u00e1cil e intuitiva entre pesta\u00f1as, el navegador suele colocarnos unos iconos a la izquierda del t\u00edtulo de las pesta\u00f1as. Estos iconos son conocidos como favicons ( iconos de favoritos ) ya que fue un invento de Internet Explorer para colocar el icono cuando el usuario a\u00f1ad\u00eda una p\u00e1gina a favoritos: < head > < link rel = \"shortcut icon\" href = \"/favicon.ico\" /> <!-- HTML4 --> < link rel = \"icon\" sizes = \"64x64\" href = \"/favicon.png\" /> <!-- HTML5 --> < link rel = \"apple-touch-icon\" sizes = \"180x180\" href = \"/apple-touch-icon-180x180.png\" /> <!-- iPhone/iPad --> < meta name = \"msapplication-TileImage\" content = \"/mstile-144x144.png\" /> <!-- Windows Phone --> </ head > Desgraciadamente, esta caracter\u00edstica no est\u00e1 definida en la especificaci\u00f3n, por lo que cada navegador ( \u00a1y cada sistema operativo! ) la implementa como quiere. Hay navegadores que s\u00f3lo soportan favicon en formato PNG, otros que solo soportan resoluciones espec\u00edficas, etc. !!! Para generar los favicons de una forma m\u00e1s c\u00f3moda, aconsejo utilizar la herramienta Real Favicon Generator , a la cu\u00e1l le pasamos un logo a alta resoluci\u00f3n y nos generar\u00e1 un .zip con el c\u00f3digo y diferentes versiones y resoluciones de los iconos. Posicionamiento (Google) \u00b6 La etiqueta <link> tambi\u00e9n nos permite indicar algunos datos interesantes de cara al buscador para evitar ser marcado como contenido duplicado o indicarle al buscador exactamente las URLs que debe tener en cuenta. Para ello, podemos utilizar los siguientes atributos: Atributo rel Atributo href Significado canonical Direcci\u00f3n URL URL exacta que Google deber\u00eda asociar al documento actual en el buscador. prev Direcci\u00f3n URL Si el documento actual tiene varias partes, indica la URL de la p\u00e1gina anterior. next Direcci\u00f3n URL Si el documento actual tiene varias partes, indica la URL de la p\u00e1gina siguiente. Estilos CSS de documento \u00b6 Por \u00faltimo, otra de las funciones m\u00e1s conocidas y utilizadas de la etiqueta <link> es la de establecer una relaci\u00f3n con un documento CSS para aplicar estilos a la p\u00e1gina HTML actual ( y a todas las que establezcan una relaci\u00f3n a ella ). Para ello, no hay m\u00e1s que utilizar el valor stylesheet en el atributo rel de la siguiente forma: < head > < link rel = \"stylesheet\" href = \"index.css\" type = \"text/css\" /> </ head > Con esto, el documento HTML estar\u00e1 relacionado con el documento CSS index.css , y aplicar\u00e1 todos los estilos CSS que se encuentren en \u00e9l. El atributo type es opcional y no se suele indicar, puesto que el tipo por defecto de las hojas de estilos ya es text/css . Etiquetas HTML de metadatos \u00b6 Quiz\u00e1s, la etiqueta con mayor n\u00famero de posibilidades en la cabecera de un documento HTML es la etiqueta <meta> . En ella, y a trav\u00e9s de los atributos name y content podemos indicar una gran cantidad de metadatos al documento. Veamos los m\u00e1s conocidos: Atributo name | Atributo content |Descripci\u00f3n description | texto |Indica la descripci\u00f3n de la p\u00e1gina que aparece en buscadores. keywords | palabras clave |Lista de palabras clave separadas por comas. Google no la tiene en cuenta. author | nombre |Indica el nombre del autor de la p\u00e1gina. language | idioma | C\u00f3digo ISO 639-1 del idioma del documento HTML. generator | software |Indica el software utilizado para crear la p\u00e1gina web. theme-color | color | Color en formato hexadecimal de la barra de navegaci\u00f3n del navegador. viewport | par\u00e1metros |Comportamiento de la regi\u00f3n visible del navegador. Ver Responsive . Tema de color del navegador \u00b6 Un cambio muy reciente, inclu\u00eddo por parte de Google en Google Chrome y dispositivos Android, es el atributo theme-color que colorea la barra de direcciones del navegador: < head > < meta name = \"theme-color\" content = \"#1e7bbf\" /> </ head > Con esto conseguiremos que, un dispositivo m\u00f3vil con Android y Google Chrome, muestre la barra de navegaci\u00f3n de la siguiente forma: Metadatos para Google \u00b6 Al margen de etiquetas <meta> como description o <title> , que las entiende y procesa perfectamente para crear los resultados de b\u00fasqueda, Google es capaz de leer otros metadatos que le indicar\u00e1n como realizar ciertas acciones: Atributo name Atributo content Descripci\u00f3n google nositelinkssearchbox Indica a Google que no muestre el minibuscador en los sitelinks . google notranslate Indica a Google que no debe traducir la p\u00e1gina. robots par\u00e1metros Indica al robot de un buscador si debe indexar o no la p\u00e1gina. Un peque\u00f1o ejemplo de esta etiqueta con los citados atributos: < head > < meta name = \"google\" content = \"nositelinkssearchbox\" /> < meta name = \"google\" content = \"notranslate\" /> < meta name = \"robots\" content = \"index, nofollow\" /> </ head > Por su parte, la etiqueta <meta name=\"robots\"> puede tener varios par\u00e1metros ( separados por comas ) para indicarle a Google diferentes detalles: Par\u00e1metros Significado index Sugiere a Google que se quiere indexar el contenido de la p\u00e1gina en el buscador. noindex Indica a Google que no debe indexar el contenido de la p\u00e1gina en el buscador. follow Sugiere a Google que siga los enlaces que encuentre en la p\u00e1gina. nofollow Indica a Google que no debe seguir los enlaces que encuentre en la p\u00e1gina. nosnippet Indica a Google que no muestre fragmentos (descripci\u00f3n, etc...). noodp Indica a Google que no use la descripci\u00f3n alternativa de DMOZ . noarchive Indica a Google que no almacene una versi\u00f3n en cach\u00e9 de la p\u00e1gina. unavailable_after fecha Establece una fecha de caducidad para que no se rastree m\u00e1s la p\u00e1gina. noimageindex Indica a Google que no indexe la p\u00e1gina en resultados de Google Im\u00e1genes. none Equivalente a indicar los par\u00e1metros noindex, nofollow . Metadatos de cabeceras \u00b6 Existe una serie de metadatos especiales que indican a los robots del buscador o al navegador, que deben modificar las cabeceras HTTP para realizar acciones que suelen hacerse desde el lado del servidor. Para ello, en lugar de utilizar el atributo name , utilizamos el atributo http-equiv . Sin embargo, estas etiquetas pueden ser ignoradas por algunos navegadores o robots de b\u00fasqueda y se utilizan por motivos hist\u00f3ricos. Algunos ejemplos de estos atributos son los siguientes: Atributo http-equiv Atributo content Descripci\u00f3n refresh segundos ;url= URL Redirige a la URL despu\u00e9s del n\u00famero de segundos indicado. expires fecha Fecha a partir de la cu\u00e1l se considera p\u00e1gina expirada. pragma no-cache Indica al navegador que no guarde en cach\u00e9 la p\u00e1gina. cache-control public | private no-cache Indica a Internet Explorer si guardar o no en cach\u00e9 la p\u00e1gina. Y finalmente, un ejemplo aplicando cada una de estas etiquetas: < head > < meta http-equiv = \"refresh\" content = \"300;url=http://www.emezeta.com/\" /> < meta http-equiv = \"expires\" content = \"Fri, 29 Apr 2016 12:56:00 GMT\" /> < meta http-equiv = \"pragma\" content = \"no-cache\" /> < meta http-equiv = \"cache-control\" content = \"no-cache\" /> </ head > Etiquetas HTML de redes sociales \u00b6 Al igual que vimos como establecer un t\u00edtulo y descripci\u00f3n para un documento HTML, es posible definir una serie de etiquetas de metadatos orientadas a redes sociales como Facebook o Twitter. De esta forma, al margen de los datos del documento HTML, podemos indicar t\u00edtulos o descripciones diferentes, orientadas al p\u00fablico de cada red social. Facebook (Open Graph \u00b6 Facebook utiliza Open Graph , un protocolo que permite dotar de metadatos orientados a redes sociales. Al compartir un enlace de una p\u00e1gina en Facebook, de forma autom\u00e1tica, Facebook analiza el c\u00f3digo HTML en busca de metadatos. Si no los encuentra, se crea sus propios metadatos en base a criterios internos ( que podr\u00edan ser incorrectos ). Por ejemplo, Facebook podr\u00eda analizar la p\u00e1gina y, como no existen metadatos, poner como imagen de presentaci\u00f3n del enlace, una imagen de un usuario que comenta, y no la imagen correspondiente al propio art\u00edculo. Sin embargo, si tenemos los metadatos sociales de Open Graph especificados, podr\u00eda aparecer algo parecido a esto: Con Open Graph podemos personalizar los datos que queremos que se ofrezcan cuando un usuario comparta el enlace en Facebook o lo env\u00ede por un mensaje privado. Un ejemplo b\u00e1sico para p\u00e1ginas gen\u00e9ricas ( con t\u00edtulo, imagen, descripci\u00f3n y tipo de p\u00e1gina ) podr\u00eda ser el siguiente: < head > < meta property = \"og:type\" content = \"article\" /> < meta property = \"og:title\" content = \"T\u00edtulo del post\" /> < meta property = \"og:image\" content = \"http://pagina.com/img/imagen32.jpg\" /> < meta property = \"og:description\" content = \"Descripci\u00f3n de la p\u00e1gina\" /> </ head > Algunos enlaces interesantes sobre Open Graph : Open Graph Debugger : Herramienta de validaci\u00f3n de Open Graph que permite comprobar si el c\u00f3digo es correcto y no hay ning\u00fan error en la utilizaci\u00f3n del protocolo en nuestro documento HTML. Twitter (Twitter Cards) \u00b6 Por su parte, Twitter utiliza Twitter Cards , un sistema que permite integrar metadatos para su uso en la red social de Twitter, y enriquecer la informaci\u00f3n de tweets donde se mencionan o enlazan p\u00e1ginas de nuestro sitio web. Datos como el formato y tipo de la informaci\u00f3n mostrada, el nombre del autor de la p\u00e1gina del enlace, el t\u00edtulo, descripci\u00f3n e imagen de presentaci\u00f3n son perfectamente personalizables desde Twitter Cards , que mostrar\u00eda una apariencia similar a la siguiente: Para utilizar Twitter Cards se requiere dar de alta previamente en Twitter Developers as\u00ed como pasar un peque\u00f1o proceso de moderaci\u00f3n para saber si tu p\u00e1gina cumple los requisitos para utilizar este tipo de metadatos en la red de Twitter. Respecto al c\u00f3digo a utilizar, es muy sencillo: < head > < meta property = \"twitter:card\" content = \"summary_large_image\" /> < meta property = \"twitter:creator\" content = \"@Manz\" /> < meta property = \"twitter:title\" content = \"T\u00edtulo\" /> < meta property = \"twitter:description\" content = \"Descripci\u00f3n\" /> < meta property = \"twitter:image:src\" content = \"URL_img.jpg\" /> </ head > Algunos enlaces interesantes sobre Twitter Cards : Twitter Cards Validator : Herramienta de validaci\u00f3n de Twitter Cards que permite realizar una comprobaci\u00f3n del c\u00f3digo de los metadatos de tu p\u00e1gina para saber si existen errores. Fuente: Lenguaje de Html por Manz","title":"Etiquetas de cabecera"},{"location":"desarrollo/html/04-etiquetas_de_cabecera/#etiquetas-de-cabecera","text":"","title":"Etiquetas de cabecera"},{"location":"desarrollo/html/04-etiquetas_de_cabecera/#etiquetas-html-de-relacion","text":"Hab\u00edamos mencionado que la estructura de un documento HTML deb\u00eda contener siempre dos etiquetas HTML principales: la cabecera de la p\u00e1gina o <head> y el cuerpo de la p\u00e1gina o <body> . El primero de ellos, del que hablaremos en este apartado, se encarga de contener etiquetas de metadatos ( informaci\u00f3n sobre el documento ) as\u00ed como establecer relaciones con otros documentos . El segundo de ellos, se encarga de la parte visual que ver\u00e1 el usuario en el navegador.","title":"Etiquetas HTML de relaci\u00f3n"},{"location":"desarrollo/html/04-etiquetas_de_cabecera/#cabecera-del-documento","text":"Existen varias etiquetas que se suelen utilizar en esta secci\u00f3n de cabecera del documento: Etiqueta Atributos Descripci\u00f3n <title> T\u00edtulo de la p\u00e1gina (pesta\u00f1a o t\u00edtulo del navegador o en buscadores). <base> href , target URL base del documento ( usado para gestionar rutas relativas ). <link> href , hreflang , rel , media , type Establece una relaci\u00f3n del documento actual con otro externo. <meta> name , content , http-equiv , charset Establece un metadato espec\u00edfico en el documento actual. <style> media , type Crea estilos CSS que afectar\u00e1n \u00fanicamente al documento actual. <script> src , type , charset , async , defer Indica un script a cargar o ejecutar en la p\u00e1gina actual. Existe dos etiquetas que tradicionalmente sol\u00edan incluirse en la cabecera de un documento HTML. Sin embargo, actualmente tambi\u00e9n pueden utilizarse en el cuerpo de la p\u00e1gina. Hablamos de las etiquetas <style> y <script> . La etiqueta <style> sirve para incluir estilos CSS en la propia p\u00e1gina HTML . La etiqueta <script> sirve para incluir c\u00f3digo Javascript en la propia p\u00e1gina HTML ( o de forma externa ), pero tiene una explicaci\u00f3n mucho m\u00e1s extensa y la retomaremos m\u00e1s adelante.","title":"Cabecera del documento"},{"location":"desarrollo/html/04-etiquetas_de_cabecera/#titulo-y-codificacion","text":"En el interior de la etiqueta <head> es aconsejable, como m\u00ednimo, indicar siempre las siguientes dos etiquetas: < head > < title > T\u00edtulo del documento </ title > < meta charset = \"utf-8\" /> </ head > En este ejemplo, la etiqueta <meta> indica que el navegador utilice la codificaci\u00f3n UTF-8 para mostrar el texto. Es muy importante utilizar siempre de forma coherente una misma codificaci\u00f3n en todos nuestros documentos, de esta forma evitaremos problemas con vocales acentuadas, o car\u00e1cteres como \u00f1 , \u00bf , \u00a1 u otros. Para evitar este tipo de problemas, se recomienda siempre realizar los siguientes pasos: Utilizar la etiqueta <meta charset=\"utf-8\"> en la cabecera del documento. Guarda el archivo HTML con codificaci\u00f3n UTF-8 en las opciones del editor que utilicemos. Si a\u00fan tenemos problemas de codificaci\u00f3n, revisar la configuraci\u00f3n del servidor web ( server-side ). De esta forma reducimos la probabilidad de tener problemas de este tipo.","title":"T\u00edtulo y codificaci\u00f3n"},{"location":"desarrollo/html/04-etiquetas_de_cabecera/#otros-documentos","text":"Como hab\u00edamos comentado, la etiqueta <link> permite establecer relaciones con otros documentos. De esta forma, el navegador o cualquier sistema capaz de leer c\u00f3digo web puede saber que un documento HTML est\u00e1 relacionado con otro documento ( independientemente del formato que sea ) y as\u00ed relacionarse entre ellos. Veamos algunos ejemplos de relaciones que podemos establecer.","title":"Otros documentos"},{"location":"desarrollo/html/04-etiquetas_de_cabecera/#versiones-alternativas","text":"Con el valor alternate en el atributo rel de la etiqueta <link> podemos indicar que el documento actual tiene versiones alternativas en otros formatos o idiomas. El siguiente ejemplo indica que el documento HTML que estamos leyendo tiene una versi\u00f3n en PDF, y adem\u00e1s, una versi\u00f3n HTML en ingl\u00e9s: < head > < link rel = \"alternate\" href = \"document.pdf\" type = \"application/pdf\" /> < link rel = \"alternate\" href = \"document-en.html\" hreflang = \"en\" /> </ head >","title":"Versiones alternativas"},{"location":"desarrollo/html/04-etiquetas_de_cabecera/#referencias-a-datos","text":"El atributo rel tambi\u00e9n nos permite indicar el tipo de relaci\u00f3n que tiene el documento referenciado. Por ejemplo, a continuaci\u00f3n indicamos una referencia al autor del documento, a la zona de ayuda, la zona de b\u00fasqueda y la licencia que cubre el contenido de la p\u00e1gina: < head > < link rel = \"author\" href = \"http://twitter.com/Manz\" /> < link rel = \"help\" href = \"http://lenguajehtml.com/ayuda/\" /> < link rel = \"search\" href = \"http://lenguajehtml.com/busqueda/\" /> < link rel = \"license\" href = \"http://lenguajehtml.com/licencia/\" /> </ head >","title":"Referencias a datos"},{"location":"desarrollo/html/04-etiquetas_de_cabecera/#favicon-icono-de-pestanas","text":"Cuando tenemos varias pesta\u00f1as en nuestro navegador, para una b\u00fasqueda m\u00e1s f\u00e1cil e intuitiva entre pesta\u00f1as, el navegador suele colocarnos unos iconos a la izquierda del t\u00edtulo de las pesta\u00f1as. Estos iconos son conocidos como favicons ( iconos de favoritos ) ya que fue un invento de Internet Explorer para colocar el icono cuando el usuario a\u00f1ad\u00eda una p\u00e1gina a favoritos: < head > < link rel = \"shortcut icon\" href = \"/favicon.ico\" /> <!-- HTML4 --> < link rel = \"icon\" sizes = \"64x64\" href = \"/favicon.png\" /> <!-- HTML5 --> < link rel = \"apple-touch-icon\" sizes = \"180x180\" href = \"/apple-touch-icon-180x180.png\" /> <!-- iPhone/iPad --> < meta name = \"msapplication-TileImage\" content = \"/mstile-144x144.png\" /> <!-- Windows Phone --> </ head > Desgraciadamente, esta caracter\u00edstica no est\u00e1 definida en la especificaci\u00f3n, por lo que cada navegador ( \u00a1y cada sistema operativo! ) la implementa como quiere. Hay navegadores que s\u00f3lo soportan favicon en formato PNG, otros que solo soportan resoluciones espec\u00edficas, etc. !!! Para generar los favicons de una forma m\u00e1s c\u00f3moda, aconsejo utilizar la herramienta Real Favicon Generator , a la cu\u00e1l le pasamos un logo a alta resoluci\u00f3n y nos generar\u00e1 un .zip con el c\u00f3digo y diferentes versiones y resoluciones de los iconos.","title":"Favicon (icono de pesta\u00f1as)"},{"location":"desarrollo/html/04-etiquetas_de_cabecera/#posicionamiento-google","text":"La etiqueta <link> tambi\u00e9n nos permite indicar algunos datos interesantes de cara al buscador para evitar ser marcado como contenido duplicado o indicarle al buscador exactamente las URLs que debe tener en cuenta. Para ello, podemos utilizar los siguientes atributos: Atributo rel Atributo href Significado canonical Direcci\u00f3n URL URL exacta que Google deber\u00eda asociar al documento actual en el buscador. prev Direcci\u00f3n URL Si el documento actual tiene varias partes, indica la URL de la p\u00e1gina anterior. next Direcci\u00f3n URL Si el documento actual tiene varias partes, indica la URL de la p\u00e1gina siguiente.","title":"Posicionamiento (Google)"},{"location":"desarrollo/html/04-etiquetas_de_cabecera/#estilos-css-de-documento","text":"Por \u00faltimo, otra de las funciones m\u00e1s conocidas y utilizadas de la etiqueta <link> es la de establecer una relaci\u00f3n con un documento CSS para aplicar estilos a la p\u00e1gina HTML actual ( y a todas las que establezcan una relaci\u00f3n a ella ). Para ello, no hay m\u00e1s que utilizar el valor stylesheet en el atributo rel de la siguiente forma: < head > < link rel = \"stylesheet\" href = \"index.css\" type = \"text/css\" /> </ head > Con esto, el documento HTML estar\u00e1 relacionado con el documento CSS index.css , y aplicar\u00e1 todos los estilos CSS que se encuentren en \u00e9l. El atributo type es opcional y no se suele indicar, puesto que el tipo por defecto de las hojas de estilos ya es text/css .","title":"Estilos CSS de documento"},{"location":"desarrollo/html/04-etiquetas_de_cabecera/#etiquetas-html-de-metadatos","text":"Quiz\u00e1s, la etiqueta con mayor n\u00famero de posibilidades en la cabecera de un documento HTML es la etiqueta <meta> . En ella, y a trav\u00e9s de los atributos name y content podemos indicar una gran cantidad de metadatos al documento. Veamos los m\u00e1s conocidos: Atributo name | Atributo content |Descripci\u00f3n description | texto |Indica la descripci\u00f3n de la p\u00e1gina que aparece en buscadores. keywords | palabras clave |Lista de palabras clave separadas por comas. Google no la tiene en cuenta. author | nombre |Indica el nombre del autor de la p\u00e1gina. language | idioma | C\u00f3digo ISO 639-1 del idioma del documento HTML. generator | software |Indica el software utilizado para crear la p\u00e1gina web. theme-color | color | Color en formato hexadecimal de la barra de navegaci\u00f3n del navegador. viewport | par\u00e1metros |Comportamiento de la regi\u00f3n visible del navegador. Ver Responsive .","title":"Etiquetas HTML de metadatos"},{"location":"desarrollo/html/04-etiquetas_de_cabecera/#tema-de-color-del-navegador","text":"Un cambio muy reciente, inclu\u00eddo por parte de Google en Google Chrome y dispositivos Android, es el atributo theme-color que colorea la barra de direcciones del navegador: < head > < meta name = \"theme-color\" content = \"#1e7bbf\" /> </ head > Con esto conseguiremos que, un dispositivo m\u00f3vil con Android y Google Chrome, muestre la barra de navegaci\u00f3n de la siguiente forma:","title":"Tema de color del navegador"},{"location":"desarrollo/html/04-etiquetas_de_cabecera/#metadatos-para-google","text":"Al margen de etiquetas <meta> como description o <title> , que las entiende y procesa perfectamente para crear los resultados de b\u00fasqueda, Google es capaz de leer otros metadatos que le indicar\u00e1n como realizar ciertas acciones: Atributo name Atributo content Descripci\u00f3n google nositelinkssearchbox Indica a Google que no muestre el minibuscador en los sitelinks . google notranslate Indica a Google que no debe traducir la p\u00e1gina. robots par\u00e1metros Indica al robot de un buscador si debe indexar o no la p\u00e1gina. Un peque\u00f1o ejemplo de esta etiqueta con los citados atributos: < head > < meta name = \"google\" content = \"nositelinkssearchbox\" /> < meta name = \"google\" content = \"notranslate\" /> < meta name = \"robots\" content = \"index, nofollow\" /> </ head > Por su parte, la etiqueta <meta name=\"robots\"> puede tener varios par\u00e1metros ( separados por comas ) para indicarle a Google diferentes detalles: Par\u00e1metros Significado index Sugiere a Google que se quiere indexar el contenido de la p\u00e1gina en el buscador. noindex Indica a Google que no debe indexar el contenido de la p\u00e1gina en el buscador. follow Sugiere a Google que siga los enlaces que encuentre en la p\u00e1gina. nofollow Indica a Google que no debe seguir los enlaces que encuentre en la p\u00e1gina. nosnippet Indica a Google que no muestre fragmentos (descripci\u00f3n, etc...). noodp Indica a Google que no use la descripci\u00f3n alternativa de DMOZ . noarchive Indica a Google que no almacene una versi\u00f3n en cach\u00e9 de la p\u00e1gina. unavailable_after fecha Establece una fecha de caducidad para que no se rastree m\u00e1s la p\u00e1gina. noimageindex Indica a Google que no indexe la p\u00e1gina en resultados de Google Im\u00e1genes. none Equivalente a indicar los par\u00e1metros noindex, nofollow .","title":"Metadatos para Google"},{"location":"desarrollo/html/04-etiquetas_de_cabecera/#metadatos-de-cabeceras","text":"Existe una serie de metadatos especiales que indican a los robots del buscador o al navegador, que deben modificar las cabeceras HTTP para realizar acciones que suelen hacerse desde el lado del servidor. Para ello, en lugar de utilizar el atributo name , utilizamos el atributo http-equiv . Sin embargo, estas etiquetas pueden ser ignoradas por algunos navegadores o robots de b\u00fasqueda y se utilizan por motivos hist\u00f3ricos. Algunos ejemplos de estos atributos son los siguientes: Atributo http-equiv Atributo content Descripci\u00f3n refresh segundos ;url= URL Redirige a la URL despu\u00e9s del n\u00famero de segundos indicado. expires fecha Fecha a partir de la cu\u00e1l se considera p\u00e1gina expirada. pragma no-cache Indica al navegador que no guarde en cach\u00e9 la p\u00e1gina. cache-control public | private no-cache Indica a Internet Explorer si guardar o no en cach\u00e9 la p\u00e1gina. Y finalmente, un ejemplo aplicando cada una de estas etiquetas: < head > < meta http-equiv = \"refresh\" content = \"300;url=http://www.emezeta.com/\" /> < meta http-equiv = \"expires\" content = \"Fri, 29 Apr 2016 12:56:00 GMT\" /> < meta http-equiv = \"pragma\" content = \"no-cache\" /> < meta http-equiv = \"cache-control\" content = \"no-cache\" /> </ head >","title":"Metadatos de cabeceras"},{"location":"desarrollo/html/04-etiquetas_de_cabecera/#etiquetas-html-de-redes-sociales","text":"Al igual que vimos como establecer un t\u00edtulo y descripci\u00f3n para un documento HTML, es posible definir una serie de etiquetas de metadatos orientadas a redes sociales como Facebook o Twitter. De esta forma, al margen de los datos del documento HTML, podemos indicar t\u00edtulos o descripciones diferentes, orientadas al p\u00fablico de cada red social.","title":"Etiquetas HTML de redes sociales"},{"location":"desarrollo/html/04-etiquetas_de_cabecera/#facebook-open-graph","text":"Facebook utiliza Open Graph , un protocolo que permite dotar de metadatos orientados a redes sociales. Al compartir un enlace de una p\u00e1gina en Facebook, de forma autom\u00e1tica, Facebook analiza el c\u00f3digo HTML en busca de metadatos. Si no los encuentra, se crea sus propios metadatos en base a criterios internos ( que podr\u00edan ser incorrectos ). Por ejemplo, Facebook podr\u00eda analizar la p\u00e1gina y, como no existen metadatos, poner como imagen de presentaci\u00f3n del enlace, una imagen de un usuario que comenta, y no la imagen correspondiente al propio art\u00edculo. Sin embargo, si tenemos los metadatos sociales de Open Graph especificados, podr\u00eda aparecer algo parecido a esto: Con Open Graph podemos personalizar los datos que queremos que se ofrezcan cuando un usuario comparta el enlace en Facebook o lo env\u00ede por un mensaje privado. Un ejemplo b\u00e1sico para p\u00e1ginas gen\u00e9ricas ( con t\u00edtulo, imagen, descripci\u00f3n y tipo de p\u00e1gina ) podr\u00eda ser el siguiente: < head > < meta property = \"og:type\" content = \"article\" /> < meta property = \"og:title\" content = \"T\u00edtulo del post\" /> < meta property = \"og:image\" content = \"http://pagina.com/img/imagen32.jpg\" /> < meta property = \"og:description\" content = \"Descripci\u00f3n de la p\u00e1gina\" /> </ head > Algunos enlaces interesantes sobre Open Graph : Open Graph Debugger : Herramienta de validaci\u00f3n de Open Graph que permite comprobar si el c\u00f3digo es correcto y no hay ning\u00fan error en la utilizaci\u00f3n del protocolo en nuestro documento HTML.","title":"Facebook (Open Graph"},{"location":"desarrollo/html/04-etiquetas_de_cabecera/#twitter-twitter-cards","text":"Por su parte, Twitter utiliza Twitter Cards , un sistema que permite integrar metadatos para su uso en la red social de Twitter, y enriquecer la informaci\u00f3n de tweets donde se mencionan o enlazan p\u00e1ginas de nuestro sitio web. Datos como el formato y tipo de la informaci\u00f3n mostrada, el nombre del autor de la p\u00e1gina del enlace, el t\u00edtulo, descripci\u00f3n e imagen de presentaci\u00f3n son perfectamente personalizables desde Twitter Cards , que mostrar\u00eda una apariencia similar a la siguiente: Para utilizar Twitter Cards se requiere dar de alta previamente en Twitter Developers as\u00ed como pasar un peque\u00f1o proceso de moderaci\u00f3n para saber si tu p\u00e1gina cumple los requisitos para utilizar este tipo de metadatos en la red de Twitter. Respecto al c\u00f3digo a utilizar, es muy sencillo: < head > < meta property = \"twitter:card\" content = \"summary_large_image\" /> < meta property = \"twitter:creator\" content = \"@Manz\" /> < meta property = \"twitter:title\" content = \"T\u00edtulo\" /> < meta property = \"twitter:description\" content = \"Descripci\u00f3n\" /> < meta property = \"twitter:image:src\" content = \"URL_img.jpg\" /> </ head > Algunos enlaces interesantes sobre Twitter Cards : Twitter Cards Validator : Herramienta de validaci\u00f3n de Twitter Cards que permite realizar una comprobaci\u00f3n del c\u00f3digo de los metadatos de tu p\u00e1gina para saber si existen errores. Fuente: Lenguaje de Html por Manz","title":"Twitter (Twitter Cards)"},{"location":"desarrollo/html/05-etiquetas_de_formularios/","text":"Etiquetas de formularios \u00b6 Creaci\u00f3n de un formulario \u00b6 HTML5 proporciona una serie de etiquetas interesantes para utilizar en formularios ( adem\u00e1s de las ya existentes en versiones anteriores ). Los formularios son una forma sencilla de establecer mecanismos para que el usuario pueda introducir informaci\u00f3n en una p\u00e1gina web de forma sencilla e intuitiva, y el sitio web sea capaz de procesarla correctamente y a\u00f1adirla en una base de datos de la p\u00e1gina, enviarla por email o procesarla para mostrar informaci\u00f3n final al usuario. Nuestros objetivos al crear un formulario HTML5 deben ser los siguientes: Hacer lo m\u00e1s sencillo posible el proceso de inserci\u00f3n de datos por parte del usuario. Intentar que la experiencia de usuario sea lo m\u00e1s agradable posible. Intentar que los datos introducidos est\u00e9n en un formato predecible y esperado. Reducir los errores al introducir datos en la medida de lo posible. Comunicar claramente si ocurren errores al introducir datos. Contenedor de formulario \u00b6 Para comenzar con la creaci\u00f3n de un formulario, el primer paso es indicar una etiqueta contenedora <form> , que incluir\u00e1 toda la informaci\u00f3n que se quiere recoger en ese formulario: < form ></ form > De esta forma, se puede incluso crear varias etiquetas <form> por p\u00e1gina, pudiendo as\u00ed crear varios formularios diferentes, como por ejemplo, uno para realizar una b\u00fasqueda en la p\u00e1gina, otro para dejar un comentario y otro para enviar un email al autor. !!! Tambi\u00e9n es posible colocar campos de formulario fuera de una etiqueta <form> , sin embargo, no tendr\u00e1n un funcionamiento espec\u00edfico y necesitar\u00eda manejarse desde Javascript. La etiqueta <form> dispone de varios atributos para utilizar: Atributo Valor Descripci\u00f3n action URL Direcci\u00f3n URL del back-end donde se enviar\u00e1 la informaci\u00f3n del formulario. method get | post M\u00e9todo HTTP de env\u00edo. GET a trav\u00e9s de URL, POST para env\u00edo extenso. name nombre Nombre del formulario. \u00datil para procesar posteriormente. target destino Nombre del lugar donde se abrir\u00e1 el formulario. \\_blank para nueva pesta\u00f1a. enctype _tipo_Codificaci\u00f3n para el env\u00edo del formulario. Importante para env\u00edo de archivos. accept-charset codificaci\u00f3n Fuerza a utilizar una codificaci\u00f3n en los par\u00e1metros de texto del formulario. autocomplete on | off Activa o desactiva el autocompletado para todos los campos del formulario. novalidate Boolean Con este atributo presente, el formulario obvia la validaci\u00f3n HTML5. As\u00ed pues, un primer formulario base de ejemplo ( a\u00fan vac\u00edo, sin campos de entrada de datos, s\u00f3lo con la etiqueta contenedora ) podr\u00eda ser el que vemos en el siguiente ejemplo: < form name = \"formulario\" method = \"post\" action = \"/send.php\" ></ form > N\u00f3tese que se definen 3 atributos base en <form> : En action se indica la direcci\u00f3n donde se enviar\u00e1n los datos cuando el usuario pulse el bot\u00f3n de enviar. En caso de omitirse esta informaci\u00f3n, se enviar\u00edan los datos a la propia p\u00e1gina actual, volvi\u00e9ndola a cargar. En method se define el tipo de m\u00e9todo HTTP a utilizar. Utilizaremos el m\u00e9todo GET cuando nos interese que los datos se env\u00eden en la propia URL. En caso contrario, POST . En name el nombre del formulario para cuando necesitemos hacer referencia a \u00e9l ( generalmente desde Javascript o desde backend ). Tipos de datos \u00b6 Para que un usuario pueda introducir informaci\u00f3n en un formulario, requiere que se le indiquen una serie de campos que le permitan introducir la informaci\u00f3n de la forma m\u00e1s c\u00f3moda y r\u00e1pida posible. Para ello, debemos saber a priori que tipo de dato le vamos a pedir al usuario ( texto, num\u00e9rico, fecha, etc... ), y as\u00ed saber que tipo de campo de entrada de datos es m\u00e1s conveniente colocar. Informaci\u00f3n a obtener Ejemplos Etiqueta y atributo a utilizar Informaci\u00f3n de texto Nombres, apellidos, direcciones f\u00edsicas... <input> - <textarea> N\u00fameros o cantidades Edades, precios, cuant\u00edas... <input> para n\u00fameros Fechas u horas Fecha de nacimiento, inicio de evento... <input> para fechas Verdadero/falso Si/No, Opci\u00f3n A/B, ON/OFF... <input type=\"checkbox\"> Opci\u00f3n \u00fanica (Elegir una opci\u00f3n de 2 \u00f3 m\u00e1s posibles) <input type=\"radio\"> - <select> Varias opciones (Elegir varias opciones de 2 \u00f3 m\u00e1s posibles) <select multiple> - <input type=\"checkbox\"> Opci\u00f3n \u00fanica abierta (Elegir una opci\u00f3n o indicar una propia) <datalist> Selecci\u00f3n de color (Escoger un color o tonalidad) <input type=\"color\"> Selecci\u00f3n de archivo (Escoger un archivo para enviar) <input type=\"file\"> En HTML5, de forma nativa, el navegador proporciona estos campos de entrada en los que el usuario puede introducir informaci\u00f3n espec\u00edfica. Cada uno de ellos tiene sus propias particularidades y caracter\u00edsticas, adem\u00e1s de que hay que tener cuidado con algunos, ya que pueden no estar soportados por completo en todos los navegadores. Campos de entrada \u00b6 Una de las etiquetas que m\u00e1s utilizaremos para obtener informaci\u00f3n a modo de campo de entrada de datos en un formulario es la etiqueta <input> . Su funcionalidad m\u00e1s utilizada es la de servir como campo de texto: < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- Primer campo de entrada de datos --> Nombre de usuario: < input type = \"text\" name = \"nombre\" value = \"\" /> <!-- Bot\u00f3n de env\u00edo del formulario --> < input type = \"submit\" value = \"Enviar\" /> </ form > En este ejemplo tenemos un peque\u00f1o formulario donde se le pide al usuario su nombre con la etiqueta <input type=\"text\"> y, posteriormente, se coloca un bot\u00f3n para enviar el formulario con la etiqueta <input type=\"submit\"> . Aunque vemos que se trata de la misma etiqueta <input> , dependiendo del valor indicado en el atributo type realizar\u00e1 una tarea u otra. La etiqueta \"input\" \u00b6 La etiqueta <input> tiene una gran cantidad de atributos ( algunos dependiendo del valor de type, que mostraremos m\u00e1s adelante ). Estos son los atributos que podemos utilizar de forma general para pr\u00e1cticamente cualquier campo de entrada de datos con la etiqueta <input> : Atributo Valor Descripci\u00f3n type tipo de campo Indica el tipo de campo del que se trata. name nombre del campo Indica el nombre del campo para hacer referencia m\u00e1s tarde. value valor por defecto Indica el valor inicial que tendr\u00e1 ese campo de datos. form placeholder sugerencia Indica una sugerencia al usuario antes de escribir. size n\u00famero Tama\u00f1o visual ( n\u00famero de car\u00e1cteres ) del campo de datos. autocomplete on | off Activa o desactiva el autocompletado para este campo. autofocus - Establece el foco ( coloca el cursor ) en este campo al cargar la p\u00e1gina. El atributo type nos permitir\u00e1 indicar que tipo de campo de dato mostrar\u00e1 en el navegador ( text, number, date... los veremos m\u00e1s adelante ). Mediante el atributo name le daremos un nombre al campo de texto, as\u00ed cuando enviemos la informaci\u00f3n del formulario, podremos manejarla desde javascript o desde el back-end haciendo referencia a dicho nombre. Controles: Campos de texto \u00b6 La etiqueta HTML <input> puede tomar varios valores diferentes en su atributo type para permitir al usuario introducir informaci\u00f3n de texto , adem\u00e1s de otra etiqueta denominada <textarea> para cantidades de texto m\u00e1s grandes como varios p\u00e1rrafos. Seg\u00fan nuestras necesidades, tendremos varias opciones: Tipo de informaci\u00f3n a obtener Etiqueta a utilizar Ejemplo Texto alfanum\u00e9rico libre (texto corto) <input type=\"text\"> Texto para b\u00fasquedas <input type=\"search\"> N\u00famero de tel\u00e9fono o m\u00f3vil <input type=\"tel\"> Direcci\u00f3n URL <input type=\"url\"> Direcci\u00f3n de correo email <input type=\"email\"> Clave o contrase\u00f1a <input type=\"password\"> Campo oculto (no mostrar al usuario) <input type=\"hidden\"> Texto alfanum\u00e9rico libre (extenso) <textarea> Esto es un campo de texto m\u00e1s extenso, \u00fatil para textos de uno o m\u00e1s p\u00e1rrafos. Texto alfanum\u00e9rico corto \u00b6 En primer lugar, si lo que queremos es guardar informaci\u00f3n de texto libremente, la opci\u00f3n m\u00e1s habitual es optar por utilizar el campo de entrada de datos <input type=\"text\"> . Este atributo es el que se utiliza en las etiquetas <input> por defecto si no indicamos ning\u00fan atributo type . Es un campo de texto ideal para fragmentos cortos de informaci\u00f3n: nombres, apellidos, direcciones f\u00edsicas, etc... En resumen, peque\u00f1os fragmentos de texto menores a un par de palabras. Un sencillo ejemplo: < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- Campo de entrada de datos --> < input type = \"text\" name = \"nombre\" autocomplete = \"off\" placeholder = \"Introduce tu nombre de usuario\" /> </ form > Obs\u00e9rvese que adem\u00e1s hemos indicado dos atributos adicionales: Autocompletado desactivado : No aparecer\u00e1 informaci\u00f3n escrita anteriormente en ese campo. Placeholder : Es el texto que aparecer\u00e1 a modo de sugerencia/ayuda para el usuario ( en gris, ligeramente menos visible que el texto del campo ). En cuanto el usuario escriba en el mismo, el mensaje desaparecer\u00e1. S\u00f3lo volver\u00eda a aparecer si el usuario decide borrar nuevamente la informaci\u00f3n que ha escrito en ese campo. !!! Es importante no escribir sugerencias de usuario en el atributo value , sino en placeholder . Utiliza el atributo value s\u00f3lo si quieres indicar valores por defecto del campo. Textos cortos espec\u00edficos \u00b6 Por otro lado, en HTML5 se a\u00f1aden nuevos tipos para etiquetas <input> como search , tel , url o email . Aunque la idea es la misma que un campo de texto y en principio no notaremos ning\u00fan cambio, estos campos espec\u00edficos tienen como objetivo hacer m\u00e1s sencillo el proceso de introducci\u00f3n de datos por parte del usuario. Si utilizamos tel en vez de text , al hacer clic en el campo del formulario desde un smartphone/tablet, se nos desplegar\u00e1 el teclado num\u00e9rico en lugar del teclado habitual, lo que nos facilitar\u00e1 en gran medida escribir el dispositivo m\u00f3vil, ya que la intenci\u00f3n es utilizar s\u00f3lo caracteres para n\u00fameros. Lo mismo ocurre con los campos de tipo email o url , ya que nos mostrar\u00e1 un teclado con botones especiales con @ , .com u otros atajos r\u00e1pidos: < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- Campo de entrada de tel\u00e9fono --> Tel\u00e9fono: < input type = \"tel\" name = \"telefono\" placeholder = \"+XX XXX XXXXXX\" /> <!-- Campo de entrada de email --> Email: < input type = \"email\" name = \"correo\" placeholder = \"nombre@dominio.com\" /> <!-- Campo de entrada de url --> P\u00e1gina web: < input type = \"url\" name = \"web\" placeholder = \"https://pagina.com/\" /> </ form > El atributo type tambi\u00e9n permite el valor search , que es muy similar a los anteriores. Se utiliza para campos orientados a la b\u00fasqueda de palabras o textos en un sitio web, mostrando desde dispositivos m\u00f3viles una x para borrar la palabra escrita con un s\u00f3lo clic. Campos para contrase\u00f1as \u00b6 La etiqueta <input> tiene el valor password en su atributo type para crear campos de texto orientados a almacenar informaci\u00f3n sensible como podr\u00edan ser contrase\u00f1as, claves o pins num\u00e9ricos. Esto no lo convertir\u00eda en un campo m\u00e1s seguro t\u00e9cnicamente, sino que simplemente muestra puntos o asteriscos en lugar del texto visualmente, protegi\u00e9ndolo visualmente de ojos ajenos. Por otro lado tambi\u00e9n tenemos el tipo hidden , que se puede utilizar cuando queremos enviar informaci\u00f3n en el formulario, pero que no queremos que el navegador lo muestre visualmente en el formulario, como por ejemplo un c\u00f3digo num\u00e9rico o una id informativa: < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- Campo de entrada de usuario --> Usuario:` < input type = \"text\" name = \"nombre\" placeholder = \"Por ejemplo, Juan\" /> <!-- Campo de entrada de password --> Password: < input type = \"password\" name = \"pass\" placeholder = \"Contrase\u00f1a\" /> <!-- Campo oculto: Este campo no se ver\u00e1 en el navegador --> < input type = \"hidden\" name = \"informacion\" value = \"72625\" /> </ form > Campos extensos de texto \u00b6 Por \u00faltimo, si queremos indicar un campo para escribir textos m\u00e1s extensos, lo m\u00e1s apropiado es utilizar la etiqueta <textarea> , que tiene tambi\u00e9n algunos atributos adicionales: Atributo Valor Descripci\u00f3n cols n\u00famero de columnas N\u00famero de car\u00e1cteres que caben en horizontal ( columnas ). rows n\u00famero de filas N\u00famero de car\u00e1cteres que caben en vertical ( filas ). wrap soft | hard Indica si el texto debe enviarse recolocado o como se ve visualmente. Esta etiqueta nos permite a\u00f1adir gran cantidad de texto, ya que las etiquetas <input type=\"text\"> s\u00f3lo nos permiten escribir una l\u00ednea de texto y es muy inc\u00f3modo si nuestra intenci\u00f3n es escribir grandes cantidades de texto. Sus atributos cols y rows nos permiten aumentar el tama\u00f1o de ancho y alto, as\u00ed como indicar si queremos que se modifique la apariencia visual del p\u00e1rrafo al enviar al formulario con el atributo wrap . Un ejemplo b\u00e1sico de esta etiqueta <textarea> : < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- Area de texto extensa --> < textarea name = \"texto\" cols = \"80\" rows = \"10\" placeholder = \"Escribe aqu\u00ed el texto...\" > Este es el valor por defecto </ textarea > </ form > Existen unas librer\u00edas de javascript para \u00abenriquecer\u00bb y ampliar la funcionalidad de estas \u00e1reas de texto, permitiendo realizar ciertas tareas visuales como fragmentos en negrita, cursiva, im\u00e1genes, tablas, etc... Este tipo de librer\u00edas se llaman editores WYSIWYG ( lo que ves es lo que obtienes ). Comprobaci\u00f3n de ortograf\u00eda \u00b6 En todos estos campos, tanto etiquetas <input> como <textarea> , podemos utilizar un atributo denominado spellcheck mediante el cu\u00e1l indicamos al navegador si debe revisar la ortograf\u00eda del texto escrito en dicho elemento ( en el cu\u00e1l aparece una l\u00ednea roja inferior cuando la palabra no se encuentra en el diccionario ). < form name = \"formulario\" method = \"post\" action = \"/send.php\" > < input type = \"text\" name = \"objeto1\" value = \"camion azul \" spellcheck = \"true\" /> < input type = \"text\" name = \"objeto2\" value = \"camion azul \" spellcheck = \"false\" /> < textarea cols = \"40\" name = \"objeto3\" spellcheck = \"true\" > camion azul </ textarea > </ form > Si el atributo spellcheck est\u00e1 a true , el navegador comprobar\u00e1 la ortograf\u00eda, si se encuentra a false , no la comprobar\u00e1. Si no se especifica el atributo, el navegador busca el atributo spellcheck en los elementos contenedores padres, y si no lo encuentra, toma el valor por defecto, que es true . En el ejemplo anterior, hemos desactivado la comprobaci\u00f3n de ortograf\u00eda en el segundo campo ( objeto2 ), por lo que al pulsar sobre \u00e9l no aparece ninguna l\u00ednea roja, a pesar de estar mal escrita. En los dem\u00e1s campos si ocurre. Controles: Campos num\u00e9ricos \u00b6 Si deseamos obtener informaci\u00f3n o cantidades num\u00e9ricas en un formulario, tenemos a nuestra disposici\u00f3n dos tipos de etiquetas <input> . Tipos de campos num\u00e9ricos \u00b6 La primera de ellas es number , un tipo con el que podremos utilizar un campo de texto donde el usuario s\u00f3lo puede escribir n\u00fameros ( o car\u00e1cteres como + , - o el n\u00famero e , entre otros ). La diferencia respecto a otros campos es que al mover el rat\u00f3n sobre \u00e9l, nos aparecen dos flechas que nos permiten aumentar o disminuir la cantidad num\u00e9rica del campo. Tipo de informaci\u00f3n a obtener Etiqueta a utilizar Ejemplo N\u00famero o cantidad num\u00e9rica <input type=\"number\"> Rango num\u00e9rico <input type=\"range\"> Por otro lado, tenemos la etiqueta <input type=\"range\"> , que en lugar de mostrarnos un campo de texto que podemos modificar introduciendo directamente el n\u00famero, podemos hacerlo mediante un \u00abslider\u00bb o barra de desplazamiento que representa un n\u00famero entre un rango num\u00e9rico espec\u00edfico. M\u00ednimos, m\u00e1ximos y saltos \u00b6 Tanto en una como en otra podemos indicar los atributos min , max y step , que veremos m\u00e1s adelante en el tema de validaciones HTML5 , para indicar l\u00edmites y restricciones: Atributo Valor Significado del atributo min n\u00famero m\u00ednimo N\u00famero m\u00ednimo permitido para pasar validaci\u00f3n. max n\u00famero m\u00e1ximo N\u00famero m\u00e1ximo permitido para pasar validaci\u00f3n. step incremento o decremento Variaci\u00f3n permitida entre n\u00fameros para aceptar validaci\u00f3n. Esto no significa que el usuario no pueda introducir un n\u00famero menor que el indicado en el atributo min , por ejemplo, sino que si el usuario introduce ese n\u00famero, los datos del campo no ser\u00e1n v\u00e1lidos, y no se podr\u00e1 enviar el formulario hasta que se cumpla esa restricci\u00f3n. Un ejemplo de c\u00f3digo: < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- N\u00famero entre 10 y 50, de 5 en 5. Valor por defecto: 25 --> < input type = \"number\" name = \"numero\" value = \"25\" min = \"10\" max = \"50\" step = \"5\" /> <!-- Su misma versi\u00f3n, utilizando el slider en un rango num\u00e9rico --> < input type = \"range\" name = \"numrango\" value = \"25\" min = \"10\" max = \"50\" step = \"5\" /> </ form > Las diferencias son las siguientes: En el campo con type a number es posible introducir manualmente n\u00fameros no permitidos. En el campo con type a range no es posible salirse del rango indicado. Tanto en uno como en otro, no es posible enviar el formulario si no se cumplen las restricciones. De cualquier forma, si indicamos min=10 , max=50 y step=5 en una etiqueta num\u00e9rica <input> , los valores permitidos por el usuario ser\u00edan 10 , 15 , 20 , 25 , 30 , 35 , 40 , 45 y 50 . Controles: Campos de fecha/hora \u00b6 Si nuestra intenci\u00f3n es que el usuario introduzca una fecha concreta, en lugar de utilizar un campo de texto, lo ideal ser\u00eda utilizar un control llamado datepicker . B\u00e1sicamente, se trata de un calendario donde el usuario puede seleccionar el d\u00eda, mes y a\u00f1o que desee, simplemente a golpe de clic, ahorr\u00e1ndose el escribirlo y simplificando el formato a utilizar, ya que puede ser muy complicado guardar siempre la fecha en un mismo formato. Adem\u00e1s, tambi\u00e9n existe otro control llamado timepicker , que en lugar de solicitar al usuario una fecha, solicita una hora. Ambos campos est\u00e1n a nuestra disposici\u00f3n de forma nativa en HTML5, aunque su interfaz depende del navegador y algunos no tienen soporte para todas sus caracter\u00edsticas. En HTML5.1, adem\u00e1s, se incluyen nuevos campos que tambi\u00e9n permiten obtener fecha y hora ( en un mismo campo ), un mes espec\u00edfico o el n\u00famero de semana del a\u00f1o, este \u00faltimo algo que se utiliza bastante en EEUU, aunque no demasiado en Espa\u00f1a. Fecha y hora \u00b6 Los atributos type de fecha/hora existentes en los campos <input> ser\u00edan los dos primeros, mientras que los tres \u00faltimos se a\u00f1adir\u00e1n en HTML5.1: Tipo de informaci\u00f3n a obtener Etiqueta a utilizar Ejemplo Fecha <input type=\"date\"> Hora <input type=\"time\"> Fecha y hora local <input type=\"datetime-local\"> Mes <input type=\"month\"> Semana <input type=\"week\"> Veamos alg\u00fan ejemplo b\u00e1sico con las dos primeras, <input type=\"date\"> e <input type=\"time\"> : < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- Campo de entrada de fecha --> Selecciona la fecha deseada: < input type = \"date\" name = \"fecha\" min = \"2018-03-25\" max = \"2018-05-25\" step = \"2\" /> <!-- Campo de entrada de hora --> Selecciona la hora deseada: < input type = \"time\" name = \"hora\" min = \"18:00\" max = \"21:00\" step = \"3600\" /> </ form > Como se puede ver, se pueden indicar los atributos min y max en campos <input> de fecha, donde actuar\u00e1n estableciendo un l\u00edmite de fecha m\u00ednima o m\u00e1xima permitida, as\u00ed como el campo step se podr\u00e1 utilizar para restricciones al variar unidades. !!! Menci\u00f3n especial al apartado step donde hemos indicado el n\u00famero de d\u00edas ( en el caso de la fecha ), por lo que s\u00f3lo aceptar\u00e1 d\u00edas de dos en dos desde el 25 de marzo de 2018 hasta el 25 de mayo de 2018. Por su parte, el campo de la hora s\u00f3lo permitir\u00e1 variar las horas, ya que se ha indicado 3600 segundos ( salto cada 60x60seg, o sea cada hora ) en el atributo step . Fecha y hora local \u00b6 Como comentabamos, los tres \u00faltimos campos pertenecen a la especificaci\u00f3n de HTML 5.1, aunque en algunos navegadores ya est\u00e1n implementados. Con ellos podremos seleccionar fecha y hora local, as\u00ed como meses especificos o semanas concretas del a\u00f1o: < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- Campo de entrada de mes --> Selecciona el mes deseado: < input type = \"month\" name = \"mes\" value = \"2018-05\" min = \"2018-02\" max = \"2018-06\" step = \"2\" /> <!-- Campo de entrada de semana --> Selecciona la semana deseada: < input type = \"week\" name = \"semana\" value = \"2018-W18\" min = \"2018-W10\" max = \"2018-W20\" step = \"2\" /> </ form > En el primer campo <input> seleccionamos el mes con el formato yyyy-mm , donde yyyy es la cifra de 4 d\u00edgitos del a\u00f1o y mm el mes con 2 d\u00edgitos. En el segundo campo <input> seleccionamos la semana con el formato yyyy-Wss , donde nuevamente yyyy es el a\u00f1o en formato de 4 d\u00edgitos, W es siempre esa letra y ss es el n\u00famero de la semana en formato de 2 d\u00edgitos. Obs\u00e9rvese que tambi\u00e9n se aplica el atributo step=\"2\" lo que hace que s\u00f3lo se puedan seleccionar semanas o meses impares . Vigilar bien la compatibilidad con navegadores de estos campos. Controles: Casillas o botones \u00b6 Si queremos definir opciones que el usuario debe elegir o escoger, en muchos casos lo m\u00e1s apropiado suele ser utilizar casillas de verificaci\u00f3n o botones de opci\u00f3n ( botones de radio ). La diferencia principal entre estos dos tipos de botones es la siguiente: Las casillas de verificaci\u00f3n se marcan para establecer una opci\u00f3n como activada ( verdadero ). Los botones de radio se marcan para elegir s\u00f3lo una opci\u00f3n de varias posibles . Tipo de informaci\u00f3n a obtener Etiqueta a utilizar Ejemplo Casilla de verificaci\u00f3n (activado o desactivado) <input type=\"checkbox\"> Bot\u00f3n radio (casilla de opci\u00f3n \u00fanica) <input type=\"radio\"> Casillas de verificaci\u00f3n \u00b6 Las casillas de verificaci\u00f3n permiten mostrar al usuario la posibilidad de marcar una opci\u00f3n como activada, verdadera o afirmativa, o dejarla sin marcar, lo que representa una opci\u00f3n desactivada, falsa o negativa. !!! Se puede a\u00f1adir el atributo checked para forzar que esa casilla est\u00e9 activada inicialmente. Botones de radio \u00b6 Los botones de radio se suelen utilizar cuando el usuario debe elegir s\u00f3lo una opci\u00f3n espec\u00edfica de varias disponibles. Si las opciones son demasiadas, se suele optar por una lista de selecci\u00f3n . Para tener varios botones radio en un mismo grupo, y que s\u00f3lo se active uno de ellos, el truco est\u00e1 en colocarle el mismo nombre en el atributo name a cada opci\u00f3n. Luego, en el atributo value le colocamos el valor que habr\u00e1 seleccionado el usuario de haber marcado esa opci\u00f3n. Un ejemplo de ambos tipos de botones: < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- Botones de opci\u00f3n --> < p > Sexo: < input type = \"radio\" name = \"sexo\" value = \"H\" /> Hombre < input type = \"radio\" name = \"sexo\" value = \"M\" /> Mujer </ p > <!-- Casillas de verificaci\u00f3n (marcada por defecto) --> < input type = \"checkbox\" name = \"empresa\" checked /> \u00bfEres aut\u00f3nomo/empresa? </ form > De la misma forma que en las casillas de verificaci\u00f3n, si queremos que un bot\u00f3n de radio se encuentre marcado por defecto, le a\u00f1adimos el atributo checked . !!! Si el usuario no marca una casilla de verificaci\u00f3n o alguna de las opciones de un bot\u00f3n radio, esos datos del formulario no se env\u00edan. Controles: Listas de selecci\u00f3n \u00b6 Si las casillas de verificaci\u00f3n se nos quedan cortas o necesitamos mostrar una lista m\u00e1s extensa de datos, quiz\u00e1s ser\u00eda conveniente utilizar una lista de selecci\u00f3n , tambi\u00e9n llamada frecuentemente combo o lista desplegable . Estas listas nos permiten mostrar al usuario varias opciones disponibles para que se decanten por una. Hay dos tipos de listas seleccionables : Tipo de informaci\u00f3n a obtener Etiqueta a utilizar Ejemplo Lista (cerrada) de opciones <select> y <option> option Lista (abierta) de opciones <datalist> option 1 option 2 Listas seleccionables \u00b6 Su forma m\u00e1s b\u00e1sica se compone de una etiqueta contenedora <select> que en su interior incluir\u00e1 varias etiquetas <option> , una por opci\u00f3n posible a elegir. Si queremos que una opci\u00f3n de la lista est\u00e9 marcada por defecto, incluiremos el atributo selected : < form name = \"formulario\" method = \"post\" action = \"http://pagina.com/send.php\" > <!-- Lista de selecci\u00f3n --> Selecciona la opci\u00f3n deseada: < select name = \"combo\" > <!-- Opciones de la lista --> < option value = \"1\" > Opci\u00f3n 1 </ option > < option value = \"2\" selected > Opci\u00f3n 2 </ option > <!-- Opci\u00f3n por defecto --> < option value = \"3\" > Opci\u00f3n 3 </ option > </ select > </ form > Listas seleccionables m\u00faltiples \u00b6 A la etiqueta <select> le podemos aplicar el atributo multiple , de modo que desaparecer\u00e1 la posibilidad de desplegar la lista, mostrando directamente las opciones en otro formato que har\u00e1 posible pulsar la tecla CTRL y marcar varias de las opciones de la lista. Tambi\u00e9n podemos utilizar la etiqueta <optgroup> , que es una etiqueta contenedora para agrupar varias etiquetas <option> . De esta forma, podemos crear peque\u00f1as agrupaciones para tener m\u00e1s organizada la lista de opciones. La propia etiqueta <optgroup> no es seleccionable por el usuario, aparecer\u00e1 en negrita y s\u00f3lo estar\u00e1 disponible para organizar las opciones: < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- Lista de selecci\u00f3n m\u00faltiple --> < select name = \"combo\" multiple > <!-- Formato alternativo con atributo label --> < optgroup label = \"Opciones b\u00e1sicas\" > < option value = \"1\" label = \"Opcion 1\" > </ option > </ optgroup > < optgroup label = \"Opciones avanzadas\" > < option value = \"2\" label = \"Opcion 2\" > </ option > < option value = \"3\" label = \"Opcion 3\" > </ option > </ optgroup > </ select > </ form > Obs\u00e9rvese que en esta segunda lista hemos utilizado el atributo label que es un formato alternativo al ejemplo anterior. Listas seleccionables abiertas \u00b6 Por \u00faltimo, tambi\u00e9n podemos crear una lista abierta , donde el usuario puede seleccionar opciones sugeridas mediante un <datalist> o indicar la suya propia escribi\u00e9ndola manualmente. Para ello, utilizaremos una etiqueta <datalist> que funcionar\u00e1 exactamente igual que un <select> , conteniendo las opciones posibles en etiquetas <option> . Al hacer esto, y al contrario que las etiquetas <select> , el elemento <datalist> no mostrar\u00e1 visualmente nada. Sin embargo, la diferencia radica en que le daremos un atributo id al <datalist> y lo combinaremos con un campo de texto <input> a trav\u00e9s del atributo list : < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- Campo de texto combinado con lista de opciones --> < input type = \"text\" list = \"items\" /> <!-- Lista de opciones --> < datalist id = \"items\" > < option value = \"1\" > Opci\u00f3n 1 </ option > < option value = \"2\" > Opci\u00f3n 2 </ option > < option value = \"3\" > Opci\u00f3n 3 </ option > </ datalist > </ form > De esta forma, tenemos una lista de selecci\u00f3n donde podemos marcar las opciones del <datalist> pero adem\u00e1s se nos ofrece la opci\u00f3n de escribir manualmente nuestra propia opci\u00f3n. Nota En listas con muchas opciones, tambi\u00e9n se tiene la ventaja que al escribir un primer car\u00e1cter, s\u00f3lo nos aparecen los \u00edtems que comienzan por ese caracter, lo que lo hace ideal para crear listas de opciones extensas o de forma din\u00e1mica con Javascript. No obstante, cuidado con el soporte de este tipo de lista, que puede no estar disponible para algunos navegadores https://caniuse.com/datalist Controles: Selecci\u00f3n de color \u00b6 En HTML5 se incluye un nuevo campo de entrada de datos para seleccionar un color. Dicho campo facilita un interfaz conocido como colorpicker , que permite al usuario seleccionar un color espec\u00edfico, variando sus par\u00e1metros, generalmente desde un esquema de colores RGB . Interfaz del ColorPicker \u00b6 La etiqueta que utilizaremos para mostrar esta interfaz ser\u00e1 <input> con el atributo type a color . Ten en cuenta que el interfaz puede variar dependiendo del sistema operativo: Tipo de informaci\u00f3n a obtener Etiqueta a utilizar Ejemplo Campo de entrada de datos de selecci\u00f3n de color <input type=\"color\"> El usuario puede elegir un color en su interfaz de selecci\u00f3n de colores y este color es guardado en el campo en formato hexadecimal . Tambi\u00e9n se puede indicar en el atributo value para establecer un color por defecto: < form name = \"formulario\" method = \"post\" action = \"http://pagina.com/send.php\" > <!-- Selecci\u00f3n de color --> Selecciona el color deseado: <!-- Color verde por defecto HEX(1B, F4, 4A) --> < input type = \"color\" name = \"color\" value = \"#1BF44A\" /> </ form > El soporte de este campo de selecci\u00f3n de colores en los diferentes navegadores es el siguiente: https://caniuse.com/#feat=input-color Controles: Selecci\u00f3n de archivos \u00b6 HTML nos proporciona un campo de entrada de datos para seleccionar archivos, adjuntarlos y enviarlos junto al resto del formulario. Esta interfaz habitualmente se muestra como un bot\u00f3n \u00ab Examinar... \u00bb o \u00ab Seleccionar archivo \u00bb junto a un texto del archivo seleccionado por el usuario. Para colocar este campo en nuestro formulario se indicar\u00e1 la etiqueta <input type=\"file\"> : Tipo de informaci\u00f3n a obtener Etiqueta a utilizar Ejemplo Adjuntar archivo <input type=\"file\"> Atributos \u00b6 En primer lugar, debemos saber que si queremos adjuntar archivos a nuestro formulario, es necesario indicar en la etiqueta <form> el atributo enctype=\"multipart/form-data\" . Con esto nos aseguramos que las cabeceras del formulario indican que estamos enviando archivos adjuntos. Tambi\u00e9n se nos permite a\u00f1adir el atributo accept a la etiqueta <input type=\"file\"> a modo de sugerencia, para indicar los formatos de archivos permitidos al usuario en el campo de selecci\u00f3n de archivos. Un ejemplo de este campo de selecci\u00f3n de archivo: < form name = \"formulario\" method = \"post\" action = \"/send.php\" enctype = \"multipart/form-data\" > <!-- \u00a1No olvides el enctype! --> <!-- Campo de selecci\u00f3n de archivo --> < input type = \"file\" name = \"adjunto\" accept = \".pdf,.jpg,.png\" multiple /> </ form > Nota Si indicamos el atributo multiple en la etiqueta <input> , se le da la opci\u00f3n al usuario de pulsar la tecla CTRL para adjuntar varios archivos a la vez, y no uno solo. Organizaci\u00f3n de campos \u00b6 En este apartado, vamos a comentar las siguientes etiquetas, que sirven para organizar mejor los elementos de un formulario, reagrup\u00e1ndolos por categor\u00edas o tem\u00e1ticas, mostr\u00e1ndolos de forma m\u00e1s ordenada o incluso para que visualmente sea m\u00e1s sencillo encontrar la informaci\u00f3n del formulario. Las etiquetas que veremos son las siguientes: Tipo de informaci\u00f3n a obtener Etiqueta a utilizar Ejemplo Agrupaci\u00f3n visual o tem\u00e1tica de campos de entrada <fieldset> Leyenda para la etiqueta <fieldset> <legend> Leyenda Relaci\u00f3n de campo y texto <label> Agrupaci\u00f3n visual \u00b6 La primera etiqueta es <fieldset> , un elemento utilizado como etiqueta contenedora para agrupar visualmente, mediante un trazo simple, todos los campos de un formulario que est\u00e9n relacionados ( misma tem\u00e1tica o apartado, por ejemplo ). La etiqueta <legend> , suele incluirse en el interior de <fieldset> para mostrar un t\u00edtulo en el trazo de esa agrupaci\u00f3n. < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- Agrupaci\u00f3n de campos --> < fieldset > < legend > Datos personales </ legend > <!-- Campo de texto --> Nombre de usuario: < input type = \"text\" name = \"nombre\" placeholder = \"Por ej: John Smith\" /> <!-- Campo num\u00e9rico --> Edad: < input type = \"number\" name = \"edad\" min = \"18\" max = \"100\" placeholder = \"18\" /> <!-- Bot\u00f3n radio de opci\u00f3n --> Sexo: <!-- Primera opci\u00f3n --> < input type = \"radio\" name = \"sexo\" value = \"H\" /> Hombre <!-- Segunda opci\u00f3n --> < input type = \"radio\" name = \"sexo\" value = \"M\" /> Mujer </ fieldset > </ form > Orden de campos \u00b6 Cuando nos encontramos en un campo de un formulario, al pulsar la tecla TAB podemos avanzar al siguiente campo sin necesidad de recurrir al rat\u00f3n. Tambi\u00e9n podemos conseguir la operaci\u00f3n inversa pulsando SHIFT+TAB, es decir, retroceder al campo anterior del formulario. Por defecto, el navegador sigue el orden de los campos seg\u00fan el HTML. Sin embargo, si queremos personalizar dicho orden, podemos utilizar el atributo tabindex , indicando un n\u00famero con el orden en cuesti\u00f3n: < form name = \"formulario\" method = \"post\" action = \"/send.php\" > Nombre de usuario: < input type = \"text\" name = \"nombre\" placeholder = \"Por ej: John Smith\" tabindex = \"1\" /> Edad: < input type = \"number\" name = \"edad\" min = \"18\" max = \"100\" placeholder = \"18\" tabindex = \"3\" /> Apellidos: < input type = \"text\" name = \"apellidos\" placeholder = \"Apellidos\" tabindex = \"2\" /> </ form > En este caso, si nos colocamos en el primer campo del formulario y pulsamos TAB, saltaremos directamente al tercer campo, ya que tiene indicado tabindex a 2 , y con un nuevo TAB saltaremos al segundo campo, ya que es el que tiene tabindex a 3 . Se recomienda utilizar este atributo s\u00f3lo cuando est\u00e9 justificado y las circunstancias lo requieran, ya que cambiar el orden de los campos puede confundir al usuario o facilitar equivocaciones al rellenar el formulario. Relaci\u00f3n texto-campo \u00b6 Sin embargo, el ejemplo superior podr\u00eda modificar un aspecto min\u00fasculo que podr\u00eda mejorar su usabilidad. Por ejemplo, si un usuario quiere pulsar sobre uno de los botones de radio para elegir el sexo y pulsa sobre el texto ( Hombre o Mujer ), no ocurrir\u00e1 nada. El usuario debe pulsar exactamente sobre el bot\u00f3n de radio a elegir. Sin embargo, si utilizamos la etiqueta contenedora <label> , podemos establecer una relaci\u00f3n sem\u00e1ntica de un texto con un campo de entrada de datos. Al incluir texto y campo de texto dentro de la etiqueta <label> , tiene el mismo efecto pulsar en el campo de texto que en el propio texto ( muy \u00fatil tambi\u00e9n en casillas de verificaci\u00f3n ). Veamos el ejemplo anterior, mejorado con las etiquetas <label> : < form name = \"formulario\" method = \"post\" action = \"/send.php\" > < fieldset > < legend > Datos personales </ legend > <!-- Relaci\u00f3n del texto con el campo --> < label > Nombre de usuario: < input type = \"text\" name = \"nombre\" placeholder = \"Por ej: John Smith\" /> </ label > <!-- Relaci\u00f3n del texto con el campo --> < label > Edad: < input type = \"number\" name = \"edad\" min = \"18\" max = \"100\" placeholder = \"18\" /> </ label > Sexo: <!-- Relaci\u00f3n del texto con el primer bot\u00f3n --> < label > < input type = \"radio\" name = \"sexo\" value = \"H\" /> Hombre </ label > <!-- Relaci\u00f3n del texto con el segundo bot\u00f3n --> < label > < input type = \"radio\" name = \"sexo\" value = \"M\" /> Mujer </ label > </ fieldset > </ form > Nota A las etiquetas <label> se le puede indicar opcionalmente un atributo for con un nombre espec\u00edfico, y as\u00ed poder establecer la relaci\u00f3n con una etiqueta HTML con id con el mismo nombre, sin necesidad de que est\u00e9n contiguos o adyacentes. Botones de env\u00edo de formularios \u00b6 Por \u00faltimo, y no por ello menos importante, tenemos los botones de env\u00edo de formulario . Si un formulario carece de estos botones, el usuario s\u00f3lo puede enviarlo si pulsa ENTER en el \u00faltimo campo del formulario. No obstante, siempre es aconsejable incluir un bot\u00f3n expl\u00edcitamente para que el usuario pueda pulsarlo y enviar el formulario sin confusi\u00f3n y de forma clara. Tenemos varios tipos de botones que act\u00faan sobre el formulario: Tipo de bot\u00f3n de control Etiqueta a utilizar Ejemplo Bot\u00f3n de env\u00edo de formulario <input type=\"submit\"> Bot\u00f3n de env\u00edo con imagen <input type=\"image\"> Bot\u00f3n de borrar formulario <input type=\"reset\"> Bot\u00f3n sin funcionalidad <input type=\"button\"> o <button> Boton Bot\u00f3n normal \u00b6 El bot\u00f3n <input type=\"submit\"> sirve para enviar el formulario una vez el usuario ha rellenado todos sus campos y pulsa en este bot\u00f3n. El texto por defecto del bot\u00f3n ser\u00e1 Enviar ( o equivalente seg\u00fan el idioma ). Podemos modificar el texto del bot\u00f3n mediante el atributo value . < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- Datos del formulario --> Usuario: < input type = \"text\" name = \"usuario\" /> <!-- Bot\u00f3n de env\u00edo de formulario --> < input type = \"submit\" value = \"Enviar formulario\" /> </ form > Bot\u00f3n con imagen \u00b6 El bot\u00f3n <input type=\"image\"> es un bot\u00f3n que tiene la misma funcionalidad que el bot\u00f3n anterior, pero es un h\u00edbrido entre el bot\u00f3n <input type=\"submit\"> y una etiqueta de imagen <img> , puesto que tambi\u00e9n posee los atributos src , alt , width y height para indicar una imagen que actuar\u00e1 de bot\u00f3n: < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- Datos del formulario --> Usuario: < input type = \"text\" name = \"usuario\" /> <!-- Bot\u00f3n de env\u00edo de formulario con imagen --> < input type = \"image\" src = \"enviar.png\" alt = \"Enviar\" width = \"80\" height = \"28\" /> </ form > Bot\u00f3n de borrar (reset) \u00b6 El bot\u00f3n <input type=\"reset\"> nos ofrece la posibilidad de disponer de un bot\u00f3n que al pulsarse borre completamente el formulario y reestablece todos sus campos de entrada de datos a sus valores por defecto iniciales. Es muy \u00fatil si queremos que el usuario disponga de la posibilidad de borrar todos los campos del formulario f\u00e1cilmente y no tener que hacerlo uno por uno. < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- Datos del formulario --> Usuario: < input type = \"text\" name = \"usuario\" /> <!-- Bot\u00f3n de env\u00edo de formulario --> < input type = \"submit\" value = \"Enviar formulario\" /> <!-- Bot\u00f3n de reseteo de formulario --> < input type = \"reset\" value = \"Borrar formulario\" /> </ form > Nota Cuidado al incluir el bot\u00f3n de reseteo al lado del bot\u00f3n de env\u00edo de formulario. Quiz\u00e1s ser\u00eda una buena opci\u00f3n separarlos notablemente para evitar que el usuario lo pulse sin querer. Bot\u00f3n alternativo \u00b6 Los botones de env\u00edo de formulario habituales funcionan en base a los atributos action , enctype , method , target y novalidate de la etiqueta <form> que los contiene. Sin embargo, es posible crear botones de env\u00edo alternativos que tengan un comportamiento de env\u00edo diferente a los botones por defecto. Para ello, tenemos que crear un bot\u00f3n de env\u00edo <input type=\"submit\"> o <input type=\"image\"> e incluir los atributos formaction , formenctype , formmethod , formtarget y formnovalidate respectivamente, seg\u00fan nos interese, ya que sobreescribir\u00e1n el comportamiento por defecto del formulario: < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- Datos del formulario --> Usuario: < input type = \"text\" name = \"usuario\" /> <!-- Bot\u00f3n por defecto, hace caso a atributos de <form> --> < input type = \"submit\" value = \"Enviar\" /> <!-- Botones con datos de env\u00edo alterados --> < input type = \"submit\" value = \"Enviar al dpto. marketing\" formaction = \"/send-mkt.php\" /> < input type = \"submit\" value = \"Enviar al dpto. inform\u00e1tica\" formaction = \"/send-sat.php\" /> </ form > Bot\u00f3n personalizado \u00b6 Por \u00faltimo, tenemos el bot\u00f3n <input type=\"button\"> o la etiqueta <button> , que en ambos casos a\u00f1ade un bot\u00f3n sin ninguna funcionalidad por defecto. Podemos redefinir la funcionalidad de este bot\u00f3n, pero necesitar\u00edamos Javascript para dotarle de una funcionalidad concreta, por lo que no podr\u00edamos hacer mucho sin este lenguaje. A continuaci\u00f3n un peque\u00f1o ejemplo muy b\u00e1sico: .sandbox pre { margin: 0; overflow: auto; max-height: var(--height, auto); } < button onClick = \"alert('\u00a1Hola, se\u00f1or!')\" > Saludar </ button > Medidores y barras de progreso \u00b6 Existen algunos otros controles que, aunque no nos permiten introducir informaci\u00f3n, pueden ser muy \u00fatiles en formularios para presentar informaci\u00f3n de una forma m\u00e1s visual u ofrecer datos adicionales al usuario. Eso s\u00ed, se trata de etiquetas que sin el uso de Javascript s\u00f3lo podremos realizar funcionalidades muy b\u00e1sicas: Tipo de bot\u00f3n de control Etiqueta a utilizar Ejemplo Barra de progreso <progress> Medidor <meter> Barra de progreso \u00b6 En primer lugar, tenemos una barra de progreso que puede ser \u00fatil para colocarla cuando necesitamos que el usuario sepa que debe esperar mientras se realizan otras tareas, o incluso para indicar el progreso de alg\u00fan proceso o incluso del usuario a trav\u00e9s de la p\u00e1gina. La etiqueta <progress> muestra por defecto una barra de progreso \u00abinfinita\u00bb, que se mueve de izquierda a derecha sin parar. Es la funcionalidad que tiene la barra de progreso sin interactividad desde Javascript. < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- Barra de progreso --> < progress max = \"100\" value = \"25\" > </ form > Nota Mediante el atributo max podemos definir el valor que debe tener la barra de progreso para estar completa y mediante el atributo value el valor actual de la barra de progreso. Adem\u00e1s, utilizando javascript podr\u00edamos ir aumentando el valor de la barra de progreso a medida que realizamos procesos, tareas o incluso acciones del usuario. Medidores \u00b6 La etiqueta <meter> nos permite la creaci\u00f3n de medidores para mostrar el nivel o estado de alg\u00fan detalle. Este control es muy \u00fatil para ciertas tareas donde debemos mostrar informaci\u00f3n que se puede representar mediante un medidor que traspase ciertos umbrales. Un ejemplo cl\u00e1sico es el medidor de seguridad de una contrase\u00f1a , donde puede reflejar de forma gr\u00e1fica y sencilla si la contrase\u00f1a tiene un nivel de seguridad bajo, medio o alto, incluso especificando diferentes grados de nivel. Para ello, tenemos ciertos atributos disponibles en esta etiqueta <meter> : Atributo Valor Descripci\u00f3n min valor m\u00ednimo Valor m\u00ednimo que puede alcanzar el medidor. max valor m\u00e1ximo Valor m\u00e1ximo que puede alcanzar el medidor. value valor actual Cantidad actual del medidor. low umbral bajo Indica el umbral donde se considera bajo-medio. high umbral alto Indica el umbral donde se considera medio-alto. optimum valor \u00f3ptimo Indica el valor \u00f3ptimo del medidor. Un ejemplo de este medidor con la etiqueta <meter> : < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- Medidor --> < meter min = \"0\" max = \"100\" low = \"25\" high = \"75\" optimum = \"100\" value = \"75\" > </ form > Adem\u00e1s, dependiendo del valor de value y la posici\u00f3n del atributo optimum respecto al resto, los colores de la barra de medida cambiar\u00e1n. A continuaci\u00f3n tenemos un esquema de colores que nos muestra las combinaciones posibles: Low < Optimum < High Low < High < Optimum Optimum < Low < High Value \\< low Value < low Value < Low Low < Value < High Low < Value < high Low < Value < High Value > high Value > High Value > high Como siempre, hay que prestar atenci\u00f3n a la compatibilidad entre navegadores, si se quiere dar soporte a navegadores muy antiguos: https://caniuse.com/meter Validaciones HTML5 \u00b6 Al crear un formulario en HTML, debemos ser conscientes de un detalle ineludible: los usuarios se equivocan al rellenar un formulario . Ya sea por equivocaci\u00f3n del usuario, ambig\u00fcedad del formulario, o error del creador del formulario, el caso es que debemos estar preparados y anticiparnos a estos errores, para intentar que los datos lleguen correctamente a su destino y evitar cualquier tipo de moderaci\u00f3n o revisi\u00f3n posterior. Nota Para evitar estos casos, se suele recurrir a un tipo de proceso autom\u00e1tico llamado validaci\u00f3n , en el cu\u00e1l, establecemos unas pautas para que si el usuario introduce alguna informaci\u00f3n incorrecta, deba modificarla o en caso contrario no podr\u00e1 continuar ni enviar el formulario correctamente. Un esquema tradicional de validaci\u00f3n de ejemplo podr\u00eda ser el siguiente, donde tenemos un formulario dise\u00f1ado en HTML5 y mediante javascript realizamos una validaci\u00f3n para comprobar que los datos son correctos. Una vez superada, el formulario se env\u00eda al back-end de la p\u00e1gina para ser procesado y enviarlo por email ( por ejemplo ). Tipos de validaci\u00f3n \u00b6 Cada vez que creamos un formulario, la validaci\u00f3n de los datos introducidos estar\u00e1 situada en uno de los siguientes casos ( colocados de peor a mejor ): En este primer caso, el formulario no tiene validaci\u00f3n de ning\u00fan tipo. El usuario puede escribir la informaci\u00f3n y el sistema no comprobar\u00e1 los datos, ni realizar\u00e1 ning\u00fan tipo de validaci\u00f3n. Es el peor escenario posible, puesto que el usuario podr\u00eda enviar desde informaci\u00f3n incorrecta, hasta datos malintencionados que podr\u00edan comprometer la seguridad de la p\u00e1gina. Otro caso podr\u00eda ser que el formulario tiene validaci\u00f3n s\u00f3lo en el front-end ( cliente ). De esta forma, los datos son verificados en el navegador del usuario antes de enviarse, pero carecen de validaci\u00f3n en el back-end , por lo que un usuario malintencionado podr\u00eda eliminar la validaci\u00f3n del front-end y salt\u00e1rsela, enviando datos malintencionados que comprometan la seguridad de la p\u00e1gina. El tercer caso posible es uno donde el formulario tiene validaci\u00f3n s\u00f3lo en el back-end . De esta forma, garantizamos que un usuario malintencionado no podr\u00e1 eliminar el proceso de validaci\u00f3n, y los datos siempre se comprobar\u00e1n. Sin embargo, la desventaja de este m\u00e9todo es que el usuario puede rellenar un formulario y es necesario que lo env\u00ede ( con la tardanza que eso puede acarrear ), se procese en el back-end y al devolver un error, el usuario tenga que retroceder al formulario y en algunos casos, incluso tener que volver a rellenar todos los campos de nuevo. Por \u00faltimo, tendr\u00edamos el caso ideal , donde el formulario tiene validaci\u00f3n en el front-end y en el back-end , tambi\u00e9n denominado doble validaci\u00f3n . En este caso, el formulario es sometido a un proceso de validaci\u00f3n en la parte del front-end, y si lo supera, vuelve a pasar otro proceso de validaci\u00f3n en el back-end. La desventaja de este m\u00e9todo es que conlleva m\u00e1s trabajo de validaci\u00f3n, pero es el sistema recomendado, puesto que es m\u00e1s estricto y sobre todo, m\u00e1s seguro. Tradicionalmente, la validaci\u00f3n de un formulario se ha hecho siempre en Javascript, sin embargo, HTML5 introduce unos nuevos atributos para formularios que permiten realizar la validaci\u00f3n del formulario directamente en HTML5, sin necesidad de recurrir a Javascript ( aunque es posible hacerlo si se desea ): Recuerda siempre realizar la validaci\u00f3n en el servidor o back-end ( en rojo ), ya que puede evitar problemas graves de seguridad. Atributos b\u00e1sicos \u00b6 En nuestros campos de entrada de datos, se pueden utilizar ciertos atributos para realizar validaciones sencillas. Algunos de estos atributos ya lo hemos visto en apartados anteriores, sin embargo, vamos a comentarlos uno por uno: Atributo Valor Puede actuar sobre... Descripci\u00f3n minlength n\u00famero Campos de texto Establece la longitud m\u00ednima del texto requerida. maxlength n\u00famero Campos de texto No permite escribir textos superiores a n\u00famero car\u00e1cteres. min n\u00famero Campos num\u00e9ricos Establece el n\u00famero m\u00ednimo permitido. fecha Campos de fecha hora Campos de hora max n\u00famero Campos num\u00e9ricos Establece el n\u00famero m\u00e1ximo permitido. fecha Campos de fecha hora Campos de hora step n\u00famero Campos num\u00e9ricos Establece el salto de n\u00fameros permitido. Por defecto, 1. fecha Campos de fecha hora Campos de hora required Campos en general Campo obligatorio. Se debe rellenar para enviar formulario. disabled Campos en general Campo desactivado. No se puede modificar. No se env\u00eda. readonly Campos en general Campo de s\u00f3lo lectura. No se puede modificar. Se env\u00eda. Con estos atributos, podemos crear validaciones b\u00e1sicas en nuestros campos de entrada de datos, obligando al usuario a rellenar un campo obligatorio, forzando a indicar valores entre un rango num\u00e9rico o permitiendo s\u00f3lo textos con un tama\u00f1o espec\u00edfico, entre otros. < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- Nombre de usuario. Obligatorio, entre 5-40 car\u00e1cteres --> Usuario: < input type = \"text\" name = \"nombre\" placeholder = \"Por ejemplo, Juan\" minlength = \"5\" maxlength = \"40\" required /> <!-- Contrase\u00f1a. Obligatorio, m\u00ednimo 11 car\u00e1cteres --> Password: < input type = \"password\" name = \"pass\" placeholder = \"Contrase\u00f1a\" minlength = \"11\" required /> </ form > Adem\u00e1s, utilizando las pseudoclases CSS de validaci\u00f3n :valid e :invalid podemos aplicar estilos a los campos <input> y <textarea> teniendo en cuenta su validaci\u00f3n. Aplicando el siguiente c\u00f3digo CSS se mostrar\u00e1 un fondo verde o rojo, dependiendo de si cumple o no la validaci\u00f3n, respectivamente: input:valid, textarea:valid { background: green; } input:invalid, textarea:invalid { background: red; } En el caso particular de un campo <input type=\"email\"> se puede indicar el atributo multiple para permitir varios emails y que valide correctamente en el caso de estar realizando una validaci\u00f3n HTML5. Patrones de validaci\u00f3n HTML5 \u00b6 No obstante, aunque los atributos de validaci\u00f3n b\u00e1sicos son muy interesantes y pueden facilitarnos la tarea de validaci\u00f3n, en muchos casos son insuficientes. Para ello tenemos los patrones de validaci\u00f3n HTML5 , mucho m\u00e1s potentes y flexibles, que nos permitir\u00e1n ser mucho m\u00e1s espec\u00edficos utilizando expresiones regulares para validar datos. Una expresi\u00f3n regular es una cadena de texto que representa un posible patr\u00f3n de coincidencias, que aplicaremos mediante el atributo pattern en los campos que queramos validar. Para ello hay que conocer algunas caracter\u00edsticas b\u00e1sicas de las expresiones regulares: Expresi\u00f3n regular Car\u00e1cter especial Significado Descripci\u00f3n . Punto Comod\u00edn Cualquier car\u00e1cter (o texto de tama\u00f1o 1) A|B Pipe Opciones l\u00f3gicas Opciones alternativas (o A o B ) C(A|B) Par\u00e9ntesis Agrupaciones Agrupaciones alternativas (o CA o CB ) [0-9] Corchetes Rangos de car\u00e1cteresUn d\u00edgito (del 0 al 9 ) [A-Z] Una letra may\u00fascula de la A a la Z [^A-Z] ^ en corchetes Rango de exclusi\u00f3n Una letra que no sea may\u00fascula de la A a la Z [0-9]* Asterisco Cierre o clausura Un d\u00edgito repetido 0 \u00f3 m\u00e1s veces (vac\u00edo incluido) [0-9]+ Signo m\u00e1s Cierre positivo Un d\u00edgito repetido 1 \u00f3 m\u00e1s veces [0-9]{3} Llaves Coincidencia exacta Cifra de 3 d\u00edgitos (d\u00edgito repetido 3 veces) [0-9]{2,4} Coincidencia (rango) Cifra de 2 a 4 d\u00edgitos (rep. de 2 a 4 veces) b? Interrogaci\u00f3n Car\u00e1cter opcional El car\u00e1cter b puede aparecer o puede que no \\. Barra invertida Escape El car\u00e1cter . literalmente (no como comod\u00edn) Ejemplos de patrones HTML5 \u00b6 Para clarificar estos conceptos y entenderlos mejor, vamos a mostrar algunos ejemplos de campos con validaciones HTML5 en casos reales, y as\u00ed afianzar conceptos sobre expresiones regulares y su aplicaci\u00f3n en los atributos pattern : Tipo de campo: Nombre de usuario Campo obligatorio: required . Entre 5-40 car\u00e1cteres: minlength=\"5\" maxlength=\"40\" S\u00f3lo se permiten letras (may\u00fasculas y min\u00fasculas) y n\u00fameros: pattern=\"[A-Za-z0-9]+\" N\u00f3tese que de no incluir los atributos minlength y maxlength el usuario no tendr\u00eda limitaci\u00f3n en cuanto al tama\u00f1o. Esto tambi\u00e9n puede incorporarse en la propia expresi\u00f3n regular, y prescindir de dichos atributos: < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- Nombre de usuario. Obligatorio, entre 5-40 car\u00e1cteres S\u00f3lo se permiten letras y n\u00fameros --> < input type = \"text\" name = \"nombre\" placeholder = \"Su nombre de usuario\" required pattern = \"[A-Za-z0-9]{5,40}\" title = \"Letras y n\u00fameros. Tama\u00f1o m\u00ednimo: 5. Tama\u00f1o m\u00e1ximo: 40\" /> </ form > Sin embargo, en este caso, no se limitar\u00e1 al usuario a la hora de escribir, como hace maxlength , sino que permitir\u00e1 al usuario escribir la informaci\u00f3n que desee y en caso de no pasar la validaci\u00f3n, mostrar\u00e1 un mensaje de advertencia y no lo dejar\u00e1 continuar hasta que termine. Podemos ampliar el mensaje de advertencia incluyendo el texto en el atributo title . En el siguiente caso, se pide al usuario que indique el modelo de coche que posee, en un posible formulario de servicio t\u00e9cnico. Los modelos posibles son A1, A3, A4 y A15. En lugar de mostrar una lista de selecci\u00f3n , podemos mostrar un campo de texto y colocar una validaci\u00f3n como la siguiente: Tipo de campo: Modelo de coche Campo obligatorio: required . S\u00f3lo se permiten las opciones: A1, A3, A4 y A15 N\u00f3tese que se permite tanto el formato a1 como el formato A1 . Expresiones regulares \u00b6 A continuaci\u00f3n, algunas herramientas \u00fatiles para crear o probar expresiones regulares : Herramienta Descripci\u00f3n RegExR Herramienta para construir y testear expresiones regulares. Debuggex Herramienta de creaci\u00f3n gr\u00e1fica de expresiones regulares. RegEx101 Herramienta para construir y testear expresiones regulares. RegExBuddy Herramienta profesional para el trabajo con expresiones regulares. RegExplained Herramienta visual para explicar el funcionamiento de una expresi\u00f3n regular. RegExper Herramienta para generar diagramas visuales de expresiones regulares. Rubular Editor de expresiones regulares. Fuente: Lenguaje de Html por Manz","title":"Etiquetas de formularios"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#etiquetas-de-formularios","text":"","title":"Etiquetas de formularios"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#creacion-de-un-formulario","text":"HTML5 proporciona una serie de etiquetas interesantes para utilizar en formularios ( adem\u00e1s de las ya existentes en versiones anteriores ). Los formularios son una forma sencilla de establecer mecanismos para que el usuario pueda introducir informaci\u00f3n en una p\u00e1gina web de forma sencilla e intuitiva, y el sitio web sea capaz de procesarla correctamente y a\u00f1adirla en una base de datos de la p\u00e1gina, enviarla por email o procesarla para mostrar informaci\u00f3n final al usuario. Nuestros objetivos al crear un formulario HTML5 deben ser los siguientes: Hacer lo m\u00e1s sencillo posible el proceso de inserci\u00f3n de datos por parte del usuario. Intentar que la experiencia de usuario sea lo m\u00e1s agradable posible. Intentar que los datos introducidos est\u00e9n en un formato predecible y esperado. Reducir los errores al introducir datos en la medida de lo posible. Comunicar claramente si ocurren errores al introducir datos.","title":"Creaci\u00f3n de un formulario"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#contenedor-de-formulario","text":"Para comenzar con la creaci\u00f3n de un formulario, el primer paso es indicar una etiqueta contenedora <form> , que incluir\u00e1 toda la informaci\u00f3n que se quiere recoger en ese formulario: < form ></ form > De esta forma, se puede incluso crear varias etiquetas <form> por p\u00e1gina, pudiendo as\u00ed crear varios formularios diferentes, como por ejemplo, uno para realizar una b\u00fasqueda en la p\u00e1gina, otro para dejar un comentario y otro para enviar un email al autor. !!! Tambi\u00e9n es posible colocar campos de formulario fuera de una etiqueta <form> , sin embargo, no tendr\u00e1n un funcionamiento espec\u00edfico y necesitar\u00eda manejarse desde Javascript. La etiqueta <form> dispone de varios atributos para utilizar: Atributo Valor Descripci\u00f3n action URL Direcci\u00f3n URL del back-end donde se enviar\u00e1 la informaci\u00f3n del formulario. method get | post M\u00e9todo HTTP de env\u00edo. GET a trav\u00e9s de URL, POST para env\u00edo extenso. name nombre Nombre del formulario. \u00datil para procesar posteriormente. target destino Nombre del lugar donde se abrir\u00e1 el formulario. \\_blank para nueva pesta\u00f1a. enctype _tipo_Codificaci\u00f3n para el env\u00edo del formulario. Importante para env\u00edo de archivos. accept-charset codificaci\u00f3n Fuerza a utilizar una codificaci\u00f3n en los par\u00e1metros de texto del formulario. autocomplete on | off Activa o desactiva el autocompletado para todos los campos del formulario. novalidate Boolean Con este atributo presente, el formulario obvia la validaci\u00f3n HTML5. As\u00ed pues, un primer formulario base de ejemplo ( a\u00fan vac\u00edo, sin campos de entrada de datos, s\u00f3lo con la etiqueta contenedora ) podr\u00eda ser el que vemos en el siguiente ejemplo: < form name = \"formulario\" method = \"post\" action = \"/send.php\" ></ form > N\u00f3tese que se definen 3 atributos base en <form> : En action se indica la direcci\u00f3n donde se enviar\u00e1n los datos cuando el usuario pulse el bot\u00f3n de enviar. En caso de omitirse esta informaci\u00f3n, se enviar\u00edan los datos a la propia p\u00e1gina actual, volvi\u00e9ndola a cargar. En method se define el tipo de m\u00e9todo HTTP a utilizar. Utilizaremos el m\u00e9todo GET cuando nos interese que los datos se env\u00eden en la propia URL. En caso contrario, POST . En name el nombre del formulario para cuando necesitemos hacer referencia a \u00e9l ( generalmente desde Javascript o desde backend ).","title":"Contenedor de formulario"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#tipos-de-datos","text":"Para que un usuario pueda introducir informaci\u00f3n en un formulario, requiere que se le indiquen una serie de campos que le permitan introducir la informaci\u00f3n de la forma m\u00e1s c\u00f3moda y r\u00e1pida posible. Para ello, debemos saber a priori que tipo de dato le vamos a pedir al usuario ( texto, num\u00e9rico, fecha, etc... ), y as\u00ed saber que tipo de campo de entrada de datos es m\u00e1s conveniente colocar. Informaci\u00f3n a obtener Ejemplos Etiqueta y atributo a utilizar Informaci\u00f3n de texto Nombres, apellidos, direcciones f\u00edsicas... <input> - <textarea> N\u00fameros o cantidades Edades, precios, cuant\u00edas... <input> para n\u00fameros Fechas u horas Fecha de nacimiento, inicio de evento... <input> para fechas Verdadero/falso Si/No, Opci\u00f3n A/B, ON/OFF... <input type=\"checkbox\"> Opci\u00f3n \u00fanica (Elegir una opci\u00f3n de 2 \u00f3 m\u00e1s posibles) <input type=\"radio\"> - <select> Varias opciones (Elegir varias opciones de 2 \u00f3 m\u00e1s posibles) <select multiple> - <input type=\"checkbox\"> Opci\u00f3n \u00fanica abierta (Elegir una opci\u00f3n o indicar una propia) <datalist> Selecci\u00f3n de color (Escoger un color o tonalidad) <input type=\"color\"> Selecci\u00f3n de archivo (Escoger un archivo para enviar) <input type=\"file\"> En HTML5, de forma nativa, el navegador proporciona estos campos de entrada en los que el usuario puede introducir informaci\u00f3n espec\u00edfica. Cada uno de ellos tiene sus propias particularidades y caracter\u00edsticas, adem\u00e1s de que hay que tener cuidado con algunos, ya que pueden no estar soportados por completo en todos los navegadores.","title":"Tipos de datos"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#campos-de-entrada","text":"Una de las etiquetas que m\u00e1s utilizaremos para obtener informaci\u00f3n a modo de campo de entrada de datos en un formulario es la etiqueta <input> . Su funcionalidad m\u00e1s utilizada es la de servir como campo de texto: < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- Primer campo de entrada de datos --> Nombre de usuario: < input type = \"text\" name = \"nombre\" value = \"\" /> <!-- Bot\u00f3n de env\u00edo del formulario --> < input type = \"submit\" value = \"Enviar\" /> </ form > En este ejemplo tenemos un peque\u00f1o formulario donde se le pide al usuario su nombre con la etiqueta <input type=\"text\"> y, posteriormente, se coloca un bot\u00f3n para enviar el formulario con la etiqueta <input type=\"submit\"> . Aunque vemos que se trata de la misma etiqueta <input> , dependiendo del valor indicado en el atributo type realizar\u00e1 una tarea u otra.","title":"Campos de entrada"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#la-etiqueta-input","text":"La etiqueta <input> tiene una gran cantidad de atributos ( algunos dependiendo del valor de type, que mostraremos m\u00e1s adelante ). Estos son los atributos que podemos utilizar de forma general para pr\u00e1cticamente cualquier campo de entrada de datos con la etiqueta <input> : Atributo Valor Descripci\u00f3n type tipo de campo Indica el tipo de campo del que se trata. name nombre del campo Indica el nombre del campo para hacer referencia m\u00e1s tarde. value valor por defecto Indica el valor inicial que tendr\u00e1 ese campo de datos. form placeholder sugerencia Indica una sugerencia al usuario antes de escribir. size n\u00famero Tama\u00f1o visual ( n\u00famero de car\u00e1cteres ) del campo de datos. autocomplete on | off Activa o desactiva el autocompletado para este campo. autofocus - Establece el foco ( coloca el cursor ) en este campo al cargar la p\u00e1gina. El atributo type nos permitir\u00e1 indicar que tipo de campo de dato mostrar\u00e1 en el navegador ( text, number, date... los veremos m\u00e1s adelante ). Mediante el atributo name le daremos un nombre al campo de texto, as\u00ed cuando enviemos la informaci\u00f3n del formulario, podremos manejarla desde javascript o desde el back-end haciendo referencia a dicho nombre.","title":"La etiqueta \"input\""},{"location":"desarrollo/html/05-etiquetas_de_formularios/#controles-campos-de-texto","text":"La etiqueta HTML <input> puede tomar varios valores diferentes en su atributo type para permitir al usuario introducir informaci\u00f3n de texto , adem\u00e1s de otra etiqueta denominada <textarea> para cantidades de texto m\u00e1s grandes como varios p\u00e1rrafos. Seg\u00fan nuestras necesidades, tendremos varias opciones: Tipo de informaci\u00f3n a obtener Etiqueta a utilizar Ejemplo Texto alfanum\u00e9rico libre (texto corto) <input type=\"text\"> Texto para b\u00fasquedas <input type=\"search\"> N\u00famero de tel\u00e9fono o m\u00f3vil <input type=\"tel\"> Direcci\u00f3n URL <input type=\"url\"> Direcci\u00f3n de correo email <input type=\"email\"> Clave o contrase\u00f1a <input type=\"password\"> Campo oculto (no mostrar al usuario) <input type=\"hidden\"> Texto alfanum\u00e9rico libre (extenso) <textarea> Esto es un campo de texto m\u00e1s extenso, \u00fatil para textos de uno o m\u00e1s p\u00e1rrafos.","title":"Controles: Campos de texto"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#texto-alfanumerico-corto","text":"En primer lugar, si lo que queremos es guardar informaci\u00f3n de texto libremente, la opci\u00f3n m\u00e1s habitual es optar por utilizar el campo de entrada de datos <input type=\"text\"> . Este atributo es el que se utiliza en las etiquetas <input> por defecto si no indicamos ning\u00fan atributo type . Es un campo de texto ideal para fragmentos cortos de informaci\u00f3n: nombres, apellidos, direcciones f\u00edsicas, etc... En resumen, peque\u00f1os fragmentos de texto menores a un par de palabras. Un sencillo ejemplo: < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- Campo de entrada de datos --> < input type = \"text\" name = \"nombre\" autocomplete = \"off\" placeholder = \"Introduce tu nombre de usuario\" /> </ form > Obs\u00e9rvese que adem\u00e1s hemos indicado dos atributos adicionales: Autocompletado desactivado : No aparecer\u00e1 informaci\u00f3n escrita anteriormente en ese campo. Placeholder : Es el texto que aparecer\u00e1 a modo de sugerencia/ayuda para el usuario ( en gris, ligeramente menos visible que el texto del campo ). En cuanto el usuario escriba en el mismo, el mensaje desaparecer\u00e1. S\u00f3lo volver\u00eda a aparecer si el usuario decide borrar nuevamente la informaci\u00f3n que ha escrito en ese campo. !!! Es importante no escribir sugerencias de usuario en el atributo value , sino en placeholder . Utiliza el atributo value s\u00f3lo si quieres indicar valores por defecto del campo.","title":"Texto alfanum\u00e9rico corto"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#textos-cortos-especificos","text":"Por otro lado, en HTML5 se a\u00f1aden nuevos tipos para etiquetas <input> como search , tel , url o email . Aunque la idea es la misma que un campo de texto y en principio no notaremos ning\u00fan cambio, estos campos espec\u00edficos tienen como objetivo hacer m\u00e1s sencillo el proceso de introducci\u00f3n de datos por parte del usuario. Si utilizamos tel en vez de text , al hacer clic en el campo del formulario desde un smartphone/tablet, se nos desplegar\u00e1 el teclado num\u00e9rico en lugar del teclado habitual, lo que nos facilitar\u00e1 en gran medida escribir el dispositivo m\u00f3vil, ya que la intenci\u00f3n es utilizar s\u00f3lo caracteres para n\u00fameros. Lo mismo ocurre con los campos de tipo email o url , ya que nos mostrar\u00e1 un teclado con botones especiales con @ , .com u otros atajos r\u00e1pidos: < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- Campo de entrada de tel\u00e9fono --> Tel\u00e9fono: < input type = \"tel\" name = \"telefono\" placeholder = \"+XX XXX XXXXXX\" /> <!-- Campo de entrada de email --> Email: < input type = \"email\" name = \"correo\" placeholder = \"nombre@dominio.com\" /> <!-- Campo de entrada de url --> P\u00e1gina web: < input type = \"url\" name = \"web\" placeholder = \"https://pagina.com/\" /> </ form > El atributo type tambi\u00e9n permite el valor search , que es muy similar a los anteriores. Se utiliza para campos orientados a la b\u00fasqueda de palabras o textos en un sitio web, mostrando desde dispositivos m\u00f3viles una x para borrar la palabra escrita con un s\u00f3lo clic.","title":"Textos cortos espec\u00edficos"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#campos-para-contrasenas","text":"La etiqueta <input> tiene el valor password en su atributo type para crear campos de texto orientados a almacenar informaci\u00f3n sensible como podr\u00edan ser contrase\u00f1as, claves o pins num\u00e9ricos. Esto no lo convertir\u00eda en un campo m\u00e1s seguro t\u00e9cnicamente, sino que simplemente muestra puntos o asteriscos en lugar del texto visualmente, protegi\u00e9ndolo visualmente de ojos ajenos. Por otro lado tambi\u00e9n tenemos el tipo hidden , que se puede utilizar cuando queremos enviar informaci\u00f3n en el formulario, pero que no queremos que el navegador lo muestre visualmente en el formulario, como por ejemplo un c\u00f3digo num\u00e9rico o una id informativa: < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- Campo de entrada de usuario --> Usuario:` < input type = \"text\" name = \"nombre\" placeholder = \"Por ejemplo, Juan\" /> <!-- Campo de entrada de password --> Password: < input type = \"password\" name = \"pass\" placeholder = \"Contrase\u00f1a\" /> <!-- Campo oculto: Este campo no se ver\u00e1 en el navegador --> < input type = \"hidden\" name = \"informacion\" value = \"72625\" /> </ form >","title":"Campos para contrase\u00f1as"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#campos-extensos-de-texto","text":"Por \u00faltimo, si queremos indicar un campo para escribir textos m\u00e1s extensos, lo m\u00e1s apropiado es utilizar la etiqueta <textarea> , que tiene tambi\u00e9n algunos atributos adicionales: Atributo Valor Descripci\u00f3n cols n\u00famero de columnas N\u00famero de car\u00e1cteres que caben en horizontal ( columnas ). rows n\u00famero de filas N\u00famero de car\u00e1cteres que caben en vertical ( filas ). wrap soft | hard Indica si el texto debe enviarse recolocado o como se ve visualmente. Esta etiqueta nos permite a\u00f1adir gran cantidad de texto, ya que las etiquetas <input type=\"text\"> s\u00f3lo nos permiten escribir una l\u00ednea de texto y es muy inc\u00f3modo si nuestra intenci\u00f3n es escribir grandes cantidades de texto. Sus atributos cols y rows nos permiten aumentar el tama\u00f1o de ancho y alto, as\u00ed como indicar si queremos que se modifique la apariencia visual del p\u00e1rrafo al enviar al formulario con el atributo wrap . Un ejemplo b\u00e1sico de esta etiqueta <textarea> : < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- Area de texto extensa --> < textarea name = \"texto\" cols = \"80\" rows = \"10\" placeholder = \"Escribe aqu\u00ed el texto...\" > Este es el valor por defecto </ textarea > </ form > Existen unas librer\u00edas de javascript para \u00abenriquecer\u00bb y ampliar la funcionalidad de estas \u00e1reas de texto, permitiendo realizar ciertas tareas visuales como fragmentos en negrita, cursiva, im\u00e1genes, tablas, etc... Este tipo de librer\u00edas se llaman editores WYSIWYG ( lo que ves es lo que obtienes ).","title":"Campos extensos de texto"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#comprobacion-de-ortografia","text":"En todos estos campos, tanto etiquetas <input> como <textarea> , podemos utilizar un atributo denominado spellcheck mediante el cu\u00e1l indicamos al navegador si debe revisar la ortograf\u00eda del texto escrito en dicho elemento ( en el cu\u00e1l aparece una l\u00ednea roja inferior cuando la palabra no se encuentra en el diccionario ). < form name = \"formulario\" method = \"post\" action = \"/send.php\" > < input type = \"text\" name = \"objeto1\" value = \"camion azul \" spellcheck = \"true\" /> < input type = \"text\" name = \"objeto2\" value = \"camion azul \" spellcheck = \"false\" /> < textarea cols = \"40\" name = \"objeto3\" spellcheck = \"true\" > camion azul </ textarea > </ form > Si el atributo spellcheck est\u00e1 a true , el navegador comprobar\u00e1 la ortograf\u00eda, si se encuentra a false , no la comprobar\u00e1. Si no se especifica el atributo, el navegador busca el atributo spellcheck en los elementos contenedores padres, y si no lo encuentra, toma el valor por defecto, que es true . En el ejemplo anterior, hemos desactivado la comprobaci\u00f3n de ortograf\u00eda en el segundo campo ( objeto2 ), por lo que al pulsar sobre \u00e9l no aparece ninguna l\u00ednea roja, a pesar de estar mal escrita. En los dem\u00e1s campos si ocurre.","title":"Comprobaci\u00f3n de ortograf\u00eda"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#controles-campos-numericos","text":"Si deseamos obtener informaci\u00f3n o cantidades num\u00e9ricas en un formulario, tenemos a nuestra disposici\u00f3n dos tipos de etiquetas <input> .","title":"Controles: Campos num\u00e9ricos"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#tipos-de-campos-numericos","text":"La primera de ellas es number , un tipo con el que podremos utilizar un campo de texto donde el usuario s\u00f3lo puede escribir n\u00fameros ( o car\u00e1cteres como + , - o el n\u00famero e , entre otros ). La diferencia respecto a otros campos es que al mover el rat\u00f3n sobre \u00e9l, nos aparecen dos flechas que nos permiten aumentar o disminuir la cantidad num\u00e9rica del campo. Tipo de informaci\u00f3n a obtener Etiqueta a utilizar Ejemplo N\u00famero o cantidad num\u00e9rica <input type=\"number\"> Rango num\u00e9rico <input type=\"range\"> Por otro lado, tenemos la etiqueta <input type=\"range\"> , que en lugar de mostrarnos un campo de texto que podemos modificar introduciendo directamente el n\u00famero, podemos hacerlo mediante un \u00abslider\u00bb o barra de desplazamiento que representa un n\u00famero entre un rango num\u00e9rico espec\u00edfico.","title":"Tipos de campos num\u00e9ricos"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#minimos-maximos-y-saltos","text":"Tanto en una como en otra podemos indicar los atributos min , max y step , que veremos m\u00e1s adelante en el tema de validaciones HTML5 , para indicar l\u00edmites y restricciones: Atributo Valor Significado del atributo min n\u00famero m\u00ednimo N\u00famero m\u00ednimo permitido para pasar validaci\u00f3n. max n\u00famero m\u00e1ximo N\u00famero m\u00e1ximo permitido para pasar validaci\u00f3n. step incremento o decremento Variaci\u00f3n permitida entre n\u00fameros para aceptar validaci\u00f3n. Esto no significa que el usuario no pueda introducir un n\u00famero menor que el indicado en el atributo min , por ejemplo, sino que si el usuario introduce ese n\u00famero, los datos del campo no ser\u00e1n v\u00e1lidos, y no se podr\u00e1 enviar el formulario hasta que se cumpla esa restricci\u00f3n. Un ejemplo de c\u00f3digo: < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- N\u00famero entre 10 y 50, de 5 en 5. Valor por defecto: 25 --> < input type = \"number\" name = \"numero\" value = \"25\" min = \"10\" max = \"50\" step = \"5\" /> <!-- Su misma versi\u00f3n, utilizando el slider en un rango num\u00e9rico --> < input type = \"range\" name = \"numrango\" value = \"25\" min = \"10\" max = \"50\" step = \"5\" /> </ form > Las diferencias son las siguientes: En el campo con type a number es posible introducir manualmente n\u00fameros no permitidos. En el campo con type a range no es posible salirse del rango indicado. Tanto en uno como en otro, no es posible enviar el formulario si no se cumplen las restricciones. De cualquier forma, si indicamos min=10 , max=50 y step=5 en una etiqueta num\u00e9rica <input> , los valores permitidos por el usuario ser\u00edan 10 , 15 , 20 , 25 , 30 , 35 , 40 , 45 y 50 .","title":"M\u00ednimos, m\u00e1ximos y saltos"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#controles-campos-de-fechahora","text":"Si nuestra intenci\u00f3n es que el usuario introduzca una fecha concreta, en lugar de utilizar un campo de texto, lo ideal ser\u00eda utilizar un control llamado datepicker . B\u00e1sicamente, se trata de un calendario donde el usuario puede seleccionar el d\u00eda, mes y a\u00f1o que desee, simplemente a golpe de clic, ahorr\u00e1ndose el escribirlo y simplificando el formato a utilizar, ya que puede ser muy complicado guardar siempre la fecha en un mismo formato. Adem\u00e1s, tambi\u00e9n existe otro control llamado timepicker , que en lugar de solicitar al usuario una fecha, solicita una hora. Ambos campos est\u00e1n a nuestra disposici\u00f3n de forma nativa en HTML5, aunque su interfaz depende del navegador y algunos no tienen soporte para todas sus caracter\u00edsticas. En HTML5.1, adem\u00e1s, se incluyen nuevos campos que tambi\u00e9n permiten obtener fecha y hora ( en un mismo campo ), un mes espec\u00edfico o el n\u00famero de semana del a\u00f1o, este \u00faltimo algo que se utiliza bastante en EEUU, aunque no demasiado en Espa\u00f1a.","title":"Controles: Campos de fecha/hora"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#fecha-y-hora","text":"Los atributos type de fecha/hora existentes en los campos <input> ser\u00edan los dos primeros, mientras que los tres \u00faltimos se a\u00f1adir\u00e1n en HTML5.1: Tipo de informaci\u00f3n a obtener Etiqueta a utilizar Ejemplo Fecha <input type=\"date\"> Hora <input type=\"time\"> Fecha y hora local <input type=\"datetime-local\"> Mes <input type=\"month\"> Semana <input type=\"week\"> Veamos alg\u00fan ejemplo b\u00e1sico con las dos primeras, <input type=\"date\"> e <input type=\"time\"> : < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- Campo de entrada de fecha --> Selecciona la fecha deseada: < input type = \"date\" name = \"fecha\" min = \"2018-03-25\" max = \"2018-05-25\" step = \"2\" /> <!-- Campo de entrada de hora --> Selecciona la hora deseada: < input type = \"time\" name = \"hora\" min = \"18:00\" max = \"21:00\" step = \"3600\" /> </ form > Como se puede ver, se pueden indicar los atributos min y max en campos <input> de fecha, donde actuar\u00e1n estableciendo un l\u00edmite de fecha m\u00ednima o m\u00e1xima permitida, as\u00ed como el campo step se podr\u00e1 utilizar para restricciones al variar unidades. !!! Menci\u00f3n especial al apartado step donde hemos indicado el n\u00famero de d\u00edas ( en el caso de la fecha ), por lo que s\u00f3lo aceptar\u00e1 d\u00edas de dos en dos desde el 25 de marzo de 2018 hasta el 25 de mayo de 2018. Por su parte, el campo de la hora s\u00f3lo permitir\u00e1 variar las horas, ya que se ha indicado 3600 segundos ( salto cada 60x60seg, o sea cada hora ) en el atributo step .","title":"Fecha y hora"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#fecha-y-hora-local","text":"Como comentabamos, los tres \u00faltimos campos pertenecen a la especificaci\u00f3n de HTML 5.1, aunque en algunos navegadores ya est\u00e1n implementados. Con ellos podremos seleccionar fecha y hora local, as\u00ed como meses especificos o semanas concretas del a\u00f1o: < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- Campo de entrada de mes --> Selecciona el mes deseado: < input type = \"month\" name = \"mes\" value = \"2018-05\" min = \"2018-02\" max = \"2018-06\" step = \"2\" /> <!-- Campo de entrada de semana --> Selecciona la semana deseada: < input type = \"week\" name = \"semana\" value = \"2018-W18\" min = \"2018-W10\" max = \"2018-W20\" step = \"2\" /> </ form > En el primer campo <input> seleccionamos el mes con el formato yyyy-mm , donde yyyy es la cifra de 4 d\u00edgitos del a\u00f1o y mm el mes con 2 d\u00edgitos. En el segundo campo <input> seleccionamos la semana con el formato yyyy-Wss , donde nuevamente yyyy es el a\u00f1o en formato de 4 d\u00edgitos, W es siempre esa letra y ss es el n\u00famero de la semana en formato de 2 d\u00edgitos. Obs\u00e9rvese que tambi\u00e9n se aplica el atributo step=\"2\" lo que hace que s\u00f3lo se puedan seleccionar semanas o meses impares . Vigilar bien la compatibilidad con navegadores de estos campos.","title":"Fecha y hora local"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#controles-casillas-o-botones","text":"Si queremos definir opciones que el usuario debe elegir o escoger, en muchos casos lo m\u00e1s apropiado suele ser utilizar casillas de verificaci\u00f3n o botones de opci\u00f3n ( botones de radio ). La diferencia principal entre estos dos tipos de botones es la siguiente: Las casillas de verificaci\u00f3n se marcan para establecer una opci\u00f3n como activada ( verdadero ). Los botones de radio se marcan para elegir s\u00f3lo una opci\u00f3n de varias posibles . Tipo de informaci\u00f3n a obtener Etiqueta a utilizar Ejemplo Casilla de verificaci\u00f3n (activado o desactivado) <input type=\"checkbox\"> Bot\u00f3n radio (casilla de opci\u00f3n \u00fanica) <input type=\"radio\">","title":"Controles: Casillas o botones"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#casillas-de-verificacion","text":"Las casillas de verificaci\u00f3n permiten mostrar al usuario la posibilidad de marcar una opci\u00f3n como activada, verdadera o afirmativa, o dejarla sin marcar, lo que representa una opci\u00f3n desactivada, falsa o negativa. !!! Se puede a\u00f1adir el atributo checked para forzar que esa casilla est\u00e9 activada inicialmente.","title":"Casillas de verificaci\u00f3n"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#botones-de-radio","text":"Los botones de radio se suelen utilizar cuando el usuario debe elegir s\u00f3lo una opci\u00f3n espec\u00edfica de varias disponibles. Si las opciones son demasiadas, se suele optar por una lista de selecci\u00f3n . Para tener varios botones radio en un mismo grupo, y que s\u00f3lo se active uno de ellos, el truco est\u00e1 en colocarle el mismo nombre en el atributo name a cada opci\u00f3n. Luego, en el atributo value le colocamos el valor que habr\u00e1 seleccionado el usuario de haber marcado esa opci\u00f3n. Un ejemplo de ambos tipos de botones: < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- Botones de opci\u00f3n --> < p > Sexo: < input type = \"radio\" name = \"sexo\" value = \"H\" /> Hombre < input type = \"radio\" name = \"sexo\" value = \"M\" /> Mujer </ p > <!-- Casillas de verificaci\u00f3n (marcada por defecto) --> < input type = \"checkbox\" name = \"empresa\" checked /> \u00bfEres aut\u00f3nomo/empresa? </ form > De la misma forma que en las casillas de verificaci\u00f3n, si queremos que un bot\u00f3n de radio se encuentre marcado por defecto, le a\u00f1adimos el atributo checked . !!! Si el usuario no marca una casilla de verificaci\u00f3n o alguna de las opciones de un bot\u00f3n radio, esos datos del formulario no se env\u00edan.","title":"Botones de radio"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#controles-listas-de-seleccion","text":"Si las casillas de verificaci\u00f3n se nos quedan cortas o necesitamos mostrar una lista m\u00e1s extensa de datos, quiz\u00e1s ser\u00eda conveniente utilizar una lista de selecci\u00f3n , tambi\u00e9n llamada frecuentemente combo o lista desplegable . Estas listas nos permiten mostrar al usuario varias opciones disponibles para que se decanten por una. Hay dos tipos de listas seleccionables : Tipo de informaci\u00f3n a obtener Etiqueta a utilizar Ejemplo Lista (cerrada) de opciones <select> y <option> option Lista (abierta) de opciones <datalist> option 1 option 2","title":"Controles: Listas de selecci\u00f3n"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#listas-seleccionables","text":"Su forma m\u00e1s b\u00e1sica se compone de una etiqueta contenedora <select> que en su interior incluir\u00e1 varias etiquetas <option> , una por opci\u00f3n posible a elegir. Si queremos que una opci\u00f3n de la lista est\u00e9 marcada por defecto, incluiremos el atributo selected : < form name = \"formulario\" method = \"post\" action = \"http://pagina.com/send.php\" > <!-- Lista de selecci\u00f3n --> Selecciona la opci\u00f3n deseada: < select name = \"combo\" > <!-- Opciones de la lista --> < option value = \"1\" > Opci\u00f3n 1 </ option > < option value = \"2\" selected > Opci\u00f3n 2 </ option > <!-- Opci\u00f3n por defecto --> < option value = \"3\" > Opci\u00f3n 3 </ option > </ select > </ form >","title":"Listas seleccionables"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#listas-seleccionables-multiples","text":"A la etiqueta <select> le podemos aplicar el atributo multiple , de modo que desaparecer\u00e1 la posibilidad de desplegar la lista, mostrando directamente las opciones en otro formato que har\u00e1 posible pulsar la tecla CTRL y marcar varias de las opciones de la lista. Tambi\u00e9n podemos utilizar la etiqueta <optgroup> , que es una etiqueta contenedora para agrupar varias etiquetas <option> . De esta forma, podemos crear peque\u00f1as agrupaciones para tener m\u00e1s organizada la lista de opciones. La propia etiqueta <optgroup> no es seleccionable por el usuario, aparecer\u00e1 en negrita y s\u00f3lo estar\u00e1 disponible para organizar las opciones: < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- Lista de selecci\u00f3n m\u00faltiple --> < select name = \"combo\" multiple > <!-- Formato alternativo con atributo label --> < optgroup label = \"Opciones b\u00e1sicas\" > < option value = \"1\" label = \"Opcion 1\" > </ option > </ optgroup > < optgroup label = \"Opciones avanzadas\" > < option value = \"2\" label = \"Opcion 2\" > </ option > < option value = \"3\" label = \"Opcion 3\" > </ option > </ optgroup > </ select > </ form > Obs\u00e9rvese que en esta segunda lista hemos utilizado el atributo label que es un formato alternativo al ejemplo anterior.","title":"Listas seleccionables m\u00faltiples"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#listas-seleccionables-abiertas","text":"Por \u00faltimo, tambi\u00e9n podemos crear una lista abierta , donde el usuario puede seleccionar opciones sugeridas mediante un <datalist> o indicar la suya propia escribi\u00e9ndola manualmente. Para ello, utilizaremos una etiqueta <datalist> que funcionar\u00e1 exactamente igual que un <select> , conteniendo las opciones posibles en etiquetas <option> . Al hacer esto, y al contrario que las etiquetas <select> , el elemento <datalist> no mostrar\u00e1 visualmente nada. Sin embargo, la diferencia radica en que le daremos un atributo id al <datalist> y lo combinaremos con un campo de texto <input> a trav\u00e9s del atributo list : < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- Campo de texto combinado con lista de opciones --> < input type = \"text\" list = \"items\" /> <!-- Lista de opciones --> < datalist id = \"items\" > < option value = \"1\" > Opci\u00f3n 1 </ option > < option value = \"2\" > Opci\u00f3n 2 </ option > < option value = \"3\" > Opci\u00f3n 3 </ option > </ datalist > </ form > De esta forma, tenemos una lista de selecci\u00f3n donde podemos marcar las opciones del <datalist> pero adem\u00e1s se nos ofrece la opci\u00f3n de escribir manualmente nuestra propia opci\u00f3n. Nota En listas con muchas opciones, tambi\u00e9n se tiene la ventaja que al escribir un primer car\u00e1cter, s\u00f3lo nos aparecen los \u00edtems que comienzan por ese caracter, lo que lo hace ideal para crear listas de opciones extensas o de forma din\u00e1mica con Javascript. No obstante, cuidado con el soporte de este tipo de lista, que puede no estar disponible para algunos navegadores https://caniuse.com/datalist","title":"Listas seleccionables abiertas"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#controles-seleccion-de-color","text":"En HTML5 se incluye un nuevo campo de entrada de datos para seleccionar un color. Dicho campo facilita un interfaz conocido como colorpicker , que permite al usuario seleccionar un color espec\u00edfico, variando sus par\u00e1metros, generalmente desde un esquema de colores RGB .","title":"Controles: Selecci\u00f3n de color"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#interfaz-del-colorpicker","text":"La etiqueta que utilizaremos para mostrar esta interfaz ser\u00e1 <input> con el atributo type a color . Ten en cuenta que el interfaz puede variar dependiendo del sistema operativo: Tipo de informaci\u00f3n a obtener Etiqueta a utilizar Ejemplo Campo de entrada de datos de selecci\u00f3n de color <input type=\"color\"> El usuario puede elegir un color en su interfaz de selecci\u00f3n de colores y este color es guardado en el campo en formato hexadecimal . Tambi\u00e9n se puede indicar en el atributo value para establecer un color por defecto: < form name = \"formulario\" method = \"post\" action = \"http://pagina.com/send.php\" > <!-- Selecci\u00f3n de color --> Selecciona el color deseado: <!-- Color verde por defecto HEX(1B, F4, 4A) --> < input type = \"color\" name = \"color\" value = \"#1BF44A\" /> </ form > El soporte de este campo de selecci\u00f3n de colores en los diferentes navegadores es el siguiente: https://caniuse.com/#feat=input-color","title":"Interfaz del ColorPicker"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#controles-seleccion-de-archivos","text":"HTML nos proporciona un campo de entrada de datos para seleccionar archivos, adjuntarlos y enviarlos junto al resto del formulario. Esta interfaz habitualmente se muestra como un bot\u00f3n \u00ab Examinar... \u00bb o \u00ab Seleccionar archivo \u00bb junto a un texto del archivo seleccionado por el usuario. Para colocar este campo en nuestro formulario se indicar\u00e1 la etiqueta <input type=\"file\"> : Tipo de informaci\u00f3n a obtener Etiqueta a utilizar Ejemplo Adjuntar archivo <input type=\"file\">","title":"Controles: Selecci\u00f3n de archivos"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#atributos","text":"En primer lugar, debemos saber que si queremos adjuntar archivos a nuestro formulario, es necesario indicar en la etiqueta <form> el atributo enctype=\"multipart/form-data\" . Con esto nos aseguramos que las cabeceras del formulario indican que estamos enviando archivos adjuntos. Tambi\u00e9n se nos permite a\u00f1adir el atributo accept a la etiqueta <input type=\"file\"> a modo de sugerencia, para indicar los formatos de archivos permitidos al usuario en el campo de selecci\u00f3n de archivos. Un ejemplo de este campo de selecci\u00f3n de archivo: < form name = \"formulario\" method = \"post\" action = \"/send.php\" enctype = \"multipart/form-data\" > <!-- \u00a1No olvides el enctype! --> <!-- Campo de selecci\u00f3n de archivo --> < input type = \"file\" name = \"adjunto\" accept = \".pdf,.jpg,.png\" multiple /> </ form > Nota Si indicamos el atributo multiple en la etiqueta <input> , se le da la opci\u00f3n al usuario de pulsar la tecla CTRL para adjuntar varios archivos a la vez, y no uno solo.","title":"Atributos"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#organizacion-de-campos","text":"En este apartado, vamos a comentar las siguientes etiquetas, que sirven para organizar mejor los elementos de un formulario, reagrup\u00e1ndolos por categor\u00edas o tem\u00e1ticas, mostr\u00e1ndolos de forma m\u00e1s ordenada o incluso para que visualmente sea m\u00e1s sencillo encontrar la informaci\u00f3n del formulario. Las etiquetas que veremos son las siguientes: Tipo de informaci\u00f3n a obtener Etiqueta a utilizar Ejemplo Agrupaci\u00f3n visual o tem\u00e1tica de campos de entrada <fieldset> Leyenda para la etiqueta <fieldset> <legend> Leyenda Relaci\u00f3n de campo y texto <label>","title":"Organizaci\u00f3n de campos"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#agrupacion-visual","text":"La primera etiqueta es <fieldset> , un elemento utilizado como etiqueta contenedora para agrupar visualmente, mediante un trazo simple, todos los campos de un formulario que est\u00e9n relacionados ( misma tem\u00e1tica o apartado, por ejemplo ). La etiqueta <legend> , suele incluirse en el interior de <fieldset> para mostrar un t\u00edtulo en el trazo de esa agrupaci\u00f3n. < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- Agrupaci\u00f3n de campos --> < fieldset > < legend > Datos personales </ legend > <!-- Campo de texto --> Nombre de usuario: < input type = \"text\" name = \"nombre\" placeholder = \"Por ej: John Smith\" /> <!-- Campo num\u00e9rico --> Edad: < input type = \"number\" name = \"edad\" min = \"18\" max = \"100\" placeholder = \"18\" /> <!-- Bot\u00f3n radio de opci\u00f3n --> Sexo: <!-- Primera opci\u00f3n --> < input type = \"radio\" name = \"sexo\" value = \"H\" /> Hombre <!-- Segunda opci\u00f3n --> < input type = \"radio\" name = \"sexo\" value = \"M\" /> Mujer </ fieldset > </ form >","title":"Agrupaci\u00f3n visual"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#orden-de-campos","text":"Cuando nos encontramos en un campo de un formulario, al pulsar la tecla TAB podemos avanzar al siguiente campo sin necesidad de recurrir al rat\u00f3n. Tambi\u00e9n podemos conseguir la operaci\u00f3n inversa pulsando SHIFT+TAB, es decir, retroceder al campo anterior del formulario. Por defecto, el navegador sigue el orden de los campos seg\u00fan el HTML. Sin embargo, si queremos personalizar dicho orden, podemos utilizar el atributo tabindex , indicando un n\u00famero con el orden en cuesti\u00f3n: < form name = \"formulario\" method = \"post\" action = \"/send.php\" > Nombre de usuario: < input type = \"text\" name = \"nombre\" placeholder = \"Por ej: John Smith\" tabindex = \"1\" /> Edad: < input type = \"number\" name = \"edad\" min = \"18\" max = \"100\" placeholder = \"18\" tabindex = \"3\" /> Apellidos: < input type = \"text\" name = \"apellidos\" placeholder = \"Apellidos\" tabindex = \"2\" /> </ form > En este caso, si nos colocamos en el primer campo del formulario y pulsamos TAB, saltaremos directamente al tercer campo, ya que tiene indicado tabindex a 2 , y con un nuevo TAB saltaremos al segundo campo, ya que es el que tiene tabindex a 3 . Se recomienda utilizar este atributo s\u00f3lo cuando est\u00e9 justificado y las circunstancias lo requieran, ya que cambiar el orden de los campos puede confundir al usuario o facilitar equivocaciones al rellenar el formulario.","title":"Orden de campos"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#relacion-texto-campo","text":"Sin embargo, el ejemplo superior podr\u00eda modificar un aspecto min\u00fasculo que podr\u00eda mejorar su usabilidad. Por ejemplo, si un usuario quiere pulsar sobre uno de los botones de radio para elegir el sexo y pulsa sobre el texto ( Hombre o Mujer ), no ocurrir\u00e1 nada. El usuario debe pulsar exactamente sobre el bot\u00f3n de radio a elegir. Sin embargo, si utilizamos la etiqueta contenedora <label> , podemos establecer una relaci\u00f3n sem\u00e1ntica de un texto con un campo de entrada de datos. Al incluir texto y campo de texto dentro de la etiqueta <label> , tiene el mismo efecto pulsar en el campo de texto que en el propio texto ( muy \u00fatil tambi\u00e9n en casillas de verificaci\u00f3n ). Veamos el ejemplo anterior, mejorado con las etiquetas <label> : < form name = \"formulario\" method = \"post\" action = \"/send.php\" > < fieldset > < legend > Datos personales </ legend > <!-- Relaci\u00f3n del texto con el campo --> < label > Nombre de usuario: < input type = \"text\" name = \"nombre\" placeholder = \"Por ej: John Smith\" /> </ label > <!-- Relaci\u00f3n del texto con el campo --> < label > Edad: < input type = \"number\" name = \"edad\" min = \"18\" max = \"100\" placeholder = \"18\" /> </ label > Sexo: <!-- Relaci\u00f3n del texto con el primer bot\u00f3n --> < label > < input type = \"radio\" name = \"sexo\" value = \"H\" /> Hombre </ label > <!-- Relaci\u00f3n del texto con el segundo bot\u00f3n --> < label > < input type = \"radio\" name = \"sexo\" value = \"M\" /> Mujer </ label > </ fieldset > </ form > Nota A las etiquetas <label> se le puede indicar opcionalmente un atributo for con un nombre espec\u00edfico, y as\u00ed poder establecer la relaci\u00f3n con una etiqueta HTML con id con el mismo nombre, sin necesidad de que est\u00e9n contiguos o adyacentes.","title":"Relaci\u00f3n texto-campo"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#botones-de-envio-de-formularios","text":"Por \u00faltimo, y no por ello menos importante, tenemos los botones de env\u00edo de formulario . Si un formulario carece de estos botones, el usuario s\u00f3lo puede enviarlo si pulsa ENTER en el \u00faltimo campo del formulario. No obstante, siempre es aconsejable incluir un bot\u00f3n expl\u00edcitamente para que el usuario pueda pulsarlo y enviar el formulario sin confusi\u00f3n y de forma clara. Tenemos varios tipos de botones que act\u00faan sobre el formulario: Tipo de bot\u00f3n de control Etiqueta a utilizar Ejemplo Bot\u00f3n de env\u00edo de formulario <input type=\"submit\"> Bot\u00f3n de env\u00edo con imagen <input type=\"image\"> Bot\u00f3n de borrar formulario <input type=\"reset\"> Bot\u00f3n sin funcionalidad <input type=\"button\"> o <button> Boton","title":"Botones de env\u00edo de formularios"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#boton-normal","text":"El bot\u00f3n <input type=\"submit\"> sirve para enviar el formulario una vez el usuario ha rellenado todos sus campos y pulsa en este bot\u00f3n. El texto por defecto del bot\u00f3n ser\u00e1 Enviar ( o equivalente seg\u00fan el idioma ). Podemos modificar el texto del bot\u00f3n mediante el atributo value . < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- Datos del formulario --> Usuario: < input type = \"text\" name = \"usuario\" /> <!-- Bot\u00f3n de env\u00edo de formulario --> < input type = \"submit\" value = \"Enviar formulario\" /> </ form >","title":"Bot\u00f3n normal"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#boton-con-imagen","text":"El bot\u00f3n <input type=\"image\"> es un bot\u00f3n que tiene la misma funcionalidad que el bot\u00f3n anterior, pero es un h\u00edbrido entre el bot\u00f3n <input type=\"submit\"> y una etiqueta de imagen <img> , puesto que tambi\u00e9n posee los atributos src , alt , width y height para indicar una imagen que actuar\u00e1 de bot\u00f3n: < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- Datos del formulario --> Usuario: < input type = \"text\" name = \"usuario\" /> <!-- Bot\u00f3n de env\u00edo de formulario con imagen --> < input type = \"image\" src = \"enviar.png\" alt = \"Enviar\" width = \"80\" height = \"28\" /> </ form >","title":"Bot\u00f3n con imagen"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#boton-de-borrar-reset","text":"El bot\u00f3n <input type=\"reset\"> nos ofrece la posibilidad de disponer de un bot\u00f3n que al pulsarse borre completamente el formulario y reestablece todos sus campos de entrada de datos a sus valores por defecto iniciales. Es muy \u00fatil si queremos que el usuario disponga de la posibilidad de borrar todos los campos del formulario f\u00e1cilmente y no tener que hacerlo uno por uno. < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- Datos del formulario --> Usuario: < input type = \"text\" name = \"usuario\" /> <!-- Bot\u00f3n de env\u00edo de formulario --> < input type = \"submit\" value = \"Enviar formulario\" /> <!-- Bot\u00f3n de reseteo de formulario --> < input type = \"reset\" value = \"Borrar formulario\" /> </ form > Nota Cuidado al incluir el bot\u00f3n de reseteo al lado del bot\u00f3n de env\u00edo de formulario. Quiz\u00e1s ser\u00eda una buena opci\u00f3n separarlos notablemente para evitar que el usuario lo pulse sin querer.","title":"Bot\u00f3n de borrar (reset)"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#boton-alternativo","text":"Los botones de env\u00edo de formulario habituales funcionan en base a los atributos action , enctype , method , target y novalidate de la etiqueta <form> que los contiene. Sin embargo, es posible crear botones de env\u00edo alternativos que tengan un comportamiento de env\u00edo diferente a los botones por defecto. Para ello, tenemos que crear un bot\u00f3n de env\u00edo <input type=\"submit\"> o <input type=\"image\"> e incluir los atributos formaction , formenctype , formmethod , formtarget y formnovalidate respectivamente, seg\u00fan nos interese, ya que sobreescribir\u00e1n el comportamiento por defecto del formulario: < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- Datos del formulario --> Usuario: < input type = \"text\" name = \"usuario\" /> <!-- Bot\u00f3n por defecto, hace caso a atributos de <form> --> < input type = \"submit\" value = \"Enviar\" /> <!-- Botones con datos de env\u00edo alterados --> < input type = \"submit\" value = \"Enviar al dpto. marketing\" formaction = \"/send-mkt.php\" /> < input type = \"submit\" value = \"Enviar al dpto. inform\u00e1tica\" formaction = \"/send-sat.php\" /> </ form >","title":"Bot\u00f3n alternativo"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#boton-personalizado","text":"Por \u00faltimo, tenemos el bot\u00f3n <input type=\"button\"> o la etiqueta <button> , que en ambos casos a\u00f1ade un bot\u00f3n sin ninguna funcionalidad por defecto. Podemos redefinir la funcionalidad de este bot\u00f3n, pero necesitar\u00edamos Javascript para dotarle de una funcionalidad concreta, por lo que no podr\u00edamos hacer mucho sin este lenguaje. A continuaci\u00f3n un peque\u00f1o ejemplo muy b\u00e1sico: .sandbox pre { margin: 0; overflow: auto; max-height: var(--height, auto); } < button onClick = \"alert('\u00a1Hola, se\u00f1or!')\" > Saludar </ button >","title":"Bot\u00f3n personalizado"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#medidores-y-barras-de-progreso","text":"Existen algunos otros controles que, aunque no nos permiten introducir informaci\u00f3n, pueden ser muy \u00fatiles en formularios para presentar informaci\u00f3n de una forma m\u00e1s visual u ofrecer datos adicionales al usuario. Eso s\u00ed, se trata de etiquetas que sin el uso de Javascript s\u00f3lo podremos realizar funcionalidades muy b\u00e1sicas: Tipo de bot\u00f3n de control Etiqueta a utilizar Ejemplo Barra de progreso <progress> Medidor <meter>","title":"Medidores y barras de progreso"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#barra-de-progreso","text":"En primer lugar, tenemos una barra de progreso que puede ser \u00fatil para colocarla cuando necesitamos que el usuario sepa que debe esperar mientras se realizan otras tareas, o incluso para indicar el progreso de alg\u00fan proceso o incluso del usuario a trav\u00e9s de la p\u00e1gina. La etiqueta <progress> muestra por defecto una barra de progreso \u00abinfinita\u00bb, que se mueve de izquierda a derecha sin parar. Es la funcionalidad que tiene la barra de progreso sin interactividad desde Javascript. < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- Barra de progreso --> < progress max = \"100\" value = \"25\" > </ form > Nota Mediante el atributo max podemos definir el valor que debe tener la barra de progreso para estar completa y mediante el atributo value el valor actual de la barra de progreso. Adem\u00e1s, utilizando javascript podr\u00edamos ir aumentando el valor de la barra de progreso a medida que realizamos procesos, tareas o incluso acciones del usuario.","title":"Barra de progreso"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#medidores","text":"La etiqueta <meter> nos permite la creaci\u00f3n de medidores para mostrar el nivel o estado de alg\u00fan detalle. Este control es muy \u00fatil para ciertas tareas donde debemos mostrar informaci\u00f3n que se puede representar mediante un medidor que traspase ciertos umbrales. Un ejemplo cl\u00e1sico es el medidor de seguridad de una contrase\u00f1a , donde puede reflejar de forma gr\u00e1fica y sencilla si la contrase\u00f1a tiene un nivel de seguridad bajo, medio o alto, incluso especificando diferentes grados de nivel. Para ello, tenemos ciertos atributos disponibles en esta etiqueta <meter> : Atributo Valor Descripci\u00f3n min valor m\u00ednimo Valor m\u00ednimo que puede alcanzar el medidor. max valor m\u00e1ximo Valor m\u00e1ximo que puede alcanzar el medidor. value valor actual Cantidad actual del medidor. low umbral bajo Indica el umbral donde se considera bajo-medio. high umbral alto Indica el umbral donde se considera medio-alto. optimum valor \u00f3ptimo Indica el valor \u00f3ptimo del medidor. Un ejemplo de este medidor con la etiqueta <meter> : < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- Medidor --> < meter min = \"0\" max = \"100\" low = \"25\" high = \"75\" optimum = \"100\" value = \"75\" > </ form > Adem\u00e1s, dependiendo del valor de value y la posici\u00f3n del atributo optimum respecto al resto, los colores de la barra de medida cambiar\u00e1n. A continuaci\u00f3n tenemos un esquema de colores que nos muestra las combinaciones posibles: Low < Optimum < High Low < High < Optimum Optimum < Low < High Value \\< low Value < low Value < Low Low < Value < High Low < Value < high Low < Value < High Value > high Value > High Value > high Como siempre, hay que prestar atenci\u00f3n a la compatibilidad entre navegadores, si se quiere dar soporte a navegadores muy antiguos: https://caniuse.com/meter","title":"Medidores"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#validaciones-html5","text":"Al crear un formulario en HTML, debemos ser conscientes de un detalle ineludible: los usuarios se equivocan al rellenar un formulario . Ya sea por equivocaci\u00f3n del usuario, ambig\u00fcedad del formulario, o error del creador del formulario, el caso es que debemos estar preparados y anticiparnos a estos errores, para intentar que los datos lleguen correctamente a su destino y evitar cualquier tipo de moderaci\u00f3n o revisi\u00f3n posterior. Nota Para evitar estos casos, se suele recurrir a un tipo de proceso autom\u00e1tico llamado validaci\u00f3n , en el cu\u00e1l, establecemos unas pautas para que si el usuario introduce alguna informaci\u00f3n incorrecta, deba modificarla o en caso contrario no podr\u00e1 continuar ni enviar el formulario correctamente. Un esquema tradicional de validaci\u00f3n de ejemplo podr\u00eda ser el siguiente, donde tenemos un formulario dise\u00f1ado en HTML5 y mediante javascript realizamos una validaci\u00f3n para comprobar que los datos son correctos. Una vez superada, el formulario se env\u00eda al back-end de la p\u00e1gina para ser procesado y enviarlo por email ( por ejemplo ).","title":"Validaciones HTML5"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#tipos-de-validacion","text":"Cada vez que creamos un formulario, la validaci\u00f3n de los datos introducidos estar\u00e1 situada en uno de los siguientes casos ( colocados de peor a mejor ): En este primer caso, el formulario no tiene validaci\u00f3n de ning\u00fan tipo. El usuario puede escribir la informaci\u00f3n y el sistema no comprobar\u00e1 los datos, ni realizar\u00e1 ning\u00fan tipo de validaci\u00f3n. Es el peor escenario posible, puesto que el usuario podr\u00eda enviar desde informaci\u00f3n incorrecta, hasta datos malintencionados que podr\u00edan comprometer la seguridad de la p\u00e1gina. Otro caso podr\u00eda ser que el formulario tiene validaci\u00f3n s\u00f3lo en el front-end ( cliente ). De esta forma, los datos son verificados en el navegador del usuario antes de enviarse, pero carecen de validaci\u00f3n en el back-end , por lo que un usuario malintencionado podr\u00eda eliminar la validaci\u00f3n del front-end y salt\u00e1rsela, enviando datos malintencionados que comprometan la seguridad de la p\u00e1gina. El tercer caso posible es uno donde el formulario tiene validaci\u00f3n s\u00f3lo en el back-end . De esta forma, garantizamos que un usuario malintencionado no podr\u00e1 eliminar el proceso de validaci\u00f3n, y los datos siempre se comprobar\u00e1n. Sin embargo, la desventaja de este m\u00e9todo es que el usuario puede rellenar un formulario y es necesario que lo env\u00ede ( con la tardanza que eso puede acarrear ), se procese en el back-end y al devolver un error, el usuario tenga que retroceder al formulario y en algunos casos, incluso tener que volver a rellenar todos los campos de nuevo. Por \u00faltimo, tendr\u00edamos el caso ideal , donde el formulario tiene validaci\u00f3n en el front-end y en el back-end , tambi\u00e9n denominado doble validaci\u00f3n . En este caso, el formulario es sometido a un proceso de validaci\u00f3n en la parte del front-end, y si lo supera, vuelve a pasar otro proceso de validaci\u00f3n en el back-end. La desventaja de este m\u00e9todo es que conlleva m\u00e1s trabajo de validaci\u00f3n, pero es el sistema recomendado, puesto que es m\u00e1s estricto y sobre todo, m\u00e1s seguro. Tradicionalmente, la validaci\u00f3n de un formulario se ha hecho siempre en Javascript, sin embargo, HTML5 introduce unos nuevos atributos para formularios que permiten realizar la validaci\u00f3n del formulario directamente en HTML5, sin necesidad de recurrir a Javascript ( aunque es posible hacerlo si se desea ): Recuerda siempre realizar la validaci\u00f3n en el servidor o back-end ( en rojo ), ya que puede evitar problemas graves de seguridad.","title":"Tipos de validaci\u00f3n"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#atributos-basicos","text":"En nuestros campos de entrada de datos, se pueden utilizar ciertos atributos para realizar validaciones sencillas. Algunos de estos atributos ya lo hemos visto en apartados anteriores, sin embargo, vamos a comentarlos uno por uno: Atributo Valor Puede actuar sobre... Descripci\u00f3n minlength n\u00famero Campos de texto Establece la longitud m\u00ednima del texto requerida. maxlength n\u00famero Campos de texto No permite escribir textos superiores a n\u00famero car\u00e1cteres. min n\u00famero Campos num\u00e9ricos Establece el n\u00famero m\u00ednimo permitido. fecha Campos de fecha hora Campos de hora max n\u00famero Campos num\u00e9ricos Establece el n\u00famero m\u00e1ximo permitido. fecha Campos de fecha hora Campos de hora step n\u00famero Campos num\u00e9ricos Establece el salto de n\u00fameros permitido. Por defecto, 1. fecha Campos de fecha hora Campos de hora required Campos en general Campo obligatorio. Se debe rellenar para enviar formulario. disabled Campos en general Campo desactivado. No se puede modificar. No se env\u00eda. readonly Campos en general Campo de s\u00f3lo lectura. No se puede modificar. Se env\u00eda. Con estos atributos, podemos crear validaciones b\u00e1sicas en nuestros campos de entrada de datos, obligando al usuario a rellenar un campo obligatorio, forzando a indicar valores entre un rango num\u00e9rico o permitiendo s\u00f3lo textos con un tama\u00f1o espec\u00edfico, entre otros. < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- Nombre de usuario. Obligatorio, entre 5-40 car\u00e1cteres --> Usuario: < input type = \"text\" name = \"nombre\" placeholder = \"Por ejemplo, Juan\" minlength = \"5\" maxlength = \"40\" required /> <!-- Contrase\u00f1a. Obligatorio, m\u00ednimo 11 car\u00e1cteres --> Password: < input type = \"password\" name = \"pass\" placeholder = \"Contrase\u00f1a\" minlength = \"11\" required /> </ form > Adem\u00e1s, utilizando las pseudoclases CSS de validaci\u00f3n :valid e :invalid podemos aplicar estilos a los campos <input> y <textarea> teniendo en cuenta su validaci\u00f3n. Aplicando el siguiente c\u00f3digo CSS se mostrar\u00e1 un fondo verde o rojo, dependiendo de si cumple o no la validaci\u00f3n, respectivamente: input:valid, textarea:valid { background: green; } input:invalid, textarea:invalid { background: red; } En el caso particular de un campo <input type=\"email\"> se puede indicar el atributo multiple para permitir varios emails y que valide correctamente en el caso de estar realizando una validaci\u00f3n HTML5.","title":"Atributos b\u00e1sicos"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#patrones-de-validacion-html5","text":"No obstante, aunque los atributos de validaci\u00f3n b\u00e1sicos son muy interesantes y pueden facilitarnos la tarea de validaci\u00f3n, en muchos casos son insuficientes. Para ello tenemos los patrones de validaci\u00f3n HTML5 , mucho m\u00e1s potentes y flexibles, que nos permitir\u00e1n ser mucho m\u00e1s espec\u00edficos utilizando expresiones regulares para validar datos. Una expresi\u00f3n regular es una cadena de texto que representa un posible patr\u00f3n de coincidencias, que aplicaremos mediante el atributo pattern en los campos que queramos validar. Para ello hay que conocer algunas caracter\u00edsticas b\u00e1sicas de las expresiones regulares: Expresi\u00f3n regular Car\u00e1cter especial Significado Descripci\u00f3n . Punto Comod\u00edn Cualquier car\u00e1cter (o texto de tama\u00f1o 1) A|B Pipe Opciones l\u00f3gicas Opciones alternativas (o A o B ) C(A|B) Par\u00e9ntesis Agrupaciones Agrupaciones alternativas (o CA o CB ) [0-9] Corchetes Rangos de car\u00e1cteresUn d\u00edgito (del 0 al 9 ) [A-Z] Una letra may\u00fascula de la A a la Z [^A-Z] ^ en corchetes Rango de exclusi\u00f3n Una letra que no sea may\u00fascula de la A a la Z [0-9]* Asterisco Cierre o clausura Un d\u00edgito repetido 0 \u00f3 m\u00e1s veces (vac\u00edo incluido) [0-9]+ Signo m\u00e1s Cierre positivo Un d\u00edgito repetido 1 \u00f3 m\u00e1s veces [0-9]{3} Llaves Coincidencia exacta Cifra de 3 d\u00edgitos (d\u00edgito repetido 3 veces) [0-9]{2,4} Coincidencia (rango) Cifra de 2 a 4 d\u00edgitos (rep. de 2 a 4 veces) b? Interrogaci\u00f3n Car\u00e1cter opcional El car\u00e1cter b puede aparecer o puede que no \\. Barra invertida Escape El car\u00e1cter . literalmente (no como comod\u00edn)","title":"Patrones de validaci\u00f3n HTML5"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#ejemplos-de-patrones-html5","text":"Para clarificar estos conceptos y entenderlos mejor, vamos a mostrar algunos ejemplos de campos con validaciones HTML5 en casos reales, y as\u00ed afianzar conceptos sobre expresiones regulares y su aplicaci\u00f3n en los atributos pattern : Tipo de campo: Nombre de usuario Campo obligatorio: required . Entre 5-40 car\u00e1cteres: minlength=\"5\" maxlength=\"40\" S\u00f3lo se permiten letras (may\u00fasculas y min\u00fasculas) y n\u00fameros: pattern=\"[A-Za-z0-9]+\" N\u00f3tese que de no incluir los atributos minlength y maxlength el usuario no tendr\u00eda limitaci\u00f3n en cuanto al tama\u00f1o. Esto tambi\u00e9n puede incorporarse en la propia expresi\u00f3n regular, y prescindir de dichos atributos: < form name = \"formulario\" method = \"post\" action = \"/send.php\" > <!-- Nombre de usuario. Obligatorio, entre 5-40 car\u00e1cteres S\u00f3lo se permiten letras y n\u00fameros --> < input type = \"text\" name = \"nombre\" placeholder = \"Su nombre de usuario\" required pattern = \"[A-Za-z0-9]{5,40}\" title = \"Letras y n\u00fameros. Tama\u00f1o m\u00ednimo: 5. Tama\u00f1o m\u00e1ximo: 40\" /> </ form > Sin embargo, en este caso, no se limitar\u00e1 al usuario a la hora de escribir, como hace maxlength , sino que permitir\u00e1 al usuario escribir la informaci\u00f3n que desee y en caso de no pasar la validaci\u00f3n, mostrar\u00e1 un mensaje de advertencia y no lo dejar\u00e1 continuar hasta que termine. Podemos ampliar el mensaje de advertencia incluyendo el texto en el atributo title . En el siguiente caso, se pide al usuario que indique el modelo de coche que posee, en un posible formulario de servicio t\u00e9cnico. Los modelos posibles son A1, A3, A4 y A15. En lugar de mostrar una lista de selecci\u00f3n , podemos mostrar un campo de texto y colocar una validaci\u00f3n como la siguiente: Tipo de campo: Modelo de coche Campo obligatorio: required . S\u00f3lo se permiten las opciones: A1, A3, A4 y A15 N\u00f3tese que se permite tanto el formato a1 como el formato A1 .","title":"Ejemplos de patrones HTML5"},{"location":"desarrollo/html/05-etiquetas_de_formularios/#expresiones-regulares","text":"A continuaci\u00f3n, algunas herramientas \u00fatiles para crear o probar expresiones regulares : Herramienta Descripci\u00f3n RegExR Herramienta para construir y testear expresiones regulares. Debuggex Herramienta de creaci\u00f3n gr\u00e1fica de expresiones regulares. RegEx101 Herramienta para construir y testear expresiones regulares. RegExBuddy Herramienta profesional para el trabajo con expresiones regulares. RegExplained Herramienta visual para explicar el funcionamiento de una expresi\u00f3n regular. RegExper Herramienta para generar diagramas visuales de expresiones regulares. Rubular Editor de expresiones regulares. Fuente: Lenguaje de Html por Manz","title":"Expresiones regulares"},{"location":"desarrollo/html/06-etiquetas_de_scripting/","text":"Etiquetas de scripting \u00b6 Etiquetas HTML interactivas \u00b6 A partir de HTML5, existen algunas etiquetas que proporcionan caracter\u00edsticas interactivas a una p\u00e1gina. En dichas etiquetas el usuario debe tomar parte de forma activa para activarlas o utilizarlas. Elementos desplegables, men\u00fas contextuales, di\u00e1logos emergentes, etc... Veamos una lista de dichas etiquetas: Etiqueta Descripci\u00f3n <details> Crea un elemento desplegable. Etiqueta que contiene todo el contenido del elemento. <summary> T\u00edtulo del desplegable que aparece siempre, se encuentre desplegado o no. <dialog> Ventana de di\u00e1logo que puede contener y mostrar cierta informaci\u00f3n. Elementos desplegables \u00b6 Con la etiqueta <details> se puede crear un elemento desplegable que el usuario puede expandir o contraer para ver m\u00e1s informaci\u00f3n. Se trata de una etiqueta contenedora que act\u00faa como un <div> , salvo que todo el contenido de esta etiqueta no se muestra inicialmente. En su lugar, aparece una flecha y el texto proporcionado en la etiqueta <summary> ( o el texto \u00abDetalles\u00bb si se omite ). < details > < summary > M\u00e1s informaci\u00f3n </ summary > < h2 > Nombre del sujeto </ h2 > < img src = \"foto.jpg\" alt = \"Foto del sujeto\" /> </ details > Si pulsamos sobre el texto o la mencionada flecha, el contenido de la etiqueta <details> se muestra o se oculta, dependiendo de si se encontraba oculto o visible respectivamente. La etiqueta <details> tiene un atributo open , que si se especifica el contenido es visible por defecto. Esta etiqueta pertenece a HTML5.1 y a\u00fan no est\u00e1 soportado por la mayor\u00eda de navegadores. Di\u00e1logos emergentes \u00b6 HTML5.1 incorporar\u00e1 los denominados di\u00e1logos emergentes , o lo que es lo mismo, ventanas emergentes compatibles con c\u00f3digo HTML que podemos utilizar y personalizar para realizar avisos o alertas al usuario. Hasta ahora, la forma m\u00e1s simple de crear avisos o alertas emergentes era recurrir al alert de Javascript o crear ventanas personalizadas desde Javascript. Sin embargo, con HTML5.1 podremos crear desde HTML sencillos o complejos di\u00e1logos con texto, botones, im\u00e1genes, video o cualquier elemento HTML que se nos ocurra. La forma de crear di\u00e1logos es muy sencilla. Utilizaremos la etiqueta <dialog> y en su interior colocaremos toda la informaci\u00f3n que queramos mostrar en la ventana: .sandbox pre { margin: 0; overflow: auto; max-height: var(--height, auto); } < dialog id = \"ms\" > < p > \u00a1Hola, soy un mensaje! </ p > < button id = \"close\" onclick = \"document.getElementById('ms').close()\" > Ok! </ button > </ dialog > < button id = \"show\" onclick = \"document.getElementById('ms').show()\" > Mostrar </ button > En este caso, estamos creando una ventana de di\u00e1logo con un p\u00e1rrafo de texto y un bot\u00f3n para cerrar la ventana. Fuera de ella, un bot\u00f3n para mostrar el di\u00e1logo. La etiqueta <dialog> puede tener el atributo open para indicar que la ventana debe estar abierta por defecto. En caso contrario, no se muestra inicialmente. Di\u00e1logos modales \u00b6 En programaci\u00f3n, una ventana modal es un tipo de ventana que se muestra al usuario, generalmente para avisarle de algo o pedirle una informaci\u00f3n necesaria para continuar. Se caracteriza en que una vez se muestra, no se le permite realizar otra tarea hasta que atienda el mensaje de esa ventana modal ( pulsar ok, responder una pregunta, etc... ). Para crear una ventana modal s\u00f3lo tendremos que usar la funci\u00f3n showModal() desde Javascript, en lugar de utilizar la funci\u00f3n show() que utilizamos en el ejemplo anterior: < dialog id = \"ms\" > < h2 > \u00a1Vuelve a la sombra! </ h2 > < img src = \"gandalf.jpg\" alt = \"Gandalf\" /> < p > \u00a1NO.. PUEDES... PASAR! </ p > < button id = \"close\" onclick = \"document.getElementById('ms').close()\" > Ok! </ button > </ dialog > < button id = \"show\" onclick = \"document.getElementById('ms').showModal()\" > Mostrar </ button > Esto mostrar\u00e1 la siguiente ventana de di\u00e1logo modal: Obs\u00e9rvese que hemos utilizado la pseudoclase CSS ::backdrop sobre la ventana de di\u00e1logo para darle estilos a la parte de detr\u00e1s de la ventana modal, pudiendo, por ejemplo, aplicarle un color de fondo negro con transparencia al 25% con la propiedad background-color:RGBA(0,0,0, .75) : # ms :: backdrop { background-color : RGBA ( 0 , 0 , 0 , 0.75 ); } Las ventanas de di\u00e1logo de HTML5.1 a\u00fan son muy recientes y el soporte no est\u00e1 muy extendido entre los diferentes navegadores del panorama web: Atributo contentEditable \u00b6 En HTML5 podemos utilizar el atributo contentEditable sobre cualquier elemento para darle al usuario capacidades de edici\u00f3n sobre el mismo. De esta forma, podemos incluir el atributo contentEditable a una etiqueta <p> de p\u00e1rrafo, o a una etiqueta <h3> , por ejemplo, lo que permitir\u00e1 al usuario que, al pulsar sobre dichos elementos, pueda modificar el texto que aparece: < h3 contenteditable > T\u00edtulo del art\u00edculo </ h3 > < div contenteditable > < p > Este es un p\u00e1rrafo de ejemplo del ejemplo en cuesti\u00f3n. </ p > < p > Con \u00e9l se pretende mostrar el funcionamiento del atributo contentEditable. </ p > </ div > De esta forma, podemos dotar de capacidades de edici\u00f3n al usuario. Obs\u00e9rvese siempre que el HTML, CSS y Javascript son tecnolog\u00edas que trabajan en el front-end , o lo que es lo mismo, son descargadas desde el alojamiento web y transferidas a una carpeta temporal de nuestro sistema. En ella, el navegador la lee y ah\u00ed es donde estamos realizando dichas modificaciones. Si el usuario volviese a recargar la p\u00e1gina tras modificar ciertos elementos, los cambios no se ver\u00e1n reflejados. Para ello, hay que hacer ciertas operaciones ( por ejemplo, mediante Javascript o con un bot\u00f3n de Guardar cambios ), y realizar una petici\u00f3n al backend del alojamiento web para que guarde los cambios. Atributo hidden \u00b6 HTML5 incorpora tambi\u00e9n un atributo hidden mediante el cu\u00e1l podemos hacer desaparecer visualmente un elemento HTML ( y todo su contenido, si es una etiqueta contenedora ). Hasta ahora, para realizar esta tarea ten\u00edamos que recurrir a CSS, ya que se trata de una cuesti\u00f3n de presentaci\u00f3n visual. Sin embargo, la diferencia entre el atributo hidden o utilizar estilos es que mediante CSS podemos mostrar elementos dependiendo de acciones del usuario o del medio en el que est\u00e9n ( media queries, por ejemplo ). Por otro lado, el attributo hidden se propone utilizarse cuando el usuario ha realizado una acci\u00f3n y hay una serie de elementos que queremos ocultar porque ya no son relevantes, independientemente de los estilos que se est\u00e9n aplicando en la p\u00e1gina: < div id = \"info\" hidden > Informaci\u00f3n </ div > < button onClick = \"toggleHidden('#info')\" > Mostrar/ocultar informaci\u00f3n </ button > En el caso anterior, tenemos un <div> con texto que vamos a ocultar cada vez que el usuario pulse el bot\u00f3n. Dicho bot\u00f3n ejecuta la funci\u00f3n Javascript toggleHidden() para ocultar o mostrar el elemento, dependiendo si ya estaba visibile o si estaba oculto: function toggleHidden ( selector ) { element = document . querySelector ( selector ); element . hidden = element . hidden ? false : true ; } El soporte de este atributo es completo en la mayor\u00eda de los navegadores: https://caniuse.com/hidden Etiquetas HTML de scripts \u00b6 A medida que aprendemos HTML vemos que se trata de un lenguaje de marcas estupendo y muy potente, pero tambi\u00e9n nos vamos dando cuenta que ciertos detalles no se pueden cubrir s\u00f3lo con HTML y CSS. Para ello tenemos que hacer uso de un lenguaje de programaci\u00f3n llamado Javascript . Este lenguaje es muy potente y flexible, pero tambi\u00e9n requiere mayor dominio del c\u00f3digo que con HTML y CSS, puesto que estos \u00faltimos s\u00f3lo son lenguajes de marcas y estilos respectivamente, mientras que Javascript es un lenguaje de programaci\u00f3n que requiere ciertos conocimientos y metodolog\u00eda de desarrollo. Nota En este art\u00edculo cubriremos una parte b\u00e1sica de Javascript muy relacionada con HTML. Si quieres aprender Javascript en profundidad, echa un ojo a LenguajeJS.com . La etiqueta script \u00b6 Para utilizar Javascript, lo que hacemos normalmente es indicar al HTML que queremos cargar un script ( generalmente, un archivo de texto con c\u00f3digo Javascript ) y hacerlo funcionar sobre la p\u00e1gina actual. Para hacer esto, utilizaremos la etiqueta <script> , que permite indicar una serie de atributos: Atributo Valor Descripci\u00f3n src URL Direcci\u00f3n URL del script externo a cargar. type tipo Tipo de script a cargar. Si se omite, se asume text/javascript como valor. nomodule Boolean Si se define este atributo, el script no se carga en navegadores modernos. async Boolean Ejecuta el script cuando se haya descargado, sin bloquear el navegador. defer Boolean Aplaza la ejecuci\u00f3n del script, lo ejecuta al final, cuando haya descargado todo. Para empezar, ten en cuenta que la etiqueta <script> tiene fundamentalmente dos modos de funcionar, que se basan en como definas la etiqueta <script> : Como script en l\u00ednea : El c\u00f3digo JS se incluye en el HTML, dentro de la etiqueta. Como script externo : El c\u00f3digo JS se incluye en el fichero Javascript enlazado en src . Un ejemplo de script en l\u00ednea ser\u00eda el siguiente. Observa que el c\u00f3digo se incluye en el interior de la etiqueta, por lo que permanece en el documento HTML: < script > alert ( '\u00a1Hola!' ); </ script > El siguiente c\u00f3digo, por otro lado, es un script externo , donde el c\u00f3digo Javascript se encuentra en un archivo separado del HTML, concretamente en la ruta /js/script.js : < script src = \"/js/script.js\" ></ script > En ambos casos, el navegador interrumpir\u00e1 la carga de la p\u00e1gina para procesar y ejecutar el Javascript, detalle que quiz\u00e1s no sea el m\u00e1s adecuado para nuestro desarrollo. Veremos como se puede modificar en el siguiente apartado. Modo de carga del script \u00b6 Cuando indicamos un script externo mediante el atributo src , por defecto el proceso de carga del script por parte del navegador es el siguiente: Detiene temporalmente la carga del HTML en el lugar donde se encontr\u00f3 el <script> . Descarga el script .js al cach\u00e9 de ficheros temporales del navegador. Ejecuta el script una vez descargado. Reanuda la carga del documento HTML por donde lo dej\u00f3, en cuanto termina la ejecuci\u00f3n del script. Este es el modo de carga por defecto de los scripts por parte del navegador. Sin embargo, existen dos m\u00e9todos de carga diferentes: la carga as\u00edncrona y la carga diferida : Modo de carga Atributo Descripci\u00f3n Carga normal (ninguno) Bloquea la carga de la p\u00e1gina y se ejecuta inmediatamente. Carga as\u00edncrona async Ejecuta el script tan pronto como est\u00e9 disponible. Carga diferida defer Aplaza la ejecuci\u00f3n del script al final de la carga de la p\u00e1gina. Estos dos m\u00e9todos tienen ligeras diferencias respecto al modo de carga b\u00e1sico que vimos anteriormente, y que aparece el primero en la siguiente ilustraci\u00f3n: Carga as\u00edncrona : El navegador descarga el script sin detener la carga del documento HTML. Una vez descargado, detiene la carga del documento HTML temporalmente, ejecuta el script, y una vez terminada la ejecuci\u00f3n, continua con la carga del documento HTML. Este tipo de carga se realiza incluyendo el atributo async en la etiqueta <script> . Carga diferida : El navegador le da prioridad a la carga del documento HTML. Descarga el script de forma paralela sin detener la carga del documento HTML. Una vez ha terminado de cargar el documento HTML, ejecuta el script. Este tipo de carga se realiza incluyendo el atributo defer en la etiqueta <script> . Carga de m\u00f3dulos Javascript \u00b6 En los \u00faltimos a\u00f1os, Javascript ha incluido una funcionalidad llamada m\u00f3dulos de Javascript . Dichos m\u00f3dulos son una modalidad espec\u00edfica de archivos Javascript, los cuales pueden compartir funcionalidades a trav\u00e9s de las palabras clave import y export . Estas funcionalidades est\u00e1n prohibidas por defecto, y s\u00f3lo se podr\u00e1n realizar si a la hora de cargar el script con la etiqueta <script> definimos el atributo type a module . Esto nos permitir\u00e1 cargar el archivo Javascript como m\u00f3dulo y utilizarlo: < script type = \"module\" > import { Howler , Howl } from \"https://unpkg.com/howler\" ; </ script > Nota Es posible usar el atributo type=\"module\" tanto en etiquetas <script> en l\u00ednea ( ejemplo anterior ) como con etiquetas <script> que utilicen el atributo src . Adem\u00e1s, todos los scripts cargados como m\u00f3dulos, se ejecutar\u00e1n en modo diferido . En algunos casos, podemos crear etiquetas <script> que utilicen un atributo nomodule . Dicho atributo indicar\u00e1 a navegadores modernos que soportan el atributo type=module , que no deben descargar ni ejecutar ese script. Sin embargo, navegadores antiguos que no lo soportan cargar\u00e1n el script como un fichero Javascript normal y corriente: < script type = \"module\" > /* C\u00f3digo para navegadores modernos */ import { Howler , Howl } from \"https://unpkg.com/howler\" ; </ script > < script nomodule > /* C\u00f3digo para navegadores antiguos */ </ script > La finalidad de este atributo es poder crear scripts a modo de fallback para realizar tareas equivalentes en navegadores antiguos y dar soporte a otros sistemas menos modernos. Es lo que se conoce como el patr\u00f3n module/nomodule . Lenguajes de scripting \u00b6 Por defecto, el lenguaje de scripting soportado por los navegadores es Javascript , por lo que cuando hablamos de scripting en el navegador ( front-end, o en el lado del cliente ) hablamos de este lenguaje. Javascript est\u00e1 basado en ECMAScript , el est\u00e1ndar que indica como debe actuar el lenguaje. Luego, es misi\u00f3n de cada navegador implementarlo de acuerdo a esas normas, aunque siempre hay algunas diferencias entre navegadores. Existen alternativas para no utilizar Javascript directamente, sino alg\u00fan lenguaje similar que traduce ( o mejor dicho, transpila ) a Javascript. Directamente, los navegadores solo soportan Javascript. Quiz\u00e1s, los transpiladores m\u00e1s populares a Javascript sean TypeScript y Babel . La etiqueta noscript \u00b6 Debemos ser conscientes de que, aunque actualmente la mayor\u00eda de los navegadores poseen Javascript, un usuario puede acceder desde un dispositivo que no tenga Javascript ( muy poco habitual ) o que tenga Javascript deshabilitado ( poco habitual ). Una buena costumbre, es proporcionar una alternativa ( aunque sea m\u00ednima ) para aquellos usuarios que no tengan Javascript habilitado. Para ello, utilizaremos la etiqueta <noscript> : < script > var usuario = prompt ( \"\u00bfCu\u00e1l es tu nombre?\" ); alert ( \"\u00a1Hola, \" + usuario + \"!\" ); </ script > < noscript > \u00a1Hola, usuario! </ noscript > En caso de que el usuario tenga capacidades de Javascript en su navegador, se ejecutar\u00e1 el c\u00f3digo de la etiqueta <script> , sin embargo, si el navegador no tiene Javascript, se mostrar\u00e1 el texto proporcionado en la etiqueta <noscript> , que aunque no puede recoger el nombre de usuario, mostrar\u00e1 una alternativa. De esta forma evitamos que si el usuario no tiene Javascript, vea una p\u00e1gina en blanco. La etiqueta template \u00b6 La etiqueta <template> es un m\u00e9todo ideal para reutilizar informaci\u00f3n HTML y tratarla mediante Javascript. En el siguiente ejemplo tenemos una tabla HTML que s\u00f3lo tiene definida la cabecera de la misma. Sin embargo, un poco m\u00e1s abajo hay una etiqueta <template> que contiene una fila con 3 celdas: < table id = \"tabla\" > < tr > < th > Nombre </ th > < th > Apellidos </ th > < th > Calificaci\u00f3n </ th > </ tr > < template id = \"usuario\" > < tr > < td > 1 </ td > < td > 2 </ td > < td > 3 </ td > </ tr > </ template > </ table > El contenido de una etiqueta <template> es inerte, de modo que el navegador no interpreta su interior ( no descarga im\u00e1genes, no ejecuta scripts, etc... ) hasta que el usuario clona su contenido para insertarlo en el HTML. En este ejemplo anterior, nosotros podr\u00edamos desde Javascript obtener el contenido de la plantilla <template> , clonarlo y a\u00f1adirlo al final de la tabla de forma din\u00e1mica, para posteriormente modificar los datos de cada fila: var template = document . getElementById ( \"usuario\" ); var tabla = document . getElementById ( \"tabla\" ); tabla . appendChild ( template . content . cloneNode ( true )); Nota Si te interesa este tema, tienes m\u00e1s informaci\u00f3n sobre la etiqueta <template> ( y plantillas en general ) en este art\u00edculo sobre Plantillas, DOM y WebComponents . Las plantillas HTML tienen relativamente buen soporte, aunque en el caso de querer dar soporte a Internet Explorer habr\u00eda que utilizar alg\u00fan polyfill como Minimal Polyfill for Template : https://caniuse.com/template Eventos en HTML \u00b6 En Javascript hay un concepto llamado evento que se utiliza para referirse al instante justo en el que ocurre un determinado suceso. Por ejemplo, existe un evento llamado click que se dispara cuando un usuario hace clic sobre un elemento HTML . Podemos decirle al navegador que cuando ocurra un evento concreto, realice una acci\u00f3n determinada. De esta forma, podemos preparar nuestra p\u00e1gina para que act\u00fae seg\u00fan las circunstancias. Eventos \u00b6 Existen much\u00edsimos tipos de eventos en Javascript. Para activarlos, lo primero es elegir la etiqueta en la que ocurrir\u00e1 el evento. Una vez elegida, colocaremos un atributo en dicha etiqueta para detectar si se produce el evento. Adem\u00e1s, hay que indicar el prefijo on en el atributo del evento. Por ejemplo, si queremos detectar el evento click , el atributo HTML deber\u00e1 llamarse onClick . As\u00ed pues, veamos un ejemplo: < div > < img src = \"gandalf.jpg\" alt = \"Gandalf\" onClick = \"alert('\u00a1Has hecho clic!')\" /> </ div > En este sencillo ejemplo, hemos especificado una imagen que es la que estar\u00e1 \u00abescuchando\u00bb el evento click . Si el usuario hace clic sobre ese elemento, o sea, sobre la imagen, el navegador dispar\u00e1 el evento y ejecutar\u00e1 la funci\u00f3n Javascript alert() , mostrando un mensaje por pantalla: \u00a1Has hecho clic! . Detalles del evento \u00b6 En los eventos, puede que queramos obtener informaci\u00f3n m\u00e1s espec\u00edfica, como por ejemplo, el n\u00famero de veces que hizo clic el usuario sobre la imagen ( si fue un solo clic, si fue doble clic, etc... ). Este dato espec\u00edfico lo devuelve el evento onClick a trav\u00e9s del objeto especial event , as\u00ed que continuemos con el ejemplo anterior, modificando algunas cosas: < div > < img src = \"gandalf.jpg\" alt = \"Gandalf\" onClick = \"updateCounter(event)\" /> < p > Has hecho clic a Gandalf < span id = \"num\" > 0 </ span > veces. </ p > </ div > Obs\u00e9rvese que en este caso, en lugar del alert() usado antes, ejecutamos una funci\u00f3n javascript que crearemos nosotros, llamada updateCounter() . Despu\u00e9s de la imagen, hay un p\u00e1rrafo de texto que contiene una frase y un fragmento <span id=\"num\"> que contendr\u00e1 el n\u00famero de veces que se ha pulsado sobre la imagen. Inicialmente se encuentra establecido a 0 . Por su parte, la funci\u00f3n updateCounter() pasa por par\u00e1metro una variable especial event , que es la que tiene la informaci\u00f3n sobre el evento ocurrido, y que posteriormente utilizaremos para extraer dicha informaci\u00f3n. Definimos la funci\u00f3n updateCounter() en Javascript: function updateCounter ( e ) { document . querySelector ( \"#num\" ). textContent = e . detail ; } Esta funci\u00f3n busca la etiqueta HTML que tiene un id=\"num\" , y mediante .textContent modificamos su contenido. El nuevo contenido es e.detail que no es m\u00e1s que un dato que se encuentra en el evento que se ha disparado. Ese dato devuelve el n\u00famero de veces seguidas ( contador ) que el usuario puls\u00f3 sobre la imagen. Veamos finalmente lo que ocurrir\u00eda con este ejemplo. Lo que aparece a la izquierda es cuando el usuario pulsa el bot\u00f3n del rat\u00f3n ( LButtonDown ) y cuando lo suelta ( LButtonUp ): Otros Eventos \u00b6 Existen muchos otros eventos, pr\u00e1cticamente uno para cada acci\u00f3n que pueda ocurrir en un documento HTML. A continuaci\u00f3n, muestro algunos grupos de eventos muy utilizados frecuentemente de la gran cantidad de eventos existentes en Javascript. Eventos de documento \u00b6 Es posible poner a escuchar ciertos eventos sobre el documento HTML completo, estableciendo el atributo del evento en la etiqueta <body> : Tipo de evento Atributo HTML Descripci\u00f3n UIEvent onLoad La p\u00e1gina (el documento HTML) ha terminado de cargarse. UIEvent onUnload La p\u00e1gina (el documento HTML) va a cerrarse. UIEvent onScroll El usuario ha hecho scroll sobre la p\u00e1gina (el documento HTML). Eventos de carga de recursos \u00b6 Sobre las etiquetas que cargan un archivo externo, como podr\u00edan ser <img> o <script> , e incluso <style> con estilos CSS en l\u00ednea. Los archivos multimedia <audio> y <video> tienen sus propios eventos espec\u00edficos, ya que tienen un proceso de carga especial: Tipo de evento Atributo HTML Descripci\u00f3n UIEvent onLoad El recurso ha terminado de cargarse en la p\u00e1gina. UIEvent onUnload El recurso ha sido eliminado de la p\u00e1gina. UIEvent onAbort El recurso ha sido cancelado y no ha terminado su carga. UIEvent onError El recurso ha dado un error y no ha terminado su carga. UIEvent onSelect El usuario ha seleccionado un texto de un campo de datos. Eventos de foco en elementos \u00b6 Sobre etiquetas <input> , <textarea> , <select> , <a> o cualquier otra etiqueta que pueda ser seleccionable por el usuario pulsando la tecla TAB, existen una serie de eventos para controlar cuando gana o pierde el foco un elemento: Tipo de evento Atributo HTML Descripci\u00f3n FocusEvent onBlur El elemento ha perdido el foco (foco de salida). FocusEvent onFocusout El elemento ha perdido el foco (y permite bubble). FocusEvent onFocus El elemento ha ganado el foco (foco de entrada). FocusEvent onFocusin El elemento ha ganado el foco (y permite bubble). Eventos de rat\u00f3n \u00b6 Los eventos de rat\u00f3n se utilizan para detectar todas aquellas acciones que el usuario realiza mediante el rat\u00f3n con alg\u00fan elemento de la p\u00e1gina, como podr\u00eda ser mover el rat\u00f3n por encima de ellos, hacer clic, mover la rueda del rat\u00f3n, etc... Tipo de evento Atributo HTML Descripci\u00f3n MouseEvent onClick El usuario ha pulsado ( y soltado ) el elemento. MouseEvent onDblclick El usuario ha hecho doble clic en el elemento. MouseEvent onMousedown El usuario ha pulsado ( a\u00fan sin haber soltado ) el elemento. MouseEvent onMouseup El usuario ha soltado el bot\u00f3n pulsado en un elemento. MouseEvent onMousemove El usuario ha movido el rat\u00f3n. MouseEvent onMouseenter El usuario ha movido el rat\u00f3n dentro de un elemento. MouseEvent onMouseleave El usuario ha movido el rat\u00f3n fuera de un elemento. MouseEvent onMouseout El usuario ha movido el rat\u00f3n fuera de un elemento (bubbles). MouseEvent onMouseover El usuario ha movido el rat\u00f3n dentro de un elemento (bubbles). WheelEvent onWheel El usuario ha movido la rueda del rat\u00f3n. Eventos de entrada de datos \u00b6 Sobre elementos <input> o elementos HTML con el atributo contentEditable , y por lo tanto, elementos HTML que son editables por el usuario: Tipo de evento Atributo HTML Descripci\u00f3n InputEvent onBeforeInput Un elemento <input> o con atributo contentEditable a punto de cambiar. InputEvent onInput Un elemento <input> o con atributo contentEditable ha cambiado. Eventos multimedia \u00b6 Sobre elementos multimedia como <audio> o <video> , donde se carga un recurso ( MP4, WebM, MP3, OGG... ) externo: Tipo de evento Atributo HTML Descripci\u00f3n MediaEvent onEmptied El audio o video se ha vac\u00edado (recargar elemento). MediaEvent onLoadedMetadata Se han precargado los metadatos del audio o video (duraci\u00f3n, subs...) MediaEvent onLoadedData Se ha precargado el comienzo del audio o video. MediaEvent onCanPlay El audio o video se ha precargado lo suficiente para reproducir. MediaEvent onCanPlayThrough El audio o video se ha precargado completamente. MediaEvent onPlay El audio o video comienza a reproducirse (tras haber sido pausado). MediaEvent onPlaying El audio o video comienza a reproducirse. MediaEvent onPause El audio o video ha sido pausado. MediaEvent onTimeUpdate El audio o video ha avanzado en su reproducci\u00f3n. MediaEvent onEnded El audio o video ha completado su reproducci\u00f3n. MediaEvent onWaiting El audio o video est\u00e1 esperando a que el buffer se complete. MediaEvent onDurationChange El audio o video ha cambiado su duraci\u00f3n total (metadatos). MediaEvent onRateChange El audio o video ha cambiado su velocidad de reproducci\u00f3n. MediaEvent onVolumeChange El audio o video ha cambiado su volumen de reproducci\u00f3n. ProgressEvent onProgress El audio o video se est\u00e1 descargando. ProgressEvent onLoadStart MediaEvent onSuspend La precarga del audio o video ha sido suspendida (ok o pause). UIEvent onAbort La precarga del audio o video ha sido abortada o reiniciada. UIEvent onError Ha ocurrido un error. MediaEvent onStalled El navegador intenta precargar el audio o video, pero se ha estancado. MediaEvent onSeeking El navegador comenz\u00f3 a buscar un momento concreto del audio/video. MediaEvent onSeeked El navegador termin\u00f3 de buscar un momento concreto del audio/video. UIEvent onResize El video ha sido redimensionado. Todos estos eventos ( y muchos otros no inclu\u00eddos en esta secci\u00f3n ) se pueden llamar desde Javascript para realizar personalizaciones m\u00e1s espec\u00edficas, pero en ese caso ya hay que recurrir a Javascript y realizar tareas y metodolog\u00edas de programaci\u00f3n m\u00e1s espec\u00edficas. Fuente: Lenguaje de Html por Manz","title":"Etiquetas de scripting"},{"location":"desarrollo/html/06-etiquetas_de_scripting/#etiquetas-de-scripting","text":"","title":"Etiquetas de scripting"},{"location":"desarrollo/html/06-etiquetas_de_scripting/#etiquetas-html-interactivas","text":"A partir de HTML5, existen algunas etiquetas que proporcionan caracter\u00edsticas interactivas a una p\u00e1gina. En dichas etiquetas el usuario debe tomar parte de forma activa para activarlas o utilizarlas. Elementos desplegables, men\u00fas contextuales, di\u00e1logos emergentes, etc... Veamos una lista de dichas etiquetas: Etiqueta Descripci\u00f3n <details> Crea un elemento desplegable. Etiqueta que contiene todo el contenido del elemento. <summary> T\u00edtulo del desplegable que aparece siempre, se encuentre desplegado o no. <dialog> Ventana de di\u00e1logo que puede contener y mostrar cierta informaci\u00f3n.","title":"Etiquetas HTML interactivas"},{"location":"desarrollo/html/06-etiquetas_de_scripting/#elementos-desplegables","text":"Con la etiqueta <details> se puede crear un elemento desplegable que el usuario puede expandir o contraer para ver m\u00e1s informaci\u00f3n. Se trata de una etiqueta contenedora que act\u00faa como un <div> , salvo que todo el contenido de esta etiqueta no se muestra inicialmente. En su lugar, aparece una flecha y el texto proporcionado en la etiqueta <summary> ( o el texto \u00abDetalles\u00bb si se omite ). < details > < summary > M\u00e1s informaci\u00f3n </ summary > < h2 > Nombre del sujeto </ h2 > < img src = \"foto.jpg\" alt = \"Foto del sujeto\" /> </ details > Si pulsamos sobre el texto o la mencionada flecha, el contenido de la etiqueta <details> se muestra o se oculta, dependiendo de si se encontraba oculto o visible respectivamente. La etiqueta <details> tiene un atributo open , que si se especifica el contenido es visible por defecto. Esta etiqueta pertenece a HTML5.1 y a\u00fan no est\u00e1 soportado por la mayor\u00eda de navegadores.","title":"Elementos desplegables"},{"location":"desarrollo/html/06-etiquetas_de_scripting/#dialogos-emergentes","text":"HTML5.1 incorporar\u00e1 los denominados di\u00e1logos emergentes , o lo que es lo mismo, ventanas emergentes compatibles con c\u00f3digo HTML que podemos utilizar y personalizar para realizar avisos o alertas al usuario. Hasta ahora, la forma m\u00e1s simple de crear avisos o alertas emergentes era recurrir al alert de Javascript o crear ventanas personalizadas desde Javascript. Sin embargo, con HTML5.1 podremos crear desde HTML sencillos o complejos di\u00e1logos con texto, botones, im\u00e1genes, video o cualquier elemento HTML que se nos ocurra. La forma de crear di\u00e1logos es muy sencilla. Utilizaremos la etiqueta <dialog> y en su interior colocaremos toda la informaci\u00f3n que queramos mostrar en la ventana: .sandbox pre { margin: 0; overflow: auto; max-height: var(--height, auto); } < dialog id = \"ms\" > < p > \u00a1Hola, soy un mensaje! </ p > < button id = \"close\" onclick = \"document.getElementById('ms').close()\" > Ok! </ button > </ dialog > < button id = \"show\" onclick = \"document.getElementById('ms').show()\" > Mostrar </ button > En este caso, estamos creando una ventana de di\u00e1logo con un p\u00e1rrafo de texto y un bot\u00f3n para cerrar la ventana. Fuera de ella, un bot\u00f3n para mostrar el di\u00e1logo. La etiqueta <dialog> puede tener el atributo open para indicar que la ventana debe estar abierta por defecto. En caso contrario, no se muestra inicialmente.","title":"Di\u00e1logos emergentes"},{"location":"desarrollo/html/06-etiquetas_de_scripting/#dialogos-modales","text":"En programaci\u00f3n, una ventana modal es un tipo de ventana que se muestra al usuario, generalmente para avisarle de algo o pedirle una informaci\u00f3n necesaria para continuar. Se caracteriza en que una vez se muestra, no se le permite realizar otra tarea hasta que atienda el mensaje de esa ventana modal ( pulsar ok, responder una pregunta, etc... ). Para crear una ventana modal s\u00f3lo tendremos que usar la funci\u00f3n showModal() desde Javascript, en lugar de utilizar la funci\u00f3n show() que utilizamos en el ejemplo anterior: < dialog id = \"ms\" > < h2 > \u00a1Vuelve a la sombra! </ h2 > < img src = \"gandalf.jpg\" alt = \"Gandalf\" /> < p > \u00a1NO.. PUEDES... PASAR! </ p > < button id = \"close\" onclick = \"document.getElementById('ms').close()\" > Ok! </ button > </ dialog > < button id = \"show\" onclick = \"document.getElementById('ms').showModal()\" > Mostrar </ button > Esto mostrar\u00e1 la siguiente ventana de di\u00e1logo modal: Obs\u00e9rvese que hemos utilizado la pseudoclase CSS ::backdrop sobre la ventana de di\u00e1logo para darle estilos a la parte de detr\u00e1s de la ventana modal, pudiendo, por ejemplo, aplicarle un color de fondo negro con transparencia al 25% con la propiedad background-color:RGBA(0,0,0, .75) : # ms :: backdrop { background-color : RGBA ( 0 , 0 , 0 , 0.75 ); } Las ventanas de di\u00e1logo de HTML5.1 a\u00fan son muy recientes y el soporte no est\u00e1 muy extendido entre los diferentes navegadores del panorama web:","title":"Di\u00e1logos modales"},{"location":"desarrollo/html/06-etiquetas_de_scripting/#atributo-contenteditable","text":"En HTML5 podemos utilizar el atributo contentEditable sobre cualquier elemento para darle al usuario capacidades de edici\u00f3n sobre el mismo. De esta forma, podemos incluir el atributo contentEditable a una etiqueta <p> de p\u00e1rrafo, o a una etiqueta <h3> , por ejemplo, lo que permitir\u00e1 al usuario que, al pulsar sobre dichos elementos, pueda modificar el texto que aparece: < h3 contenteditable > T\u00edtulo del art\u00edculo </ h3 > < div contenteditable > < p > Este es un p\u00e1rrafo de ejemplo del ejemplo en cuesti\u00f3n. </ p > < p > Con \u00e9l se pretende mostrar el funcionamiento del atributo contentEditable. </ p > </ div > De esta forma, podemos dotar de capacidades de edici\u00f3n al usuario. Obs\u00e9rvese siempre que el HTML, CSS y Javascript son tecnolog\u00edas que trabajan en el front-end , o lo que es lo mismo, son descargadas desde el alojamiento web y transferidas a una carpeta temporal de nuestro sistema. En ella, el navegador la lee y ah\u00ed es donde estamos realizando dichas modificaciones. Si el usuario volviese a recargar la p\u00e1gina tras modificar ciertos elementos, los cambios no se ver\u00e1n reflejados. Para ello, hay que hacer ciertas operaciones ( por ejemplo, mediante Javascript o con un bot\u00f3n de Guardar cambios ), y realizar una petici\u00f3n al backend del alojamiento web para que guarde los cambios.","title":"Atributo contentEditable"},{"location":"desarrollo/html/06-etiquetas_de_scripting/#atributo-hidden","text":"HTML5 incorpora tambi\u00e9n un atributo hidden mediante el cu\u00e1l podemos hacer desaparecer visualmente un elemento HTML ( y todo su contenido, si es una etiqueta contenedora ). Hasta ahora, para realizar esta tarea ten\u00edamos que recurrir a CSS, ya que se trata de una cuesti\u00f3n de presentaci\u00f3n visual. Sin embargo, la diferencia entre el atributo hidden o utilizar estilos es que mediante CSS podemos mostrar elementos dependiendo de acciones del usuario o del medio en el que est\u00e9n ( media queries, por ejemplo ). Por otro lado, el attributo hidden se propone utilizarse cuando el usuario ha realizado una acci\u00f3n y hay una serie de elementos que queremos ocultar porque ya no son relevantes, independientemente de los estilos que se est\u00e9n aplicando en la p\u00e1gina: < div id = \"info\" hidden > Informaci\u00f3n </ div > < button onClick = \"toggleHidden('#info')\" > Mostrar/ocultar informaci\u00f3n </ button > En el caso anterior, tenemos un <div> con texto que vamos a ocultar cada vez que el usuario pulse el bot\u00f3n. Dicho bot\u00f3n ejecuta la funci\u00f3n Javascript toggleHidden() para ocultar o mostrar el elemento, dependiendo si ya estaba visibile o si estaba oculto: function toggleHidden ( selector ) { element = document . querySelector ( selector ); element . hidden = element . hidden ? false : true ; } El soporte de este atributo es completo en la mayor\u00eda de los navegadores: https://caniuse.com/hidden","title":"Atributo hidden"},{"location":"desarrollo/html/06-etiquetas_de_scripting/#etiquetas-html-de-scripts","text":"A medida que aprendemos HTML vemos que se trata de un lenguaje de marcas estupendo y muy potente, pero tambi\u00e9n nos vamos dando cuenta que ciertos detalles no se pueden cubrir s\u00f3lo con HTML y CSS. Para ello tenemos que hacer uso de un lenguaje de programaci\u00f3n llamado Javascript . Este lenguaje es muy potente y flexible, pero tambi\u00e9n requiere mayor dominio del c\u00f3digo que con HTML y CSS, puesto que estos \u00faltimos s\u00f3lo son lenguajes de marcas y estilos respectivamente, mientras que Javascript es un lenguaje de programaci\u00f3n que requiere ciertos conocimientos y metodolog\u00eda de desarrollo. Nota En este art\u00edculo cubriremos una parte b\u00e1sica de Javascript muy relacionada con HTML. Si quieres aprender Javascript en profundidad, echa un ojo a LenguajeJS.com .","title":"Etiquetas HTML de scripts"},{"location":"desarrollo/html/06-etiquetas_de_scripting/#la-etiqueta-script","text":"Para utilizar Javascript, lo que hacemos normalmente es indicar al HTML que queremos cargar un script ( generalmente, un archivo de texto con c\u00f3digo Javascript ) y hacerlo funcionar sobre la p\u00e1gina actual. Para hacer esto, utilizaremos la etiqueta <script> , que permite indicar una serie de atributos: Atributo Valor Descripci\u00f3n src URL Direcci\u00f3n URL del script externo a cargar. type tipo Tipo de script a cargar. Si se omite, se asume text/javascript como valor. nomodule Boolean Si se define este atributo, el script no se carga en navegadores modernos. async Boolean Ejecuta el script cuando se haya descargado, sin bloquear el navegador. defer Boolean Aplaza la ejecuci\u00f3n del script, lo ejecuta al final, cuando haya descargado todo. Para empezar, ten en cuenta que la etiqueta <script> tiene fundamentalmente dos modos de funcionar, que se basan en como definas la etiqueta <script> : Como script en l\u00ednea : El c\u00f3digo JS se incluye en el HTML, dentro de la etiqueta. Como script externo : El c\u00f3digo JS se incluye en el fichero Javascript enlazado en src . Un ejemplo de script en l\u00ednea ser\u00eda el siguiente. Observa que el c\u00f3digo se incluye en el interior de la etiqueta, por lo que permanece en el documento HTML: < script > alert ( '\u00a1Hola!' ); </ script > El siguiente c\u00f3digo, por otro lado, es un script externo , donde el c\u00f3digo Javascript se encuentra en un archivo separado del HTML, concretamente en la ruta /js/script.js : < script src = \"/js/script.js\" ></ script > En ambos casos, el navegador interrumpir\u00e1 la carga de la p\u00e1gina para procesar y ejecutar el Javascript, detalle que quiz\u00e1s no sea el m\u00e1s adecuado para nuestro desarrollo. Veremos como se puede modificar en el siguiente apartado.","title":"La etiqueta script"},{"location":"desarrollo/html/06-etiquetas_de_scripting/#modo-de-carga-del-script","text":"Cuando indicamos un script externo mediante el atributo src , por defecto el proceso de carga del script por parte del navegador es el siguiente: Detiene temporalmente la carga del HTML en el lugar donde se encontr\u00f3 el <script> . Descarga el script .js al cach\u00e9 de ficheros temporales del navegador. Ejecuta el script una vez descargado. Reanuda la carga del documento HTML por donde lo dej\u00f3, en cuanto termina la ejecuci\u00f3n del script. Este es el modo de carga por defecto de los scripts por parte del navegador. Sin embargo, existen dos m\u00e9todos de carga diferentes: la carga as\u00edncrona y la carga diferida : Modo de carga Atributo Descripci\u00f3n Carga normal (ninguno) Bloquea la carga de la p\u00e1gina y se ejecuta inmediatamente. Carga as\u00edncrona async Ejecuta el script tan pronto como est\u00e9 disponible. Carga diferida defer Aplaza la ejecuci\u00f3n del script al final de la carga de la p\u00e1gina. Estos dos m\u00e9todos tienen ligeras diferencias respecto al modo de carga b\u00e1sico que vimos anteriormente, y que aparece el primero en la siguiente ilustraci\u00f3n: Carga as\u00edncrona : El navegador descarga el script sin detener la carga del documento HTML. Una vez descargado, detiene la carga del documento HTML temporalmente, ejecuta el script, y una vez terminada la ejecuci\u00f3n, continua con la carga del documento HTML. Este tipo de carga se realiza incluyendo el atributo async en la etiqueta <script> . Carga diferida : El navegador le da prioridad a la carga del documento HTML. Descarga el script de forma paralela sin detener la carga del documento HTML. Una vez ha terminado de cargar el documento HTML, ejecuta el script. Este tipo de carga se realiza incluyendo el atributo defer en la etiqueta <script> .","title":"Modo de carga del script"},{"location":"desarrollo/html/06-etiquetas_de_scripting/#carga-de-modulos-javascript","text":"En los \u00faltimos a\u00f1os, Javascript ha incluido una funcionalidad llamada m\u00f3dulos de Javascript . Dichos m\u00f3dulos son una modalidad espec\u00edfica de archivos Javascript, los cuales pueden compartir funcionalidades a trav\u00e9s de las palabras clave import y export . Estas funcionalidades est\u00e1n prohibidas por defecto, y s\u00f3lo se podr\u00e1n realizar si a la hora de cargar el script con la etiqueta <script> definimos el atributo type a module . Esto nos permitir\u00e1 cargar el archivo Javascript como m\u00f3dulo y utilizarlo: < script type = \"module\" > import { Howler , Howl } from \"https://unpkg.com/howler\" ; </ script > Nota Es posible usar el atributo type=\"module\" tanto en etiquetas <script> en l\u00ednea ( ejemplo anterior ) como con etiquetas <script> que utilicen el atributo src . Adem\u00e1s, todos los scripts cargados como m\u00f3dulos, se ejecutar\u00e1n en modo diferido . En algunos casos, podemos crear etiquetas <script> que utilicen un atributo nomodule . Dicho atributo indicar\u00e1 a navegadores modernos que soportan el atributo type=module , que no deben descargar ni ejecutar ese script. Sin embargo, navegadores antiguos que no lo soportan cargar\u00e1n el script como un fichero Javascript normal y corriente: < script type = \"module\" > /* C\u00f3digo para navegadores modernos */ import { Howler , Howl } from \"https://unpkg.com/howler\" ; </ script > < script nomodule > /* C\u00f3digo para navegadores antiguos */ </ script > La finalidad de este atributo es poder crear scripts a modo de fallback para realizar tareas equivalentes en navegadores antiguos y dar soporte a otros sistemas menos modernos. Es lo que se conoce como el patr\u00f3n module/nomodule .","title":"Carga de m\u00f3dulos Javascript"},{"location":"desarrollo/html/06-etiquetas_de_scripting/#lenguajes-de-scripting","text":"Por defecto, el lenguaje de scripting soportado por los navegadores es Javascript , por lo que cuando hablamos de scripting en el navegador ( front-end, o en el lado del cliente ) hablamos de este lenguaje. Javascript est\u00e1 basado en ECMAScript , el est\u00e1ndar que indica como debe actuar el lenguaje. Luego, es misi\u00f3n de cada navegador implementarlo de acuerdo a esas normas, aunque siempre hay algunas diferencias entre navegadores. Existen alternativas para no utilizar Javascript directamente, sino alg\u00fan lenguaje similar que traduce ( o mejor dicho, transpila ) a Javascript. Directamente, los navegadores solo soportan Javascript. Quiz\u00e1s, los transpiladores m\u00e1s populares a Javascript sean TypeScript y Babel .","title":"Lenguajes de scripting"},{"location":"desarrollo/html/06-etiquetas_de_scripting/#la-etiqueta-noscript","text":"Debemos ser conscientes de que, aunque actualmente la mayor\u00eda de los navegadores poseen Javascript, un usuario puede acceder desde un dispositivo que no tenga Javascript ( muy poco habitual ) o que tenga Javascript deshabilitado ( poco habitual ). Una buena costumbre, es proporcionar una alternativa ( aunque sea m\u00ednima ) para aquellos usuarios que no tengan Javascript habilitado. Para ello, utilizaremos la etiqueta <noscript> : < script > var usuario = prompt ( \"\u00bfCu\u00e1l es tu nombre?\" ); alert ( \"\u00a1Hola, \" + usuario + \"!\" ); </ script > < noscript > \u00a1Hola, usuario! </ noscript > En caso de que el usuario tenga capacidades de Javascript en su navegador, se ejecutar\u00e1 el c\u00f3digo de la etiqueta <script> , sin embargo, si el navegador no tiene Javascript, se mostrar\u00e1 el texto proporcionado en la etiqueta <noscript> , que aunque no puede recoger el nombre de usuario, mostrar\u00e1 una alternativa. De esta forma evitamos que si el usuario no tiene Javascript, vea una p\u00e1gina en blanco.","title":"La etiqueta noscript"},{"location":"desarrollo/html/06-etiquetas_de_scripting/#la-etiqueta-template","text":"La etiqueta <template> es un m\u00e9todo ideal para reutilizar informaci\u00f3n HTML y tratarla mediante Javascript. En el siguiente ejemplo tenemos una tabla HTML que s\u00f3lo tiene definida la cabecera de la misma. Sin embargo, un poco m\u00e1s abajo hay una etiqueta <template> que contiene una fila con 3 celdas: < table id = \"tabla\" > < tr > < th > Nombre </ th > < th > Apellidos </ th > < th > Calificaci\u00f3n </ th > </ tr > < template id = \"usuario\" > < tr > < td > 1 </ td > < td > 2 </ td > < td > 3 </ td > </ tr > </ template > </ table > El contenido de una etiqueta <template> es inerte, de modo que el navegador no interpreta su interior ( no descarga im\u00e1genes, no ejecuta scripts, etc... ) hasta que el usuario clona su contenido para insertarlo en el HTML. En este ejemplo anterior, nosotros podr\u00edamos desde Javascript obtener el contenido de la plantilla <template> , clonarlo y a\u00f1adirlo al final de la tabla de forma din\u00e1mica, para posteriormente modificar los datos de cada fila: var template = document . getElementById ( \"usuario\" ); var tabla = document . getElementById ( \"tabla\" ); tabla . appendChild ( template . content . cloneNode ( true )); Nota Si te interesa este tema, tienes m\u00e1s informaci\u00f3n sobre la etiqueta <template> ( y plantillas en general ) en este art\u00edculo sobre Plantillas, DOM y WebComponents . Las plantillas HTML tienen relativamente buen soporte, aunque en el caso de querer dar soporte a Internet Explorer habr\u00eda que utilizar alg\u00fan polyfill como Minimal Polyfill for Template : https://caniuse.com/template","title":"La etiqueta template"},{"location":"desarrollo/html/06-etiquetas_de_scripting/#eventos-en-html","text":"En Javascript hay un concepto llamado evento que se utiliza para referirse al instante justo en el que ocurre un determinado suceso. Por ejemplo, existe un evento llamado click que se dispara cuando un usuario hace clic sobre un elemento HTML . Podemos decirle al navegador que cuando ocurra un evento concreto, realice una acci\u00f3n determinada. De esta forma, podemos preparar nuestra p\u00e1gina para que act\u00fae seg\u00fan las circunstancias.","title":"Eventos en HTML"},{"location":"desarrollo/html/06-etiquetas_de_scripting/#eventos","text":"Existen much\u00edsimos tipos de eventos en Javascript. Para activarlos, lo primero es elegir la etiqueta en la que ocurrir\u00e1 el evento. Una vez elegida, colocaremos un atributo en dicha etiqueta para detectar si se produce el evento. Adem\u00e1s, hay que indicar el prefijo on en el atributo del evento. Por ejemplo, si queremos detectar el evento click , el atributo HTML deber\u00e1 llamarse onClick . As\u00ed pues, veamos un ejemplo: < div > < img src = \"gandalf.jpg\" alt = \"Gandalf\" onClick = \"alert('\u00a1Has hecho clic!')\" /> </ div > En este sencillo ejemplo, hemos especificado una imagen que es la que estar\u00e1 \u00abescuchando\u00bb el evento click . Si el usuario hace clic sobre ese elemento, o sea, sobre la imagen, el navegador dispar\u00e1 el evento y ejecutar\u00e1 la funci\u00f3n Javascript alert() , mostrando un mensaje por pantalla: \u00a1Has hecho clic! .","title":"Eventos"},{"location":"desarrollo/html/06-etiquetas_de_scripting/#detalles-del-evento","text":"En los eventos, puede que queramos obtener informaci\u00f3n m\u00e1s espec\u00edfica, como por ejemplo, el n\u00famero de veces que hizo clic el usuario sobre la imagen ( si fue un solo clic, si fue doble clic, etc... ). Este dato espec\u00edfico lo devuelve el evento onClick a trav\u00e9s del objeto especial event , as\u00ed que continuemos con el ejemplo anterior, modificando algunas cosas: < div > < img src = \"gandalf.jpg\" alt = \"Gandalf\" onClick = \"updateCounter(event)\" /> < p > Has hecho clic a Gandalf < span id = \"num\" > 0 </ span > veces. </ p > </ div > Obs\u00e9rvese que en este caso, en lugar del alert() usado antes, ejecutamos una funci\u00f3n javascript que crearemos nosotros, llamada updateCounter() . Despu\u00e9s de la imagen, hay un p\u00e1rrafo de texto que contiene una frase y un fragmento <span id=\"num\"> que contendr\u00e1 el n\u00famero de veces que se ha pulsado sobre la imagen. Inicialmente se encuentra establecido a 0 . Por su parte, la funci\u00f3n updateCounter() pasa por par\u00e1metro una variable especial event , que es la que tiene la informaci\u00f3n sobre el evento ocurrido, y que posteriormente utilizaremos para extraer dicha informaci\u00f3n. Definimos la funci\u00f3n updateCounter() en Javascript: function updateCounter ( e ) { document . querySelector ( \"#num\" ). textContent = e . detail ; } Esta funci\u00f3n busca la etiqueta HTML que tiene un id=\"num\" , y mediante .textContent modificamos su contenido. El nuevo contenido es e.detail que no es m\u00e1s que un dato que se encuentra en el evento que se ha disparado. Ese dato devuelve el n\u00famero de veces seguidas ( contador ) que el usuario puls\u00f3 sobre la imagen. Veamos finalmente lo que ocurrir\u00eda con este ejemplo. Lo que aparece a la izquierda es cuando el usuario pulsa el bot\u00f3n del rat\u00f3n ( LButtonDown ) y cuando lo suelta ( LButtonUp ):","title":"Detalles del evento"},{"location":"desarrollo/html/06-etiquetas_de_scripting/#otros-eventos","text":"Existen muchos otros eventos, pr\u00e1cticamente uno para cada acci\u00f3n que pueda ocurrir en un documento HTML. A continuaci\u00f3n, muestro algunos grupos de eventos muy utilizados frecuentemente de la gran cantidad de eventos existentes en Javascript.","title":"Otros Eventos"},{"location":"desarrollo/html/06-etiquetas_de_scripting/#eventos-de-documento","text":"Es posible poner a escuchar ciertos eventos sobre el documento HTML completo, estableciendo el atributo del evento en la etiqueta <body> : Tipo de evento Atributo HTML Descripci\u00f3n UIEvent onLoad La p\u00e1gina (el documento HTML) ha terminado de cargarse. UIEvent onUnload La p\u00e1gina (el documento HTML) va a cerrarse. UIEvent onScroll El usuario ha hecho scroll sobre la p\u00e1gina (el documento HTML).","title":"Eventos de documento"},{"location":"desarrollo/html/06-etiquetas_de_scripting/#eventos-de-carga-de-recursos","text":"Sobre las etiquetas que cargan un archivo externo, como podr\u00edan ser <img> o <script> , e incluso <style> con estilos CSS en l\u00ednea. Los archivos multimedia <audio> y <video> tienen sus propios eventos espec\u00edficos, ya que tienen un proceso de carga especial: Tipo de evento Atributo HTML Descripci\u00f3n UIEvent onLoad El recurso ha terminado de cargarse en la p\u00e1gina. UIEvent onUnload El recurso ha sido eliminado de la p\u00e1gina. UIEvent onAbort El recurso ha sido cancelado y no ha terminado su carga. UIEvent onError El recurso ha dado un error y no ha terminado su carga. UIEvent onSelect El usuario ha seleccionado un texto de un campo de datos.","title":"Eventos de carga de recursos"},{"location":"desarrollo/html/06-etiquetas_de_scripting/#eventos-de-foco-en-elementos","text":"Sobre etiquetas <input> , <textarea> , <select> , <a> o cualquier otra etiqueta que pueda ser seleccionable por el usuario pulsando la tecla TAB, existen una serie de eventos para controlar cuando gana o pierde el foco un elemento: Tipo de evento Atributo HTML Descripci\u00f3n FocusEvent onBlur El elemento ha perdido el foco (foco de salida). FocusEvent onFocusout El elemento ha perdido el foco (y permite bubble). FocusEvent onFocus El elemento ha ganado el foco (foco de entrada). FocusEvent onFocusin El elemento ha ganado el foco (y permite bubble).","title":"Eventos de foco en elementos"},{"location":"desarrollo/html/06-etiquetas_de_scripting/#eventos-de-raton","text":"Los eventos de rat\u00f3n se utilizan para detectar todas aquellas acciones que el usuario realiza mediante el rat\u00f3n con alg\u00fan elemento de la p\u00e1gina, como podr\u00eda ser mover el rat\u00f3n por encima de ellos, hacer clic, mover la rueda del rat\u00f3n, etc... Tipo de evento Atributo HTML Descripci\u00f3n MouseEvent onClick El usuario ha pulsado ( y soltado ) el elemento. MouseEvent onDblclick El usuario ha hecho doble clic en el elemento. MouseEvent onMousedown El usuario ha pulsado ( a\u00fan sin haber soltado ) el elemento. MouseEvent onMouseup El usuario ha soltado el bot\u00f3n pulsado en un elemento. MouseEvent onMousemove El usuario ha movido el rat\u00f3n. MouseEvent onMouseenter El usuario ha movido el rat\u00f3n dentro de un elemento. MouseEvent onMouseleave El usuario ha movido el rat\u00f3n fuera de un elemento. MouseEvent onMouseout El usuario ha movido el rat\u00f3n fuera de un elemento (bubbles). MouseEvent onMouseover El usuario ha movido el rat\u00f3n dentro de un elemento (bubbles). WheelEvent onWheel El usuario ha movido la rueda del rat\u00f3n.","title":"Eventos de rat\u00f3n"},{"location":"desarrollo/html/06-etiquetas_de_scripting/#eventos-de-entrada-de-datos","text":"Sobre elementos <input> o elementos HTML con el atributo contentEditable , y por lo tanto, elementos HTML que son editables por el usuario: Tipo de evento Atributo HTML Descripci\u00f3n InputEvent onBeforeInput Un elemento <input> o con atributo contentEditable a punto de cambiar. InputEvent onInput Un elemento <input> o con atributo contentEditable ha cambiado.","title":"Eventos de entrada de datos"},{"location":"desarrollo/html/06-etiquetas_de_scripting/#eventos-multimedia","text":"Sobre elementos multimedia como <audio> o <video> , donde se carga un recurso ( MP4, WebM, MP3, OGG... ) externo: Tipo de evento Atributo HTML Descripci\u00f3n MediaEvent onEmptied El audio o video se ha vac\u00edado (recargar elemento). MediaEvent onLoadedMetadata Se han precargado los metadatos del audio o video (duraci\u00f3n, subs...) MediaEvent onLoadedData Se ha precargado el comienzo del audio o video. MediaEvent onCanPlay El audio o video se ha precargado lo suficiente para reproducir. MediaEvent onCanPlayThrough El audio o video se ha precargado completamente. MediaEvent onPlay El audio o video comienza a reproducirse (tras haber sido pausado). MediaEvent onPlaying El audio o video comienza a reproducirse. MediaEvent onPause El audio o video ha sido pausado. MediaEvent onTimeUpdate El audio o video ha avanzado en su reproducci\u00f3n. MediaEvent onEnded El audio o video ha completado su reproducci\u00f3n. MediaEvent onWaiting El audio o video est\u00e1 esperando a que el buffer se complete. MediaEvent onDurationChange El audio o video ha cambiado su duraci\u00f3n total (metadatos). MediaEvent onRateChange El audio o video ha cambiado su velocidad de reproducci\u00f3n. MediaEvent onVolumeChange El audio o video ha cambiado su volumen de reproducci\u00f3n. ProgressEvent onProgress El audio o video se est\u00e1 descargando. ProgressEvent onLoadStart MediaEvent onSuspend La precarga del audio o video ha sido suspendida (ok o pause). UIEvent onAbort La precarga del audio o video ha sido abortada o reiniciada. UIEvent onError Ha ocurrido un error. MediaEvent onStalled El navegador intenta precargar el audio o video, pero se ha estancado. MediaEvent onSeeking El navegador comenz\u00f3 a buscar un momento concreto del audio/video. MediaEvent onSeeked El navegador termin\u00f3 de buscar un momento concreto del audio/video. UIEvent onResize El video ha sido redimensionado. Todos estos eventos ( y muchos otros no inclu\u00eddos en esta secci\u00f3n ) se pueden llamar desde Javascript para realizar personalizaciones m\u00e1s espec\u00edficas, pero en ese caso ya hay que recurrir a Javascript y realizar tareas y metodolog\u00edas de programaci\u00f3n m\u00e1s espec\u00edficas. Fuente: Lenguaje de Html por Manz","title":"Eventos multimedia"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/","text":"Introducci\u00f3n a Javascript \u00b6 \u00bfQu\u00e9 es Javascript? \u00b6 Cualquier p\u00e1gina web de Internet est\u00e1 constru\u00edda, como m\u00ednimo, por HTML ( un lenguaje de marcas ) y CSS ( un lenguaje de estilos ). El primero de ellos permite construir todo el marcado de la p\u00e1gina ( contenido e informaci\u00f3n ) mediante etiquetas HTML y dot\u00e1ndo de sem\u00e1ntica a la informaci\u00f3n mediante la naturaleza de dichas etiquetas. Posteriormente, el segundo de ellos permite darle estilo a la p\u00e1gina y construir una interfaz visual m\u00e1s agradable para el usuario. La separaci\u00f3n bien marcada de estos dos pilares permite que si en alg\u00fan momento necesitamos modificar la informaci\u00f3n ( o el dise\u00f1o ) de la p\u00e1gina, no tengamos tambi\u00e9n que lidiar con modificaciones en el otro. Sin embargo, utilizar s\u00f3lo y exclusivamente HTML y CSS en una p\u00e1gina nos limita considerablemente. Si bien es cierto que con estos dos lenguajes podemos hacer un gran abanico de cosas, hay otras que ser\u00edan totalmente imposibles, o al menos, mucho m\u00e1s f\u00e1ciles de realizar si tuvieramos un lenguaje de programaci\u00f3n a nuestra disposici\u00f3n. Y en este punto es donde aparece Javascript . \u00bfQu\u00e9 es Javascript? \u00b6 Javascript es un lenguaje de programaci\u00f3n , o lo que es lo mismo, un mecanismo con el que podemos decirle a nuestro navegador que tareas debe realizar, en que orden y cuantas veces ( por ejemplo ). Muchas de las tareas que realizamos con HTML y CSS se podr\u00edan realizar con Javascript. De hecho, es muy probable que al principio nos parezca que es mucho m\u00e1s complicado hacerlo con Javascript, y que por lo tanto no merece la pena. Sin embargo, con el tiempo veremos que Javascript nos ofrece una mayor flexibilidad y un abanico de posibilidades m\u00e1s grande, y que bien usadas, pueden ahorrarnos bastante tiempo. Para comprenderlo, un ejemplo muy sencillo ser\u00eda el siguiente: <div class=\"item\"> <p>N\u00famero: <span class=\"numero\">1</span></p> <p>N\u00famero: <span class=\"numero\">2</span></p> <p>N\u00famero: <span class=\"numero\">3</span></p> <p>N\u00famero: <span class=\"numero\">4</span></p> <p>N\u00famero: <span class=\"numero\">5</span></p> </div> Imaginemos que tenemos que crear una lista de n\u00fameros desde el 1 hasta el 500 . Hacerlo solamente con HTML ser\u00eda muy tedioso, ya que tendr\u00edamos que copiar y pegar esas filas varias veces hasta llegar a 500. Sin embargo, mediante Javascript, podemos decirle al navegador que escriba el primer p\u00e1rrafo <p> , que luego escriba el mismo pero sum\u00e1ndole uno al n\u00famero. Y que esto lo repita hasta llegar a 500. De esta forma y con este sencillo ejemplo, con HTML habr\u00eda que escribir 500 l\u00edneas mientras que con Javascript no ser\u00edan m\u00e1s de 10 l\u00edneas . Dificultad \u00b6 Aunque Javascript es ideal para muchos casos, es mucho m\u00e1s complicado aprender Javascript ( o un lenguaje de programaci\u00f3n en general ) que aprender HTML o CSS, los cuales son mucho m\u00e1s sencillos de comprender. Antes debemos conocer varias cosas: Para aprender Javascript debemos conocer el lenguaje Javascript , pero no podremos hacerlo si no sabemos programar. Se puede aprender a programar con Javascript, pero es recomendable tener una serie de fundamentos b\u00e1sicos de programaci\u00f3n antes para que no nos resulte muy duro. Para aprender a programar antes debemos saber como \u00abtrabaja un ordenador\u00bb. Programar no es m\u00e1s que decirle a una m\u00e1quina que cosas debe hacer y como debe hacerlas. Eso significa que no podemos pasar por alto nada. Para darle \u00f3rdenes a una m\u00e1quina debemos tener claro que esas \u00f3rdenes son correctas y har\u00e1n lo que se supone que deben hacer. Si le indicamos a una m\u00e1quina los pasos para resolver un problema, pero dichos pasos son err\u00f3neos, la m\u00e1quina tambi\u00e9n har\u00e1 mal el trabajo. Dicho esto, es necesario tener presente que aprender a programar es una tarea que no ocurre de un d\u00eda para otro. Requiere tiempo, esfuerzo, acostumbrarse a cambiar la forma de pensar y practicar mucho. Puedes copiar un programa en segundos, pero eso no significa que lo entiendas. Puedes comprender un programa en minutos, pero eso no significa que lo puedas crear. Puedes crear un programa en horas, pero eso no significa que sepas programar. Puedes aprender a programar en semanas, pero eso no significa que no cometas errores. Puedes aprender a programar bien y sin demasiados errores en meses. Pero dominar la programaci\u00f3n es una tarea que requiere a\u00f1os. La consola Javascript \u00b6 Para acceder a la consola Javascript del navegador, podemos pulsar CTRL+SHIFT+I sobre la pesta\u00f1a de la p\u00e1gina web en cuesti\u00f3n, lo que nos llevar\u00e1 al Inspector de elementos del navegador. Este inspector es un panel de control general donde podemos ver varios aspectos de la p\u00e1gina en la que nos encontramos: su etiquetado HTML, sus estilos CSS, etc... Concretamente, a nosotros nos interesa una secci\u00f3n particular del inspector de elementos. Para ello, nos moveremos a la pesta\u00f1a Console y ya nos encontraremos en la consola Javascript de la p\u00e1gina. Tambi\u00e9n se puede utilizar directamente el atajo de teclado CTRL+SHIFT+J, que en algunos navegadores nos lleva directamente a la consola. En esta consola, podemos escribir funciones o sentencias de Javascript que estar\u00e1n actuando en la p\u00e1gina que se encuentra en la pesta\u00f1a actual del navegador. De esta forma podremos observar los resultados que nos devuelve en la consola al realizar diferentes acciones. Para ello, vamos a ver algunas bases: La consola \u00b6 El cl\u00e1sico primer ejemplo cuando se comienza a programar, es crear un programa que muestre por pantalla un texto, generalmente el texto \u00ab Hola Mundo \u00bb. Tambi\u00e9n podemos realizar, por ejemplo, operaciones num\u00e9ricas . En la consola Javascript podemos hacer esto de forma muy sencilla: console.log(\"Hola Mundo\"); console.log(2 + 2); En la primera l\u00ednea, veremos que al pulsar enter nos muestra el texto \u00ab Hola Mundo \u00bb. En la segunda l\u00ednea, sin embargo, procesa la operaci\u00f3n y nos devuelve 4 . Para mostrar estos textos en la consola Javascript hemos utilizado la funci\u00f3n console.log , pero existen varias m\u00e1s: Funci\u00f3n Descripci\u00f3n console.log() Muestra la informaci\u00f3n proporcionada en la consola Javascript. console.info() Equivalente al anterior. Se utiliza para mensajes de informaci\u00f3n. console.warn() Muestra informaci\u00f3n de advertencia. Aparece en amarillo. console.error() Muestra informaci\u00f3n de error. Aparece en rojo. console.clear() Limpia la consola. Equivalente a pulsar CTRL+L o escribir clear() . La idea es utilizar en nuestro c\u00f3digo la funci\u00f3n que m\u00e1s se adapte a nuestra situaci\u00f3n en cada caso ( errores graves con console.error(), errores leves con console.warn(), etc... ). Aplicar varios datos \u00b6 En el ejemplo anterior, solo hemos aportado un dato por cada l\u00ednea ( un texto o una operaci\u00f3n num\u00e9rica ), pero console.log() y sus funciones hermanas permiten a\u00f1adir varios datos en una misma l\u00ednea, separ\u00e1ndolo por comas: console.log(\"\u00a1Hola a todos! Observen este n\u00famero: \", 5 + 18); De momento nos puede parecer algo in\u00fatil, pero cuando empecemos a trabajar con variables y objetos, ser\u00e1 muy necesario. Aplicar estilos en la consola \u00b6 Aunque no es muy pr\u00e1ctico y s\u00f3lo se trata de puro divertimento, se pueden aplicar estilos CSS en la consola Javascript haciendo uso de %c , que se reemplazar\u00e1 por los estilos indicados: console.log(\"%c\u00a1Hola Manz!\", \"background:linear-gradient(#000, #555); color:#fff; padding: 5px 10px;\"); Es importante recalcar que cuando escribimos en la consola podemos obviar el console.log() y escribir directamente la informaci\u00f3n, pero si queremos mostrar algo por consola desde nuestra p\u00e1gina web o aplicaci\u00f3n Javascript, es absolutamente necesario escribir console.log() ( o cualquiera de las funciones de su familia ) en nuestro c\u00f3digo. \u00bfC\u00f3mo funciona Javascript? \u00b6 El esquema general de una p\u00e1gina web es un documento HTML donde est\u00e1n todas las etiquetas HTML de la p\u00e1gina. A lo largo de ese documento, pueden existir referencias o relaciones a otros documentos, como archivos CSS o archivos Javascript. Por ejemplo, si dentro del documento HTML se encuentra una referencia a un archivo CSS , el navegador lo descarga y lo aplica al documento HTML, cambiando su apariencia visual. De la misma forma, si encuentra una referencia a un archivo Javascript , el navegador lo descarga y ejecuta las \u00f3rdenes o acciones que all\u00ed se indican. Ejemplo de script en l\u00ednea \u00b6 En este primer y sencillo ejemplo, s\u00f3lo tenemos un documento: el archivo HTML . En \u00e9l, existe una etiqueta <script> que contiene las \u00f3rdenes o l\u00edneas de Javascript que le indican al navegador que tiene que hacer ( en este caso, mostrar un \"\u00a1Hola!\" en la consola ): <html> <head> <title>T\u00edtulo de la p\u00e1gina</title> <script> console.log(\"\u00a1Hola!\"); </script> </head> <body> <p>Ejemplo de texto.</p> </body> </html> Este m\u00e9todo de escribir scripts se denomina Javascript en l\u00ednea ( inline ), y significa que el Javascript est\u00e1 escrito directamente en el c\u00f3digo HTML. Nos puede servir como ejemplo inicial, pero no es la forma recomendable de escribirlo, ya que lo ideal es separar el c\u00f3digo HTML del c\u00f3digo Javascript ( en archivos diferentes ) para organizarnos mejor. Ejemplo de script externo \u00b6 Esta otra forma de incluir Javascript en una p\u00e1gina tiene la ventaja de, en el caso de necesitar incluir el c\u00f3digo Javascript desde varios documentos HTML, no tendremos que volver a escribir dicho c\u00f3digo, sino simplemente referenciar el nombre del mismo archivo Javascript a incluir en todas las p\u00e1ginas HTML. Para relacionar un documento Javascript desde una p\u00e1gina web, igual que antes, utilizaremos la etiqueta <script> , s\u00f3lo que en este caso, haremos referencia al archivo Javascript con un atributo src ( source ), como se ve en el siguiente ejemplo: <html> <head> <title>T\u00edtulo de la p\u00e1gina</title> <script src=\"js/index.js\"></script> </head> <body> <p>Ejemplo de texto.</p> </body> </html> El texto js/index.js no es m\u00e1s que una referencia a un archivo index.js que se encuentra dentro de una carpeta js , situada en la misma carpeta que el documento HTML del ejemplo. Si en este archivo Javascript, inclu\u00edmos el console.log() de mensaje de bienvenida, ese mensaje deber\u00eda aparecer en la consola Javascript al cargar esta p\u00e1gina. Ubicaci\u00f3n de la etiqueta script \u00b6 Si te fijas, en el ejemplo anterior, la etiqueta <script> est\u00e1 situada dentro de la etiqueta <head> de la p\u00e1gina, es decir, en la cabecera de metadatos. Esto significa que la p\u00e1gina web descargar\u00e1 el archivo Javascript antes de empezar a dibujar el contenido de la p\u00e1gina ( etiqueta <body> ). Es posible que te hayas encontrado ejemplos donde dicha etiqueta est\u00e9 ubicada en otra parte del documento HTML. Veamos las posibilidades: Ubicaci\u00f3n \u00bfC\u00f3mo descarga el archivo Javascript? Estado de la p\u00e1gina En <head> ANTES de empezar a dibujar la p\u00e1gina. P\u00e1gina a\u00fan no dibujada. En <body> DURANTE el dibujado de la p\u00e1gina. Dibujada hasta donde est\u00e1 la etiqueta <script> . Antes de </body> DESPU\u00c9S de dibujar la p\u00e1gina. Dibujada al 100%. Ten en cuenta que el navegador puede descargar un documento Javascript en cualquier momento de la carga de la p\u00e1gina y necesitamos saber cu\u00e1l es el m\u00e1s oportuno para nosotros. Si queremos que un documento Javascript act\u00fae antes que se muestre la p\u00e1gina, la opci\u00f3n de colocarlo en el <head> es la m\u00e1s adecuada. Si por el contrario, queremos que act\u00fae una vez se haya terminado de cargar la p\u00e1gina, la opci\u00f3n de colocarlo justo antes del </body> es la m\u00e1s adecuada. Esta opci\u00f3n es equivalente a usar el atributo defer en la etiqueta <script> , sin embargo, esta opci\u00f3n es adem\u00e1s compatible con navegadores muy antiguos ( IE9 o anteriores ) que no soportan defer . Nota Tienes m\u00e1s informaci\u00f3n sobre etiquetas script en la p\u00e1gina de LenguajeHTML . Conceptos b\u00e1sicos \u00b6 Si no has programado hasta ahora, debes conocer una serie de conceptos b\u00e1sicos que tendr\u00e1s que trabajar y dominar dentro del campo de la programaci\u00f3n. Glosario general \u00b6 Programa : En programaci\u00f3n se suele llamar \u00abprograma\u00bb a el conjunto total de c\u00f3digo que desarrollas. En Javascript, quiz\u00e1s el t\u00e9rmino m\u00e1s utilizado es aplicaci\u00f3n web ( cuando es un desarrollo con mucha cantidad de Javascript ). Tambi\u00e9n se suelen generalizar utilizando t\u00e9rminos como \u00abscript\u00bb o \u00abc\u00f3digo Javascript\u00bb. Algoritmo : Un algoritmo es un conjunto de pasos conocidos, en un determinado orden, para conseguir realizar una tarea satisfactoriamente y lograr un objetivo. Comentarios : Los comentarios en nuestro c\u00f3digo son fragmentos de texto o anotaciones que el navegador ignora y no repercuten en el programa. Sirven para dejar por escrito detalles importantes para el programador. De esta forma cuando volvamos al c\u00f3digo, nos ser\u00e1 m\u00e1s r\u00e1pido comprenderlo. Es una buena costumbre comentar en la medida de lo posible nuestro c\u00f3digo. Indentaci\u00f3n : Se llama indentar a la acci\u00f3n de colocar espacios o tabuladores antes del c\u00f3digo, para indicar si nos encontramos dentro de un if , de un bucle , etc... Esta pr\u00e1ctica es muy importante y necesaria, y m\u00e1s adelante profundizaremos en ella. Variables : Es el nombre gen\u00e9rico que se le da a peque\u00f1os espacios de memoria donde guardas una informaci\u00f3n determinada, de forma muy similar a las inc\u00f3gnitas en matem\u00e1ticas. Un programa puede tener muchas variables, y cada una de ellas tendr\u00e1 un nombre , un valor y un tipo de dato . El nombre se utiliza para diferenciarlas unas de otras y hacer referencia a ellas, el valor es la informaci\u00f3n que contienen y el tipo de dato es la naturaleza de ese valor. Se llaman variables porque podemos cambiarle su valor a lo largo del programa, seg\u00fan necesitemos. x = 5; // nombre: x, valor: 5, tipo de dato: n\u00famero y = \"Hola\"; // nombre: y, valor: Hola, tipo de dato: texto Manz = \"me\"; // nombre: Manz, valor: me, tipo de dato: texto Constantes : Es el mismo concepto de una variable, salvo que en este caso, la informaci\u00f3n que contiene es siempre la misma ( no puede variar ). Funciones : Cuando comenzamos a programar, nuestro c\u00f3digo se va haciendo cada vez m\u00e1s y m\u00e1s grande, por lo que hay que buscar formas de organizarlo y mantenerlo lo m\u00e1s simple posible. Las funciones son agrupaciones de c\u00f3digo que, entre otras cosas, evitan que tengamos que escribir varias veces lo mismo en nuestro c\u00f3digo. Una funci\u00f3n contendr\u00e1 una o mas acciones a realizar y cada vez que ejecutemos una funci\u00f3n, se realizar\u00e1n todas ellas. Par\u00e1metros : Es el nombre que reciben las variables que se le pasan a las funciones. Muchas veces tambi\u00e9n se les denomina argumentos . Bucles : Cuando estamos programando, muchas veces necesitaremos realizar tareas repetitivas. Una de las ventajas de la programaci\u00f3n es que permite automatizar acciones y no es necesario hacerlas varias veces. Los bucles permiten indicar el n\u00famero de veces que se repetir\u00e1 una acci\u00f3n. De esta forma, s\u00f3lo la escribimos una vez en nuestro c\u00f3digo, y simplemente indicamos el n\u00famero de veces que queremos que se repita. Iteraci\u00f3n : Cuando el programa est\u00e1 en un bucle repitiendo varias veces la misma tarea, cada una de esas repeticiones se denomina iteraci\u00f3n . Librer\u00eda : Muchas veces, desarrollamos c\u00f3digo que resuelve tareas o problemas que, posteriormente, querremos reutilizar en otros programas. Cuando eso ocurre, en Javascript se suele empaquetar el c\u00f3digo en lo que se llaman librer\u00edas , que no es m\u00e1s que c\u00f3digo listo para que otros programadores puedan utilizarlo f\u00e1cilmente en sus programas y beneficiarse de las tareas que resuelven de forma muy sencilla. La especificaci\u00f3n ECMAScript \u00b6 ECMAScript es la especificaci\u00f3n donde se mencionan todos los detalles de c\u00f3mo debe funcionar y comportarse Javascript en un navegador. De esta forma, los diferentes navegadores ( Chrome, Firefox, Opera, Edge, Safari... ) saben como deben desarrollar los motores de Javascript para que cualquier c\u00f3digo o programa funcione exactamente igual, independientemente del navegador que se utilice. ECMAScript suele venir acompa\u00f1ado de un n\u00famero que indica la versi\u00f3n o revisi\u00f3n de la que hablamos ( algo similar a las versiones de un programa ). En cada nueva versi\u00f3n de ECMAScript, se modifican detalles sobre Javascript y/o se a\u00f1aden nuevas funcionalidades, manteniendo Javascript vivo y con novedades que lo hacen un lenguaje de programaci\u00f3n moderno y cada vez mejor preparado para utilizar en el d\u00eda a d\u00eda. Teniendo esto en cuenta, debemos saber que los navegadores web intentan cumplir la especificaci\u00f3n ECMAScript al m\u00e1ximo nivel, pero no todos ellos lo consiguen. Por lo tanto, pueden existir ciertas discrepancias. Por ejemplo, pueden existir navegadores que cumplan la especificaci\u00f3n ECMAScript 6 al 80% y otros que s\u00f3lo la cumplan al 60%. Esto significa que pueden haber caracter\u00edsticas que no funcionen en un navegador espec\u00edfico ( y en otros s\u00ed ). Adem\u00e1s, todo esto va cambiando a medida que se van lanzando nuevas versiones de los navegadores web, donde su compatibilidad ECMAScript suele aumentar. Versiones de ECMAScript \u00b6 A lo largo de los a\u00f1os, Javascript ha ido sufriendo modificaciones que los navegadores han ido implementando para acomodarse a la \u00faltima versi\u00f3n de ECMAScript cuanto antes. La lista de versiones de ECMAScript aparecidas hasta el momento son las siguientes, donde encontramos las versiones enmarcadas en lo que podemos considerar el pasado de Javascript : Ed. Fecha Nombre formal / informal Cambios significativos 1 JUN/1997 ECMAScript 1997 (ES1) Primera edici\u00f3n 2 JUN/1998 ECMAScript 1998 (ES2) Cambios leves 3 DIC/1999 ECMAScript 1999 (ES3) RegExp, try/catch, etc... 4 AGO/2008 ECMAScript 2008 (ES4) Versi\u00f3n abandonada. 5 DIC/2009 ECMAScript 2009 (ES5) 5.1 DIC/2011 ECMAScript 2011 (ES5.1) Cambios leves A partir del a\u00f1o 2015, se marc\u00f3 un antes y un despu\u00e9s en el mundo de Javascript, estableciendo una serie de cambios que lo transformar\u00edan en un lenguaje moderno, partiendo desde la espec\u00edficaci\u00f3n de dicho a\u00f1o, hasta la actualidad: Ed.|Fecha|Nombre formal / informal|Cambios significativos 6|JUN/2015|ECMAScript 2015 (ES6)|Clases, m\u00f3dulos, generadores, hashmaps, sets, for of, proxies... 7|JUN/2016|ECMAScript 2016|Array includes(), Exponenciaci\u00f3n ** 8|JUN/2017|ECMAScript 2017|Async/await 9|JUN/2018|ECMAScript 2018|Rest/Spread operator, Promise.finally()... 10|JUN/2019|ECMAScript 2019|Flat functions, trimStart(), errores opcionales en catch... 11|JUN/2020|ECMAScript 2020|Dynamic imports, BigInt, Promise.allSettled En ocasiones, algunos navegadores deciden implementar peque\u00f1as funcionalidades de versiones posteriores de ECMAScript antes que otras, para ir testeando y probando caracter\u00edsticas, por lo que no es raro que algunas caracter\u00edsticas de futuras especificaciones puedan estar implementadas en algunos navegadores. Una buena forma de conocer en que estado se encuentra un navegador concreto en su especificaci\u00f3n de ECMAScript es consultando la tabla de compatibilidad Kangax . En dicha tabla, encontramos una columna \u00abDesktop browsers\u00bb donde podemos ver el porcentaje de compatibilidad con las diferentes caracter\u00edsticas de determinadas especificaciones de ECMAScript. Nota que de ECMAScript 6 en adelante, se toma como regla nombrar a las diferentes especificaciones por su a\u00f1o, en lugar de por su n\u00famero de edici\u00f3n. Aunque en los primeros temas los mencionaremos indiferentemente, ten en cuenta que se recomienda utilizar ECMAScript 2015 en lugar de ECMAScript 6 . Estrategia \u00abcrossbrowser\u00bb \u00b6 Dicho esto, y teniendo en cuenta todos estos detalles, es muy habitual que el programador est\u00e9 confuso en como empezar a programar y que versi\u00f3n ECMAScript adoptar como preferencia. Generalmente, el programador suele tomar una de las siguientes estrategias \u00abcrossbrowser\u00bb para asegurarse que el c\u00f3digo funcionar\u00e1 en todos los navegadores: Enfoque C\u00f3digo escrito Descripci\u00f3n Conservador ECMAScript 5 Inc\u00f3modo de escribir. Anticuado. Compatible con navegadores nativamente. Delegador Depende C\u00f3modo. R\u00e1pido. Genera dependencia al framework/librer\u00eda. Evergreen ECMAScript 6+ C\u00f3modo. Moderno. No garantiza la compatibilidad en navegadores antiguos. Transpilador ECMAScript 6+ C\u00f3modo. Moderno. Preparado para el futuro. Requiere preprocesado. Vamos a explicar cada una de estas estrategias para intentar comprenderlas mejor. Enfoque conservador \u00b6 El programador decide crear c\u00f3digo ECMAScript 5 , una versi\u00f3n \u00absegura\u00bb que actualmente una gran mayor\u00eda de navegadores ( inclu\u00eddo Internet Explorer soporta ). Este enfoque permite asegurarse de que el c\u00f3digo funcionar\u00e1 sin problemas en cualquier navegador, pero por otro lado, implica que para muchas tareas deber\u00e1 escribir mucho c\u00f3digo, c\u00f3digo extra o no podr\u00e1 disfrutar de las \u00faltimas novedades de Javascript. Uno de los principales motivos por los que se suele elegir esta estrategia es porque se necesita compatibilidad con navegadores, sistemas antiguos y/o Internet Explorer. Tambi\u00e9n se suele elegir porque es m\u00e1s sencilla o porque funciona nativamente sin necesidad de herramientas externas. Enfoque delegador \u00b6 El programador decide delegar la responsabilidad \u00abcrossbrowser\u00bb a un framework o librer\u00eda que se encargar\u00e1 de ello. Este enfoque tiene como ventaja que es mucho m\u00e1s c\u00f3modo para el programador y ahorra mucho tiempo de desarrollo. Hay que tener en cuenta que se heredan todas las ventajas y desventajas de dicho framework/librer\u00eda, as\u00ed como que se adopta como dependencia ( sin dicho framework/librer\u00eda, nuestro c\u00f3digo no funcionar\u00e1 ). Adem\u00e1s, tambi\u00e9n se suele perder algo de rendimiento y control sobre el c\u00f3digo, aunque en la mayor\u00eda de los casos es pr\u00e1cticamente inapreciable. Hoy en d\u00eda, salvo para proyectos peque\u00f1os, es muy com\u00fan escoger un framework Javascript para trabajar. Un framework te ayuda a organizar tu c\u00f3digo, a escribir menos c\u00f3digo y a ser m\u00e1s productivo a la larga. Como desventaja, genera dependencia al framework. Enfoque evergreen \u00b6 El programador decide no preocuparse de la compatibilidad con navegadores antiguos, sino dar soporte s\u00f3lo a las \u00faltimas versiones de los navegadores ( evergreen browsers ), o incluso s\u00f3lo a determinados navegadores como Google Chrome o Mozilla Firefox . Este enfoque suele ser habitual en programadores novatos, empresas que desarrollan aplicaciones SPA o proyectos que van dirigidos a un p\u00fablico muy concreto y no est\u00e1n abiertas a un p\u00fablico mayoritario. Enfoque transpilador \u00b6 El programador decide crear c\u00f3digo de la \u00faltima versi\u00f3n de ECMAScript . Para asegurarse de que funcione en todos los navegadores, utiliza un transpilador , que no es m\u00e1s que un sistema que revisa el c\u00f3digo y lo traduce de la versi\u00f3n actual de ECMAScript a ECMAScript 5 , que es la que leer\u00e1 el navegador. La ventaja de este m\u00e9todo es que se puede escribir c\u00f3digo Javascript moderno y actualizado ( con sus ventajas y novedades ) y cuando los navegadores soporten completamente esa versi\u00f3n de ECMAScript, s\u00f3lo tendremos que retirar el transpilador ( porque no lo necesitaremos ). La desventaja es que hay que preprocesar el c\u00f3digo ( cada vez que cambie ) para hacer la traducci\u00f3n. Quiz\u00e1s, el enfoque m\u00e1s moderno de los mencionados es utilizar transpiladores . Sistemas como Babel son muy utilizados y se encargan de traducir de ECMAScript 6 a ECMAScript 5. En estos primeros temas, tomaremos un enfoque conservador para hacer m\u00e1s f\u00e1cil el inicio con Javascript. A medida que avancemos, iremos migrando a un enfoque transpilador . Independientemente del enfoque que se decida utilizar, el programador tambi\u00e9n puede utilizar polyfills o fallbacks para asegurarse de que ciertas caracter\u00edsticas funcionar\u00e1n en navegadores antiguos. Tambi\u00e9n puede utilizar enfoques mixtos. Un polyfill no es m\u00e1s que una librer\u00eda o c\u00f3digo Javascript que act\u00faa de \u00abparche\u00bb o \u00abrelleno\u00bb para dotar de una caracter\u00edstica que el navegador a\u00fan no posee, hasta que una actualizaci\u00f3n del navegador la implemente. Un fallback es algo tambi\u00e9n muy similar: un fragmento de c\u00f3digo que el programador prepara para que en el caso de que algo no entre en funcionamiento, se ofrezca una alternativa. Comentarios de c\u00f3digo \u00b6 Cuando comenzamos a programar, por lo general, se nos suele decir que es una buena pr\u00e1ctica mantener comentado nuestro c\u00f3digo con anotaciones que faciliten la comprensi\u00f3n de las tareas que realizamos y los problemas que pretendemos solucionar, ya que el c\u00f3digo que creamos no suele ser muy bueno, ni mucho menos descriptivo, ya que estamos en fase de aprendizaje. A medida que conseguimos destreza programando, notaremos que los comentarios son cada vez m\u00e1s prescindibles, sin embargo, conviene no dejar de comentar, sino en su lugar, aprender a comentar mejor . Una serie de consejos a tener presentes a la hora de dejar comentarios en nuestro c\u00f3digo: No comentes detalles redundantes . No escribas lo que haces, escribe por qu\u00e9 lo haces. Mejor nombres de variables/funciones/clases descriptivas que comentarios descriptivos. S\u00e9 conciso y concreto . Resume. No escribas p\u00e1rrafos si no es absolutamente necesario. Intenta usar siempre el mismo idioma y estilo de comentarios. Con el tiempo, los comentarios no se suelen mantener ( modificar ), el c\u00f3digo s\u00ed. Tipos de comentarios \u00b6 En Javascript existen dos tipos de comentarios: los comentarios de una sola l\u00ednea y los comentarios de m\u00faltiples l\u00edneas . El primero de ellos se caracteriza porque comienza con // y s\u00f3lo comenta la linea actual desde donde se escribe. El segundo tipo se utiliza para hacer comentarios extensos que ocupar\u00e1n varias l\u00edneas . Comienza por /* y comentar\u00e1 todo el texto que escribamos hasta que cerremos el comentario con un */ . Veamos un ejemplo: // Comentarios cortos de una sola l\u00ednea. Suelen explicar la l\u00ednea siguiente. var a = 1; var x = 45; // Tambi\u00e9n se utilizan al final de una l\u00ednea. /* Por otro lado, existen los comentarios m\u00faltiples de varias l\u00edneas consecutivas. Suelen utilizarse para explicaciones largas que requieren bastante espacio porque se mencionan gran cantidad de cosas :-) */ Ejemplos \u00b6 Comentar c\u00f3digo tambi\u00e9n es un arte que debe ser aprendido, ya que al principio es muy f\u00e1cil cometer errores y comentar en exceso o no ser concreto al comentar. No suele ser grave porque los comentarios no afectan al funcionamiento del programa, pero en equipos de trabajo donde hay varios programadores suele ser molesto para los programadores con m\u00e1s experiencia. Un ejemplo de comentario que suele ser contraproducente es aquel que se limita a decir lo que hacemos en la l\u00ednea siguiente: // Declaramos una variable llamada x var x = 50; // La mostramos por consola console.log(x); // Cambiamos su valor multiplicando por 0,5 x = x * 0.5; Estos comentarios pueden ser \u00fatiles para el programador novato que comienza a programar y necesita recordar lo que hace porque a\u00fan no conoce bien la sintaxis de programaci\u00f3n, de hecho muchos de los comentarios del tema de introducci\u00f3n son as\u00ed ( para ayudar al programador que reci\u00e9n empieza a programar ), pero el objetivo real de un comentario no debe ser recordar que hace una l\u00ednea de c\u00f3digo , sino conocer porque lo estamos realizando o que representa lo que estamos haciendo: var x = 50; // Establecemos el precio del producto console.log(x); x = x * 0.5; // Lo rebajamos al 50% Sin embargo, hay una opci\u00f3n todav\u00eda mejor que conecta con uno de los temas que veremos m\u00e1s adelante. Poner nombres descriptivos a las variables deber\u00eda ser algo obligatorio a lo que acostumbrarnos, puesto que puede ahorrarnos muchos comentarios y tiempo, simplificar el c\u00f3digo considerablemente y hacerlo mucho m\u00e1s legible y con menos ambig\u00fcedades: var precio = 50; console.log(precio); var oferta = precio * 0.5; En este fragmento de c\u00f3digo, no utilizamos comentarios porque el nombre de las variables ya ayuda a entender el c\u00f3digo y lo hace autoexplicativo . De esta forma, generamos menos c\u00f3digo ( e incluso comentarios ) y se entiende igualmente. En los siguientes temas, veremos una serie de consejos a la hora de nombrar variables, funciones u otros elementos dentro de la programaci\u00f3n. Estructuras de control \u00b6 Cuando escribimos c\u00f3digo Javascript, por defecto, el navegador leer\u00e1 el script de forma secuencial , es decir, una l\u00ednea detr\u00e1s de otra, desde arriba hacia abajo. Por lo tanto, una acci\u00f3n que realicemos en la l\u00ednea 5 nunca ocurrir\u00e1 antes que una que aparece en la l\u00ednea 3. Ya veremos que m\u00e1s adelante esto se complica, pero en principio partimos de esa base. Condicionales \u00b6 Al hacer un programa necesitaremos establecer condiciones o decisiones , donde buscamos que el navegador realice una acci\u00f3n A si se cumple una condici\u00f3n o una acci\u00f3n B si no se cumple . Este es el primer tipo de estructuras de control que encontraremos. Para ello existen varias estructuras de control: Estructura de control Descripci\u00f3n If Condici\u00f3n simple : Si ocurre algo, haz lo siguiente... If/else Condici\u00f3n con alternativa : Si ocurre algo, haz esto, sino, haz lo esto otro... ?: Operador ternario : Equivalente a If/else , m\u00e9todo abreviado. Switch Estructura para casos espec\u00edficos : Similar a varios If/else anidados. Condicional If \u00b6 Quiz\u00e1s, el m\u00e1s conocido de estos mecanismos de estructura de control es el if ( condicional ). Con \u00e9l podemos indicar en el programa que se tome un camino s\u00f3lo si se cumple la condici\u00f3n que establezcamos: var nota = 7; console.log(\"He realizado mi examen.\"); // Condici\u00f3n (si nota es mayor o igual a 5) if (nota >= 5) { console.log(\"\u00a1Estoy aprobado!\"); } En este caso, como el valor de nota es superior a 5, nos aparecer\u00e1 en la consola el mensaje \u00ab\u00a1Estoy aprobado!\u00bb. Sin embargo, si modificamos en la primera l\u00ednea el valor de nota a un valor inferior a 5, no nos aparecer\u00e1 ese mensaje. Cuando dentro de las llaves ( { } ) s\u00f3lo tenemos una l\u00ednea, se pueden omitir dichas llaves. A\u00fan as\u00ed, es recomendable ponerlas siempre si tenemos dudas o no estamos seguros. Condicional If / else \u00b6 Pero se puede dar el caso que queramos establecer una alternativa a una condici\u00f3n. Para eso utilizamos el if seguido de un else . Con esto podemos establecer una acci\u00f3n A si se cumple la condici\u00f3n, y una acci\u00f3n B si no se cumple. Vamos a modificar el ejemplo anterior para mostrar tambi\u00e9n un mensaje cuando estamos suspendidos, pero en este caso, en lugar de mostrar el mensaje directamente con un console.log vamos a guardar ese texto en una nueva variable calificacion : var nota = 7; console.log(\"He realizado mi examen. Mi resultado es el siguiente:\"); // Condici\u00f3n if (nota < 5) { // Acci\u00f3n A (nota es menor que 5) calificacion = \"suspendido\"; } else { // Acci\u00f3n B: Cualquier otro caso a A (nota es mayor o igual que 5) calificacion = \"aprobado\"; } console.log(\"Estoy\", calificacion); Nuevamente, en este ejemplo comprobaremos que podemos conseguir que se muestre el mensaje Estoy aprobado o Estoy suspendido dependiendo del valor que tenga la variable nota . La diferencia con el ejemplo anterior es que creamos una nueva variable que contendr\u00e1 un valor determinado dependiendo de la condici\u00f3n del If . Por \u00faltimo, el console.log del final, muestra el contenido de la variable calificacion , independientemente de que sea el primer caso o el segundo. var nota = 7; console.log(\"He realizado mi examen. Mi resultado es el siguiente:\"); // Condici\u00f3n if (nota < 5) { // Acci\u00f3n A (nota es menor que 5) calificacion = \"suspendido\"; } if (nota >= 5) { // Acci\u00f3n B (nota es mayor o igual que 5) calificacion = \"aprobado\"; } console.log(\"Estoy\", calificacion); Este nuevo ejemplo, es equivalente al ejemplo anterior. Si nos fijamos bien, la \u00fanica diferencia respecto al anterior es que estamos realizando dos if independientes: uno para comprobar si est\u00e1 suspendido y otro para comprobar si est\u00e1 aprobado. Pero aunque son equivalentes, no son exactamente iguales, ya que en el ejemplo que vimos anteriormente s\u00f3lo existe un if , y por lo tanto, s\u00f3lo se realiza una comprobaci\u00f3n. En este ejemplo que vemos ahora, se realizan dos if , y por lo tanto, dos comprobaciones. En este caso se trata de algo insignificante, pero es importante darse cuenta de que el primer ejemplo estar\u00eda realizando menos tareas para conseguir un mismo resultado, ergo, el primer ejemplo ser\u00eda m\u00e1s eficiente. Operador ternario \u00b6 El operador ternario es una alternativa de condicional if/else de una forma mucho m\u00e1s corta y, en muchos casos, m\u00e1s legible. Vamos a reescribir el ejemplo anterior utilizando este operador: var nota = 7; console.log(\"He realizado mi examen. Mi resultado es el siguiente:\"); // Operador ternario: (condici\u00f3n ? verdadero : falso) var calificacion = nota < 5 ? \"suspendido\" : \"aprobado\"; console.log(\"Estoy\", calificacion); Este ejemplo hace exactamente lo mismo que el ejemplo anterior. La idea del operador ternario es que podemos condensar mucho c\u00f3digo y tener un if en una sola l\u00ednea. Obviamente, es una opci\u00f3n que s\u00f3lo se recomienda utilizar cuando son if muy peque\u00f1os. Condicional If m\u00faltiple \u00b6 Es posible que necesitemos crear un condicional m\u00faltiple con m\u00e1s de 2 condiciones, por ejemplo, para establecer la calificaci\u00f3n espec\u00edfica. Para ello, podemos anidar varios if/else uno dentro de otro, de la siguiente forma: var nota = 7; console.log(\"He realizado mi examen.\"); // Condici\u00f3n if (nota < 5) { calificacion = \"Insuficiente\"; } else if (nota < 6) { calificaci\u00f3n = \"Suficiente\"; } else if (nota < 8) { calificacion = \"Bien\"; } else if (nota <= 9) { calificacion = \"Notable\"; } else { calificacion = \"Sobresaliente\"; } console.log(\"He obtenido un\", calificacion); Sin embargo, anidar de esta forma varios if suele ser muy poco legible y produce un c\u00f3digo algo feo. En algunos casos se podr\u00eda utilizar otra estructura de control llamada switch , que puede ser \u00fatil en ciertos casos. Condicional Switch \u00b6 La estructura de control switch permite definir casos espec\u00edficos a realizar en el caso de que la variable expuesta como condici\u00f3n sea igual a los valores que se especifican a continuaci\u00f3n mediante los case . No obstante, hay varias puntualizaciones que aclarar sobre este ejemplo: var nota = 7; console.log(\"He realizado mi examen. Mi resultado es el siguiente:\"); // Nota: Este ejemplo NO es equivalente al ejemplo anterior (leer abajo) switch (nota) { case 10: calificacion = \"Insuficiente\"; break; case 9: case 8: calificacion = \"Notable\"; break; case 7: case 6: calificacion = \"Bien\"; break; case 5: calificacion = \"Suficiente\"; break; case 4: case 3: case 2: case 1: case 0: calificacion = \"Insuficiente\"; break; default: // Cualquier otro caso calificacion = \"Nota err\u00f3nea\"; break; } console.log(\"He obtenido un\", calificacion); En primer lugar, el ejemplo anterior no es exactamente equivalente al anterior . Este ejemplo funcionar\u00eda si s\u00f3lo permitimos notas que sean n\u00fameros enteros , es decir, n\u00fameros del 0 al 10, sin decimales. En el caso de que nota tuviera por ejemplo, el valor 7.5 , mostrar\u00eda Nota err\u00f3nea . El ejemplo de los if m\u00faltiples si controla casos de n\u00fameros decimales porque establecemos comparaciones de rangos con mayor o menor, cosa que con el switch no se puede hacer. El switch est\u00e1 indicado para utilizar s\u00f3lo con casos con valores concretos y espec\u00edficos . En segundo lugar, observa que al final de cada caso es necesario indicar un break para salir del switch . En el caso que no sea haga, el programa saltar\u00e1 al siguiente caso, aunque no se cumpla la condici\u00f3n espec\u00edfica. Bucles e iteraciones \u00b6 Una de las principales ventajas de la programaci\u00f3n es la posibilidad de crear bucles y repeticiones para tareas espec\u00edficas, y que no tengamos que realizarlas varias veces de forma manual. Existen muchas formas de realizar bucles, vamos a ver los m\u00e1s basicos, similares en otros lenguajes de programaci\u00f3n: Tipo de bucle Descripci\u00f3n while Bucles simples. for Bucles cl\u00e1sicos por excelencia. do..while Bucles simples que se realizan siempre como m\u00ednimo una vez. for..in Bucles sobre posiciones de un array. Los veremos m\u00e1s adelante. for..of Bucles sobre elementos de un array. Los veremos m\u00e1s adelante. Array functions Bucles espec\u00edficos sobre arrays. Los veremos m\u00e1s adelante. Antes de comenzar a ver que tipos de bucles existen en Javascript, es necesario conocer algunos conceptos b\u00e1sicos de los bucles: Condici\u00f3n : Al igual que en los if , en los bucles se va a evaluar una condici\u00f3n para saber si se debe repetir el bucle o finalizarlo. Generalmente, si la condici\u00f3n es verdadera, se repite. Si es falsa, se finaliza. Iteraci\u00f3n : Cada repetici\u00f3n de un bucle se denomina iteraci\u00f3n. Por ejemplo, si un bucle repite una acci\u00f3n 10 veces, se dice que tiene 10 iteraciones. Contador : Muchas veces, los bucles tienen una variable que se denomina contador, porque cuenta el n\u00famero de repeticiones que ha hecho, para finalizar desde que llegue a un n\u00famero concreto. Dicha variable hay que inicializarla ( crearla y darle un valor ) antes de comenzar el bucle. Incremento : Cada vez que terminemos un bucle se suele realizar el incremento ( o decremento ) de una variable, generalmente la denominada variable contador. Bucle infinito : Es lo que ocurre si en un bucle se nos olvida incrementar la variable contador o escribimos una condici\u00f3n que nunca se puede dar. El bucle se queda eternamente repiti\u00e9ndose y el programa se queda \u00abcolgado\u00bb. Bucle while \u00b6 El bucle while es uno de los bucles m\u00e1s simples que podemos crear. Vamos a repasar el siguiente ejemplo y todas sus partes, para luego repasar que ocurre en cada iteraci\u00f3n del bucle: i = 0; // Inicializaci\u00f3n de la variable contador // Condici\u00f3n: Mientras la variable contador sea menor de 5 while (i < 5) { console.log(\"Valor de i:\", i); i = i + 1; // Incrementamos el valor de i } Veamos que es lo que ocurre a la hora de hacer funcionar ese c\u00f3digo: Antes de entrar en el bucle while , se inicializa la variable i a 0 . Antes de realizar la primera iteraci\u00f3n del bucle, comprobamos la condici\u00f3n . Si la condici\u00f3n es verdadera , hacemos lo que est\u00e1 dentro del bucle. Mostramos por pantalla el valor de i y luego incrementamos el valor actual de i en 1 . Volvemos al inicio del bucle para hacer una nueva iteraci\u00f3n . Comprobamos de nuevo la condici\u00f3n del bucle. Cuando la condici\u00f3n sea falsa , salimos del bucle y continuamos el programa. Una muestra paso a paso de las iteraciones de este primer ejemplo: Iteraci\u00f3n del bucle Valor de i Descripci\u00f3n Incremento Antes del bucle i = undefined Antes de comenzar el programa. Iteraci\u00f3n #1 i = 0 \u00bf(0 < 5)? Verdadero. Mostramos 0 por pantalla. i = 0 + 1 Iteraci\u00f3n #2 i = 1 \u00bf(1 < 5)? Verdadero. Mostramos 1 por pantalla. i = 1 + 1 Iteraci\u00f3n #3 i = 2 \u00bf(2 < 5)? Verdadero. Mostramos 2 por pantalla. i = 2 + 1 Iteraci\u00f3n #4 i = 3 \u00bf(3 < 5)? Verdadero. Mostramos 3 por pantalla. i = 3 + 1 Iteraci\u00f3n #5 i = 4 \u00bf(4 < 5)? Verdadero. Mostramos 4 por pantalla. i = 4 + 1 Iteraci\u00f3n #6 i = 5 \u00bf(5 < 5)? Falso. Salimos del bucle. El bucle while es muy simple, pero requiere no olvidarse accidentalmente de la inicializaci\u00f3n y el incremento ( adem\u00e1s de la condici\u00f3n ), por lo que el bucle for resulta m\u00e1s interesante, ya que para hacer un bucle de este tipo hay que escribir previamente siempre estos tres factores. La operaci\u00f3n i = i + 1 es lo que se suele llamar un incremento de una variable. Es muy com\u00fan simplificarla como i++ , que hace exactamente lo mismo: aumenta en 1 su valor. Bucle for \u00b6 El bucle for es quiz\u00e1s uno de los m\u00e1s utilizados en el mundo de la programaci\u00f3n. En Javascript se utiliza exactamente igual que en otros lenguajes como Java o C/C++. Veamos el ejemplo anterior utilizando un bucle for: // for (inicializaci\u00f3n; condici\u00f3n; incremento) for (i = 0; i < 5; i++) { console.log(\"Valor de i:\", i); } Como vemos, la sintaxis de un bucle for es mucho m\u00e1s compacta y r\u00e1pida de escribir que la de un bucle while . La primera vez puede parecer algo confusa, pero es mucho m\u00e1s pr\u00e1ctica porque te obliga a escribir la inicializaci\u00f3n , la condici\u00f3n y el incremento antes del propio bucle, y eso hace que no te olvides de estos tres puntos fundamentales. En programaci\u00f3n es muy habitual empezar a contar desde cero . Mientras que en la vida real se contar\u00eda desde 1 hasta 10 , en programaci\u00f3n se contar\u00eda desde 0 hasta 9 . Incremento m\u00faltiple \u00b6 Aunque no suele ser habitual, es posible a\u00f1adir varias inicializaciones o incrementos en un bucle for separando por comas. En el siguiente ejemplo adem\u00e1s de aumentar el valor de una variable i , inicializamos una variable con el valor 5 y lo vamos decrementando: for (i = 0, j = 5; i < 5; i++, j--) { console.log(\"Valor de i y j:\", i, j); } Si i++ aumenta en 1 el valor de i en cada iteraci\u00f3n, lo que hace j-- es disminuir en 1 el valor de j en cada iteraci\u00f3n. Bucles sobre arrays \u00b6 M\u00e1s adelante hablaremos de los arrays y veremos varias formas que tiene Javascript de realizar bucles adaptados a ese tipo de variables. Indentaci\u00f3n de c\u00f3digo \u00b6 A medida que escribimos l\u00edneas de c\u00f3digo en nuestro programa, se ir\u00e1 complicando y nos tomar\u00e1 m\u00e1s tiempo leer lo que hemos hecho y comprobar si hay errores o como solucionarlos. Sin embargo, para mejorar la rapidez con la que leemos ( y entendemos ) nuestro c\u00f3digo, una buena pr\u00e1ctica es usar la indentaci\u00f3n . \u00bfQu\u00e9 es la indentaci\u00f3n? \u00b6 Se llama indentaci\u00f3n de c\u00f3digo al hecho de utilizar sangrado ( mover ligeramente hacia la derecha ) en las l\u00edneas de c\u00f3digo para facilitar la lectura, e indicar visualmente si nos encontramos en el interior de una funci\u00f3n, bucle, condicional, etc... Observemos el siguiente ejemplo: function bucle() { for (i = 0; i < 10; i++) { console.log(\"Iteraci\u00f3n #\", i); if (i == 9) { console.log(\"Estoy en la \u00faltima iteraci\u00f3n\"); } // if } // for } // function En el ejemplo anterior se puede observar que al utilizar estructuras de control, bucles o funciones, los programadores indentamos el c\u00f3digo que hay en su interior. De esta forma, es muy sencillo saber a que nivel est\u00e1 actuando la l\u00ednea de c\u00f3digo en cuesti\u00f3n. Observemos este otro c\u00f3digo ( mal indentado ): function bucle() { for (i = 0; i < 10; i++) { console.log(\"Iteraci\u00f3n #\", i); if (i == 9) console.log(\"Estoy en la \u00faltima iteraci\u00f3n\"); } } En principio, puede parecer que este c\u00f3digo aprovecha mejor el espacio, porque ocupa menos, pero es mucho menos legible que el ejemplo anterior debido a su falta de indentaci\u00f3n. En algunos lenguajes de programaci\u00f3n, como Python , la indentaci\u00f3n es una caracter\u00edstica obligatoria, que acostumbra al programador a indentar correctamente. Es por esta raz\u00f3n, que Python se indica como un lenguaje ideal para adquirir buenos h\u00e1bitos de programaci\u00f3n. Una buena pr\u00e1ctica de programaci\u00f3n es indentar correctamente las l\u00edneas de c\u00f3digo que escribamos, no obstante, la mayor\u00eda de los editores est\u00e1n configurados para que al pulsar ENTER se indenten autom\u00e1ticamente. \u00bfTabuladores o espacios? \u00b6 A la hora de indentar c\u00f3digo hay dos aproximaciones: usar espacios o usar tabuladores . Utilizar una u otra estrategia de tabulaci\u00f3n depende del programador, pero lo importante es ser coherente y siempre utilizar la misma . Espacios : Si decidimos utilizar espacios, ten en cuenta que puedes elegir indentar con 2 , 3 \u00f3 4 espacios ( por ejemplo ). En los ejemplos de esta p\u00e1gina suelo utilizar indentaci\u00f3n a 2 espacios. Tabuladores : Si decidimos utilizar tabuladores, debes saber que el car\u00e1cter utilizado por la tecla TAB no es el mismo que el de los espacios. Por ejemplo, un tabulador puede ser visualmente equivalente a 3 espacios, pero s\u00f3lo ocupar\u00e1 un car\u00e1cter. Muchos editores convierten autom\u00e1ticamente un tabulador a un n\u00famero de espacios concreto. Una buena pr\u00e1ctica a la hora de programar es ayudarnos de un linter como ESLint , una herramienta que analiza nuestro c\u00f3digo ( generalmente en tiempo real ) y nos alerta de posibles errores de escritura, no centr\u00e1ndose en el propio funcionamiento del c\u00f3digo, sino en la coherencia y escritura correcta. M\u00e1s adelante abordaremos este tema. Convenciones de nombres \u00b6 Una de las tareas a priori m\u00e1s sencilla, pero a la misma vez de las m\u00e1s complejas, es la de ponerle un buen nombre a una variable ( o a cualquier otro elemento de programaci\u00f3n que necesite un nombre ). Los programadores necesitan utilizar variables en sus c\u00f3digos, y adem\u00e1s que estas variables tengan nombres que representen claramente la informaci\u00f3n que contienen. Dejar nombres bien claros es muy importante para nosotros, ya que si necesitamos volver a trabajar con dicho c\u00f3digo ( o hacer modificaciones ) nos resultar\u00e1 mucho m\u00e1s f\u00e1cil. Sin embargo, esto cobra a\u00fan mayor importancia si otras personas tienen que revisar o modificar nuestro c\u00f3digo, ya que ellos no est\u00e1n tan familiarizados con nuestro c\u00f3digo y les ayudar\u00e1 mucho a tardar menos tiempo en comprenderlo. Vi\u00f1eta de Commit Strip sobre el nombrado de variables. Veamos una serie de consejos y recomendaciones a la hora de establecer nombres en nuestro c\u00f3digo. La mayor\u00eda de ellas son simplemente convenciones , no son obligatorias para que el c\u00f3digo funcione, pero son altamente recomendables para mejorar la calidad de nuestro c\u00f3digo: Nombres descriptivos \u00b6 Una mala costumbre habitual cuando se empieza en la programaci\u00f3n, es darle un nombre muy poco descriptivo de la informaci\u00f3n que contiene, simplemente porque es m\u00e1s corto y manejable. Al principio, cuando tenemos pocas variables esto no importa demasiado, pero a medida que el c\u00f3digo crece, se vuelve insostenible. Es muy com\u00fan tener que volver hacia atr\u00e1s en nuestro c\u00f3digo a cambiar nombres de variables porque hemos cambiado de parecer o porque se nos ha ocurrido un nombre mejor. Esto seguir\u00e1 ocurriendo hasta que adquirimos cierta experiencia. Evita nombres poco claros o inconsistentes como tmp , a , b2 , variable2 , etc... \u00cdndices y contadores \u00b6 A lo anterior, hay una peque\u00f1a excepci\u00f3n. Cuando trabajamos en bucles for ( o bucles en general ), donde el \u00e1mbito de una variable que act\u00faa como contador ( \u00edndice ) es muy reducido ( esa variable solo existe y afecta al interior del bucle ), se suelen utilizar nombres de variables cortos para ser m\u00e1s productivo y claro. Las variables que act\u00faan como contador suelen nombrarse con una letra min\u00fascula empezando desde i ( de \u00edndice ): i , j , k ... A veces, tambi\u00e9n se usan letras como a , b , c ... o la inicial min\u00fascula de lo que representan: c para un contador, p para una posici\u00f3n, etc... Constantes, clases y variables \u00b6 Las constantes son variables especiales que no varian su valor a lo largo del programa y permanecen como su propio nombre indica: constantes. La convenci\u00f3n adoptada con las constantes es que deben ir siempre en MAY\u00daSCULAS . Las clases son estructuras de c\u00f3digo m\u00e1s complejas que veremos m\u00e1s adelante. Cuando necesites nombrarlas, es importante recordar que los nombres de las clases se escriben siempre capitalizadas: may\u00fasculas la primera letra y el resto en min\u00fasculas. Las variables , por \u00faltimo, siempre deben empezar por letra min\u00fascula. Independientemente de que sea variable, constante o clase, su nombre nunca podr\u00e1 empezar por un n\u00famero, sino que debe empezar por una letra o car\u00e1cter. Si lo compruebas, ver\u00e1s que es imposible nombrar una variable que empiece por n\u00famero. Estilo de nombrado \u00b6 Al margen del nombre que utilicemos para nombrar una variable, funci\u00f3n u otro elemento, tenemos el estilo o convenci\u00f3n que utilizaremos para escribir nombres compuestos por varias palabras. Existen varias convenciones a utilizar: Nombre Descripci\u00f3n Ejemplo camelCase Primera palabra, min\u00fasculas. El resto en min\u00fasculas, salvo la primera letra. La m\u00e1s utilizada en Javascript. precioProducto PascalCase Idem a la anterior, pero todas las palabras empiezan con la primera letra may\u00fascula. Se utiliza en las Clases. PrecioProducto snake_case Las palabras se separan con un gui\u00f3n bajo y se escriben siempre en min\u00fasculas. precio_producto kebab-case Las palabras se separan con un gui\u00f3n normal y se escriben siempre en min\u00fasculas. precio-producto dot.case Las palabras van en min\u00fasculas separadas por puntos. En Javascript no se puede usar. precio.producto H\u00fangara Prefijo en min\u00fasculas que indica el tipo de dato seguido de las palabras (n = n\u00famero, t = texto...). Esta notaci\u00f3n fue muy utilizada por Microsoft. nPrecioProducto Una buena costumbre es decidirse por uno de estos estilos y no mezclarlos . Si te decantas por uno de ellos, utiliza siempre el mismo. Personalmente, aconsejo utilizar el primero en Javascript, ya que es uno de los m\u00e1s utilizados y extendidos para este lenguaje. Funciones b\u00e1sicas \u00b6 En programaci\u00f3n, cuando nuestro c\u00f3digo se va haciendo cada vez m\u00e1s grande, necesitaremos buscar una forma de organizarlo y prepararnos para reutilizarlo y no repetir innecesariamente las mismas tareas. Para ello, un primer recurso muy \u00fatil son las funciones . \u00bfQu\u00e9 es una funci\u00f3n? \u00b6 Las funciones nos permiten agrupar l\u00edneas de c\u00f3digo en tareas con un nombre, para que, posteriormente, podamos hacer referencia a ese nombre para realizar todo lo que se agrupe en dicha tarea. Para usar funciones hay que hacer 2 cosas: Declarar la funci\u00f3n : Preparar la funci\u00f3n, darle un nombre y decirle las tareas que realizar\u00e1. Ejecutar la funci\u00f3n : \u00abLlamar\u00bb a la funci\u00f3n para que realice las tareas de su contenido. Declaraci\u00f3n \u00b6 En el siguiente ejemplo veremos la declaraci\u00f3n de una funci\u00f3n llamada saludar : // Declaraci\u00f3n de la funci\u00f3n \"saludar\" function saludar() { // Contenido de la funci\u00f3n console.log(\"Hola, soy una funci\u00f3n\"); } El contenido de la funci\u00f3n es una l\u00ednea que mostrar\u00e1 por consola un saludo. Sin embargo, si escribimos estas 4-5 l\u00edneas de c\u00f3digo en nuestro programa, no mostrar\u00e1 nada por pantalla. Esto ocurre as\u00ed porque solo hemos declarado la funci\u00f3n ( le hemos dicho que existe ), pero a\u00fan nos falta el segundo paso, ejecutarla , que es realmente cuando se realizan las tareas de su contenido. Ejecuci\u00f3n \u00b6 Veamos, ahora s\u00ed, el ejemplo completo con declaraci\u00f3n y ejecuci\u00f3n: // Declaraci\u00f3n de la funci\u00f3n \"saludar\" function saludar() { // Contenido de la funci\u00f3n console.log(\"Hola, soy una funci\u00f3n\"); } // Ejecuci\u00f3n de la funci\u00f3n saludar(); En este ejemplo hemos declarado la funci\u00f3n y adem\u00e1s, hemos ejecutado la funci\u00f3n ( en la \u00faltima l\u00ednea ) llam\u00e1ndola por su nombre y seguida de ambos par\u00e9ntesis, que nos indican que es una funci\u00f3n. En este ejemplo, si se nos mostrar\u00eda en la consola Javascript el mensaje de saludo. Ejemplo \u00b6 Veamos un primer ejemplo que muestre en la consola Javascript la tabla de multiplicar del 1 : // Tabla de multiplicar del 1 console.log(\"1 x 0 = \", 1 * 0); console.log(\"1 x 1 = \", 1 * 1); console.log(\"1 x 2 = \", 1 * 2); console.log(\"1 x 3 = \", 1 * 3); console.log(\"1 x 4 = \", 1 * 4); console.log(\"1 x 5 = \", 1 * 5); console.log(\"1 x 6 = \", 1 * 6); console.log(\"1 x 7 = \", 1 * 7); console.log(\"1 x 8 = \", 1 * 8); console.log(\"1 x 9 = \", 1 * 9); console.log(\"1 x 10 = \", 1 * 10); Este primer ejemplo funciona perfectamente, sin embargo, no estamos aprovechando las ventajas de la programaci\u00f3n, sino que hemos hecho todo el trabajo escribiendo 10 l\u00edneas de c\u00f3digo . Vamos a utilizar un bucle for para ahorrarnos tantas l\u00edneas de c\u00f3digo: for (i = 0; i < 11; i++) { console.log(\"1 x\", i, \"=\", 1 * i); } Esto est\u00e1 mucho mejor. Hemos resumido 11 l\u00edneas de c\u00f3digo en pr\u00e1cticamente 2 l\u00edneas utilizando un bucle for que va de 0 a 10 incrementando de 1 en 1. Incluso, recuerda que cuando las llaves s\u00f3lo contienen una l\u00ednea, se pueden omitir. Otro detalle importante a mencionar es que, en muchos casos, a los programadores les resulta m\u00e1s intuitivo establecer la condici\u00f3n del bucle a i <= 10 que establecerla a i < 11 . Son exactamente equivalentes, pero en el caso actual, la primera parece m\u00e1s \u00abl\u00f3gica\u00bb, ya que vemos visualmente el n\u00famero de la \u00faltima iteraci\u00f3n. Pero a\u00fan no hemos utilizado funciones, as\u00ed que vamos a modificar nuestro ejemplo para usar una. Imaginemos que ahora nuestro objetivo es mostrar la tabla de multiplicar del 1 varias veces: 3 veces para ser exactos. La primera aproximaci\u00f3n para hacer eso que se nos ocurrir\u00eda ser\u00eda hacer lo siguiente: // Primera vez for (i = 0; i <= 10; i++) console.log(\"1 x\", i, \"=\", 1 * i); // Segunda vez for (i = 0; i <= 10; i++) console.log(\"1 x\", i, \"=\", 1 * i); // Tercera vez for (i = 0; i <= 10; i++) console.log(\"1 x\", i, \"=\", 1 * i); Pero volvemos a tener el mismo problema del primer ejemplo. Estamos repitiendo el mismo c\u00f3digo varias veces, complic\u00e1ndolo y volvi\u00e9ndolo m\u00e1s \u00abfeo\u00bb. Adem\u00e1s, si tuvieramos que hacer modificaciones en uno de los bucles habr\u00eda tambi\u00e9n que repetir el trabajo 2 veces m\u00e1s, por cada uno de los otros bucles. Veamos ahora como obtener el mismo resultado pero utilizando bucles y funciones, sin repetir varias veces las mismas tareas: // Declaraci\u00f3n de la funci\u00f3n tablaDelUno() function tablaDelUno() { for (i = 0; i <= 10; i++) console.log(\"1 x\", i, \"=\", 1 * i); } // Bucle que ejecuta 3 veces la funci\u00f3n tablaDelUno() for (i = 0; i < 3; i++) tablaDelUno(); En este ejemplo se declara la funci\u00f3n, que mostrar\u00e1 la tabla de multiplicar del uno. Posteriormente, realizamos un bucle de 0 a 2 ( 3 repeticiones ) para llamar la funci\u00f3n 3 veces, y mostrar as\u00ed la tabla de multiplicar cada vez. \u00bfQu\u00e9 son los par\u00e1metros? \u00b6 Pero las funciones no sirven s\u00f3lo para esto. Tienen mucha m\u00e1s flexibilidad de la que hemos visto hasta ahora. A las funciones se les pueden pasar par\u00e1metros , que no son m\u00e1s que variables que existir\u00e1n s\u00f3lo dentro de dicha funci\u00f3n, con el valor pasado desde la ejecuci\u00f3n. Veamos el siguiente ejemplo, utilizando el par\u00e1metro hasta : // Declaraci\u00f3n function tablaDelUno(hasta) { for (i = 0; i <= hasta; i++) console.log(\"1 x\", i, \"=\", 1 * i); } // Ejecuci\u00f3n tablaDelUno(10); tablaDelUno(5); Como podemos ver, en el interior de los par\u00e9ntesis de la funci\u00f3n se ha indicado una variable llamada hasta . Esa variable contiene el valor que se le da a la hora de ejecutar la funci\u00f3n, que en este ejemplo, si nos fijamos bien, se ejecuta dos veces: una con valor 10 y otra con valor 5 . Si analizamos el c\u00f3digo de la declaraci\u00f3n de la funci\u00f3n, vemos que utilizamos la variable hasta en la condici\u00f3n del bucle, para que el bucle llegue hasta ese n\u00famero ( de ah\u00ed su nombre ). Por lo tanto, en la primera ejecuci\u00f3n se nos mostrar\u00e1 la tabla de multiplicar del 1 hasta llegar al 1 x 10 y en la segunda ejecuci\u00f3n se nos mostrar\u00e1 la tabla de multiplicar del 1 hasta llegar al 1 x 5 . La idea de las funciones es enfocarnos en el c\u00f3digo de la declaraci\u00f3n, y una vez lo tengamos funcionando, nos podemos olvidar de \u00e9l porque est\u00e1 encapsulado dentro de la funci\u00f3n. Simplemente tendremos que recordar el nombre de la funci\u00f3n y los par\u00e1metros que hay que pasarle. Esto hace que sea mucho m\u00e1s f\u00e1cil trabajar con el c\u00f3digo. Par\u00e1metros m\u00faltiples \u00b6 Hasta ahora s\u00f3lo hemos creado una funci\u00f3n con 1 par\u00e1metro , pero una funci\u00f3n de Javascript puede tener muchos m\u00e1s par\u00e1metros. Vamos a crear otro ejemplo, mucho m\u00e1s \u00fatil donde convertimos nuestra funci\u00f3n en algo m\u00e1s pr\u00e1ctico y \u00fatil: // Declaraci\u00f3n function tablaMultiplicar(tabla, hasta) { for (i = 0; i <= hasta; i++) console.log(tabla, \"x\", i, \"=\", tabla * i); } // Ejecuci\u00f3n tablaMultiplicar(1, 10); // Tabla del 1 tablaMultiplicar(5, 10); // Tabla del 5 En este ejemplo, hemos modificado nuestra funci\u00f3n tablaDelUno() por esta nueva versi\u00f3n que hemos cambiado de nombre a tablaMultiplicar() . Esta funci\u00f3n necesita que le pasemos dos par\u00e1metros: tabla ( la tabla de multiplicar en cuesti\u00f3n ) y hasta ( el n\u00famero hasta donde llegar\u00e1 la tabla de multiplicar ). De esta forma, las dos llamadas para ejecutar la funci\u00f3n mostrar\u00e1n por la consola la tabla de multiplicar del 1 y del 5. Podemos a\u00f1adir m\u00e1s par\u00e1metros a la funci\u00f3n seg\u00fan nuestras necesidades. Es importante recordar que el orden de los par\u00e1metros es importante y que los nombres de cada par\u00e1metro no se pueden repetir en una misma funci\u00f3n. Par\u00e1metros por defecto \u00b6 Es posible que en algunos casos queramos que ciertos par\u00e1metros tengan un valor sin necesidad de escribirlos en la ejecuci\u00f3n. Es lo que se llama un valor por defecto . En nuestro ejemplo anterior, nos podr\u00eda interesar que la tabla de multiplicar llegue siempre hasta el 10, ya que es el comportamiento por defecto. Si queremos que llegue hasta otro n\u00famero, lo indicamos explicitamente, pero si lo omitimos, queremos que llegue hasta 10. Esto se har\u00eda de la siguiente forma: function tablaMultiplicar(tabla, hasta = 10) { for (i = 0; i <= hasta; i++) console.log(tabla, \"x\", i, \"=\", tabla * i); } // Ejecuci\u00f3n tablaMultiplicar(2); // Esta tabla llegar\u00e1 hasta el n\u00famero 10 tablaMultiplicar(2, 15); // Esta tabla llegar\u00e1 hasta el n\u00famero 15 De esta forma nos ahorramos tener que escribir los valores en la ejecuci\u00f3n de la funci\u00f3n, si en la mayor\u00eda de los casos va a tomar ese valor. Hay que remarcar que esta caracter\u00edstica se a\u00f1ade en ECMAScript 6 , por lo que en navegadores sin soporte podr\u00eda no funcionar correctamente. En versiones anteriores de ECMAScript se pod\u00eda realizar de formas similares a la siguiente: function tablaMultiplicar(tabla, hasta) { if (hasta == undefined) hasta = 10; for (i = 0; i <= hasta; i++) console.log(tabla, \"x\", i, \"=\", tabla * i); } En el caso de que el par\u00e1metro hasta no tenga valor ( es undefined ), le asignamos el valor por defecto. En caso contrario ( ya tiene valor ) continuamos normalmente. Devoluci\u00f3n de valores \u00b6 Hasta ahora hemos utilizado funciones simples que realizan acciones o tareas ( en nuestro caso, mostrar por consola ), pero habitualmente, lo que buscamos es que esa funci\u00f3n realice una tarea y nos devuelva la informaci\u00f3n al exterior de la funci\u00f3n, para as\u00ed utilizarla o guardarla en una variable, que utilizaremos posteriormente para nuestros objetivos. Para ello, se utiliza la palabra clave return , que suele colocarse al final de la funci\u00f3n, ya que con dicha devoluci\u00f3n terminamos la ejecuci\u00f3n de la funci\u00f3n ( si existe c\u00f3digo despu\u00e9s, nunca ser\u00e1 ejecutado ). Veamos un ejemplo con una operaci\u00f3n muy sencilla, para verlo claramente: // Declaraci\u00f3n function sumar(a, b) { return a + b; // Devolvemos la suma de a y b al exterior de la funci\u00f3n console.log(\"Ya he realizado la suma.\"); // Este c\u00f3digo nunca se ejecutar\u00e1 } // Ejecuci\u00f3n var resultado = sumar(5, 5); // Se guarda 10 en la variable resultado Como podemos ver, esto nos permite crear funciones m\u00e1s modulares y reutilizables que podremos utilizar en multitud de casos, ya que la informaci\u00f3n se puede enviar al exterior de la funci\u00f3n y utilizarla junto a otras funciones o para otros objetivos. Fuente: Lenguaje Javascript por Manz","title":"Introducci\u00f3n a Javascript"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#introduccion-a-javascript","text":"","title":"Introducci\u00f3n a Javascript"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#que-es-javascript","text":"Cualquier p\u00e1gina web de Internet est\u00e1 constru\u00edda, como m\u00ednimo, por HTML ( un lenguaje de marcas ) y CSS ( un lenguaje de estilos ). El primero de ellos permite construir todo el marcado de la p\u00e1gina ( contenido e informaci\u00f3n ) mediante etiquetas HTML y dot\u00e1ndo de sem\u00e1ntica a la informaci\u00f3n mediante la naturaleza de dichas etiquetas. Posteriormente, el segundo de ellos permite darle estilo a la p\u00e1gina y construir una interfaz visual m\u00e1s agradable para el usuario. La separaci\u00f3n bien marcada de estos dos pilares permite que si en alg\u00fan momento necesitamos modificar la informaci\u00f3n ( o el dise\u00f1o ) de la p\u00e1gina, no tengamos tambi\u00e9n que lidiar con modificaciones en el otro. Sin embargo, utilizar s\u00f3lo y exclusivamente HTML y CSS en una p\u00e1gina nos limita considerablemente. Si bien es cierto que con estos dos lenguajes podemos hacer un gran abanico de cosas, hay otras que ser\u00edan totalmente imposibles, o al menos, mucho m\u00e1s f\u00e1ciles de realizar si tuvieramos un lenguaje de programaci\u00f3n a nuestra disposici\u00f3n. Y en este punto es donde aparece Javascript .","title":"\u00bfQu\u00e9 es Javascript?"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#que-es-javascript_1","text":"Javascript es un lenguaje de programaci\u00f3n , o lo que es lo mismo, un mecanismo con el que podemos decirle a nuestro navegador que tareas debe realizar, en que orden y cuantas veces ( por ejemplo ). Muchas de las tareas que realizamos con HTML y CSS se podr\u00edan realizar con Javascript. De hecho, es muy probable que al principio nos parezca que es mucho m\u00e1s complicado hacerlo con Javascript, y que por lo tanto no merece la pena. Sin embargo, con el tiempo veremos que Javascript nos ofrece una mayor flexibilidad y un abanico de posibilidades m\u00e1s grande, y que bien usadas, pueden ahorrarnos bastante tiempo. Para comprenderlo, un ejemplo muy sencillo ser\u00eda el siguiente: <div class=\"item\"> <p>N\u00famero: <span class=\"numero\">1</span></p> <p>N\u00famero: <span class=\"numero\">2</span></p> <p>N\u00famero: <span class=\"numero\">3</span></p> <p>N\u00famero: <span class=\"numero\">4</span></p> <p>N\u00famero: <span class=\"numero\">5</span></p> </div> Imaginemos que tenemos que crear una lista de n\u00fameros desde el 1 hasta el 500 . Hacerlo solamente con HTML ser\u00eda muy tedioso, ya que tendr\u00edamos que copiar y pegar esas filas varias veces hasta llegar a 500. Sin embargo, mediante Javascript, podemos decirle al navegador que escriba el primer p\u00e1rrafo <p> , que luego escriba el mismo pero sum\u00e1ndole uno al n\u00famero. Y que esto lo repita hasta llegar a 500. De esta forma y con este sencillo ejemplo, con HTML habr\u00eda que escribir 500 l\u00edneas mientras que con Javascript no ser\u00edan m\u00e1s de 10 l\u00edneas .","title":"\u00bfQu\u00e9 es Javascript?"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#dificultad","text":"Aunque Javascript es ideal para muchos casos, es mucho m\u00e1s complicado aprender Javascript ( o un lenguaje de programaci\u00f3n en general ) que aprender HTML o CSS, los cuales son mucho m\u00e1s sencillos de comprender. Antes debemos conocer varias cosas: Para aprender Javascript debemos conocer el lenguaje Javascript , pero no podremos hacerlo si no sabemos programar. Se puede aprender a programar con Javascript, pero es recomendable tener una serie de fundamentos b\u00e1sicos de programaci\u00f3n antes para que no nos resulte muy duro. Para aprender a programar antes debemos saber como \u00abtrabaja un ordenador\u00bb. Programar no es m\u00e1s que decirle a una m\u00e1quina que cosas debe hacer y como debe hacerlas. Eso significa que no podemos pasar por alto nada. Para darle \u00f3rdenes a una m\u00e1quina debemos tener claro que esas \u00f3rdenes son correctas y har\u00e1n lo que se supone que deben hacer. Si le indicamos a una m\u00e1quina los pasos para resolver un problema, pero dichos pasos son err\u00f3neos, la m\u00e1quina tambi\u00e9n har\u00e1 mal el trabajo. Dicho esto, es necesario tener presente que aprender a programar es una tarea que no ocurre de un d\u00eda para otro. Requiere tiempo, esfuerzo, acostumbrarse a cambiar la forma de pensar y practicar mucho. Puedes copiar un programa en segundos, pero eso no significa que lo entiendas. Puedes comprender un programa en minutos, pero eso no significa que lo puedas crear. Puedes crear un programa en horas, pero eso no significa que sepas programar. Puedes aprender a programar en semanas, pero eso no significa que no cometas errores. Puedes aprender a programar bien y sin demasiados errores en meses. Pero dominar la programaci\u00f3n es una tarea que requiere a\u00f1os.","title":"Dificultad"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#la-consola-javascript","text":"Para acceder a la consola Javascript del navegador, podemos pulsar CTRL+SHIFT+I sobre la pesta\u00f1a de la p\u00e1gina web en cuesti\u00f3n, lo que nos llevar\u00e1 al Inspector de elementos del navegador. Este inspector es un panel de control general donde podemos ver varios aspectos de la p\u00e1gina en la que nos encontramos: su etiquetado HTML, sus estilos CSS, etc... Concretamente, a nosotros nos interesa una secci\u00f3n particular del inspector de elementos. Para ello, nos moveremos a la pesta\u00f1a Console y ya nos encontraremos en la consola Javascript de la p\u00e1gina. Tambi\u00e9n se puede utilizar directamente el atajo de teclado CTRL+SHIFT+J, que en algunos navegadores nos lleva directamente a la consola. En esta consola, podemos escribir funciones o sentencias de Javascript que estar\u00e1n actuando en la p\u00e1gina que se encuentra en la pesta\u00f1a actual del navegador. De esta forma podremos observar los resultados que nos devuelve en la consola al realizar diferentes acciones. Para ello, vamos a ver algunas bases:","title":"La consola Javascript"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#la-consola","text":"El cl\u00e1sico primer ejemplo cuando se comienza a programar, es crear un programa que muestre por pantalla un texto, generalmente el texto \u00ab Hola Mundo \u00bb. Tambi\u00e9n podemos realizar, por ejemplo, operaciones num\u00e9ricas . En la consola Javascript podemos hacer esto de forma muy sencilla: console.log(\"Hola Mundo\"); console.log(2 + 2); En la primera l\u00ednea, veremos que al pulsar enter nos muestra el texto \u00ab Hola Mundo \u00bb. En la segunda l\u00ednea, sin embargo, procesa la operaci\u00f3n y nos devuelve 4 . Para mostrar estos textos en la consola Javascript hemos utilizado la funci\u00f3n console.log , pero existen varias m\u00e1s: Funci\u00f3n Descripci\u00f3n console.log() Muestra la informaci\u00f3n proporcionada en la consola Javascript. console.info() Equivalente al anterior. Se utiliza para mensajes de informaci\u00f3n. console.warn() Muestra informaci\u00f3n de advertencia. Aparece en amarillo. console.error() Muestra informaci\u00f3n de error. Aparece en rojo. console.clear() Limpia la consola. Equivalente a pulsar CTRL+L o escribir clear() . La idea es utilizar en nuestro c\u00f3digo la funci\u00f3n que m\u00e1s se adapte a nuestra situaci\u00f3n en cada caso ( errores graves con console.error(), errores leves con console.warn(), etc... ).","title":"La consola"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#aplicar-varios-datos","text":"En el ejemplo anterior, solo hemos aportado un dato por cada l\u00ednea ( un texto o una operaci\u00f3n num\u00e9rica ), pero console.log() y sus funciones hermanas permiten a\u00f1adir varios datos en una misma l\u00ednea, separ\u00e1ndolo por comas: console.log(\"\u00a1Hola a todos! Observen este n\u00famero: \", 5 + 18); De momento nos puede parecer algo in\u00fatil, pero cuando empecemos a trabajar con variables y objetos, ser\u00e1 muy necesario.","title":"Aplicar varios datos"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#aplicar-estilos-en-la-consola","text":"Aunque no es muy pr\u00e1ctico y s\u00f3lo se trata de puro divertimento, se pueden aplicar estilos CSS en la consola Javascript haciendo uso de %c , que se reemplazar\u00e1 por los estilos indicados: console.log(\"%c\u00a1Hola Manz!\", \"background:linear-gradient(#000, #555); color:#fff; padding: 5px 10px;\"); Es importante recalcar que cuando escribimos en la consola podemos obviar el console.log() y escribir directamente la informaci\u00f3n, pero si queremos mostrar algo por consola desde nuestra p\u00e1gina web o aplicaci\u00f3n Javascript, es absolutamente necesario escribir console.log() ( o cualquiera de las funciones de su familia ) en nuestro c\u00f3digo.","title":"Aplicar estilos en la consola"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#como-funciona-javascript","text":"El esquema general de una p\u00e1gina web es un documento HTML donde est\u00e1n todas las etiquetas HTML de la p\u00e1gina. A lo largo de ese documento, pueden existir referencias o relaciones a otros documentos, como archivos CSS o archivos Javascript. Por ejemplo, si dentro del documento HTML se encuentra una referencia a un archivo CSS , el navegador lo descarga y lo aplica al documento HTML, cambiando su apariencia visual. De la misma forma, si encuentra una referencia a un archivo Javascript , el navegador lo descarga y ejecuta las \u00f3rdenes o acciones que all\u00ed se indican.","title":"\u00bfC\u00f3mo funciona Javascript?"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#ejemplo-de-script-en-linea","text":"En este primer y sencillo ejemplo, s\u00f3lo tenemos un documento: el archivo HTML . En \u00e9l, existe una etiqueta <script> que contiene las \u00f3rdenes o l\u00edneas de Javascript que le indican al navegador que tiene que hacer ( en este caso, mostrar un \"\u00a1Hola!\" en la consola ): <html> <head> <title>T\u00edtulo de la p\u00e1gina</title> <script> console.log(\"\u00a1Hola!\"); </script> </head> <body> <p>Ejemplo de texto.</p> </body> </html> Este m\u00e9todo de escribir scripts se denomina Javascript en l\u00ednea ( inline ), y significa que el Javascript est\u00e1 escrito directamente en el c\u00f3digo HTML. Nos puede servir como ejemplo inicial, pero no es la forma recomendable de escribirlo, ya que lo ideal es separar el c\u00f3digo HTML del c\u00f3digo Javascript ( en archivos diferentes ) para organizarnos mejor.","title":"Ejemplo de script en l\u00ednea"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#ejemplo-de-script-externo","text":"Esta otra forma de incluir Javascript en una p\u00e1gina tiene la ventaja de, en el caso de necesitar incluir el c\u00f3digo Javascript desde varios documentos HTML, no tendremos que volver a escribir dicho c\u00f3digo, sino simplemente referenciar el nombre del mismo archivo Javascript a incluir en todas las p\u00e1ginas HTML. Para relacionar un documento Javascript desde una p\u00e1gina web, igual que antes, utilizaremos la etiqueta <script> , s\u00f3lo que en este caso, haremos referencia al archivo Javascript con un atributo src ( source ), como se ve en el siguiente ejemplo: <html> <head> <title>T\u00edtulo de la p\u00e1gina</title> <script src=\"js/index.js\"></script> </head> <body> <p>Ejemplo de texto.</p> </body> </html> El texto js/index.js no es m\u00e1s que una referencia a un archivo index.js que se encuentra dentro de una carpeta js , situada en la misma carpeta que el documento HTML del ejemplo. Si en este archivo Javascript, inclu\u00edmos el console.log() de mensaje de bienvenida, ese mensaje deber\u00eda aparecer en la consola Javascript al cargar esta p\u00e1gina.","title":"Ejemplo de script externo"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#ubicacion-de-la-etiqueta-script","text":"Si te fijas, en el ejemplo anterior, la etiqueta <script> est\u00e1 situada dentro de la etiqueta <head> de la p\u00e1gina, es decir, en la cabecera de metadatos. Esto significa que la p\u00e1gina web descargar\u00e1 el archivo Javascript antes de empezar a dibujar el contenido de la p\u00e1gina ( etiqueta <body> ). Es posible que te hayas encontrado ejemplos donde dicha etiqueta est\u00e9 ubicada en otra parte del documento HTML. Veamos las posibilidades: Ubicaci\u00f3n \u00bfC\u00f3mo descarga el archivo Javascript? Estado de la p\u00e1gina En <head> ANTES de empezar a dibujar la p\u00e1gina. P\u00e1gina a\u00fan no dibujada. En <body> DURANTE el dibujado de la p\u00e1gina. Dibujada hasta donde est\u00e1 la etiqueta <script> . Antes de </body> DESPU\u00c9S de dibujar la p\u00e1gina. Dibujada al 100%. Ten en cuenta que el navegador puede descargar un documento Javascript en cualquier momento de la carga de la p\u00e1gina y necesitamos saber cu\u00e1l es el m\u00e1s oportuno para nosotros. Si queremos que un documento Javascript act\u00fae antes que se muestre la p\u00e1gina, la opci\u00f3n de colocarlo en el <head> es la m\u00e1s adecuada. Si por el contrario, queremos que act\u00fae una vez se haya terminado de cargar la p\u00e1gina, la opci\u00f3n de colocarlo justo antes del </body> es la m\u00e1s adecuada. Esta opci\u00f3n es equivalente a usar el atributo defer en la etiqueta <script> , sin embargo, esta opci\u00f3n es adem\u00e1s compatible con navegadores muy antiguos ( IE9 o anteriores ) que no soportan defer . Nota Tienes m\u00e1s informaci\u00f3n sobre etiquetas script en la p\u00e1gina de LenguajeHTML .","title":"Ubicaci\u00f3n de la etiqueta script"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#conceptos-basicos","text":"Si no has programado hasta ahora, debes conocer una serie de conceptos b\u00e1sicos que tendr\u00e1s que trabajar y dominar dentro del campo de la programaci\u00f3n.","title":"Conceptos b\u00e1sicos"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#glosario-general","text":"Programa : En programaci\u00f3n se suele llamar \u00abprograma\u00bb a el conjunto total de c\u00f3digo que desarrollas. En Javascript, quiz\u00e1s el t\u00e9rmino m\u00e1s utilizado es aplicaci\u00f3n web ( cuando es un desarrollo con mucha cantidad de Javascript ). Tambi\u00e9n se suelen generalizar utilizando t\u00e9rminos como \u00abscript\u00bb o \u00abc\u00f3digo Javascript\u00bb. Algoritmo : Un algoritmo es un conjunto de pasos conocidos, en un determinado orden, para conseguir realizar una tarea satisfactoriamente y lograr un objetivo. Comentarios : Los comentarios en nuestro c\u00f3digo son fragmentos de texto o anotaciones que el navegador ignora y no repercuten en el programa. Sirven para dejar por escrito detalles importantes para el programador. De esta forma cuando volvamos al c\u00f3digo, nos ser\u00e1 m\u00e1s r\u00e1pido comprenderlo. Es una buena costumbre comentar en la medida de lo posible nuestro c\u00f3digo. Indentaci\u00f3n : Se llama indentar a la acci\u00f3n de colocar espacios o tabuladores antes del c\u00f3digo, para indicar si nos encontramos dentro de un if , de un bucle , etc... Esta pr\u00e1ctica es muy importante y necesaria, y m\u00e1s adelante profundizaremos en ella. Variables : Es el nombre gen\u00e9rico que se le da a peque\u00f1os espacios de memoria donde guardas una informaci\u00f3n determinada, de forma muy similar a las inc\u00f3gnitas en matem\u00e1ticas. Un programa puede tener muchas variables, y cada una de ellas tendr\u00e1 un nombre , un valor y un tipo de dato . El nombre se utiliza para diferenciarlas unas de otras y hacer referencia a ellas, el valor es la informaci\u00f3n que contienen y el tipo de dato es la naturaleza de ese valor. Se llaman variables porque podemos cambiarle su valor a lo largo del programa, seg\u00fan necesitemos. x = 5; // nombre: x, valor: 5, tipo de dato: n\u00famero y = \"Hola\"; // nombre: y, valor: Hola, tipo de dato: texto Manz = \"me\"; // nombre: Manz, valor: me, tipo de dato: texto Constantes : Es el mismo concepto de una variable, salvo que en este caso, la informaci\u00f3n que contiene es siempre la misma ( no puede variar ). Funciones : Cuando comenzamos a programar, nuestro c\u00f3digo se va haciendo cada vez m\u00e1s y m\u00e1s grande, por lo que hay que buscar formas de organizarlo y mantenerlo lo m\u00e1s simple posible. Las funciones son agrupaciones de c\u00f3digo que, entre otras cosas, evitan que tengamos que escribir varias veces lo mismo en nuestro c\u00f3digo. Una funci\u00f3n contendr\u00e1 una o mas acciones a realizar y cada vez que ejecutemos una funci\u00f3n, se realizar\u00e1n todas ellas. Par\u00e1metros : Es el nombre que reciben las variables que se le pasan a las funciones. Muchas veces tambi\u00e9n se les denomina argumentos . Bucles : Cuando estamos programando, muchas veces necesitaremos realizar tareas repetitivas. Una de las ventajas de la programaci\u00f3n es que permite automatizar acciones y no es necesario hacerlas varias veces. Los bucles permiten indicar el n\u00famero de veces que se repetir\u00e1 una acci\u00f3n. De esta forma, s\u00f3lo la escribimos una vez en nuestro c\u00f3digo, y simplemente indicamos el n\u00famero de veces que queremos que se repita. Iteraci\u00f3n : Cuando el programa est\u00e1 en un bucle repitiendo varias veces la misma tarea, cada una de esas repeticiones se denomina iteraci\u00f3n . Librer\u00eda : Muchas veces, desarrollamos c\u00f3digo que resuelve tareas o problemas que, posteriormente, querremos reutilizar en otros programas. Cuando eso ocurre, en Javascript se suele empaquetar el c\u00f3digo en lo que se llaman librer\u00edas , que no es m\u00e1s que c\u00f3digo listo para que otros programadores puedan utilizarlo f\u00e1cilmente en sus programas y beneficiarse de las tareas que resuelven de forma muy sencilla.","title":"Glosario general"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#la-especificacion-ecmascript","text":"ECMAScript es la especificaci\u00f3n donde se mencionan todos los detalles de c\u00f3mo debe funcionar y comportarse Javascript en un navegador. De esta forma, los diferentes navegadores ( Chrome, Firefox, Opera, Edge, Safari... ) saben como deben desarrollar los motores de Javascript para que cualquier c\u00f3digo o programa funcione exactamente igual, independientemente del navegador que se utilice. ECMAScript suele venir acompa\u00f1ado de un n\u00famero que indica la versi\u00f3n o revisi\u00f3n de la que hablamos ( algo similar a las versiones de un programa ). En cada nueva versi\u00f3n de ECMAScript, se modifican detalles sobre Javascript y/o se a\u00f1aden nuevas funcionalidades, manteniendo Javascript vivo y con novedades que lo hacen un lenguaje de programaci\u00f3n moderno y cada vez mejor preparado para utilizar en el d\u00eda a d\u00eda. Teniendo esto en cuenta, debemos saber que los navegadores web intentan cumplir la especificaci\u00f3n ECMAScript al m\u00e1ximo nivel, pero no todos ellos lo consiguen. Por lo tanto, pueden existir ciertas discrepancias. Por ejemplo, pueden existir navegadores que cumplan la especificaci\u00f3n ECMAScript 6 al 80% y otros que s\u00f3lo la cumplan al 60%. Esto significa que pueden haber caracter\u00edsticas que no funcionen en un navegador espec\u00edfico ( y en otros s\u00ed ). Adem\u00e1s, todo esto va cambiando a medida que se van lanzando nuevas versiones de los navegadores web, donde su compatibilidad ECMAScript suele aumentar.","title":"La especificaci\u00f3n ECMAScript"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#versiones-de-ecmascript","text":"A lo largo de los a\u00f1os, Javascript ha ido sufriendo modificaciones que los navegadores han ido implementando para acomodarse a la \u00faltima versi\u00f3n de ECMAScript cuanto antes. La lista de versiones de ECMAScript aparecidas hasta el momento son las siguientes, donde encontramos las versiones enmarcadas en lo que podemos considerar el pasado de Javascript : Ed. Fecha Nombre formal / informal Cambios significativos 1 JUN/1997 ECMAScript 1997 (ES1) Primera edici\u00f3n 2 JUN/1998 ECMAScript 1998 (ES2) Cambios leves 3 DIC/1999 ECMAScript 1999 (ES3) RegExp, try/catch, etc... 4 AGO/2008 ECMAScript 2008 (ES4) Versi\u00f3n abandonada. 5 DIC/2009 ECMAScript 2009 (ES5) 5.1 DIC/2011 ECMAScript 2011 (ES5.1) Cambios leves A partir del a\u00f1o 2015, se marc\u00f3 un antes y un despu\u00e9s en el mundo de Javascript, estableciendo una serie de cambios que lo transformar\u00edan en un lenguaje moderno, partiendo desde la espec\u00edficaci\u00f3n de dicho a\u00f1o, hasta la actualidad: Ed.|Fecha|Nombre formal / informal|Cambios significativos 6|JUN/2015|ECMAScript 2015 (ES6)|Clases, m\u00f3dulos, generadores, hashmaps, sets, for of, proxies... 7|JUN/2016|ECMAScript 2016|Array includes(), Exponenciaci\u00f3n ** 8|JUN/2017|ECMAScript 2017|Async/await 9|JUN/2018|ECMAScript 2018|Rest/Spread operator, Promise.finally()... 10|JUN/2019|ECMAScript 2019|Flat functions, trimStart(), errores opcionales en catch... 11|JUN/2020|ECMAScript 2020|Dynamic imports, BigInt, Promise.allSettled En ocasiones, algunos navegadores deciden implementar peque\u00f1as funcionalidades de versiones posteriores de ECMAScript antes que otras, para ir testeando y probando caracter\u00edsticas, por lo que no es raro que algunas caracter\u00edsticas de futuras especificaciones puedan estar implementadas en algunos navegadores. Una buena forma de conocer en que estado se encuentra un navegador concreto en su especificaci\u00f3n de ECMAScript es consultando la tabla de compatibilidad Kangax . En dicha tabla, encontramos una columna \u00abDesktop browsers\u00bb donde podemos ver el porcentaje de compatibilidad con las diferentes caracter\u00edsticas de determinadas especificaciones de ECMAScript. Nota que de ECMAScript 6 en adelante, se toma como regla nombrar a las diferentes especificaciones por su a\u00f1o, en lugar de por su n\u00famero de edici\u00f3n. Aunque en los primeros temas los mencionaremos indiferentemente, ten en cuenta que se recomienda utilizar ECMAScript 2015 en lugar de ECMAScript 6 .","title":"Versiones de ECMAScript"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#estrategia-crossbrowser","text":"Dicho esto, y teniendo en cuenta todos estos detalles, es muy habitual que el programador est\u00e9 confuso en como empezar a programar y que versi\u00f3n ECMAScript adoptar como preferencia. Generalmente, el programador suele tomar una de las siguientes estrategias \u00abcrossbrowser\u00bb para asegurarse que el c\u00f3digo funcionar\u00e1 en todos los navegadores: Enfoque C\u00f3digo escrito Descripci\u00f3n Conservador ECMAScript 5 Inc\u00f3modo de escribir. Anticuado. Compatible con navegadores nativamente. Delegador Depende C\u00f3modo. R\u00e1pido. Genera dependencia al framework/librer\u00eda. Evergreen ECMAScript 6+ C\u00f3modo. Moderno. No garantiza la compatibilidad en navegadores antiguos. Transpilador ECMAScript 6+ C\u00f3modo. Moderno. Preparado para el futuro. Requiere preprocesado. Vamos a explicar cada una de estas estrategias para intentar comprenderlas mejor.","title":"Estrategia \u00abcrossbrowser\u00bb"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#enfoque-conservador","text":"El programador decide crear c\u00f3digo ECMAScript 5 , una versi\u00f3n \u00absegura\u00bb que actualmente una gran mayor\u00eda de navegadores ( inclu\u00eddo Internet Explorer soporta ). Este enfoque permite asegurarse de que el c\u00f3digo funcionar\u00e1 sin problemas en cualquier navegador, pero por otro lado, implica que para muchas tareas deber\u00e1 escribir mucho c\u00f3digo, c\u00f3digo extra o no podr\u00e1 disfrutar de las \u00faltimas novedades de Javascript. Uno de los principales motivos por los que se suele elegir esta estrategia es porque se necesita compatibilidad con navegadores, sistemas antiguos y/o Internet Explorer. Tambi\u00e9n se suele elegir porque es m\u00e1s sencilla o porque funciona nativamente sin necesidad de herramientas externas.","title":"Enfoque conservador"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#enfoque-delegador","text":"El programador decide delegar la responsabilidad \u00abcrossbrowser\u00bb a un framework o librer\u00eda que se encargar\u00e1 de ello. Este enfoque tiene como ventaja que es mucho m\u00e1s c\u00f3modo para el programador y ahorra mucho tiempo de desarrollo. Hay que tener en cuenta que se heredan todas las ventajas y desventajas de dicho framework/librer\u00eda, as\u00ed como que se adopta como dependencia ( sin dicho framework/librer\u00eda, nuestro c\u00f3digo no funcionar\u00e1 ). Adem\u00e1s, tambi\u00e9n se suele perder algo de rendimiento y control sobre el c\u00f3digo, aunque en la mayor\u00eda de los casos es pr\u00e1cticamente inapreciable. Hoy en d\u00eda, salvo para proyectos peque\u00f1os, es muy com\u00fan escoger un framework Javascript para trabajar. Un framework te ayuda a organizar tu c\u00f3digo, a escribir menos c\u00f3digo y a ser m\u00e1s productivo a la larga. Como desventaja, genera dependencia al framework.","title":"Enfoque delegador"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#enfoque-evergreen","text":"El programador decide no preocuparse de la compatibilidad con navegadores antiguos, sino dar soporte s\u00f3lo a las \u00faltimas versiones de los navegadores ( evergreen browsers ), o incluso s\u00f3lo a determinados navegadores como Google Chrome o Mozilla Firefox . Este enfoque suele ser habitual en programadores novatos, empresas que desarrollan aplicaciones SPA o proyectos que van dirigidos a un p\u00fablico muy concreto y no est\u00e1n abiertas a un p\u00fablico mayoritario.","title":"Enfoque evergreen"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#enfoque-transpilador","text":"El programador decide crear c\u00f3digo de la \u00faltima versi\u00f3n de ECMAScript . Para asegurarse de que funcione en todos los navegadores, utiliza un transpilador , que no es m\u00e1s que un sistema que revisa el c\u00f3digo y lo traduce de la versi\u00f3n actual de ECMAScript a ECMAScript 5 , que es la que leer\u00e1 el navegador. La ventaja de este m\u00e9todo es que se puede escribir c\u00f3digo Javascript moderno y actualizado ( con sus ventajas y novedades ) y cuando los navegadores soporten completamente esa versi\u00f3n de ECMAScript, s\u00f3lo tendremos que retirar el transpilador ( porque no lo necesitaremos ). La desventaja es que hay que preprocesar el c\u00f3digo ( cada vez que cambie ) para hacer la traducci\u00f3n. Quiz\u00e1s, el enfoque m\u00e1s moderno de los mencionados es utilizar transpiladores . Sistemas como Babel son muy utilizados y se encargan de traducir de ECMAScript 6 a ECMAScript 5. En estos primeros temas, tomaremos un enfoque conservador para hacer m\u00e1s f\u00e1cil el inicio con Javascript. A medida que avancemos, iremos migrando a un enfoque transpilador . Independientemente del enfoque que se decida utilizar, el programador tambi\u00e9n puede utilizar polyfills o fallbacks para asegurarse de que ciertas caracter\u00edsticas funcionar\u00e1n en navegadores antiguos. Tambi\u00e9n puede utilizar enfoques mixtos. Un polyfill no es m\u00e1s que una librer\u00eda o c\u00f3digo Javascript que act\u00faa de \u00abparche\u00bb o \u00abrelleno\u00bb para dotar de una caracter\u00edstica que el navegador a\u00fan no posee, hasta que una actualizaci\u00f3n del navegador la implemente. Un fallback es algo tambi\u00e9n muy similar: un fragmento de c\u00f3digo que el programador prepara para que en el caso de que algo no entre en funcionamiento, se ofrezca una alternativa.","title":"Enfoque transpilador"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#comentarios-de-codigo","text":"Cuando comenzamos a programar, por lo general, se nos suele decir que es una buena pr\u00e1ctica mantener comentado nuestro c\u00f3digo con anotaciones que faciliten la comprensi\u00f3n de las tareas que realizamos y los problemas que pretendemos solucionar, ya que el c\u00f3digo que creamos no suele ser muy bueno, ni mucho menos descriptivo, ya que estamos en fase de aprendizaje. A medida que conseguimos destreza programando, notaremos que los comentarios son cada vez m\u00e1s prescindibles, sin embargo, conviene no dejar de comentar, sino en su lugar, aprender a comentar mejor . Una serie de consejos a tener presentes a la hora de dejar comentarios en nuestro c\u00f3digo: No comentes detalles redundantes . No escribas lo que haces, escribe por qu\u00e9 lo haces. Mejor nombres de variables/funciones/clases descriptivas que comentarios descriptivos. S\u00e9 conciso y concreto . Resume. No escribas p\u00e1rrafos si no es absolutamente necesario. Intenta usar siempre el mismo idioma y estilo de comentarios. Con el tiempo, los comentarios no se suelen mantener ( modificar ), el c\u00f3digo s\u00ed.","title":"Comentarios de c\u00f3digo"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#tipos-de-comentarios","text":"En Javascript existen dos tipos de comentarios: los comentarios de una sola l\u00ednea y los comentarios de m\u00faltiples l\u00edneas . El primero de ellos se caracteriza porque comienza con // y s\u00f3lo comenta la linea actual desde donde se escribe. El segundo tipo se utiliza para hacer comentarios extensos que ocupar\u00e1n varias l\u00edneas . Comienza por /* y comentar\u00e1 todo el texto que escribamos hasta que cerremos el comentario con un */ . Veamos un ejemplo: // Comentarios cortos de una sola l\u00ednea. Suelen explicar la l\u00ednea siguiente. var a = 1; var x = 45; // Tambi\u00e9n se utilizan al final de una l\u00ednea. /* Por otro lado, existen los comentarios m\u00faltiples de varias l\u00edneas consecutivas. Suelen utilizarse para explicaciones largas que requieren bastante espacio porque se mencionan gran cantidad de cosas :-) */","title":"Tipos de comentarios"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#ejemplos","text":"Comentar c\u00f3digo tambi\u00e9n es un arte que debe ser aprendido, ya que al principio es muy f\u00e1cil cometer errores y comentar en exceso o no ser concreto al comentar. No suele ser grave porque los comentarios no afectan al funcionamiento del programa, pero en equipos de trabajo donde hay varios programadores suele ser molesto para los programadores con m\u00e1s experiencia. Un ejemplo de comentario que suele ser contraproducente es aquel que se limita a decir lo que hacemos en la l\u00ednea siguiente: // Declaramos una variable llamada x var x = 50; // La mostramos por consola console.log(x); // Cambiamos su valor multiplicando por 0,5 x = x * 0.5; Estos comentarios pueden ser \u00fatiles para el programador novato que comienza a programar y necesita recordar lo que hace porque a\u00fan no conoce bien la sintaxis de programaci\u00f3n, de hecho muchos de los comentarios del tema de introducci\u00f3n son as\u00ed ( para ayudar al programador que reci\u00e9n empieza a programar ), pero el objetivo real de un comentario no debe ser recordar que hace una l\u00ednea de c\u00f3digo , sino conocer porque lo estamos realizando o que representa lo que estamos haciendo: var x = 50; // Establecemos el precio del producto console.log(x); x = x * 0.5; // Lo rebajamos al 50% Sin embargo, hay una opci\u00f3n todav\u00eda mejor que conecta con uno de los temas que veremos m\u00e1s adelante. Poner nombres descriptivos a las variables deber\u00eda ser algo obligatorio a lo que acostumbrarnos, puesto que puede ahorrarnos muchos comentarios y tiempo, simplificar el c\u00f3digo considerablemente y hacerlo mucho m\u00e1s legible y con menos ambig\u00fcedades: var precio = 50; console.log(precio); var oferta = precio * 0.5; En este fragmento de c\u00f3digo, no utilizamos comentarios porque el nombre de las variables ya ayuda a entender el c\u00f3digo y lo hace autoexplicativo . De esta forma, generamos menos c\u00f3digo ( e incluso comentarios ) y se entiende igualmente. En los siguientes temas, veremos una serie de consejos a la hora de nombrar variables, funciones u otros elementos dentro de la programaci\u00f3n.","title":"Ejemplos"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#estructuras-de-control","text":"Cuando escribimos c\u00f3digo Javascript, por defecto, el navegador leer\u00e1 el script de forma secuencial , es decir, una l\u00ednea detr\u00e1s de otra, desde arriba hacia abajo. Por lo tanto, una acci\u00f3n que realicemos en la l\u00ednea 5 nunca ocurrir\u00e1 antes que una que aparece en la l\u00ednea 3. Ya veremos que m\u00e1s adelante esto se complica, pero en principio partimos de esa base.","title":"Estructuras de control"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#condicionales","text":"Al hacer un programa necesitaremos establecer condiciones o decisiones , donde buscamos que el navegador realice una acci\u00f3n A si se cumple una condici\u00f3n o una acci\u00f3n B si no se cumple . Este es el primer tipo de estructuras de control que encontraremos. Para ello existen varias estructuras de control: Estructura de control Descripci\u00f3n If Condici\u00f3n simple : Si ocurre algo, haz lo siguiente... If/else Condici\u00f3n con alternativa : Si ocurre algo, haz esto, sino, haz lo esto otro... ?: Operador ternario : Equivalente a If/else , m\u00e9todo abreviado. Switch Estructura para casos espec\u00edficos : Similar a varios If/else anidados.","title":"Condicionales"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#condicional-if","text":"Quiz\u00e1s, el m\u00e1s conocido de estos mecanismos de estructura de control es el if ( condicional ). Con \u00e9l podemos indicar en el programa que se tome un camino s\u00f3lo si se cumple la condici\u00f3n que establezcamos: var nota = 7; console.log(\"He realizado mi examen.\"); // Condici\u00f3n (si nota es mayor o igual a 5) if (nota >= 5) { console.log(\"\u00a1Estoy aprobado!\"); } En este caso, como el valor de nota es superior a 5, nos aparecer\u00e1 en la consola el mensaje \u00ab\u00a1Estoy aprobado!\u00bb. Sin embargo, si modificamos en la primera l\u00ednea el valor de nota a un valor inferior a 5, no nos aparecer\u00e1 ese mensaje. Cuando dentro de las llaves ( { } ) s\u00f3lo tenemos una l\u00ednea, se pueden omitir dichas llaves. A\u00fan as\u00ed, es recomendable ponerlas siempre si tenemos dudas o no estamos seguros.","title":"Condicional If"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#condicional-if-else","text":"Pero se puede dar el caso que queramos establecer una alternativa a una condici\u00f3n. Para eso utilizamos el if seguido de un else . Con esto podemos establecer una acci\u00f3n A si se cumple la condici\u00f3n, y una acci\u00f3n B si no se cumple. Vamos a modificar el ejemplo anterior para mostrar tambi\u00e9n un mensaje cuando estamos suspendidos, pero en este caso, en lugar de mostrar el mensaje directamente con un console.log vamos a guardar ese texto en una nueva variable calificacion : var nota = 7; console.log(\"He realizado mi examen. Mi resultado es el siguiente:\"); // Condici\u00f3n if (nota < 5) { // Acci\u00f3n A (nota es menor que 5) calificacion = \"suspendido\"; } else { // Acci\u00f3n B: Cualquier otro caso a A (nota es mayor o igual que 5) calificacion = \"aprobado\"; } console.log(\"Estoy\", calificacion); Nuevamente, en este ejemplo comprobaremos que podemos conseguir que se muestre el mensaje Estoy aprobado o Estoy suspendido dependiendo del valor que tenga la variable nota . La diferencia con el ejemplo anterior es que creamos una nueva variable que contendr\u00e1 un valor determinado dependiendo de la condici\u00f3n del If . Por \u00faltimo, el console.log del final, muestra el contenido de la variable calificacion , independientemente de que sea el primer caso o el segundo. var nota = 7; console.log(\"He realizado mi examen. Mi resultado es el siguiente:\"); // Condici\u00f3n if (nota < 5) { // Acci\u00f3n A (nota es menor que 5) calificacion = \"suspendido\"; } if (nota >= 5) { // Acci\u00f3n B (nota es mayor o igual que 5) calificacion = \"aprobado\"; } console.log(\"Estoy\", calificacion); Este nuevo ejemplo, es equivalente al ejemplo anterior. Si nos fijamos bien, la \u00fanica diferencia respecto al anterior es que estamos realizando dos if independientes: uno para comprobar si est\u00e1 suspendido y otro para comprobar si est\u00e1 aprobado. Pero aunque son equivalentes, no son exactamente iguales, ya que en el ejemplo que vimos anteriormente s\u00f3lo existe un if , y por lo tanto, s\u00f3lo se realiza una comprobaci\u00f3n. En este ejemplo que vemos ahora, se realizan dos if , y por lo tanto, dos comprobaciones. En este caso se trata de algo insignificante, pero es importante darse cuenta de que el primer ejemplo estar\u00eda realizando menos tareas para conseguir un mismo resultado, ergo, el primer ejemplo ser\u00eda m\u00e1s eficiente.","title":"Condicional If / else"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#operador-ternario","text":"El operador ternario es una alternativa de condicional if/else de una forma mucho m\u00e1s corta y, en muchos casos, m\u00e1s legible. Vamos a reescribir el ejemplo anterior utilizando este operador: var nota = 7; console.log(\"He realizado mi examen. Mi resultado es el siguiente:\"); // Operador ternario: (condici\u00f3n ? verdadero : falso) var calificacion = nota < 5 ? \"suspendido\" : \"aprobado\"; console.log(\"Estoy\", calificacion); Este ejemplo hace exactamente lo mismo que el ejemplo anterior. La idea del operador ternario es que podemos condensar mucho c\u00f3digo y tener un if en una sola l\u00ednea. Obviamente, es una opci\u00f3n que s\u00f3lo se recomienda utilizar cuando son if muy peque\u00f1os.","title":"Operador ternario"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#condicional-if-multiple","text":"Es posible que necesitemos crear un condicional m\u00faltiple con m\u00e1s de 2 condiciones, por ejemplo, para establecer la calificaci\u00f3n espec\u00edfica. Para ello, podemos anidar varios if/else uno dentro de otro, de la siguiente forma: var nota = 7; console.log(\"He realizado mi examen.\"); // Condici\u00f3n if (nota < 5) { calificacion = \"Insuficiente\"; } else if (nota < 6) { calificaci\u00f3n = \"Suficiente\"; } else if (nota < 8) { calificacion = \"Bien\"; } else if (nota <= 9) { calificacion = \"Notable\"; } else { calificacion = \"Sobresaliente\"; } console.log(\"He obtenido un\", calificacion); Sin embargo, anidar de esta forma varios if suele ser muy poco legible y produce un c\u00f3digo algo feo. En algunos casos se podr\u00eda utilizar otra estructura de control llamada switch , que puede ser \u00fatil en ciertos casos.","title":"Condicional If m\u00faltiple"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#condicional-switch","text":"La estructura de control switch permite definir casos espec\u00edficos a realizar en el caso de que la variable expuesta como condici\u00f3n sea igual a los valores que se especifican a continuaci\u00f3n mediante los case . No obstante, hay varias puntualizaciones que aclarar sobre este ejemplo: var nota = 7; console.log(\"He realizado mi examen. Mi resultado es el siguiente:\"); // Nota: Este ejemplo NO es equivalente al ejemplo anterior (leer abajo) switch (nota) { case 10: calificacion = \"Insuficiente\"; break; case 9: case 8: calificacion = \"Notable\"; break; case 7: case 6: calificacion = \"Bien\"; break; case 5: calificacion = \"Suficiente\"; break; case 4: case 3: case 2: case 1: case 0: calificacion = \"Insuficiente\"; break; default: // Cualquier otro caso calificacion = \"Nota err\u00f3nea\"; break; } console.log(\"He obtenido un\", calificacion); En primer lugar, el ejemplo anterior no es exactamente equivalente al anterior . Este ejemplo funcionar\u00eda si s\u00f3lo permitimos notas que sean n\u00fameros enteros , es decir, n\u00fameros del 0 al 10, sin decimales. En el caso de que nota tuviera por ejemplo, el valor 7.5 , mostrar\u00eda Nota err\u00f3nea . El ejemplo de los if m\u00faltiples si controla casos de n\u00fameros decimales porque establecemos comparaciones de rangos con mayor o menor, cosa que con el switch no se puede hacer. El switch est\u00e1 indicado para utilizar s\u00f3lo con casos con valores concretos y espec\u00edficos . En segundo lugar, observa que al final de cada caso es necesario indicar un break para salir del switch . En el caso que no sea haga, el programa saltar\u00e1 al siguiente caso, aunque no se cumpla la condici\u00f3n espec\u00edfica.","title":"Condicional Switch"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#bucles-e-iteraciones","text":"Una de las principales ventajas de la programaci\u00f3n es la posibilidad de crear bucles y repeticiones para tareas espec\u00edficas, y que no tengamos que realizarlas varias veces de forma manual. Existen muchas formas de realizar bucles, vamos a ver los m\u00e1s basicos, similares en otros lenguajes de programaci\u00f3n: Tipo de bucle Descripci\u00f3n while Bucles simples. for Bucles cl\u00e1sicos por excelencia. do..while Bucles simples que se realizan siempre como m\u00ednimo una vez. for..in Bucles sobre posiciones de un array. Los veremos m\u00e1s adelante. for..of Bucles sobre elementos de un array. Los veremos m\u00e1s adelante. Array functions Bucles espec\u00edficos sobre arrays. Los veremos m\u00e1s adelante. Antes de comenzar a ver que tipos de bucles existen en Javascript, es necesario conocer algunos conceptos b\u00e1sicos de los bucles: Condici\u00f3n : Al igual que en los if , en los bucles se va a evaluar una condici\u00f3n para saber si se debe repetir el bucle o finalizarlo. Generalmente, si la condici\u00f3n es verdadera, se repite. Si es falsa, se finaliza. Iteraci\u00f3n : Cada repetici\u00f3n de un bucle se denomina iteraci\u00f3n. Por ejemplo, si un bucle repite una acci\u00f3n 10 veces, se dice que tiene 10 iteraciones. Contador : Muchas veces, los bucles tienen una variable que se denomina contador, porque cuenta el n\u00famero de repeticiones que ha hecho, para finalizar desde que llegue a un n\u00famero concreto. Dicha variable hay que inicializarla ( crearla y darle un valor ) antes de comenzar el bucle. Incremento : Cada vez que terminemos un bucle se suele realizar el incremento ( o decremento ) de una variable, generalmente la denominada variable contador. Bucle infinito : Es lo que ocurre si en un bucle se nos olvida incrementar la variable contador o escribimos una condici\u00f3n que nunca se puede dar. El bucle se queda eternamente repiti\u00e9ndose y el programa se queda \u00abcolgado\u00bb.","title":"Bucles e iteraciones"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#bucle-while","text":"El bucle while es uno de los bucles m\u00e1s simples que podemos crear. Vamos a repasar el siguiente ejemplo y todas sus partes, para luego repasar que ocurre en cada iteraci\u00f3n del bucle: i = 0; // Inicializaci\u00f3n de la variable contador // Condici\u00f3n: Mientras la variable contador sea menor de 5 while (i < 5) { console.log(\"Valor de i:\", i); i = i + 1; // Incrementamos el valor de i } Veamos que es lo que ocurre a la hora de hacer funcionar ese c\u00f3digo: Antes de entrar en el bucle while , se inicializa la variable i a 0 . Antes de realizar la primera iteraci\u00f3n del bucle, comprobamos la condici\u00f3n . Si la condici\u00f3n es verdadera , hacemos lo que est\u00e1 dentro del bucle. Mostramos por pantalla el valor de i y luego incrementamos el valor actual de i en 1 . Volvemos al inicio del bucle para hacer una nueva iteraci\u00f3n . Comprobamos de nuevo la condici\u00f3n del bucle. Cuando la condici\u00f3n sea falsa , salimos del bucle y continuamos el programa. Una muestra paso a paso de las iteraciones de este primer ejemplo: Iteraci\u00f3n del bucle Valor de i Descripci\u00f3n Incremento Antes del bucle i = undefined Antes de comenzar el programa. Iteraci\u00f3n #1 i = 0 \u00bf(0 < 5)? Verdadero. Mostramos 0 por pantalla. i = 0 + 1 Iteraci\u00f3n #2 i = 1 \u00bf(1 < 5)? Verdadero. Mostramos 1 por pantalla. i = 1 + 1 Iteraci\u00f3n #3 i = 2 \u00bf(2 < 5)? Verdadero. Mostramos 2 por pantalla. i = 2 + 1 Iteraci\u00f3n #4 i = 3 \u00bf(3 < 5)? Verdadero. Mostramos 3 por pantalla. i = 3 + 1 Iteraci\u00f3n #5 i = 4 \u00bf(4 < 5)? Verdadero. Mostramos 4 por pantalla. i = 4 + 1 Iteraci\u00f3n #6 i = 5 \u00bf(5 < 5)? Falso. Salimos del bucle. El bucle while es muy simple, pero requiere no olvidarse accidentalmente de la inicializaci\u00f3n y el incremento ( adem\u00e1s de la condici\u00f3n ), por lo que el bucle for resulta m\u00e1s interesante, ya que para hacer un bucle de este tipo hay que escribir previamente siempre estos tres factores. La operaci\u00f3n i = i + 1 es lo que se suele llamar un incremento de una variable. Es muy com\u00fan simplificarla como i++ , que hace exactamente lo mismo: aumenta en 1 su valor.","title":"Bucle while"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#bucle-for","text":"El bucle for es quiz\u00e1s uno de los m\u00e1s utilizados en el mundo de la programaci\u00f3n. En Javascript se utiliza exactamente igual que en otros lenguajes como Java o C/C++. Veamos el ejemplo anterior utilizando un bucle for: // for (inicializaci\u00f3n; condici\u00f3n; incremento) for (i = 0; i < 5; i++) { console.log(\"Valor de i:\", i); } Como vemos, la sintaxis de un bucle for es mucho m\u00e1s compacta y r\u00e1pida de escribir que la de un bucle while . La primera vez puede parecer algo confusa, pero es mucho m\u00e1s pr\u00e1ctica porque te obliga a escribir la inicializaci\u00f3n , la condici\u00f3n y el incremento antes del propio bucle, y eso hace que no te olvides de estos tres puntos fundamentales. En programaci\u00f3n es muy habitual empezar a contar desde cero . Mientras que en la vida real se contar\u00eda desde 1 hasta 10 , en programaci\u00f3n se contar\u00eda desde 0 hasta 9 .","title":"Bucle for"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#incremento-multiple","text":"Aunque no suele ser habitual, es posible a\u00f1adir varias inicializaciones o incrementos en un bucle for separando por comas. En el siguiente ejemplo adem\u00e1s de aumentar el valor de una variable i , inicializamos una variable con el valor 5 y lo vamos decrementando: for (i = 0, j = 5; i < 5; i++, j--) { console.log(\"Valor de i y j:\", i, j); } Si i++ aumenta en 1 el valor de i en cada iteraci\u00f3n, lo que hace j-- es disminuir en 1 el valor de j en cada iteraci\u00f3n.","title":"Incremento m\u00faltiple"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#bucles-sobre-arrays","text":"M\u00e1s adelante hablaremos de los arrays y veremos varias formas que tiene Javascript de realizar bucles adaptados a ese tipo de variables.","title":"Bucles sobre arrays"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#indentacion-de-codigo","text":"A medida que escribimos l\u00edneas de c\u00f3digo en nuestro programa, se ir\u00e1 complicando y nos tomar\u00e1 m\u00e1s tiempo leer lo que hemos hecho y comprobar si hay errores o como solucionarlos. Sin embargo, para mejorar la rapidez con la que leemos ( y entendemos ) nuestro c\u00f3digo, una buena pr\u00e1ctica es usar la indentaci\u00f3n .","title":"Indentaci\u00f3n de c\u00f3digo"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#que-es-la-indentacion","text":"Se llama indentaci\u00f3n de c\u00f3digo al hecho de utilizar sangrado ( mover ligeramente hacia la derecha ) en las l\u00edneas de c\u00f3digo para facilitar la lectura, e indicar visualmente si nos encontramos en el interior de una funci\u00f3n, bucle, condicional, etc... Observemos el siguiente ejemplo: function bucle() { for (i = 0; i < 10; i++) { console.log(\"Iteraci\u00f3n #\", i); if (i == 9) { console.log(\"Estoy en la \u00faltima iteraci\u00f3n\"); } // if } // for } // function En el ejemplo anterior se puede observar que al utilizar estructuras de control, bucles o funciones, los programadores indentamos el c\u00f3digo que hay en su interior. De esta forma, es muy sencillo saber a que nivel est\u00e1 actuando la l\u00ednea de c\u00f3digo en cuesti\u00f3n. Observemos este otro c\u00f3digo ( mal indentado ): function bucle() { for (i = 0; i < 10; i++) { console.log(\"Iteraci\u00f3n #\", i); if (i == 9) console.log(\"Estoy en la \u00faltima iteraci\u00f3n\"); } } En principio, puede parecer que este c\u00f3digo aprovecha mejor el espacio, porque ocupa menos, pero es mucho menos legible que el ejemplo anterior debido a su falta de indentaci\u00f3n. En algunos lenguajes de programaci\u00f3n, como Python , la indentaci\u00f3n es una caracter\u00edstica obligatoria, que acostumbra al programador a indentar correctamente. Es por esta raz\u00f3n, que Python se indica como un lenguaje ideal para adquirir buenos h\u00e1bitos de programaci\u00f3n. Una buena pr\u00e1ctica de programaci\u00f3n es indentar correctamente las l\u00edneas de c\u00f3digo que escribamos, no obstante, la mayor\u00eda de los editores est\u00e1n configurados para que al pulsar ENTER se indenten autom\u00e1ticamente.","title":"\u00bfQu\u00e9 es la indentaci\u00f3n?"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#tabuladores-o-espacios","text":"A la hora de indentar c\u00f3digo hay dos aproximaciones: usar espacios o usar tabuladores . Utilizar una u otra estrategia de tabulaci\u00f3n depende del programador, pero lo importante es ser coherente y siempre utilizar la misma . Espacios : Si decidimos utilizar espacios, ten en cuenta que puedes elegir indentar con 2 , 3 \u00f3 4 espacios ( por ejemplo ). En los ejemplos de esta p\u00e1gina suelo utilizar indentaci\u00f3n a 2 espacios. Tabuladores : Si decidimos utilizar tabuladores, debes saber que el car\u00e1cter utilizado por la tecla TAB no es el mismo que el de los espacios. Por ejemplo, un tabulador puede ser visualmente equivalente a 3 espacios, pero s\u00f3lo ocupar\u00e1 un car\u00e1cter. Muchos editores convierten autom\u00e1ticamente un tabulador a un n\u00famero de espacios concreto. Una buena pr\u00e1ctica a la hora de programar es ayudarnos de un linter como ESLint , una herramienta que analiza nuestro c\u00f3digo ( generalmente en tiempo real ) y nos alerta de posibles errores de escritura, no centr\u00e1ndose en el propio funcionamiento del c\u00f3digo, sino en la coherencia y escritura correcta. M\u00e1s adelante abordaremos este tema.","title":"\u00bfTabuladores o espacios?"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#convenciones-de-nombres","text":"Una de las tareas a priori m\u00e1s sencilla, pero a la misma vez de las m\u00e1s complejas, es la de ponerle un buen nombre a una variable ( o a cualquier otro elemento de programaci\u00f3n que necesite un nombre ). Los programadores necesitan utilizar variables en sus c\u00f3digos, y adem\u00e1s que estas variables tengan nombres que representen claramente la informaci\u00f3n que contienen. Dejar nombres bien claros es muy importante para nosotros, ya que si necesitamos volver a trabajar con dicho c\u00f3digo ( o hacer modificaciones ) nos resultar\u00e1 mucho m\u00e1s f\u00e1cil. Sin embargo, esto cobra a\u00fan mayor importancia si otras personas tienen que revisar o modificar nuestro c\u00f3digo, ya que ellos no est\u00e1n tan familiarizados con nuestro c\u00f3digo y les ayudar\u00e1 mucho a tardar menos tiempo en comprenderlo. Vi\u00f1eta de Commit Strip sobre el nombrado de variables. Veamos una serie de consejos y recomendaciones a la hora de establecer nombres en nuestro c\u00f3digo. La mayor\u00eda de ellas son simplemente convenciones , no son obligatorias para que el c\u00f3digo funcione, pero son altamente recomendables para mejorar la calidad de nuestro c\u00f3digo:","title":"Convenciones de nombres"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#nombres-descriptivos","text":"Una mala costumbre habitual cuando se empieza en la programaci\u00f3n, es darle un nombre muy poco descriptivo de la informaci\u00f3n que contiene, simplemente porque es m\u00e1s corto y manejable. Al principio, cuando tenemos pocas variables esto no importa demasiado, pero a medida que el c\u00f3digo crece, se vuelve insostenible. Es muy com\u00fan tener que volver hacia atr\u00e1s en nuestro c\u00f3digo a cambiar nombres de variables porque hemos cambiado de parecer o porque se nos ha ocurrido un nombre mejor. Esto seguir\u00e1 ocurriendo hasta que adquirimos cierta experiencia. Evita nombres poco claros o inconsistentes como tmp , a , b2 , variable2 , etc...","title":"Nombres descriptivos"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#indices-y-contadores","text":"A lo anterior, hay una peque\u00f1a excepci\u00f3n. Cuando trabajamos en bucles for ( o bucles en general ), donde el \u00e1mbito de una variable que act\u00faa como contador ( \u00edndice ) es muy reducido ( esa variable solo existe y afecta al interior del bucle ), se suelen utilizar nombres de variables cortos para ser m\u00e1s productivo y claro. Las variables que act\u00faan como contador suelen nombrarse con una letra min\u00fascula empezando desde i ( de \u00edndice ): i , j , k ... A veces, tambi\u00e9n se usan letras como a , b , c ... o la inicial min\u00fascula de lo que representan: c para un contador, p para una posici\u00f3n, etc...","title":"\u00cdndices y contadores"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#constantes-clases-y-variables","text":"Las constantes son variables especiales que no varian su valor a lo largo del programa y permanecen como su propio nombre indica: constantes. La convenci\u00f3n adoptada con las constantes es que deben ir siempre en MAY\u00daSCULAS . Las clases son estructuras de c\u00f3digo m\u00e1s complejas que veremos m\u00e1s adelante. Cuando necesites nombrarlas, es importante recordar que los nombres de las clases se escriben siempre capitalizadas: may\u00fasculas la primera letra y el resto en min\u00fasculas. Las variables , por \u00faltimo, siempre deben empezar por letra min\u00fascula. Independientemente de que sea variable, constante o clase, su nombre nunca podr\u00e1 empezar por un n\u00famero, sino que debe empezar por una letra o car\u00e1cter. Si lo compruebas, ver\u00e1s que es imposible nombrar una variable que empiece por n\u00famero.","title":"Constantes, clases y variables"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#estilo-de-nombrado","text":"Al margen del nombre que utilicemos para nombrar una variable, funci\u00f3n u otro elemento, tenemos el estilo o convenci\u00f3n que utilizaremos para escribir nombres compuestos por varias palabras. Existen varias convenciones a utilizar: Nombre Descripci\u00f3n Ejemplo camelCase Primera palabra, min\u00fasculas. El resto en min\u00fasculas, salvo la primera letra. La m\u00e1s utilizada en Javascript. precioProducto PascalCase Idem a la anterior, pero todas las palabras empiezan con la primera letra may\u00fascula. Se utiliza en las Clases. PrecioProducto snake_case Las palabras se separan con un gui\u00f3n bajo y se escriben siempre en min\u00fasculas. precio_producto kebab-case Las palabras se separan con un gui\u00f3n normal y se escriben siempre en min\u00fasculas. precio-producto dot.case Las palabras van en min\u00fasculas separadas por puntos. En Javascript no se puede usar. precio.producto H\u00fangara Prefijo en min\u00fasculas que indica el tipo de dato seguido de las palabras (n = n\u00famero, t = texto...). Esta notaci\u00f3n fue muy utilizada por Microsoft. nPrecioProducto Una buena costumbre es decidirse por uno de estos estilos y no mezclarlos . Si te decantas por uno de ellos, utiliza siempre el mismo. Personalmente, aconsejo utilizar el primero en Javascript, ya que es uno de los m\u00e1s utilizados y extendidos para este lenguaje.","title":"Estilo de nombrado"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#funciones-basicas","text":"En programaci\u00f3n, cuando nuestro c\u00f3digo se va haciendo cada vez m\u00e1s grande, necesitaremos buscar una forma de organizarlo y prepararnos para reutilizarlo y no repetir innecesariamente las mismas tareas. Para ello, un primer recurso muy \u00fatil son las funciones .","title":"Funciones b\u00e1sicas"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#que-es-una-funcion","text":"Las funciones nos permiten agrupar l\u00edneas de c\u00f3digo en tareas con un nombre, para que, posteriormente, podamos hacer referencia a ese nombre para realizar todo lo que se agrupe en dicha tarea. Para usar funciones hay que hacer 2 cosas: Declarar la funci\u00f3n : Preparar la funci\u00f3n, darle un nombre y decirle las tareas que realizar\u00e1. Ejecutar la funci\u00f3n : \u00abLlamar\u00bb a la funci\u00f3n para que realice las tareas de su contenido.","title":"\u00bfQu\u00e9 es una funci\u00f3n?"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#declaracion","text":"En el siguiente ejemplo veremos la declaraci\u00f3n de una funci\u00f3n llamada saludar : // Declaraci\u00f3n de la funci\u00f3n \"saludar\" function saludar() { // Contenido de la funci\u00f3n console.log(\"Hola, soy una funci\u00f3n\"); } El contenido de la funci\u00f3n es una l\u00ednea que mostrar\u00e1 por consola un saludo. Sin embargo, si escribimos estas 4-5 l\u00edneas de c\u00f3digo en nuestro programa, no mostrar\u00e1 nada por pantalla. Esto ocurre as\u00ed porque solo hemos declarado la funci\u00f3n ( le hemos dicho que existe ), pero a\u00fan nos falta el segundo paso, ejecutarla , que es realmente cuando se realizan las tareas de su contenido.","title":"Declaraci\u00f3n"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#ejecucion","text":"Veamos, ahora s\u00ed, el ejemplo completo con declaraci\u00f3n y ejecuci\u00f3n: // Declaraci\u00f3n de la funci\u00f3n \"saludar\" function saludar() { // Contenido de la funci\u00f3n console.log(\"Hola, soy una funci\u00f3n\"); } // Ejecuci\u00f3n de la funci\u00f3n saludar(); En este ejemplo hemos declarado la funci\u00f3n y adem\u00e1s, hemos ejecutado la funci\u00f3n ( en la \u00faltima l\u00ednea ) llam\u00e1ndola por su nombre y seguida de ambos par\u00e9ntesis, que nos indican que es una funci\u00f3n. En este ejemplo, si se nos mostrar\u00eda en la consola Javascript el mensaje de saludo.","title":"Ejecuci\u00f3n"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#ejemplo","text":"Veamos un primer ejemplo que muestre en la consola Javascript la tabla de multiplicar del 1 : // Tabla de multiplicar del 1 console.log(\"1 x 0 = \", 1 * 0); console.log(\"1 x 1 = \", 1 * 1); console.log(\"1 x 2 = \", 1 * 2); console.log(\"1 x 3 = \", 1 * 3); console.log(\"1 x 4 = \", 1 * 4); console.log(\"1 x 5 = \", 1 * 5); console.log(\"1 x 6 = \", 1 * 6); console.log(\"1 x 7 = \", 1 * 7); console.log(\"1 x 8 = \", 1 * 8); console.log(\"1 x 9 = \", 1 * 9); console.log(\"1 x 10 = \", 1 * 10); Este primer ejemplo funciona perfectamente, sin embargo, no estamos aprovechando las ventajas de la programaci\u00f3n, sino que hemos hecho todo el trabajo escribiendo 10 l\u00edneas de c\u00f3digo . Vamos a utilizar un bucle for para ahorrarnos tantas l\u00edneas de c\u00f3digo: for (i = 0; i < 11; i++) { console.log(\"1 x\", i, \"=\", 1 * i); } Esto est\u00e1 mucho mejor. Hemos resumido 11 l\u00edneas de c\u00f3digo en pr\u00e1cticamente 2 l\u00edneas utilizando un bucle for que va de 0 a 10 incrementando de 1 en 1. Incluso, recuerda que cuando las llaves s\u00f3lo contienen una l\u00ednea, se pueden omitir. Otro detalle importante a mencionar es que, en muchos casos, a los programadores les resulta m\u00e1s intuitivo establecer la condici\u00f3n del bucle a i <= 10 que establecerla a i < 11 . Son exactamente equivalentes, pero en el caso actual, la primera parece m\u00e1s \u00abl\u00f3gica\u00bb, ya que vemos visualmente el n\u00famero de la \u00faltima iteraci\u00f3n. Pero a\u00fan no hemos utilizado funciones, as\u00ed que vamos a modificar nuestro ejemplo para usar una. Imaginemos que ahora nuestro objetivo es mostrar la tabla de multiplicar del 1 varias veces: 3 veces para ser exactos. La primera aproximaci\u00f3n para hacer eso que se nos ocurrir\u00eda ser\u00eda hacer lo siguiente: // Primera vez for (i = 0; i <= 10; i++) console.log(\"1 x\", i, \"=\", 1 * i); // Segunda vez for (i = 0; i <= 10; i++) console.log(\"1 x\", i, \"=\", 1 * i); // Tercera vez for (i = 0; i <= 10; i++) console.log(\"1 x\", i, \"=\", 1 * i); Pero volvemos a tener el mismo problema del primer ejemplo. Estamos repitiendo el mismo c\u00f3digo varias veces, complic\u00e1ndolo y volvi\u00e9ndolo m\u00e1s \u00abfeo\u00bb. Adem\u00e1s, si tuvieramos que hacer modificaciones en uno de los bucles habr\u00eda tambi\u00e9n que repetir el trabajo 2 veces m\u00e1s, por cada uno de los otros bucles. Veamos ahora como obtener el mismo resultado pero utilizando bucles y funciones, sin repetir varias veces las mismas tareas: // Declaraci\u00f3n de la funci\u00f3n tablaDelUno() function tablaDelUno() { for (i = 0; i <= 10; i++) console.log(\"1 x\", i, \"=\", 1 * i); } // Bucle que ejecuta 3 veces la funci\u00f3n tablaDelUno() for (i = 0; i < 3; i++) tablaDelUno(); En este ejemplo se declara la funci\u00f3n, que mostrar\u00e1 la tabla de multiplicar del uno. Posteriormente, realizamos un bucle de 0 a 2 ( 3 repeticiones ) para llamar la funci\u00f3n 3 veces, y mostrar as\u00ed la tabla de multiplicar cada vez.","title":"Ejemplo"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#que-son-los-parametros","text":"Pero las funciones no sirven s\u00f3lo para esto. Tienen mucha m\u00e1s flexibilidad de la que hemos visto hasta ahora. A las funciones se les pueden pasar par\u00e1metros , que no son m\u00e1s que variables que existir\u00e1n s\u00f3lo dentro de dicha funci\u00f3n, con el valor pasado desde la ejecuci\u00f3n. Veamos el siguiente ejemplo, utilizando el par\u00e1metro hasta : // Declaraci\u00f3n function tablaDelUno(hasta) { for (i = 0; i <= hasta; i++) console.log(\"1 x\", i, \"=\", 1 * i); } // Ejecuci\u00f3n tablaDelUno(10); tablaDelUno(5); Como podemos ver, en el interior de los par\u00e9ntesis de la funci\u00f3n se ha indicado una variable llamada hasta . Esa variable contiene el valor que se le da a la hora de ejecutar la funci\u00f3n, que en este ejemplo, si nos fijamos bien, se ejecuta dos veces: una con valor 10 y otra con valor 5 . Si analizamos el c\u00f3digo de la declaraci\u00f3n de la funci\u00f3n, vemos que utilizamos la variable hasta en la condici\u00f3n del bucle, para que el bucle llegue hasta ese n\u00famero ( de ah\u00ed su nombre ). Por lo tanto, en la primera ejecuci\u00f3n se nos mostrar\u00e1 la tabla de multiplicar del 1 hasta llegar al 1 x 10 y en la segunda ejecuci\u00f3n se nos mostrar\u00e1 la tabla de multiplicar del 1 hasta llegar al 1 x 5 . La idea de las funciones es enfocarnos en el c\u00f3digo de la declaraci\u00f3n, y una vez lo tengamos funcionando, nos podemos olvidar de \u00e9l porque est\u00e1 encapsulado dentro de la funci\u00f3n. Simplemente tendremos que recordar el nombre de la funci\u00f3n y los par\u00e1metros que hay que pasarle. Esto hace que sea mucho m\u00e1s f\u00e1cil trabajar con el c\u00f3digo.","title":"\u00bfQu\u00e9 son los par\u00e1metros?"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#parametros-multiples","text":"Hasta ahora s\u00f3lo hemos creado una funci\u00f3n con 1 par\u00e1metro , pero una funci\u00f3n de Javascript puede tener muchos m\u00e1s par\u00e1metros. Vamos a crear otro ejemplo, mucho m\u00e1s \u00fatil donde convertimos nuestra funci\u00f3n en algo m\u00e1s pr\u00e1ctico y \u00fatil: // Declaraci\u00f3n function tablaMultiplicar(tabla, hasta) { for (i = 0; i <= hasta; i++) console.log(tabla, \"x\", i, \"=\", tabla * i); } // Ejecuci\u00f3n tablaMultiplicar(1, 10); // Tabla del 1 tablaMultiplicar(5, 10); // Tabla del 5 En este ejemplo, hemos modificado nuestra funci\u00f3n tablaDelUno() por esta nueva versi\u00f3n que hemos cambiado de nombre a tablaMultiplicar() . Esta funci\u00f3n necesita que le pasemos dos par\u00e1metros: tabla ( la tabla de multiplicar en cuesti\u00f3n ) y hasta ( el n\u00famero hasta donde llegar\u00e1 la tabla de multiplicar ). De esta forma, las dos llamadas para ejecutar la funci\u00f3n mostrar\u00e1n por la consola la tabla de multiplicar del 1 y del 5. Podemos a\u00f1adir m\u00e1s par\u00e1metros a la funci\u00f3n seg\u00fan nuestras necesidades. Es importante recordar que el orden de los par\u00e1metros es importante y que los nombres de cada par\u00e1metro no se pueden repetir en una misma funci\u00f3n.","title":"Par\u00e1metros m\u00faltiples"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#parametros-por-defecto","text":"Es posible que en algunos casos queramos que ciertos par\u00e1metros tengan un valor sin necesidad de escribirlos en la ejecuci\u00f3n. Es lo que se llama un valor por defecto . En nuestro ejemplo anterior, nos podr\u00eda interesar que la tabla de multiplicar llegue siempre hasta el 10, ya que es el comportamiento por defecto. Si queremos que llegue hasta otro n\u00famero, lo indicamos explicitamente, pero si lo omitimos, queremos que llegue hasta 10. Esto se har\u00eda de la siguiente forma: function tablaMultiplicar(tabla, hasta = 10) { for (i = 0; i <= hasta; i++) console.log(tabla, \"x\", i, \"=\", tabla * i); } // Ejecuci\u00f3n tablaMultiplicar(2); // Esta tabla llegar\u00e1 hasta el n\u00famero 10 tablaMultiplicar(2, 15); // Esta tabla llegar\u00e1 hasta el n\u00famero 15 De esta forma nos ahorramos tener que escribir los valores en la ejecuci\u00f3n de la funci\u00f3n, si en la mayor\u00eda de los casos va a tomar ese valor. Hay que remarcar que esta caracter\u00edstica se a\u00f1ade en ECMAScript 6 , por lo que en navegadores sin soporte podr\u00eda no funcionar correctamente. En versiones anteriores de ECMAScript se pod\u00eda realizar de formas similares a la siguiente: function tablaMultiplicar(tabla, hasta) { if (hasta == undefined) hasta = 10; for (i = 0; i <= hasta; i++) console.log(tabla, \"x\", i, \"=\", tabla * i); } En el caso de que el par\u00e1metro hasta no tenga valor ( es undefined ), le asignamos el valor por defecto. En caso contrario ( ya tiene valor ) continuamos normalmente.","title":"Par\u00e1metros por defecto"},{"location":"desarrollo/javascript/01-introducci%C3%B3n_a_javascript/#devolucion-de-valores","text":"Hasta ahora hemos utilizado funciones simples que realizan acciones o tareas ( en nuestro caso, mostrar por consola ), pero habitualmente, lo que buscamos es que esa funci\u00f3n realice una tarea y nos devuelva la informaci\u00f3n al exterior de la funci\u00f3n, para as\u00ed utilizarla o guardarla en una variable, que utilizaremos posteriormente para nuestros objetivos. Para ello, se utiliza la palabra clave return , que suele colocarse al final de la funci\u00f3n, ya que con dicha devoluci\u00f3n terminamos la ejecuci\u00f3n de la funci\u00f3n ( si existe c\u00f3digo despu\u00e9s, nunca ser\u00e1 ejecutado ). Veamos un ejemplo con una operaci\u00f3n muy sencilla, para verlo claramente: // Declaraci\u00f3n function sumar(a, b) { return a + b; // Devolvemos la suma de a y b al exterior de la funci\u00f3n console.log(\"Ya he realizado la suma.\"); // Este c\u00f3digo nunca se ejecutar\u00e1 } // Ejecuci\u00f3n var resultado = sumar(5, 5); // Se guarda 10 en la variable resultado Como podemos ver, esto nos permite crear funciones m\u00e1s modulares y reutilizables que podremos utilizar en multitud de casos, ya que la informaci\u00f3n se puede enviar al exterior de la funci\u00f3n y utilizarla junto a otras funciones o para otros objetivos. Fuente: Lenguaje Javascript por Manz","title":"Devoluci\u00f3n de valores"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/","text":"Fundamentos de Javascript \u00b6 Tipos de datos \u00b6 En Javascript, al igual que en la mayor\u00eda de los lenguajes de programaci\u00f3n, al declarar una variable y guardar su contenido, tambi\u00e9n le estamos asignando un tipo de dato , ya sea de forma impl\u00edcita o expl\u00edcita. El tipo de dato no es m\u00e1s que la naturaleza de su contenido: contenido num\u00e9rico, contenido de texto, etc... \u00bfQu\u00e9 tipos de lenguajes existen? \u00b6 A grandes rasgos, nos podemos encontrar con dos tipos de lenguajes de programaci\u00f3n: Lenguajes est\u00e1ticos : Cuando creamos una variable, debemos indicar el tipo de dato del valor que va a contener. En consecuencia, el valor asignado finalmente, siempre deber\u00e1 ser del tipo de dato que hemos indicado ( si definimos que es un n\u00famero debe ser un n\u00famero, si definimos que es un texto debe ser un texto, etc... ). Lenguajes din\u00e1micos : Cuando creamos una variable, no es necesario indicarle el tipo de dato que va a contener. El lenguaje de programaci\u00f3n se encargar\u00e1 de deducir el tipo de dato ( dependiendo del valor que le hayamos asignado ). En el caso de los lenguajes din\u00e1micos , realmente el tipo de dato se asocia al valor ( en lugar de a la variable ). De esta forma, es mucho m\u00e1s f\u00e1cil entender que a lo largo del programa, dicha variable puede \u00abcambiar\u00bb a tipos de datos diferentes, ya que la restricci\u00f3n del tipo de dato est\u00e1 asociada al valor y no a la variable en s\u00ed. No obstante, para simplificar, en los primeros temas siempre hablaremos de variables y sus tipos de datos respectivos. Javascript pertenece a los lenguajes din\u00e1micos , ya que autom\u00e1ticamente detecta de que tipo de dato se trata en cada caso, dependiendo del contenido que le hemos asignado a la variable. Para algunos desarrolladores \u2014 sobre todo, n\u00f3veles \u2014 esto les resulta una ventaja, ya que es mucho m\u00e1s sencillo declarar variables sin tener que preocuparte del tipo de dato que necesitan. Sin embargo, para muchos otros desarrolladores \u2014 generalmente, avanzados \u2014 es una desventaja, ya que pierdes el control de la informaci\u00f3n almacenada y esto en muchas ocasiones puede desembocar en problemas o situaciones inesperadas. En Javascript existen mecanismos para convertir o forzar los tipos de datos de las variables, sin embargo, muchos programadores prefieren declarar expl\u00edcitamente los tipos de datos, ya que les aporta cierta confianza y seguridad. Este grupo de desarrolladores suelen optar por utilizar lenguajes como Typescript , que no es m\u00e1s que \u00abvarias capas de caracter\u00edsticas a\u00f1adidas\u00bb a Javascript. En muchas ocasiones ( y de manera informal ) tambi\u00e9n se suele hacer referencia a lenguajes tipados ( tipado fuerte, o fuertemente tipado ) o lenguajes no tipados ( tipado d\u00e9bil, debilmente tipado ), para indicar si el lenguaje requiere indicar manualmente el tipo de dato de las variables o no, respectivamente. \u00bfQu\u00e9 son los tipos de datos? \u00b6 En Javascript disponemos de los siguientes tipos de datos: Tipo de dato Descripci\u00f3n Ejemplo b\u00e1sico number Valor num\u00e9rico (enteros, decimales, etc...) 42 string Valor de texto (cadenas de texto, car\u00e1cteres, etc...) 'MZ' boolean Valor booleano (valores verdadero o falso) true undefined Valor sin definir (variable sin inicializar) undefined function Funci\u00f3n (funci\u00f3n guardada en una variable) function() {} object Objeto (estructura m\u00e1s compleja) {} Para empezar, nos centraremos en los tres primeros, denominados tipos de datos primitivos , y en los temas siguientes veremos detalles sobre los siguientes. Para saber que tipo de dato tiene una variable, debemos observar que valor le hemos dado. Si es un valor num\u00e9rico, ser\u00e1 de tipo number . Si es un valor de texto, ser\u00e1 de tipo string , si es verdadero o falso, ser\u00e1 de tipo booleano . Veamos un ejemplo en el que identificaremos que tipo de dato tiene cada variable: var s = \"Hola, me llamo Manz\"; // s, de string var n = 42; // n, de n\u00famero var b = true; // b, de booleano var u; // u, de undefined Como se puede ver, en este ejemplo, es muy sencillo saber que tipos de datos tienen cada variable. \u00bfQu\u00e9 tipo de dato tiene una variable? \u00b6 Nos encontraremos que muchas veces no resulta tan sencillo saber que tipo de dato tiene una variable, o simplemente viene oculto porque el valor lo devuelve una funci\u00f3n o alguna otra raz\u00f3n similar. Hay varias formas de saber que tipo de dato tiene una variable en Javascript: Utilizando typeof() \u00b6 Si tenemos dudas, podemos utilizar la funci\u00f3n typeof , que nos devuelve el tipo de dato de la variable que le pasemos por par\u00e1metro. Veamos que nos devuelve typeof() sobre las variables del ejemplo anterior: console.log(typeof s); // \"string\" console.log(typeof n); // \"number\" console.log(typeof b); // \"boolean\" console.log(typeof u); // \"undefined\" Como se puede ver, mediante la funci\u00f3n typeof podremos determinar que tipo de dato se esconde en una variable. Observa tambi\u00e9n que la variable u , al haber sido declarada sin valor, Javascript le da un tipo de dato especial: undefined ( sin definir ). La funci\u00f3n typeof() solo sirve para variables con tipos de datos b\u00e1sicos o primitivos. Utilizando constructor.name \u00b6 M\u00e1s adelante, nos encontraremos que en muchos casos, typeof() resulta insuficiente porque en tipos de datos m\u00e1s avanzados simplemente nos indica que son objetos . Con constructor.name podemos obtener el tipo de constructor que se utiliza, un concepto que veremos m\u00e1s adelante dentro del tema de clases. De momento, si lo necesitamos, podemos comprobarlo as\u00ed: console.log(s.constructor.name); // String console.log(n.constructor.name); // Number console.log(b.constructor.name); // Boolean console.log(u.constructor.name); // ERROR, s\u00f3lo funciona con variables definidas OJO : S\u00f3lo funciona en variables definidas ( no undefined ) y s\u00f3lo en ECMAScript 6. Que Javascript determine los tipos de datos autom\u00e1ticamente no quiere decir que debamos despreocuparnos por ello. En muchos casos, debemos conocer el tipo de dato de una variable e incluso necesitaremos convertirla a otros tipos de datos antes de usarla. M\u00e1s adelante veremos formas de convertir entre tipos de datos. Variables y constantes \u00b6 En javascript es muy sencillo declarar y utilizar variables, pero aunque sea un procedimiento simple, hay que tener una serie de conceptos previos muy claros antes de continuar para evitar futuras confusiones, sobre todo si estamos acostumbrados a otros lenguajes m\u00e1s tradicionales. Variables \u00b6 En programaci\u00f3n, las variables son espacios donde se puede guardar informaci\u00f3n y asociarla a un determinado nombre. De esta forma, cada vez que se consulte ese nombre posteriormente, te devolver\u00e1 la informaci\u00f3n que contiene. La primera vez que se realiza este paso se suele llamar inicializar una variable . En Javascript, si una variable no est\u00e1 inicializada, contendr\u00e1 un valor especial: undefined , que significa que su valor no est\u00e1 definido a\u00fan, o lo que es lo mismo, que no contiene informaci\u00f3n: var a; // Declaramos una variable \"a\", pero no le asociamos ning\u00fan contenido. var b = 0; // Declaramos una variable de nombre \"b\", y le asociamos el n\u00famero 0. console.log(b); // Muestra 0 (el valor guardado en la variable \"b\") console.log(a); // Muestra \"undefined\" (no hay valor guardado en la variable \"a\") Como se puede observar, hemos utilizado console.log() para consultar la informaci\u00f3n que contienen las variables indicadas. OJO : Las may\u00fasculas y min\u00fasculas en los nombres de las variables de Javascript importan . No es lo mismo una variable llamada precio que una variable llamada Precio , pueden contener valores diferentes. Si tenemos que declarar muchas variables consecutivas, una buena pr\u00e1ctica suele ser escribir s\u00f3lo el primer var y separar por comas las diferentes variables con sus respectivos contenidos ( m\u00e9todo 3 ). Aunque se podr\u00eda escribir todo en una misma l\u00ednea ( m\u00e9todo 2 ), con el \u00faltimo m\u00e9todo el c\u00f3digo es mucho m\u00e1s f\u00e1cil de leer: // M\u00e9todo 1: Declaraci\u00f3n de variables de forma independiente var a = 3; var c = 1; var d = 2; // M\u00e9todo 2: Declaraci\u00f3n masiva de variables con el mismo var var a = 3, c = 1, d = 2; // M\u00e9todo 3: Igual al anterior, pero mejorando la legibilidad del c\u00f3digo var a = 3, c = 1, d = 2; Como su propio nombre indica, una variable puede variar su contenido, ya que aunque contenga una cierta informaci\u00f3n, se puede volver a cambiar. A esta acci\u00f3n ya no se le llama inicializar una variable, sino declarar una variable ( o m\u00e1s concretamente, redeclarar ). En el c\u00f3digo se puede diferenciar porque se omite el var : var a = 40; // Inicializamos la variable \"a\" al valor 40. a = 50; // Ahora, hemos declarado que pasa a contener 50 en lugar de 40. \u00c1mbitos de variables: var \u00b6 Cuando inicializamos una variable al principio de nuestro programa y le asignamos un valor, ese valor generalmente est\u00e1 disponible a lo largo de todo el programa. Sin embargo, esto puede variar dependiendo de m\u00faltiples factores. Se conoce como \u00e1mbito de una variable a la zona donde esa variable sigue existiendo. Por ejemplo, si consultamos el valor de una variable antes de inicializarla, no existe: console.log(e); // Muestra \"undefined\", en este punto la variable \"e\" no existe var e = 40; console.log(e); // Aqu\u00ed muestra 40, existe porque ya se ha inicializado anteriormente En el ejemplo anterior, el \u00e1mbito de la variable e comienza a partir de su inicializaci\u00f3n y \"vive\" hasta el final del programa. A esto se le llama \u00e1mbito global y es el ejemplo m\u00e1s sencillo. M\u00e1s adelante veremos que se va complicando y a veces no resulta tan obvio saber en que \u00e1mbito se encuentra. En el enfoque tradicional de Javascript, es decir, cuando se utiliza la palabra clave var para declarar variables, existen dos \u00e1mbitos principales: \u00e1mbito global y \u00e1mbito a nivel de funci\u00f3n . Observemos el siguiente ejemplo: var a = 1; console.log(a); // Aqu\u00ed accedemos a la \"a\" global, que vale 1 function x() { console.log(a); // En esta l\u00ednea el valor de \"a\" es undefined var a = 5; // Aqu\u00ed creamos una variable \"a\" a nivel de funci\u00f3n console.log(a); // Aqu\u00ed el valor de \"a\" es 5 (a nivel de funci\u00f3n) console.log(window.a); // Aqu\u00ed el valor de \"a\" es 1 (\u00e1mbito global) } x(); // Aqu\u00ed se ejecuta el c\u00f3digo de la funci\u00f3n x() console.log(a); // En esta l\u00ednea el valor de \"a\" es 1 En el ejemplo anterior vemos que el valor de a dentro de una funci\u00f3n no es el 1 inicial, sino que estamos en otro \u00e1mbito diferente donde la variable a anterior no existe: un \u00e1mbito a nivel de funci\u00f3n . Mientras estemos dentro de una funci\u00f3n, las variables inicializadas en ella estar\u00e1n en el \u00e1mbito de la propia funci\u00f3n. OJO : Podemos utilizar el objeto especial window para acceder directamente al \u00e1mbito global independientemente de donde nos encontremos. Esto ocurre as\u00ed porque las variables globales se almacenan dentro del objeto window ( la pesta\u00f1a actual del navegador web ). var a = 1; console.log(a); // Aqu\u00ed accedemos a la \"a\" global, que vale 1 function x() { console.log(a); // En esta l\u00ednea el valor de \"a\" es 1 a = 5; // Aqu\u00ed creamos una variable \"a\" en el \u00e1mbito anterior console.log(a); // Aqu\u00ed el valor de \"a\" es 5 (a nivel de funci\u00f3n) console.log(window.a); // Aqu\u00ed el valor de \"a\" es 5 (\u00e1mbito global) } x(); // Aqu\u00ed se ejecuta el c\u00f3digo de la funci\u00f3n x() console.log(a); // En esta l\u00ednea el valor de \"a\" es 5 En este ejemplo se omite el var dentro de la funci\u00f3n, y vemos que en lugar de crear una variable en el \u00e1mbito de la funci\u00f3n, se modifica el valor de la variable a a nivel global. Dependiendo de donde y como accedamos a la variable a , obtendremos un valor u otro. Siempre que sea posible se deber\u00eda utilizar let y const ( ver a continuaci\u00f3n ), en lugar de var . Declarar variables mediante var se recomienda en fases de aprendizaje o en el caso de que se quiera mantener compatibilidad con navegadores muy antiguos utilizando ECMAScript 5, sin embargo, hay estrategias mejores a seguir que utilizar var en la actualidad. \u00c1mbitos de variables: let \u00b6 En las versiones modernas de Javascript ( ES6 o ECMAScript 2015 ) o posteriores, se introduce la palabra clave let en sustituci\u00f3n de var . Con ella, en lugar de utilizar los \u00e1mbitos globales y a nivel de funci\u00f3n ( var ), utilizamos los \u00e1mbitos cl\u00e1sicos de programaci\u00f3n: \u00e1mbito global y \u00e1mbito local . La diferencia se puede ver claramente en el uso de un bucle for con var y con let : /** Opci\u00f3n 1: Bucle con let **/ console.log(\"Antes: \", p); // Antes: undefined for (let p = 0; p < 3; p++) console.log(\"- \", p); // Durante: 0, 1, 2 console.log(\"Despu\u00e9s: \", p); // Despu\u00e9s: undefined /** Opci\u00f3n 2: Bucle con var **/ console.log(\"Antes: \", p); // Antes: undefined for (var p = 0; p < 3; p++) console.log(\"- \", p); // Durante: 0, 1, 2 console.log(\"Despu\u00e9s: \", p); // Despu\u00e9s: 3 (WTF!) Vemos que utilizando let la variable p s\u00f3lo existe dentro del bucle, \u00e1mbito local, mientras que utilizando var la variable p sigue existiendo fuera del bucle, ya que debe tener un \u00e1mbito global o a nivel de funci\u00f3n. Constantes \u00b6 De forma tradicional, Javascript no incorporaba constantes. Sin embargo, en ECMAScript 2015 ( ES6 ) se a\u00f1ade la palabra clave const , que inicializada con un valor concreto, permite crear variables con valores que no pueden ser cambiados. const NAME = \"Manz\"; console.log(NAME); En el ejemplo anterior vemos un ejemplo de const , que funciona de forma parecida a let . Una buena pr\u00e1ctica es escribir el nombre de la constante en may\u00fasculas, para identificar r\u00e1pidamente que se trata de una constante y no una variable, cuando leemos c\u00f3digo ajeno. Realmente, las constantes de Javascript son variables inicializadas a un valor espec\u00edfico y que no pueden redeclararse. No confundir con valores inmutables, ya que como veremos posteriormente, los objetos si pueden ser modificados a\u00fan siendo constantes. Objetos b\u00e1sicos \u00b6 Uno de los aspectos m\u00e1s importantes del lenguaje Javascript es el concepto de objeto , puesto que pr\u00e1cticamente todo lo que utilizamos en Javascript, son objetos. Sin embargo, tiene ligeras diferencias con los objetos de otros lenguajes de programaci\u00f3n, as\u00ed que vamos a comenzar con una explicaci\u00f3n sencilla y m\u00e1s adelante ampliaremos este tema en profundidad. \u00bfQu\u00e9 son los objetos? \u00b6 En Javascript, existe un tipo de dato llamado objeto . No es m\u00e1s que una variable especial que puede contener m\u00e1s variables en su interior. De esta forma, tenemos la posibilidad de organizar m\u00faltiples variables de la misma tem\u00e1tica dentro de un objeto. Veamos algunos ejemplos: En muchos lenguajes de programaci\u00f3n, para crear un objeto se utiliza la palabra clave new . En Javascript tambi\u00e9n se puede hacer: const objeto = new Object(); // Esto es un objeto \u00abgen\u00e9rico\u00bb vac\u00edo Sin embargo, siempre que podamos, en Javascript se prefiere utilizar lo que se llaman los literales , un m\u00e9todo abreviado para crear objetos directamente, sin necesidad de utilizar la palabra new . Declaraci\u00f3n de un objeto \u00b6 Los literales de los objetos en Javascript son las llaves {} . Este ejemplo es equivalente al anterior, pero es m\u00e1s corto, r\u00e1pido y c\u00f3modo, por lo que se aconseja declararlos as\u00ed: const objeto = {}; // Esto es un objeto vac\u00edo Pero hasta ahora, solo hemos creado un objeto vac\u00edo. Vamos a crear un nuevo objeto, que contenga variables con informaci\u00f3n en su interior: // Declaraci\u00f3n del objeto const player = { name: \"Manz\", life: 99, strength: 10, }; Estas variables dentro de los objetos se suelen denominar propiedades . Como se puede ver, un objeto en Javascript nos permite encapsular en su interior informaci\u00f3n relacionada, para posteriormente poder acceder a ella de forma m\u00e1s sencilla e intuitiva. Acceso a sus propiedades \u00b6 Una vez tengamos un objeto, podemos acceder a sus propiedades de dos formas diferentes: a trav\u00e9s de la notaci\u00f3n con puntos o a trav\u00e9s de la notaci\u00f3n con corchetes . // Notaci\u00f3n con puntos console.log(player.name); // Muestra \"Manz\" console.log(player.life); // Muestra 99 // Notaci\u00f3n con corchetes console.log(player[\"name\"]); // Muestra \"Manz\" console.log(player[\"life\"]); // Muestra 99 El programador puede utilizar la notaci\u00f3n que m\u00e1s le guste. La m\u00e1s utilizada en Javascript suele ser la notaci\u00f3n con puntos , mientras que la notaci\u00f3n con corchetes se suele conocer en otros lenguajes como \u00abarrays asociativos\u00bb. A algunos programadores puede resultarles confuso utilizar objetos con la notaci\u00f3n de corchetes, ya que en otros lenguajes de programaci\u00f3n los objetos y los arrays asociativos son cosas diferentes, y en Javascript ambos conceptos se mezclan. Hay ciertos casos en los que s\u00f3lo se puede utilizar la notaci\u00f3n con corchetes , como por ejemplo cuando se utilizan espacios en el nombre de la propiedad. Es imposible hacerlo con la notaci\u00f3n con puntos. A\u00f1adir propiedades \u00b6 Tambi\u00e9n podemos a\u00f1adir propiedades al objeto despu\u00e9s de haberlo creado, aunque la sintaxis cambia ligeramente. Veamos un ejemplo equivalente al anterior: // Declaraci\u00f3n del objeto const player = {}; // A\u00f1adimos mediante notaci\u00f3n con puntos player.name = \"Manz\"; player.life = 99; player.strength = 10; // A\u00f1adimos mediante notaci\u00f3n con corchetes player[\"name\"] = \"Manz\"; player[\"life\"] = 99; player[\"strength\"] = 10; Las propiedades del objeto pueden ser utilizadas como variables. De hecho, utilizar los objetos como elementos para organizar m\u00faltiples variables suele ser una buena pr\u00e1ctica en Javascript. Tipos de objetos \u00b6 Hasta ahora, solo hemos visto los objetos \u00abgen\u00e9ricos\u00bb, en Javascript conocidos como tipo , declar\u00e1ndolos con un new Object() o con un literal {} , dos formas equivalentes de hacer lo mismo. Al generar una variable de tipo , esa variable \u00abhereda\u00bb una serie de m\u00e9todos ( del objeto Object en este caso ). const o = {}; o.toString(); // Devuelve '[object Object]' (Un objeto de tipo Object) En este ejemplo, toString() es uno de esos m\u00e9todos que tienen todas las variables de tipo . Sin embargo, hasta ahora y sin saberlo, cuando creamos una variable de un determinado tipo de dato ( sea primitivo o no ), es tambi\u00e9n de tipo , ya que todas las variables heredan de este tipo de dato. Por lo tanto, nuestra variable tendr\u00e1 no s\u00f3lo los m\u00e9todos de su tipo de dato, sino tambi\u00e9n los m\u00e9todos heredados de : const s = \"hola\"; s.toString(); // Devuelve 'hola' M\u00e1s adelante, veremos los m\u00e9todos que heredan las variables de tipo y comprobaremos que los objetos tienen detr\u00e1s de si muchos m\u00e1s conceptos que los que hemos visto hasta ahora y que su definici\u00f3n es mucho m\u00e1s amplia. Variables num\u00e9ricas (Number) \u00b6 En Javascript crear variables num\u00e9ricas es muy sencillo, pero hay que conocer bien como trabajar con ellas y los diferentes m\u00e9todos de los que dispone. \u00bfQu\u00e9 es una variable num\u00e9rica? \u00b6 En Javascript, los n\u00fameros son uno de los tipos de datos b\u00e1sicos ( tipos primitivos ) que para crearlos, simplemente basta con escribirlos. No obstante, en Javascript todo son objetos, como veremos m\u00e1s adelante, y tambi\u00e9n se pueden declarar como si fueran un objeto: Constructor Descripci\u00f3n new Number(n) Crea un objeto num\u00e9rico a partir del n\u00famero n pasado por par\u00e1metro. n Simplemente, el n\u00famero en cuesti\u00f3n. Notaci\u00f3n preferida . Sin embargo, aunque existan varias formas de declararlos, no se suele utilizar la notaci\u00f3n new con objetos primitivos ya que es bastante m\u00e1s tedioso y complicado que utilizar la notaci\u00f3n de literales: // Literales const n1 = 4; const n2 = 15.8; // Objetos const n1 = new Number(4); const n2 = new Number(15.8); Cualquier par\u00e1metro pasado al new Number() que no sea un n\u00famero, dar\u00e1 como resultado un valor NaN ( ver m\u00e1s adelante ). Constantes num\u00e9ricas \u00b6 Existe una serie de constantes definidas en relaci\u00f3n a las variables num\u00e9ricas. La mayor\u00eda de ellas establecen l\u00edmites m\u00e1ximos y m\u00ednimos, veamos su significado: Constante Valor en Javascript Descripci\u00f3n Number.POSITIVE_INFINITY Infinity Infinito positivo: +\u221e Number.NEGATIVE_INFINITY -Infinity Infinito negativo: -\u221e Number.MAX_VALUE 1.7976931348623157e+308 Valor m\u00e1s grande Number.MIN_VALUE 5e-324 Valor m\u00e1s peque\u00f1o Number.MAX_SAFE_INTEGER 9007199254740991 Valor seguro m\u00e1s grande Number.MIN_SAFE_INTEGER -9007199254740991 Valor seguro m\u00e1s peque\u00f1o Number.EPSILON 2``-52 N\u00famero muy peque\u00f1o: \u03b5 Number.NaN NaN Not A Number La diferencia entre Number.MAX_VALUE y Number.MAX_SAFE_INTEGER es que, el primero es el valor m\u00e1ximo que es posible representar en Javascript. Por otro lado, el segundo es el valor m\u00e1ximo para realizar c\u00e1lculos con seguridad en Javascript. Los lenguajes de programaci\u00f3n est\u00e1n sujetos a la precisi\u00f3n num\u00e9rica debido a la forma interna en la que guardan valores num\u00e9ricos. Si necesitamos realizar operaciones con muy alta precisi\u00f3n num\u00e9rica en Javascript, se recomienda utilizar librer\u00edas como decimal.js o bigNumber.js . NaN (Not A Number) \u00b6 El acr\u00f3nimo NaN es un valor especial de Javascript que significa Not A Number ( No es un n\u00famero ). Este valor se usa para representar valores imposibles o indeterminados, como por ejemplo, resultados matem\u00e1ticos de operaciones como: 0 / 0 (Indeterminaciones) 4 - 'a' (Valores imposibles) NaN + 4 (Operaciones con NaN como operando) Este valor se utiliza habitualmente para detectar si una operaci\u00f3n ha fallado o ha dado un valor no representable. Sin embargo, no podemos compararlo literalmente con NaN , sino que tenemos que usar la funci\u00f3n Number.isNaN() : let num = NaN; // La siguiente operaci\u00f3n, contra toda l\u00f3gica, es falsa num == NaN; // false // Se debe usar Number.isNaN() para comprobar si el valor es NaN Number.isNaN(num); // true // Si comprobamos el tipo de dato de NaN, nos dir\u00e1 que es num\u00e9rico typeof num; // number Como se puede ver en la \u00faltima l\u00ednea del ejemplo anterior, mencionar que en Javascript, si comprobamos el tipo de dato de NaN con typeof nos dir\u00e1 que es un n\u00famero. Puede parecer il\u00f3gico que Not A Number sea un n\u00famero, esto ocurre porque NaN est\u00e1 en un contexto num\u00e9rico. En otras palabras, dentro de los tipos de datos num\u00e9ricos, NaN es un conjunto de n\u00fameros que no se pueden representar. Comprobaciones num\u00e9ricas \u00b6 En Javascript tenemos varias funciones para conocer la naturaleza de una variable num\u00e9rica (n\u00famero finito, n\u00famero entero, n\u00famero seguro o si no es representable como un n\u00famero). Las podemos ver a continuaci\u00f3n en la siguiente tabla: M\u00e9todo Descripci\u00f3n Number.isFinite( n ) Comprueba si n es un n\u00famero finito. Number.isInteger( n ) Comprueba si n es un n\u00famero entero. Number.isSafeInteger( n ) Comprueba si n es un n\u00famero seguro. Number.isNaN( n ) Comprueba si n no es un n\u00famero. Ten en cuenta que estas funciones devuelven un booleano ( valor de verdadero o falso ), lo que lo hace ideales para usarlas como condiciones en bucles o condicionales. A continuaci\u00f3n veamos dos ejemplos para cada una de estas funciones: // \u00bfN\u00famero finito? Number.isFinite(42); // true Number.isFinite(Infinity); // false, es infinito // \u00bfN\u00famero entero? Number.isInteger(5); // true Number.isInteger(4.6); // false, es decimal // \u00bfN\u00famero seguro? Number.isSafeInteger(1e15); // true Number.isSafeInteger(1e16); // false, es un valor no seguro // \u00bfNo es un n\u00famero? Number.isNaN(NaN); // true Number.isNaN(5); // false, es un n\u00famero Recuerda no hacer comprobaciones directas con NaN, sino utilizar la funci\u00f3n Number.isNaN() . Conversi\u00f3n num\u00e9rica \u00b6 En muchos casos tendremos variables de texto que nos interesa convertir a n\u00famero, para realizar operaciones posteriormente con ellas. Para ello, lo ideal es utilizar las funciones de parseo num\u00e9rico, parseInt() y parseFloat() . Veamos cuales son y c\u00f3mo se pueden utilizar: M\u00e9todo Descripci\u00f3n Number.parseInt( s ) Convierte una cadena de texto s en un n\u00famero entero. Number.parseInt( s , radix ) Idem al anterior, pero desde una base radix . Number.parseFloat( s ) Convierte una cadena de texto s en un n\u00famero decimal. Number.parseFloat( s , radix ) Idem al anterior, pero desde una base radix . Para ilustrar esto, veamos un ejemplo con parseInt() cuando solo le pasamos un par\u00e1metro ( un texto ) que queremos convertir a n\u00famero: Number.parseInt(\"42\"); // 42 Number.parseInt(\"42\u20ac\"); // 42 Number.parseInt(\"N\u00fam. 42\"); // NaN Number.parseInt(\"A\"); // NaN Nota que la funci\u00f3n parseInt() funciona perfectamente para variables de texto que contienen n\u00fameros o que empiezan por n\u00fameros. Esto es muy \u00fatil para eliminar unidades de variables de texto. Sin embargo, si la variable de texto comienza por un valor que no es num\u00e9rico, parseInt() devolver\u00e1 un NaN . Si lo que queremos es quedarnos con el n\u00famero que aparece m\u00e1s adelante en la variable de texto, habr\u00e1 que manipular ese texto con alguna de las funciones que veremos en el apartado de variables de texto. Veamos ahora que ocurre si utilizamos parseInt() con dos par\u00e1metros, donde el primero es el texto con el n\u00famero y el segundo es la base num\u00e9rica del n\u00famero: Number.parseInt(\"11101\", 2); // 29 en binario Number.parseInt(\"31\", 8); // 25 en octal Number.parseInt(\"FF\", 16); // 255 en hexadecimal Esta modalidad de parseInt() se suele utilizar cuando queremos pasar a base decimal un n\u00famero que se encuentra en otra base ( binaria, octal, hexadecimal... ). Al igual que con parseInt() tenemos otra funci\u00f3n llamada parseFloat() . Funciona exactamente igual a la primera, s\u00f3lo que la primera est\u00e1 espec\u00edficamente dise\u00f1ada para utilizar con n\u00fameros enteros y la segunda para n\u00fameros decimales. Si utilizamos parseInt() con un n\u00famero decimal, nos quedaremos s\u00f3lo con la parte entera, mientras que parseFloat() la conservar\u00e1. Representaci\u00f3n num\u00e9rica \u00b6 Por \u00faltimo, en el caso de querer cambiar el tipo de representaci\u00f3n num\u00e9rica, podemos utilizar las siguientes funciones para alternar entre exponencial y punto fijo : M\u00e9todo Descripci\u00f3n .toExponential( n ) Convierte el n\u00famero a notaci\u00f3n exponencial con n decimales. .toFixed( n ) Convierte el n\u00famero a notaci\u00f3n de punto fijo con n decimales. .toPrecision( p ) Utiliza p d\u00edgitos de precisi\u00f3n en el n\u00famero. Observemos el siguiente ejemplo aplicando las funciones anteriores al n\u00famero decimal 1.5 : (1.5).toExponential(2); // \"1.50e+0\" en exponencial (1.5).toFixed(2); // \"1.50\" en punto fijo (1.5).toPrecision(1); // \"2\" Operaciones matem\u00e1ticas (Math) \u00b6 Cuando trabajamos con Javascript, es posible realizar gran cantidad de operaciones matem\u00e1ticas de forma nativa, sin necesidad de librer\u00edas externas. Para ello, haremos uso del objeto Math , un objeto interno de Javascript que tiene incorporadas ciertas constantes y m\u00e9todos ( funciones ) para trabajar matem\u00e1ticamente. Constantes de Math \u00b6 El objeto Math de Javascript incorpora varias constantes que podemos necesitar en algunas operaciones matem\u00e1ticas. Veamos su significado y valor aproximado: Constante Descripci\u00f3n Valor Math.E N\u00famero de Euler 2.718281828459045 Math.LN2 Logaritmo natural en base 2 0.6931471805599453 Math.LN10 Logaritmo decimal 2.302585092994046 Math.LOG2E Logaritmo base 2 de E 1.4426950408889634 Math.LOG10E Logaritmo base 10 de E 0.4342944819032518 Math.PI N\u00famero PI o \u03a0 3.141592653589793 Math.SQRT1_2 Ra\u00edz cuadrada de \u00bd 0.7071067811865476 Math.SQRT2 Ra\u00edz cuadrada de 2 1.4142135623730951 Adem\u00e1s de estas constantes, el objeto Math tambi\u00e9n nos proporciona gran cantidad de m\u00e9todos o funciones para trabajar con n\u00fameros. Vamos a analizarlos. M\u00e9todos matem\u00e1ticos \u00b6 Los siguientes m\u00e9todos matem\u00e1ticos est\u00e1n disponibles en Javascript a trav\u00e9s del objeto Math . Observa que algunos de ellos s\u00f3lo est\u00e1n disponibles en ECMAScript 6 : M\u00e9todo Descripci\u00f3n Ejemplo Math.abs(x) Devuelve el valor absoluto de x . |x| Math.sign(x) Devuelve el signo del n\u00famero: 1 positivo, -1 negativo Math.exp(x) Exponenciaci\u00f3n . Devuelve el n\u00famero e elevado a x . e``x Math.expm1(x) Equivalente a Math.exp(x) - 1 . e``x``-1 Math.max(a, b, c...) Devuelve el n\u00famero m\u00e1s grande de los indicados por par\u00e1metro. Math.min(a, b, c...) Devuelve el n\u00famero m\u00e1s peque\u00f1o de los indicados por par\u00e1metro. Math.pow(base, exp) Potenciaci\u00f3n . Devuelve el n\u00famero base elevado a exp . base``exp Math.sqrt(x) Devuelve la ra\u00edz cuadrada de x . \u221ax Math.cbrt(x) Devuelve la ra\u00edz c\u00fabica de x . \u221a``3``x Math.imul(a, b) Equivalente a a * b , pero a nivel de bits. Math.clz32(x) Devuelve el n\u00famero de ceros a la izquierda de x en binario (32 bits). Veamos algunos ejemplos aplicados a las mencionadas funciones anteriormente: Math.abs(-5); // 5 Math.sign(-5); // -1 Math.exp(1); // e, o sea, 2.718281828459045 Math.expm1(1); // 1.718281828459045 Math.max(1, 40, 5, 15); // 40 Math.min(5, 10, -2, 0); // -2 Math.pow(2, 10); // 1024 Math.sqrt(2); // 1.4142135623730951 Math.cbrt(2); // 1.2599210498948732 Math.imul(0xffffffff, 7); // -7 // Ejemplo de clz32 (count leading zeros) const x = 1; \"0\".repeat(Math.clz32(x)) + x.toString(2); // Devuelve \"00000000000000000000000000000001\" Existe uno m\u00e1s, Math.random() que merece una explicaci\u00f3n m\u00e1s detallada, por lo que lo explicamos en el apartado siguiente. M\u00e9todo Math.random() \u00b6 Uno de los m\u00e9todos m\u00e1s \u00fatiles e interesantes del objeto Math es Math.random() . M\u00e9todo Descripci\u00f3n Ejemplo Math.random() Devuelve un n\u00famero al azar entre 0 y 1 con 16 decimales. Este m\u00e9todo nos da un n\u00famero al azar entre los valores 0 y 1 , con 16 decimales. Normalmente, cuando queremos trabajar con n\u00fameros aleatorios, lo que buscamos es obtener un n\u00famero entero al azar entre a y b . Para ello, se suele hacer lo siguiente: // Obtenemos un n\u00famero al azar entre [0, 1) con 16 decimales let x = Math.random(); // Multiplicamos dicho n\u00famero por el valor m\u00e1ximo que buscamos (5) x = x * 5; // Redondeamos inferiormente, qued\u00e1ndonos s\u00f3lo con la parte entera x = Math.floor(x); Este ejemplo nos dar\u00e1 en x un valor al azar entre 0 y 5 ( 5 no incluido ). Lo hemos realizado por pasos para entenderlo mejor, pero podemos realizarlo directamente como se ve en el siguiente ejemplo: // N\u00famero al azar entre 0 y 5 (no incluido) const x = Math.floor(Math.random() * 5); // Equivalente al anterior const x = ~~(Math.random() * 5); Como se puede ver en el segundo ejemplo anterior, utilizamos el operador a nivel de bits ~~ ( doble negaci\u00f3n ) como reemplazo r\u00e1pido de Math.floor() , una funci\u00f3n que realiza un redondeo inferior, y que veremos al final de este tema. Si lo deseas, puedes utilizar librer\u00edas espec\u00edficas para generar n\u00fameros aleatorios como random.js o chance.js , esta \u00faltima permitiendo incluso generar otros tipos de datos aleatorios como textos, GUIDs o colores hexadecimales. M\u00e9todos de logaritmos \u00b6 Javascript incorpora varios m\u00e9todos en el objeto Math para trabajar con logaritmos. Desde logaritmos neperianos hasta logaritmos binarios a trav\u00e9s de las siguientes funciones: M\u00e9todo Descripci\u00f3n y Ejemplo Math.log(x) Devuelve el logaritmo natural en base e de x . Ej: log``e x o ln x Math.log10(x) Devuelve el logaritmo decimal (en base 10) de x . Ej: log``10 x \u00f3 log x Math.log2(x) Devuelve el logaritmo binario (en base 2) de x . Ej: log``2 x Math.log1p(x) Devuelve el logaritmo natural de (1+x) . Ej: log``e (1+x) o ln (1+x) A continuaci\u00f3n, unos ejemplos de estas funciones aplicadas: Math.log(2); // 0.6931471805599453 Math.log10(2); // 0.3010299956639812 Math.log2(2); // 1 Math.log1p(2); // 1.0986122886681096 M\u00e9todos de redondeo \u00b6 Como hemos visto anteriormente, es muy com\u00fan necesitar m\u00e9todos para redondear n\u00fameros y reducir el n\u00famero de decimales o aproximar a una cifra concreta. Para ello, de forma nativa, Javascript proporciona los siguientes m\u00e9todos de redondeo: M\u00e9todo Descripci\u00f3n Math.round(x) Devuelve el redondeo de x ( el entero m\u00e1s cercano ) Math.ceil(x) Devuelve el redondeo superior de x . ( el entero m\u00e1s alto ) Math.floor(x) Devuelve el redondeo inferior de x . ( el entero m\u00e1s bajo ) Math.fround(x) Devuelve el redondeo de x ( flotante con precisi\u00f3n simple ) Math.trunc(x) Trunca el n\u00famero x ( devuelve s\u00f3lo la parte entera ) Veamos las diferencias de utilizar los diferentes m\u00e9todos anteriores para redondear un n\u00famero decimal y los resultados obtenidos: // Redondeo natural, el m\u00e1s cercano Math.round(3.75); // 4 Math.round(3.25); // 3 // Redondeo superior (el m\u00e1s alto) Math.ceil(3.75); // 4 Math.ceil(3.25); // 4 // Redondeo inferior (el m\u00e1s bajo) Math.floor(3.75); // 3 Math.floor(3.25); // 3 // Redondeo con precisi\u00f3n Math.round(3.123456789); // 3 Math.fround(3.123456789); // 3.1234567165374756 // Truncado (s\u00f3lo parte entera) Math.trunc(3.75); // 3 Math.round(-3.75); // -4 Math.trunc(-3.75); // -3 M\u00e9todos trigonom\u00e9tricos \u00b6 Por \u00faltimo, y no por ello menos importante, el objeto Math nos proporciona de forma nativa una serie de m\u00e9todos trigonom\u00e9tricos, que nos permiten hacer c\u00e1lculos con operaciones como seno , coseno , tangente y relacionados: M\u00e9todo Descripci\u00f3n Math.sin(x) Seno de x Math.asin(x) Arcoseno de x Math.sinh(x) Seno hiperb\u00f3lico de x Math.asinh(x) Arcoseno hiperb\u00f3lico de x Math.cos(x) Coseno de x Math.acos(x) Arcocoseno de x Math.cosh(x) Coseno hiperb\u00f3lico de x Math.acosh(x) Arcocoseno hiperb\u00f3lico de x Math.tan(x) Tangente de x Math.atan(x) Arcotangente de x Math.tanh(x) Tangente hiperb\u00f3lica de x Math.atanh(x) Arcotangente hiperb\u00f3lica de x Math.atan2(x, y) Arcotangente del conciente de x/y Math.hypot(a, b..) Devuelve la ra\u00edz cuadrada de a``2 + b``2 + ... Otras librer\u00edas matem\u00e1ticas \u00b6 Si de forma nativa no encuentras una forma sencilla de resolver el problema matem\u00e1tico que tienes entre manos, no olvides que existen una serie de librer\u00edas de terceros que pueden hacernos la vida m\u00e1s f\u00e1cil a la hora de trabajar con otros valores matem\u00e1ticos. A continuaci\u00f3n, detallamos algunas de ellas: Librer\u00eda Descripci\u00f3n GitHub Math.js Librer\u00eda matem\u00e1tica de prop\u00f3sito general. josdejong/mathjs Fraction.js Librer\u00eda matem\u00e1tica para trabajar con fracciones. infusion/Fraction.js Polynomial.js Librer\u00eda matem\u00e1tica para trabajar con polinomios. infusion/Polynomial.js Complex.js Librer\u00eda matem\u00e1tica para trabajar con n\u00fameros complejos. infusion/Complex.js Angles.js Librer\u00eda matem\u00e1tica para trabajar con \u00e1ngulos. infusion/Angles.js BitSet.js Librer\u00eda matem\u00e1tica para trabajar con vectores de bits. infusion/BitSet.js Habr\u00e1s comprobado que, al contrario que muchos otros objetos de Javascript, en estas ocasiones hemos indicado expl\u00edcitamente el objeto, por ejemplo Math.round(numero) , en lugar de hacerlo sobre la variable: numero.round() . Esto ocurre porque Math es un objeto con m\u00e9todos y constantes est\u00e1ticas , algo que veremos en profundidad en futuros temas. Variables de texto (String) \u00b6 En Javascript y en el mundo del desarrollo web, una de las tareas que m\u00e1s solemos hacer es manejar cadenas de texto y realizando tareas con ellas. Por lo tanto, tenemos que familiarizarnos con el tipo de dato . \u00bfQu\u00e9 es un string? \u00b6 En programaci\u00f3n, cuando hablamos de una varible que posee informaci\u00f3n de texto, decimos que su tipo de dato es . En Javascript, es muy sencillo crear una variable de texto, hay dos formas de hacerlo: Constructor|Descripci\u00f3n :---|:---| new String(s) |Crea un objeto de texto a partir del texto s pasado por par\u00e1metro. 's' |Simplemente, el texto entre comillas. Notaci\u00f3n preferida . Los son tipos de datos primitivos, y como tal, es m\u00e1s sencillo utilizar los literales que la notaci\u00f3n con new . Para englobar los textos, se pueden utilizar comillas simples ' , comillas dobles \" o backticks ` ( ver m\u00e1s adelante ). Aunque es posible utilizar comillas simples o comillas dobles en los , se recomienda decantarse por uno de los dos estilos y no mezclarlos. Muchas empresas o equipos de desarrollo tienen gu\u00edas de estilos para delimitar cu\u00e1l utilizar. A continuaci\u00f3n, un ejemplo de declaraci\u00f3n de variables de texto en Javascript: // Literales const texto1 = \"\u00a1Hola a todos!\"; const texto2 = \"Otro mensaje de texto\"; // Objeto const texto1 = new String(\"\u00a1Hola a todos!\"); const texto2 = new String(\"Otro mensaje de texto\"); A diferencia de otros lenguajes de programaci\u00f3n, que separan el tipo de dato ( cadena de texto ) del tipo de dato char ( un solo car\u00e1cter ), Javascript los mantiene a ambos dentro del tipo de dato , por lo que una variable, aunque s\u00f3lo contenga un car\u00e1cter, sigue siendo un . Propiedades \u00b6 Al crear una variable con contenido de texto, o sea un , autom\u00e1ticamente, esa variable pasa a tener a su disposici\u00f3n todas las propiedades y m\u00e9todos disponibles para este tipo de dato, por lo que podemos utilizarlos en nuestro c\u00f3digo como iremos viendo a continuaci\u00f3n. Propiedad|Descripci\u00f3n :---|:---| .length |Devuelve el n\u00famero de car\u00e1cteres de la variable de tipo string en cuesti\u00f3n. En el caso de los strings, solo tenemos una propiedad, .length , que devuelve el tama\u00f1o de la variable de texto en cuesti\u00f3n. N\u00f3tese en los siguientes ejemplos que se han utilizado directamente, sin necesidad de guardarlos en una variable antes: \"Hola\".length; // 4 \"Adi\u00f3s\".length; // 5 \"\".length; // 0 \"\u00a1Yeah!\".length; // 6 Pero las caracter\u00edsticas m\u00e1s interesantes de los strings se encuentran en los m\u00e9todos de dicho tipo de dato. Ten en cuenta que, en las variables de texto, los m\u00e9todos se ejecutan sobre el propio texto del , devolviendo informaci\u00f3n modificada a partir de este. Vamos a dar un repaso a los m\u00e9todos que existen. M\u00e9todos de posiciones \u00b6 En primer lugar existen varios m\u00e9todos que permiten darnos informaci\u00f3n sobre la posici\u00f3n o ubicaci\u00f3n que ocupa un determinado car\u00e1cter o texto. Esta posici\u00f3n tambi\u00e9n suele denominarse \u00edndice . Veamos detalladamente dicho m\u00e9todos: M\u00e9todo Descripci\u00f3n Oper. .charAt(pos) Devuelve el car\u00e1cter en la posici\u00f3n pos de la variable. [] .concat(str1, str2...) Devuelve el texto de la variable unido a str1 , a str2 ... + .indexOf(str) Devuelve la primera posici\u00f3n del texto str . .indexOf(str, from) Idem al anterior, partiendo desde la posici\u00f3n from . .lastIndexOf(str, from) Idem al anterior, pero devuelve la \u00faltima posici\u00f3n. El m\u00e9todo .charAt(pos) nos permite comprobar que car\u00e1cter se encuentra en la posici\u00f3n pos del texto. Este m\u00e9todo devolver\u00e1 un con dicho car\u00e1cter. En caso de pasarle una posici\u00f3n que no existe o imposible ( negativa ), simplemente nos devolver\u00e1 un vac\u00edo . El valor por defecto de pos es 0 . No obstante, es preferible utilizar el operador [] para obtener el car\u00e1cter que ocupa una posici\u00f3n, ya que es m\u00e1s corto y r\u00e1pido de utilizar y mucho m\u00e1s claro. La diferencia respecto a charAt() es que el operador [] devuelve si en esa posici\u00f3n no existe ning\u00fan car\u00e1cter. \"Manz\".charAt(0); // 'M' \"Manz\".charAt(1); // 'a' \"Manz\".charAt(10); // '' \"Manz\"[0]; // 'M' \"Manz\"[1]; // 'a' \"Manz\"[10]; // undefined El m\u00e9todo .concat(str1, str2...) permite concatenar ( unir ) los textos pasados por par\u00e1metros al de la propia variable. Al igual que el m\u00e9todo anterior, es preferible utilizar el operador + , ya que es mucho m\u00e1s r\u00e1pido y legible. Mucho cuidado con utilizar el operador + , ya que depende de los tipos de datos con los que se usen puede producir un efecto diferente. El operador + usado con realiza concatenaciones, mientras que usado con realiza sumas. \"Manz\".concat(\"i\", \"to\"); // 'Manzito' \"Manz\" + \"i\" + \"to\"; // 'Manzito' \"Manz\" + 4 + 5; // 'Manz45' 10 + 5 + 4 + 5; // 24 Por \u00faltimo, nos queda el m\u00e9todo indexOf(str, from) , que es la funci\u00f3n opuesta a charAt() . La funci\u00f3n indexOf(str) buscar\u00e1 el subtexto str en nuestra variable y nos devolver\u00e1 un con la posici\u00f3n de la primera aparici\u00f3n de dicho subtexto. En caso de no encontrarlo, devolver\u00e1 -1 . El par\u00e1metro from es opcional, y es la posici\u00f3n en la que empezar\u00e1 a buscar, que por defecto ( si no se suministra ) es 0 . \"LenguajeJS, p\u00e1gina de Javascript\".indexOf(\"n\"); // 2 \"LenguajeJS, p\u00e1gina de Javascript\".indexOf(\"n\", 3); // 16 \"LenguajeJS, p\u00e1gina de Javascript\".indexOf(\"n\", 17); // -1 \"LenguajeJS, p\u00e1gina de Javascript\".lastIndexOf(\"n\"); // 16 \"LenguajeJS, p\u00e1gina de Javascript\".lastIndexOf(\"n\", 3); // 2 El m\u00e9todo lastIndexOf(str, from) funciona exactamente igual que el anterior, s\u00f3lo que realiza la b\u00fasqueda de la \u00faltima aparici\u00f3n en lugar de la primera aparici\u00f3n. M\u00e9todos para b\u00fasquedas \u00b6 Los siguientes m\u00e9todos se utilizan para realizar b\u00fasquedas o comprobaciones de subtextos en el texto de un : M\u00e9todo Descripci\u00f3n .startsWith(s, from) Comprueba si el texto comienza por s desde la posici\u00f3n from . .endsWith(s, to) Comprueba si el texto hasta la posici\u00f3n to , termina por s . .includes(s, from) Comprueba si el texto contiene el subtexto s desde la posici\u00f3n from . .search(regex) Busca si hay un patr\u00f3n que encaje con regex y devuelve la posici\u00f3n. .match(regex) Idem a la anterior, pero devuelve las coincidencias encontradas. Por ejemplo, el m\u00e9todo startsWith(str, from) devolver\u00e1 true si la variable comienza por el texto proporcionado en str . Si adem\u00e1s se indica el par\u00e1metro opcional from , empezar\u00e1 en la posici\u00f3n from del . De la misma forma, el m\u00e9todo endsWith() comprueba cuando un acaba en str , y el m\u00e9todo includes() comprueba si el subtexto dado est\u00e1 inclu\u00eddo en el . Algunos ejemplos: \"Manz\".startsWith(\"M\"); // true ('Manz' empieza por 'M') \"Manz\".startsWith(\"a\", 1); // true ('anz' empieza por 'a') \"Manz\".endsWith(\"o\"); // false ('Manz' no acaba en 'o') \"Manz\".endsWith(\"n\", 3); // true ('Man' acaba en 'n') \"Manz\".includes(\"an\"); // true ('Manz' incluye 'an') \"Manz\".includes(\"M\", 1); // false ('anz' no incluye 'M') Por otro lado, los m\u00e9todos search() y match() realizan b\u00fasquedas m\u00e1s potentes y flexibles con . La diferencia de cada una es que, mientras el m\u00e9todo search() devuelve la posici\u00f3n, matches() devuelve un con las coincidencias. // La expresi\u00f3n regular /o/g busca globalmente las \"o\" en el texto \"Hola a todos\".search(/o/g); // 1, porque la primera \"o\" est\u00e1 en la posici\u00f3n 1 \"Hola a todos\".match(/o/g); // ['o', 'o', 'o'], las 3 \"o\" que encuentra Las expresiones regulares permiten realizar cosas mucho m\u00e1s avanzadas que las que se muestran en este ejemplo, por lo tanto, las abordaremos en temas posteriores. M\u00e9todos para transformar \u00b6 En Javascript podemos utilizar algunos m\u00e9todos para modificar un realizando alguna operaci\u00f3n de transformaci\u00f3n. En esta tabla tenemos dichos m\u00e9todos: M\u00e9todo Descripci\u00f3n .repeat(n) Devuelve el texto de la variable repetido n veces. .toLowerCase() Devuelve el texto de la variable en min\u00fasculas. .toUpperCase() Devuelve el texto de la variable en may\u00fasculas. .trim() Devuelve el texto sin espacios a la izquierda y derecha. .trimStart() Devuelve el texto sin espacios a la izquierda. .trimEnd() Devuelve el texto sin espacios a la derecha. .replace(str|regex, newstr) Reemplaza la primera aparici\u00f3n del texto str por newstr . .replaceAll(str|regex, newstr) Reemplaza todas las apariciones del texto str por newstr . .replace(str|regex, func) Idem a .replace() , pero reemplazando por la devoluci\u00f3n de func . .substr(ini, len) Devuelve el subtexto desde la posici\u00f3n ini hasta ini+len . .substring(ini, end) Devuelve el subtexto desde la posici\u00f3n ini hasta end . .slice(ini, end) Idem a .substr() con leves diferencias . .split(sep|regex, limit) Separa el texto usando sep como separador, en limit fragmentos. .padStart(len, str) Rellena el principio de la cadena con str hasta llegar al tama\u00f1o len . .padEnd(len, str) Rellena el final de la cadena con str hasta llegar al tama\u00f1o len . El m\u00e9todo repeat(n) devuelve como el texto repetido n veces. Por otro lado, los m\u00e9todos toLowerCase() y toUpperCase() devuelven el texto convertido todo a min\u00fasculas o todo a may\u00fasculas respectivamente: \"Na\".repeat(5); // 'NaNaNaNaNa' \"MANZ\".toLowerCase(); // 'manz' \"manz\".toUpperCase(); // 'MANZ' \" Hola \".trim(); // 'Hola' Por \u00faltimo, el m\u00e9todo trim() , informalmente traducido como \u00abafeitar\u00bb se encarga de devolver el texto eliminando los espacios sobrantes que hay a la izquierda o a la derecha del texto ( y s\u00f3lo esos, nunca los que hay entre palabras ). De la misma forma, trimStart() y trimEnd() realizan la misma tarea s\u00f3lo a la izquierda y s\u00f3lo a la derecha respectivamente. Reemplazar textos \u00b6 Uno de los m\u00e9todos m\u00e1s interesantes de transformaci\u00f3n de es el replace(str, newstr) . Su funcionalidad m\u00e1s b\u00e1sica, como se ve en el primer ejemplo, se trata de devolver el texto en cuesti\u00f3n, reemplazando el texto str por newstr ( \u00a1y solo la primera aparici\u00f3n! ): \"Amigo\".replace(\"A\", \"Ene\"); // 'Enemigo' \"Dispara\".replace(\"a\", \"i\"); // 'Dispira' (s\u00f3lo reemplaza la primera aparici\u00f3n) \"Dispara\".replace(/a/g, \"i\"); // 'Dispiri' (reemplaza todas las ocurrencias) Si lo que nos interesa es reemplazar todas las apariciones, tendremos que hacer uso de las expresiones regulares , que veremos en temas posteriores a este. A grandes rasgos, en el tercer ejemplo anterior, en lugar de indicar el string 'a' indicamos la expresi\u00f3n regular /a/g que buscar\u00e1 todas las apariciones de a de forma global ( todas las ocurrencias ). Desde ECMAScript {.es2021} es posible utilizar replaceAll() para reemplazar todas las ocurrencias de un texto o de una expresi\u00f3n regular. Funciona exactamente igual que replace() , s\u00f3lo que reemplaza todas las ocurrencias en vez de solamente la primera. Adem\u00e1s, el m\u00e9todo replace() nos permite indicar, como segundo par\u00e1metro una en lugar de un , permitiendo utilizar dicha funci\u00f3n para realizar un proceso m\u00e1s complejo al reemplazar, en lugar de simplemente reemplazar por un . Sin embargo, para aprender a utilizar esta funcionalidad, antes tendremos que aprender los callbacks , que veremos tambi\u00e9n m\u00e1s adelante. Extraer subtextos \u00b6 Otras de las operaciones fundamentales de los es la posibilidad de extraer peque\u00f1os fragmentos de texto de textos m\u00e1s grandes. Para ello tenemos dos aproximaciones para realizarlo: con el m\u00e9todo substr() o con el m\u00e9todo substring() . En el primer caso, el m\u00e9todo substr(ini, len) nos solicita dos par\u00e1metros, ini , que es la posici\u00f3n inicial del subtexto, y len , que es el tama\u00f1o o longitud que tendr\u00e1 el texto. De esta forma, substr(2, 4) extrae el fragmento de texto desde la posici\u00f3n 2 y desde esa posici\u00f3n 4 posiciones m\u00e1s. En el caso de omitirse el par\u00e1metro len , se devuelve el subtexto hasta el final del texto original: \"Submarino\".substr(3); // 'marino' (desde el 3 en adelante) \"Submarino\".substr(3, 1); // 'm' (desde el 3, hasta el 3+1) \"Submarino\".substring(3); // 'marino' (desde el 3 en adelante) \"Submarino\".substring(3, 6); // 'mar' (desde el 3, hasta el 6) Por otro lado, el m\u00e9todo substring(ini, end) extrae el fragmento de texto desde la posici\u00f3n ini hasta la posici\u00f3n end . De igual forma al anterior, si se omite el par\u00e1metro end , el subtexto abarcar\u00e1 hasta el final del texto original. Crear Arrays a partir de textos \u00b6 Otro m\u00e9todo muy \u00fatil es split(sep) , un m\u00e9todo que permite dividir un por el substring sep como separador, devolviendo un array con cada una de las partes divididas. Es muy \u00fatil para crear arrays , o dividir en diferentes secciones textos que tienen separadores repetidos como podr\u00edan ser comas, puntos o pipes: \"1.2.3.4.5\".split(\".\"); // ['1', '2', '3', '4', '5'] (5 elementos) \"Hola a todos\".split(\" \"); // ['Hola', 'a', 'todos'] (3 elementos) \"C\u00f3digo\".split(\"\"); // ['C', '\u00f3', 'd', 'i', 'g', 'o'] (6 elementos) En el \u00faltimo ejemplo, el separador es una cadena vac\u00eda , es decir, \u00abning\u00fan car\u00e1cter\u00bb. Si le indicamos a split() que separe por \u00abning\u00fan car\u00e1cter\u00bb, lo que hace es hacer una divisi\u00f3n en su unidad m\u00ednima, car\u00e1cter por car\u00e1cter. En el tema de los arrays veremos un m\u00e9todo llamado join() que es justo el opuesto de split() . Si split separa un string en varios y los mete en un array, join une varios elementos de un array a\u00f1adi\u00e9ndole un separador y lo convierte en string. Relleno de cadenas \u00b6 Otra transformaci\u00f3n interesante con los es la resultante de utilizar m\u00e9todos como padStart(len, str) o padEnd(len, str) . Ambos m\u00e9todos toman dos par\u00e1metros: len la longitud deseada del resultante y str el car\u00e1cter a utilizar como relleno. El objetivo de ambas funciones es devolver un nuevo con la informaci\u00f3n original existente, pero ampliando su tama\u00f1o a len y rellenando el resto con str , al principio si se usa padStart() o al final si se usa padEnd() : \"5\".padStart(6, \"0\"); // '000005' \"A\".padEnd(5, \"\u00b7\"); // 'A\u00b7\u00b7\u00b7\u00b7' Estos m\u00e9todos resultan especialmente interesantes para formatear horas, como por ejemplo en el caso que queremos que las cifras menores a 10 aparezcan en formato 00 en lugar de 0 . M\u00e9todos Unicode \u00b6 Unicode es el nombre por el que se conoce al sistema moderno de codificaci\u00f3n de car\u00e1cteres que se usa en inform\u00e1tica. A grandes rasgos, cada car\u00e1cter como podr\u00eda ser la A , la B o cualquier otro, tiene su representaci\u00f3n Unicode , que se basa en un c\u00f3digo o code point . Por ejemplo, el car\u00e1cter A corresponde al c\u00f3digo Unicode U+0041 . Este 0041 realmente est\u00e1 en hexadecimal, por lo que 0x0041 en decimal ser\u00eda igual a 65 . Existen much\u00edsimos c\u00f3digos, ya que cualquier car\u00e1cter existente, tiene su propio c\u00f3digo Unicode. En Javascript, tenemos dos m\u00e9todos interesantes relacionado con este tema: M\u00e9todo Descripci\u00f3n String.fromCharCode(num) Devuelve el car\u00e1cter del valor unicode indicado en num . .charCodeAt(pos) Devuelve el valor unicode del car\u00e1cter de la posici\u00f3n pos del texto. El primero de ellos es un m\u00e9todo est\u00e1tico, por lo que hay que escribir directamente String.fromCharCode() y no utilizarlo desde una variable. Para usar este m\u00e9todo, le pasamos un num por par\u00e1metro, que indicar\u00e1 el n\u00famero o c\u00f3digo Unicode al que queremos hacer referencia, y el m\u00e9todo nos devolver\u00e1 un con el car\u00e1cter Unicode en cuesti\u00f3n: String.fromCharCode(65); // 'A' (65 es el c\u00f3digo U+0041 en decimal) String.fromCharCode(0x0041); // 'A' (0x0041 es el c\u00f3digo U+0041 en hexadecimal) \"A\".charCodeAt(0); // 65 \"A\".charCodeAt(0).toString(16); // 41 Por otro lado, el m\u00e9todo charCodeAt() es la operaci\u00f3n inversa a String.fromCharCode() con alg\u00fan extra. A charCodeAt(pos) le pasamos una posici\u00f3n con pos por par\u00e1metro. Esto buscar\u00e1 el car\u00e1cter de la posici\u00f3n pos del y nos devolver\u00e1 su c\u00f3digo Unicode ( por defecto, en decimal ). Si queremos pasarlo a otra base num\u00e9rica, podemos hacer uso del m\u00e9todo toString(base) indicando 16 como base . Observa a continuaci\u00f3n que, los famosos emojis ( por ejemplo ), son realmente una combinaci\u00f3n de 2 c\u00f3digos Unicode: // El valor unicode del emoji \ud83d\udc26 es (55357, 56358) emoji = \"\ud83d\udc26\"; codigos = []; for (let i = 0; i < emoji.length; i++) { codigos.push(emoji.charCodeAt(i)); } String.fromCharCode(...codigos); // '\ud83d\udc26' (Usamos desestructuraci\u00f3n, ver m\u00e1s adelante) Observa que modificando el \u00faltimo c\u00f3digo Unicode, podemos obtener diferentes emojis : String.fromCharCode(55357, 56358); // '\ud83d\udc26' String.fromCharCode(55357, 56359); // '\ud83d\udc27' String.fromCharCode(55357, 56360); // '\ud83d\udc28' (\"\\u0041\"); // 'A' (\"\\ud83d\\udc28\"); // '\ud83d\udc28' Una forma r\u00e1pida de escribir car\u00e1cteres Unicode es utilizando la secuencia de escape \\u seguida del c\u00f3digo Unicode en hexadecimal del caracter en cuesti\u00f3n, como se ve en los dos \u00faltimos ejemplos anteriores. Interpolaci\u00f3n de variables \u00b6 En ECMAScript se introduce una interesante mejora en la manipulaci\u00f3n general de , sobre todo respecto a la legibilidad de c\u00f3digo. Hasta ahora, si quer\u00edamos concatenar el valor de algunas variables con textos predefinidos por nosotros, ten\u00edamos que hacer algo parecido a esto: const sujeto = \"frase\"; const adjetivo = \"concatenada\"; \"Una \" + sujeto + \" bien \" + adjetivo; // 'Una frase bien concatenada' A medida que a\u00f1adimos m\u00e1s variables, el c\u00f3digo se hace bastante menos claro y m\u00e1s complejo de leer, especialmente si tenemos que a\u00f1adir arrays, introducir comillas simples que habr\u00eda que escapar con \\' o combinar comillas simples con dobles, etc... Para evitarlo, se introducen las backticks ( comillas hacia atr\u00e1s ), que nos permiten interpolar el valor de las variables sin tener que cerrar, concatenar y abrir la cadena de texto continuamente: const sujeto = \"frase\"; const adjetivo = \"concatenada\"; `Una ${sujeto} mejor ${adjetivo}`; // 'Una frase mejor concatenada' Esto es una funcionalidad muy simple, pero que mejora sustancialmente la calidad de c\u00f3digo generado. Eso s\u00ed, recuerda que se introduce en ECMAScript 6 , con todo lo que ello conlleva. Fechas nativas (Date) \u00b6 En muchas ocasiones necesitaremos guardar o trabajar con fechas en nuestros programas. Una fecha tiene datos mixtos: d\u00eda, mes y a\u00f1o, pero tambi\u00e9n puede ser m\u00e1s precisa y tener hora, minutos y/o segundos. Adem\u00e1s, la hora puede estar en varios formatos. Toda esta informaci\u00f3n no se podr\u00eda guardar en una sola variable num\u00e9rica, y tampoco es apropiado guardar en formato de texto, porque luego no podr\u00edamos hacer c\u00e1lculos de fechas con ella. Para ello, tenemos un objeto llamado Date que nos vendr\u00e1 perfecto para estos casos. \u00bfQu\u00e9 es el tipo de dato Date? \u00b6 Javascript nos provee de un tipo de dato llamado Date , con el que podemos trabajar facilmente con fechas de forma nativa y pr\u00e1ctica. Sin embargo, trabajar con fechas no es f\u00e1cil y la primera vez que tenemos que hacerlo es muy f\u00e1cil equivocarse si no tenemos claros algunos conceptos. Lo primero es ver los constructores para saber como podemos construir una variable de tipo Date : Constructor Descripci\u00f3n new Date() Obtiene la fecha del momento actual. new Date(str) Convierte el texto con formato YYYY/MM/DD HH:MM:SS a fecha. new Date(num) Convierte el n\u00famero num , en formato Tiempo UNIX , a fecha UTC. new Date(y, m, d, h, min, s, ms) Crea una fecha UTC a partir de componentes num\u00e9ricos * . Podemos utilizar estas cuatro formas para crear fechas en Javascript. Observa que en algunos casos se menciona fecha UTC . De momento, vamos a obviar esta parte y m\u00e1s adelante profundizaremos en ella. Veamos algunos ejemplos para crear fechas con estos 4 constructores: // Obtenemos la fecha actual y la guardamos en la variable f const f = new Date(); // Obtenemos la fecha 30 de Enero de 2018, a las 23h 30m 14seg const f = new Date(\"2018/01/30 23:30:14\"); // Obtenemos la fecha del juicio final a partir de un timestamp o Tiempo UNIX new Date(872817240000); // Creamos una fecha pasando cada uno de sus componentes num\u00e9ricos* new Date(y, m, d, h, min, s, ms); OJO : Mucho cuidado con los \u00abcomponentes num\u00e9ricos\u00bb mencionados en el \u00faltimo ejemplo. Si utilizamos el formato new Date(y, m, d, h, min, s, ms) , hay que saber que, como m\u00ednimo, los par\u00e1metros y ( a\u00f1o ) y m ( mes ) son obligatorios , el resto son par\u00e1metros opcionales. Adem\u00e1s, si utilizamos este esquema, hay que tener en cuenta que hay ciertas caracter\u00edsticas especiales: El par\u00e1metro m ( mes ) se proporciona con valores no reales que se recalcular\u00e1n. Es decir, si indicamos un 1 nos referimos a febrero y no a enero . Si queremos referirnos a enero tenemos que indicar un 0 . Si indicamos valores negativos contabilizamos hacia atr\u00e1s. Por ejemplo, con 2018, -1 estar\u00edamos indicando diciembre de 2017 . De la misma forma, 2018, 12 har\u00eda referencia a enero de 2019 . Lo mismo ocurre con otros par\u00e1metros; 2018, 0, 32 har\u00eda referencia al 1 de febrero de 2018. Tiempo UNIX \u00b6 El Tiempo UNIX ( o UNIX timestamp ) es un formato num\u00e9rico utilizado para calcular una fecha en UNIX. Es una forma poco pr\u00e1ctica y legible para humanos, pero muy eficiente en t\u00e9rminos inform\u00e1ticos. Se trata de un n\u00famero que representa la cantidad de segundos transcurridos desde la fecha 1/1/1970, a las 00:00:00 . As\u00ed pues, siendo n\u00fameros, resulta muy f\u00e1cil trabajar y operar con ellos. Una fecha A y una fecha posterior B , si hacemos B - A nos devuelve el n\u00famero de segundos transcurridos entre ambas fechas, con lo que se podr\u00eda sacar la diferencia de tiempo. No obstante, el Tiempo UNIX sirve para trabajar con fechas a bajo nivel. Si lo deseas, al final del tema encontrar\u00e1s una tabla con librer\u00edas m\u00e1s c\u00f3modas y pr\u00e1cticas para trabajar con fechas en Javascript. Existen dos m\u00e9todos que se pueden utilizar para crear fechas, al margen de los constructores anteriores, s\u00f3lo que estos devuelven directamente el Tiempo UNIX de la fecha especificada: M\u00e9todo Descripci\u00f3n Date.now() Devuelve el Tiempo UNIX de la fecha actual. Equivalente a +new Date() . Date.parse(str) Convierte un de fecha a Tiempo UNIX . Equivalente a +new Date(str) . Veamos algunos ejemplos aplicados para entenderlos: // Estas tres operaciones son equivalentes const f = Date.now(); const f = +new Date(); const f = new Date().getTime(); // Estas tres operaciones son equivalentes const f = Date.parse(\"2018/10/30\"); const f = +new Date(\"2018/10/30\"); const f = new Date(\"2018/10/30\").getTime(); En el primer caso, utilizamos directamente los m\u00e9todos est\u00e1ticos now() y parse() para obtener el n\u00famero con el tiempo Unix . En el segundo caso, creamos un objeto Date con new Date() , lo que devuelve una fecha. Sin embargo, en Javascript, podemos preceder a esa fecha con el s\u00edmbolo + , oblig\u00e1ndolo a evaluarlo de forma num\u00e9rica, lo que hace que obtenga el tiempo Unix a partir de la fecha. En el tercer caso, escribimos en una l\u00ednea dos acciones: crear la variable de fecha con new Date() y posteriormente, sobre esa fecha, hacemos un getTime() , que nos devuelve el tiempo Unix de un Date, como veremos m\u00e1s adelante. Getters: Obtener fechas \u00b6 Una vez hemos creado una fecha y tenemos el objeto , podemos trabajar muy facilmente con estas variables a trav\u00e9s de sus sencillos m\u00e9todos. Los siguientes son una lista de getters , funciones para obtener informaci\u00f3n, sobre la fecha almacenada: M\u00e9todo Descripci\u00f3n .getDay() Devuelve el d\u00eda de la semana: OJO: 0 Domingo, 6 S\u00e1bado. .getFullYear() Devuelve el a\u00f1o con 4 cifras. .getMonth() Devuelve la representaci\u00f3n interna del mes. OJO: 0 Enero - 11 Diciembre. .getDate() Devuelve el d\u00eda del mes. .getHours() Devuelve la hora. OJO: Formato militar; 23 en lugar de 11 . .getMinutes() Devuelve los minutos. .getSeconds() Devuelve los segundos. .getMilliseconds() Devuelve los milisegundos. .getTime() Devuelve el UNIX Timestamp : segundos transcurridos desde 1/1/1970 . .getTimezoneOffset() Diferencia horaria ( en min ) de la hora local respecto a UTC (ver m\u00e1s adelante). Algunos ejemplos del uso de estos m\u00e9todos ser\u00edan los siguientes: const f = new Date(\"2018/01/30 15:30:10.999\"); f.getDay(); // 2 (Martes) f.getDate(); // 30 f.getMonth(); // 0 (Enero) f.getFullYear(); // 2018 f.getHours(); // 15 f.getMinutes(); // 30 f.getSeconds(); // 10 f.getMilliseconds(); // 999 f.getTimezoneOffset(); // 0 f.getTime(); // 1517326210999 (Tiempo Unix) Observa que Javascript no tiene forma de devolver, por ejemplo, el d\u00eda de la semana o el mes en formato de texto. Sin embargo, ello se puede hacer de forma muy sencilla utilizando un array: const MESES = [ \"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Mayo\", \"Junio\", \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\", ]; const f = new Date(); MESES[f.getMonth()]; // Devuelve el mes actual en formato de texto Curiosidad : El m\u00e9todo getYear() se utilizaba para devolver la fecha con formato de 2 cifras. Se dej\u00f3 de usar debido a la llegada del efecto 2000 , reemplaz\u00e1ndose por el m\u00e9todo getFullYear() que usa el formato de 4 cifras. Setters: Cambiar fechas \u00b6 De la misma forma que en el apartado anterior podemos obtener fechas espec\u00edficas, con los setters podemos modificarlas o alterarlas. M\u00e9todo Descripci\u00f3n .setFullYear(year) Altera el a\u00f1o de la fecha, cambi\u00e1ndolo por year . Formato de 4 d\u00edgitos. .setMonth(month) Altera el mes de la fecha, cambi\u00e1ndolo por month . Ojo : 0-11 (Ene-Dic). .setDate(day) Altera el d\u00eda de la fecha, cambi\u00e1ndolo por day . .setHour(hour) Altera la hora de la fecha, cambi\u00e1ndola por hour . .setMinutes(min) Altera los minutos de la fecha, cambi\u00e1ndolos por min . .setSeconds(sec) Altera los segundos de la fecha, cambi\u00e1ndolos por sec . .setMilliseconds(ms) Altera los milisegundos de la fecha, cambi\u00e1ndolos por ms . Nota : Adem\u00e1s de cambiar la fecha del objeto en cuesti\u00f3n, estos m\u00e9todos devuelven un en tiempo Unix , con la fecha modificada. De la misma forma que mencionamos anteriormente, hay que tener en cuenta que los valores pasados a estos m\u00e9todos pueden recalcular fechas: setMonth(0) implica Enero , setDate(0) implica \u00faltimo d\u00eda del mes anterior, setDate(-1) implica pen\u00faltimo d\u00eda del mes anterior, etc... const f = new Date(\"2018/01/30 15:30:10.999\"); f.setDate(15); // Cambia a 15/01/2018 15:30:10.999 (Devuelve 1516030210999) f.setMonth(1); // Cambia a 15/02/2018 15:30:10.999 (Devuelve 1518708610999) f.setFullYear(2020); // Cambia a 15/02/2020 15:30:10.999 (Devuelve 1581780610999) f.setHours(21); // Cambia a 15/02/2020 21:30:10.999 (Devuelve 1581802210999) f.setMinutes(00); // Cambia a 15/02/2020 21:00:10.999 (Devuelve 1581800410999) f.setSeconds(3); // Cambia a 15/02/2020 21:00:03.999 (Devuelve 1581800403999) f.setMilliseconds(79); // Cambia a 15/02/2020 21:00:03.079 (Devuelve 1581800403079) f.setTime(872817240000); // Cambia a 29/08/1997 02:14:00.000 (Devuelve 872817240000) Ten en cuenta que los mismos m\u00e9todos anteriores, soportan varios par\u00e1metros, para hacer m\u00e1s c\u00f3modo su utilizaci\u00f3n y no tener que estar us\u00e1ndolos uno por uno. As\u00ed por ejemplo, se puede usar setFullYear() para cambiar a\u00f1o, a\u00f1o y mes, o a\u00f1o, mes y d\u00eda: M\u00e9todo Descripci\u00f3n .setFullYear(y, m, d) Altera el a\u00f1o, mes y d\u00eda de una fecha. .setMonth(m, d) Altera el mes y d\u00eda de una fecha. .setHour(h, m, s, ms) Altera la hora, minutos, segundos y milisegundos. .setMinutes(m, s, ms) Altera los minutos, segundos y milisegundos. .setSeconds(s, ms) Altera los segundos y milisegundos. .setTime(ts) Establece una fecha a partir del tiempo Unix ts . Por \u00faltimo, tambi\u00e9n tenemos a nuestra disposici\u00f3n el m\u00e9todo setter setTime(ts) , que nos permite establecer una fecha a partir de un tiempo Unix ts . Es el equivalente a hacer un new Date(ts) . Representaci\u00f3n de fechas \u00b6 Otro detalle m\u00e1s delicado dentro del trabajo con fechas es a la hora de mostrar una fecha en un formato espec\u00edfico. Podemos utilizar el formato por defecto que nos ofrece Javascript, pero lo m\u00e1s habitual es que queramos hacerlo en otro diferente, utilizando nuestra configuraci\u00f3n horaria, abreviaturas u otros detalles. En Javascript tenemos varios m\u00e9todos ( muy limitados, eso s\u00ed ) para representar las fechas: M\u00e9todo Descripci\u00f3n Formato por defecto Fri Aug 24 2018 00:23:31 GMT+0100 .toDateString() Devuelve formato s\u00f3lo de fecha: Fri Aug 24 2018 .toLocaleDateString() Idem al anterior, pero en el formato regional actual: 24/8/2018 .toTimeString() Devuelve formato s\u00f3lo de hora: 00:23:24 GMT+0100 ... .toLocaleTimeString() Idem al anterior, pero en el formato regional actual: 0:26:37 .toISOString() Devuelve la fecha en el formato ISO 8601 : 2018-08-23T23:27:29.380Z .toJSON() Idem al anterior, pero asegur\u00e1ndose que ser\u00e1 compatible con JSON. .toUTCString() Devuelve la fecha, utilizando UTC ( ver m\u00e1s adelante ). El m\u00e9todo toISOString() devuelve un formato que intenta ser el est\u00e1ndar a la hora de manejar fechas en Internet o documentos en general. B\u00e1sicamente, una regla mnemot\u00e9cnica es pensar que se escriben desde magnitudes m\u00e1s altas ( a\u00f1o ) hasta las magnitudes m\u00e1s bajas ( milisegundos ). La fecha y la hora se separa con una T y cada componente con un - o un : dependiendo de si es fecha o es hora. Los milisegundos se separan siempre con . . La Z del final indica que es una fecha UTC . Existen algunas librer\u00edas interesantes que permiten trabajar muy f\u00e1cilmente con la representaci\u00f3n de fechas o incluso otros detalles. Lo comentaremos un poco m\u00e1s adelante. UTC y zonas horarias \u00b6 Para facilitar las cosas, hasta ahora hemos obviado un tema bastante importante: las zonas horarias . Probablemente te habr\u00e1s percatado de que podr\u00eda ser necesario trabajar y manejar diferencias horarias , porque por ejemplo necesitamos utilizar diferentes horas locales de distintos lugares del planeta. Para manejar esto, Javascript permite indicar tambi\u00e9n la diferencia horaria respecto al meridiano Greenwich , indicada como GMT . Por ejemplo, podemos tener una fecha A 2018/01/01 15:30:00 GMT+0000 , y una fecha B 2018/01/02 18:30:00 GMT+0200 . La fecha A no tiene diferencia horaria (GMT+0000), sin embargo, la fecha B si la tiene (GMT+0200), por lo que en Javascript al hacer un new Date(str) de dicha fecha, se recalcula autom\u00e1ticamente y se guarda la fecha modificada y sin diferencia horaria. En este caso, se le restan 2 horas a la fecha B. Es importante darse cuenta que, en Javascript, cuando usamos new Date() sin par\u00e1metros, obtendremos una fecha que puede incluir diferencias horarias: const f = new Date(); // Mon Aug 27 2018 01:39:21 GMT+0100 f.getTimezoneOffset(); // -60 (1 hora menos) Sin embargo, si hacemos uso de new Date(str) , pas\u00e1ndole una fecha como par\u00e1metro de texto, autom\u00e1ticamente se recalcula la diferencia horaria, sumando/restando las horas, y se obtiene finalmente la fecha con diferencia horaria cero : const f = new Date(\"2018/01/30 23:15:30 GMT+0100\"); f; // Tue Jan 30 2018 22:15:30 GMT+0000 En este caso, al recalcular y guardar la fecha/hora sin diferencias horarias, decimos que estamos utilizando el Tiempo Universal Coordinado o UTC . Tambi\u00e9n podemos utilizar el m\u00e9todo est\u00e1tico Date.UTC() donde le podemos pasar los par\u00e1metros de los componentes num\u00e9ricos de la fecha, tal c\u00f3mo lo hacemos en el constructor new Date(y, m, d, h, min, s, ms) anteriormente mencionado. Adem\u00e1s de lo anterior, recuerda que tambi\u00e9n tenemos todos los m\u00e9todos Getters y Setters mencionados en su versi\u00f3n UTC. Por ejemplo, en el caso de getHours() tenemos una versi\u00f3n getUTCHours() que devuelve las horas de acuerdo al UTC ( Tiempo Universal Coordinado ). Librer\u00edas para fechas \u00b6 En muchos casos, el objeto de Javascript puede quedarse corto para el usuario, que echa mucho de menos algunas funciones espec\u00edficas, mayor comodidad al trabajar con fechas, o que simplemente necesita un mayor control. Existen m\u00faltiples librer\u00edas alternativas para trabajar con fechas, citamos algunas de ellas: Librer\u00eda Descripci\u00f3n GitHub Moment.js Manejo de fechas y horas en JS. moment/moment date-fns Moderna librer\u00eda de fechas. date-fns/date-fns Day.js Librer\u00eda inmutable (2KB) alternativa a Moment.js iamkun/dayjs js-joda Librer\u00eda inmutable de fechas para JS. js-joda/js-joda Datejs Librer\u00eda alternativa para trabajar con fechas. datejs/Datejs fecha Librer\u00eda ligera para formatear y parsear fechas. taylorhakes/fecha Con ellas, podr\u00e1s trabajar con mayor comodidad o profundidad con fechas y horas en Javascript. Funciones \u00b6 Una vez conocemos las bases de las funciones que hemos explicado en el tema de introducci\u00f3n funciones b\u00e1sicas , podemos continuar avanzando dentro del apartado de las funciones. En Javascript, las funciones son uno de los tipos de datos m\u00e1s importantes, ya que estamos continuamente utiliz\u00e1ndolas a lo largo de nuestro c\u00f3digo. Y no, no me he equivocado ni he escrito mal el texto anterior; a continuaci\u00f3n veremos que las funciones tambi\u00e9n pueden ser tipos de datos: typeof function () {}; // 'function' Creaci\u00f3n de funciones \u00b6 Hay varias formas de crear funciones en Javascript: por declaraci\u00f3n ( la m\u00e1s usada por principiantes ), por expresi\u00f3n ( la m\u00e1s habitual en programadores con experiencia ) o mediante constructor de objeto ( no recomendada ): Constructor Descripci\u00f3n function nombre(p1, p2...) { } Crea una funci\u00f3n mediante declaraci\u00f3n . var nombre = function(p1, p2...) { } Crea una funci\u00f3n mediante expresi\u00f3n . new Function(p1, p2..., code); Crea una funci\u00f3n mediante un constructor de objeto . Funciones por declaraci\u00f3n \u00b6 Probablemente, la forma m\u00e1s popular de estas tres, y a la que estaremos acostumbrados si venimos de otros lenguajes de programaci\u00f3n, es la primera, a la creaci\u00f3n de funciones por declaraci\u00f3n . Esta forma permite declarar una funci\u00f3n que existir\u00e1 a lo largo de todo el c\u00f3digo: function saludar() { return \"Hola\"; } saludar(); // 'Hola' typeof saludar; // 'function' De hecho, podr\u00edamos ejecutar la funci\u00f3n saludar() incluso antes de haberla creado y funcionar\u00eda correctamente, ya que Javascript primero busca las declaraciones de funciones y luego procesa el resto del c\u00f3digo. Funciones por expresi\u00f3n \u00b6 Sin embargo, en Javascript es muy habitual encontrarse c\u00f3digos donde los programadores \u00abguardan funciones\u00bb dentro de variables, para posteriormente \u00abejecutar dichas variables\u00bb. Se trata de un enfoque diferente, creaci\u00f3n de funciones por expresi\u00f3n , que fundamentalmente, hacen lo mismo con algunas diferencias: // El segundo \"saludar\" (nombre de la funci\u00f3n) se suele omitir: es redundante const saludo = function saludar() { return \"Hola\"; }; saludo(); // 'Hola' Con este nuevo enfoque, estamos creando una funci\u00f3n en el interior de una variable , lo que nos permitir\u00e1 posteriormente ejecutar la variable ( como si fuera una funci\u00f3n ). Observa que el nombre de la funci\u00f3n ( en este ejemplo: saludar ) pasa a ser in\u00fatil, ya que si intentamos ejecutar saludar() nos dir\u00e1 que no existe y si intentamos ejecutar saludo() funciona correctamente. \u00bfQu\u00e9 ha pasado? Ahora el nombre de la funci\u00f3n pasa a ser el nombre de la variable, mientras que el nombre de la funci\u00f3n desaparece y se omite, dando paso a lo que se llaman las funciones an\u00f3nimas ( o funciones lambda ). Funciones como objetos \u00b6 Como curiosidad, debes saber que se pueden declarar funciones como si fueran objetos . Sin embargo, es un enfoque que no se suele utilizar en producci\u00f3n. Simplemente es interesante saberlo para darse cuenta que en Javascript todo pueden ser objetos: const saludar = new Function(\"return 'Hola';\"); saludar(); // 'Hola' Funciones an\u00f3nimas \u00b6 Las funciones an\u00f3nimas o funciones lambda son un tipo de funciones que se declaran sin nombre de funci\u00f3n y se alojan en el interior de una variable y haciendo referencia a ella cada vez que queramos utilizarla: // Funci\u00f3n an\u00f3nima \"saludo\" const saludo = function () { return \"Hola\"; }; saludo; // \u0192 () { return 'Hola'; } saludo(); // 'Hola' Observa que en la \u00faltima l\u00ednea del ejemplo anterior, estamos ejecutando la variable, es decir, ejecutando la funci\u00f3n que contiene la variable. Sin embargo, en la l\u00ednea anterior hacemos referencia a la variable ( sin ejecutarla, no hay par\u00e9ntesis ) y nos devuelve la funci\u00f3n en s\u00ed. La diferencia fundamental entre las funciones por declaraci\u00f3n y las funciones por expresi\u00f3n es que estas \u00faltimas s\u00f3lo est\u00e1n disponibles a partir de la inicializaci\u00f3n de la variable. Si \u00abejecutamos la variable\u00bb antes de declararla, nos dar\u00e1 un error. Callbacks \u00b6 Ahora que conocemos las funciones an\u00f3nimas , podremos comprender m\u00e1s f\u00e1cilmente como utilizar callbacks ( tambi\u00e9n llamadas funciones callback o retrollamadas ). A grandes rasgos, un callback ( llamada hacia atr\u00e1s ) es pasar una funci\u00f3n B por par\u00e1metro a una funci\u00f3n A , de modo que la funci\u00f3n A puede ejecutar esa funci\u00f3n B de forma gen\u00e9rica desde su c\u00f3digo, y nosotros podemos definirlas desde fuera de dicha funci\u00f3n: // fB = Funci\u00f3n B const fB = function () { console.log(\"Funci\u00f3n B ejecutada.\"); }; // fA = Funci\u00f3n A const fA = function (callback) { callback(); }; fA(fB); Esto nos podr\u00eda permitir crear varias funciones para utilizar a modo de callback y reutilizarlas posteriormente con diferentes prop\u00f3sitos. De hecho, los callbacks muchas veces son la primera estrategia que se suele utilizar en Javascript para trabajar la asincron\u00eda, uno de los temas que veremos m\u00e1s adelante: // fB = Funci\u00f3n B (callback) const fB = function () { console.log(\"Funci\u00f3n B ejecutada.\"); }; // fError = Funci\u00f3n Error (callback) const fError = function () { console.error(\"Error\"); }; // fA = Funci\u00f3n A const fA = function (callback, callbackError) { const n = ~~(Math.random() * 5); if (n > 2) callback(); else callbackError(); }; fA(fB, fError); // Si ejecutamos varias veces, algunas dar\u00e1n error y otras no Viendo este ejemplo, podemos planear ejecutar la funci\u00f3n fA() cambiando los callbacks seg\u00fan nos interese, sin necesidad de crear funciones con el mismo c\u00f3digo repetido una y otra vez. Adem\u00e1s, en el caso de que las funciones callbacks sean muy cortas, muchas veces utilizamos directamente la funci\u00f3n an\u00f3nima, sin necesidad de guardarla en una variable previamente: // fA = Funci\u00f3n A const fA = function (callback, callbackError) { const n = ~~(Math.random() * 5); if (n > 2) callback(); else callbackError(); }; fA( function () { console.log(\"Funci\u00f3n B ejecutada.\"); }, function () { console.error(\"Error\"); } ); Aunque, como se puede ver, se suele evitar para facilitar la legibilidad del c\u00f3digo, y s\u00f3lo se utiliza en casos muy espec\u00edficos donde est\u00e1s seguro que no vas a reutilizar la funci\u00f3n callback o no te interesa guardarla en una variable. Funciones autoejecutables \u00b6 Pueden existir casos en los que necesites crear una funci\u00f3n y ejecutarla sobre la marcha. En Javascript es muy sencillo crear funciones autoejecutables . B\u00e1sicamente, s\u00f3lo tenemos que envolver entre par\u00e9ntesis la funci\u00f3n an\u00f3nima en cuesti\u00f3n ( no necesitamos que tenga nombre, puesto que no la vamos a guardar ) y luego, ejecutarla: // Funci\u00f3n autoejecutable (function () { console.log(\"Hola!!\"); })(); // Funci\u00f3n autoejecutable con par\u00e1metros (function (name) { console.log(`\u00a1Hola, ${name}!`); })(\"Manz\"); De hecho, tambi\u00e9n podemos utilizar par\u00e1metros en dichas funciones autoejecutables. Observa que s\u00f3lo hay que pasar dichos par\u00e1metros al final de la funci\u00f3n autoejecutable. Ten en cuenta, que si la funci\u00f3n autoejecutable devuelve alg\u00fan valor con return , a diferencia de las funciones por expresi\u00f3n , en este caso lo que se almacena en la variable es el valor que devuelve la funci\u00f3n autoejecutada: const f = (function (name) { return `\u00a1Hola, ${name}!`; })(\"Manz\"); f; // '\u00a1Hola, Manz!` typeof f; // 'string' Clausuras \u00b6 Las clausuras o cierres, es un concepto relacionado con las funciones y los \u00e1mbitos que suele costar comprender cuando se empieza en Javascript. Es importante tener las bases de funciones claras hasta este punto, lo que permitir\u00e1 entender las bases de una clausura. A grandes rasgos, en Javascript, una clausura o cierre se define como una funci\u00f3n que \u00abencierra\u00bb variables en su propio \u00e1mbito ( y que contin\u00faan existiendo a\u00fan habiendo terminado la funci\u00f3n ). Por ejemplo, veamos el siguiente ejemplo: // Clausura: Funci\u00f3n incr() const incr = (function () { let num = 0; return function () { num++; return num; }; })(); typeof incr; // 'function' incr(); // 1 incr(); // 2 incr(); // 3 Tenemos una funci\u00f3n an\u00f3nima que es tambi\u00e9n una funci\u00f3n autoejecutable. Aunque parece una funci\u00f3n por expresi\u00f3n, no lo es, ya que la variable incr est\u00e1 guardando lo que devuelve la funci\u00f3n an\u00f3nima autoejecutable, que a su vez, es otra funci\u00f3n diferente. La \u00abmagia\u00bb de las clausuras es que en el interior de la funci\u00f3n autoejecutable estamos creando una variable num que se guardar\u00e1 en el \u00e1mbito de dicha funci\u00f3n, por lo tanto existir\u00e1 con el valor declarado: 0 . Por lo tanto, en la variable incr tenemos una funci\u00f3n por expresi\u00f3n que adem\u00e1s conoce el valor de una variable num , que s\u00f3lo existe dentro de incr . Si nos fijamos en la funci\u00f3n que devolvemos, lo que hace es incrementar el valor de num y devolverlo. Como la variable incr es una clausura y mantiene la variable en su propio \u00e1mbito, veremos que a medida que ejecutamos incr() , los valores de num ( que estamos devolviendo ) conservan su valor y se van incrementando. Arrow functions \u00b6 Las Arrow functions , funciones flecha o \u00abfat arrow\u00bb son una forma corta de escribir funciones que aparece en Javascript a partir de ECMAScript 6 . B\u00e1sicamente, se trata de reemplazar eliminar la palabra function y a\u00f1adir => antes de abrir las llaves: const func = function () { return \"Funci\u00f3n tradicional.\"; }; const func = () => { return \"Funci\u00f3n flecha.\"; }; Sin embargo, las funciones flechas tienen algunas ventajas a la hora de simplificar c\u00f3digo bastante interesantes: Si el cuerpo de la funci\u00f3n s\u00f3lo tiene una l\u00ednea, podemos omitir las llaves ( {} ). Adem\u00e1s, en ese caso, autom\u00e1ticamente se hace un return de esa \u00fanica l\u00ednea, por lo que podemos omitir tambi\u00e9n el return . En el caso de que la funci\u00f3n no tenga par\u00e1metros, se indica como en el ejemplo anterior: () => . En el caso de que la funci\u00f3n tenga un solo par\u00e1metro, se puede indicar simplemente el nombre del mismo: e => . En el caso de que la funci\u00f3n tenga 2 \u00f3 m\u00e1s par\u00e1metros, se indican entre par\u00e9ntesis: (a, b) => . Si queremos devolver un objeto, que coincide con la sintaxis de las llaves, se puede englobar con par\u00e9ntesis: ({name: 'Manz'}) . Por lo tanto, el ejemplo anterior se puede simplificar a\u00fan m\u00e1s: const func = () => \"Funci\u00f3n flecha.\"; // 0 par\u00e1metros: Devuelve \"Funci\u00f3n flecha\" const func = (e) => e + 1; // 1 par\u00e1metro: Devuelve el valor de e + 1 const func = (a, b) => a + b; // 2 par\u00e1metros: Devuelve el valor de a + b Las funciones flecha hacen que el c\u00f3digo sea mucho m\u00e1s legible y claro de escribir, mejorando la productividad y la claridad a la hora de escribir c\u00f3digo. \u00c1mbito l\u00e9xico de this \u00b6 Aunque a\u00fan no la hemos utilizado, una de las principales diferencias de las funciones flecha respecto a las funciones tradicionales, es el valor de la palabra clave this , que no siempre es la misma. Por ejemplo, si utilizamos una funci\u00f3n de forma global en nuestro programa, no notaremos ninguna diferencia: // Si son funciones globales const a = function () { console.log(this); }; const b = () => { console.log(this); }; a(); // Window b(); // Window Sin embargo, si utilizamos una funci\u00f3n en el interior de un objeto, como suele ser el caso m\u00e1s habitual, si encontraremos diferencias. Observa que en la primera funci\u00f3n, donde se utiliza una funci\u00f3n tradicional, el this devuelve el objeto padre de la funci\u00f3n. Por otro lado, en la segunda funci\u00f3n, donde se utiliza una funci\u00f3n flecha, el this no devuelve el objeto padre de la funci\u00f3n, sino que devuelve Window . padre = { a: function () { console.log(this); }, b: () => { console.log(this); }, }; padre.a(); // padre padre.b(); // Window Esta es una diferencia clave que hay que tener bien en cuenta a la hora de trabajar con las funciones flecha . Una buena pr\u00e1ctica es utilizar funciones tradicionales como las funciones de primer nivel y, luego, en su interior o en callbacks, utilizar funciones flecha. Arrays \u00b6 A medida que trabajamos en nuestro c\u00f3digo, se hace necesario agrupar valores en una misma variable, para representar conjuntos de datos con cierta relaci\u00f3n entre s\u00ed. Para ello, tenemos la opci\u00f3n de crear objetos , o unas variables m\u00e1s sencillas llamadas arrays . \u00bfQu\u00e9 es un array? \u00b6 Un es una colecci\u00f3n o agrupaci\u00f3n de elementos en una misma variable, cada uno de ellos ubicado por la posici\u00f3n que ocupa en el array. En Javascript, se pueden definir de varias formas: Constructor Descripci\u00f3n new Array(len) Crea un array de len elementos . new Array(e1, e2...) Crea un array con ninguno o varios elementos. [e1, e2...] Simplemente, los elementos dentro de corchetes: [] . Notaci\u00f3n preferida . Por ejemplo, podr\u00edamos tener un array que en su primera posici\u00f3n tenemos el 'a', en la segunda el 'b' y en la tercera el 'c'. En Javascript, esto se crear\u00eda de esta forma: // Forma tradicional const array = new Array(\"a\", \"b\", \"c\"); // Mediante literales (preferida) const array = [\"a\", \"b\", \"c\"]; // Array con 3 elementos const empty = []; // Array vac\u00edo (0 elementos) const mixto = [\"a\", 5, true]; // Array mixto (string, number, boolean) Al contrario que muchos otros lenguajes de programaci\u00f3n, Javascript permite que se puedan realizar arrays de tipo mixto , no siendo obligatorio que todos los elementos sean del mismo tipo de dato ( en el ejemplo anterior, ). OJO : Al crear un array con new Array(num) , si solo indicamos un par\u00e1metro y num es un n\u00famero, Javascript crear\u00e1 un array de num elementos sin definir. Es decir, a = new Array(3) ser\u00eda equivalente a a = [undefined, undefined, undefined] . Esto no ocurre con su equivalente, a = [3] , donde estamos creando un array con un \u00fanico elemento: 3 . Acceso a elementos \u00b6 Al igual que los , saber el n\u00famero elementos que tiene un array es muy sencillo. S\u00f3lo hay que acceder a la propiedad .length , que nos devolver\u00e1 el n\u00famero de elementos existentes en un array: M\u00e9todo Descripci\u00f3n .length Devuelve el n\u00famero de elementos del array. [pos] Operador que devuelve el elemento n\u00famero pos del array. Por otro lado, si lo que queremos es acceder a un elemento espec\u00edfico del array, no hay m\u00e1s que utilizar el operador [] , al igual que hacemos con los para acceder a un car\u00e1cter concreto. En este caso, accedemos a la posici\u00f3n del elemento que queremos recuperar sobre el array: const array = [\"a\", \"b\", \"c\"]; array[0]; // 'a' array[2]; // 'c' array[5]; // undefined Recuerda que las posiciones empiezan a contar desde 0 y que si intentamos acceder a una posici\u00f3n que no existe ( mayor del tama\u00f1o del array ), nos devolver\u00e1 un . A\u00f1adir o eliminar elementos \u00b6 Existen varias formas de a\u00f1adir elementos a un array existente. Veamos los m\u00e9todos que podemos usar para ello: M\u00e9todo Descripci\u00f3n .push(obj1, obj2...) A\u00f1ade uno o varios elementos al final del array. Devuelve tama\u00f1o del array. .pop() Elimina y devuelve el \u00faltimo elemento del array. .unshift(obj1, obj2...) A\u00f1ade uno o varios elementos al inicio del array. Devuelve tama\u00f1o del array. .shift() Elimina y devuelve el primer elemento del array. .concat(obj1, obj2...) Concatena los elementos (o elementos de los arrays) pasados por par\u00e1metro. En los arrays, Javascript proporciona m\u00e9todos tanto para insertar o eliminar elementos por el final del array: push() y pop() , como para insertar o eliminar elementos por el principio del array: unshift() y shift() . Salvo por esto, funcionan exactamente igual. El m\u00e9todo de inserci\u00f3n, push() o unshift() inserta los elementos pasados por par\u00e1metro en el array y devuelve el tama\u00f1o actual que tiene el array despu\u00e9s de la inserci\u00f3n. Por otro lado, los m\u00e9todos de extracci\u00f3n, pop() o shift() , extraen y devuelven el elemento. const array = [\"a\", \"b\", \"c\"]; // Array inicial array.push(\"d\"); // Devuelve 4. Ahora array = ['a', 'b', 'c', 'd'] array.pop(); // Devuelve 'd'. Ahora array = ['a', 'b', 'c'] array.unshift(\"Z\"); // Devuelve 4. Ahora array = ['Z', 'a', 'b', 'c'] array.shift(); // Devuelve 'Z'. Ahora array = ['a', 'b', 'c'] Adem\u00e1s, al igual que en los , tenemos el m\u00e9todo concat() , que nos permite concatenar los elementos pasados por par\u00e1metro en un array. Se podr\u00eda pensar que los m\u00e9todos .push() y concat() funcionan de la misma forma, pero no es exactamente as\u00ed. Veamos un ejemplo: const array = [1, 2, 3]; array.push(4, 5, 6); // Devuelve 6. Ahora array = [1, 2, 3, 4, 5, 6] array.push([7, 8, 9]); // Devuelve 7. Ahora array = [1, 2, 3, 4, 5, 6, [7, 8, 9]] const array = [1, 2, 3]; array = array.concat(4, 5, 6); // Devuelve 6. Ahora array = [1, 2, 3, 4, 5, 6] array = array.concat([7, 8, 9]); // Devuelve 9. Ahora array = [1, 2, 3, 4, 5, 6, 7, 8, 9] Observa un detalle muy importante. El m\u00e9todo concat() , a diferencia de push() , no modifica el array sobre el cu\u00e1l trabajamos y al que le a\u00f1adimos los elementos, sino que simplemente lo devuelve. Al margen de esto, observa que en el caso de pasar un array por par\u00e1metro, push() lo inserta como un array, mientras que concat() inserta cada uno de sus elementos. Tambi\u00e9n hay que tener cuidado al utilizar el operador + con los arrays. A diferencia de lo que quiz\u00e1s puede parecer intuitivo, utilizando este operador no se a\u00f1aden los elementos al array, sino que se convierten los arrays en string y luego se concatenan. Veremos m\u00e1s sobre estas conversiones impl\u00edcitas en temas posteriores. Creaci\u00f3n de arrays \u00b6 Existen m\u00e9todos para crear peque\u00f1os arrays derivados de otras variables u objetos. Es el caso de los m\u00e9todos slice() y splice() . Luego, tambi\u00e9n hablaremos del m\u00e9todo join() y el m\u00e9todo est\u00e1tico Array.from() : M\u00e9todo Descripci\u00f3n .slice(ini, end) Devuelve los elementos desde posici\u00f3n ini hasta end (exclu\u00eddo). .splice(ini, num) Elimina y devuelve num elementos desde posici\u00f3n ini . .splice(ini, num, o1, o2...) Idem. Adem\u00e1s inserta o1 , o2 ... en la posici\u00f3n ini . .join(sep) Une los elementos del array por sep en un . Array.from(o, f, thisVal) Crea un array a partir de o (algo similar a un array). El m\u00e9todo slice() devuelve los elementos del array desde la posici\u00f3n ini hasta la posici\u00f3n end , permitiendo crear un nuevo array m\u00e1s peque\u00f1o con ese grupo de elementos. Recuerda que las posiciones empiezan a contar desde 0 . En el caso de que no se proporcione el par\u00e1metro end , se devuelven todos los elementos desde la posici\u00f3n ini hasta el final del array. Por otro lado, ten en cuenta que el array sobre el que realizamos el m\u00e9todo slice() no sufre ninguna modificaci\u00f3n, s\u00f3lo se devuelve por par\u00e1metro el array creado. Diferente es el caso del m\u00e9todo splice() , el cu\u00e1l realiza algo parecido a slice() pero con una gran diferencia: modifica el array original . En el m\u00e9todo splice() el segundo par\u00e1metro num no es la posici\u00f3n final del subarray, sino el tama\u00f1o del array final, es decir, el n\u00famero de elementos que se van a obtener desde la posici\u00f3n ini . Por lo tanto, con el m\u00e9todo splice() , devolvemos un array con los elementos desde la posici\u00f3n ini hasta la posici\u00f3n ini + num . El array original es modificado, ya que se eliminan los elementos desde la posici\u00f3n ini hasta la posici\u00f3n ini + num . Es posible tambi\u00e9n indicar una serie de par\u00e1metros opcionales despu\u00e9s de los mencionados, que permitir\u00e1n adem\u00e1s de la extracci\u00f3n de elementos, insertar dichos elementos justo donde hicimos la extracci\u00f3n. Veamos un ejemplo ilustrativo: const array = [\"a\", \"b\", \"c\", \"d\", \"e\"]; // .slice() no modifica el array array.slice(2, 4); // Devuelve ['c', 'd']. El array no se modifica. // .splice() si modifica el array array.splice(2, 2); // Devuelve ['c', 'd']. Ahora array = ['a', 'b', 'e'] array.splice(1, 0, \"z\", \"x\"); // Devuelve []. Ahora array = ['a', 'z', 'x', 'b', 'e'] A ra\u00edz de este \u00faltimo ejemplo, tambi\u00e9n podemos insertar elementos en una posici\u00f3n concreta del array de estas dos formas alternativas: utilizando slice() y concat() o utilizando splice() y una caracter\u00edstica que veremos m\u00e1s adelante llamada desestructuraci\u00f3n : const a = [1, 2, 3, 8, 9, 10]; a.slice(0, 3).concat([4, 5, 6, 7], a.slice(3, 6)); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] const a = [1, 2, 3, 8, 9, 10]; a.splice(3, 0, ...[4, 5, 6, 7]); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] En ciertos casos, nos podr\u00eda interesar reducir el tama\u00f1o de un array para quedarnos con sus primeros elementos y descartar el resto. Hay una forma muy sencilla y eficiente que es modificar directamente el tama\u00f1o del array mediante .length . Por ejemplo, hacer un a.length = 4 en un array de 8 elementos, reducir\u00e1 el array a los primeros 4 elementos de una forma eficiente, ya que no crea un nuevo array, sino que reduce el tama\u00f1o del actual y descarta el resto de elementos. Adem\u00e1s, tambi\u00e9n tenemos otro m\u00e9todo con el que es posible crear un a partir de un . Se trata del m\u00e9todo split() que vimos en el tema de los . En este caso, el m\u00e9todo join() es su contrapartida. Con join() podemos crear un con todos los elementos del array, separ\u00e1ndolo por el texto que le pasemos por par\u00e1metro: const array = [\"a\", \"b\", \"c\"]; array.join(\"->\"); // Devuelve 'a->b->c' array.join(\".\"); // Devuelve 'a.b.c' \"a.b.c\".split(\".\"); // Devuelve ['a', 'b', 'c'] \"5.4.3.2.1\".split(\".\"); // Devuelve ['5', '4', '3', '2', '1'] Ten en cuenta que, como se puede ver en el \u00faltimo ejemplo, split() siempre devolver\u00e1 los elementos como . Por \u00faltimo, mencionar tambi\u00e9n el m\u00e9todo est\u00e1tico Array.from() . Aunque ahora no le encontraremos mucha utilidad, nos resultar\u00e1 muy interesante m\u00e1s adelante. Este m\u00e9todo se suele utilizar para convertir variables \u00abparecidas\u00bb a los arrays ( pero que no son arrays ) en arrays reales. Este el caso de variables como ( que pueden actuar como array de strings ) o de nodos de un documento ( elementos del DOM, como veremos en temas posteriores ): Array.from(\"hola\"); // ['h', 'o', 'l', 'a'] Array.from(document.querySelector(\"body\")); // [body.document] De forma opcional, Array.from(obj) puede recibir dos par\u00e1metros m\u00e1s, al margen de obj : una funci\u00f3n f y un par\u00e1metro thisVal . El funcionamiento de estos par\u00e1metros es similar al del m\u00e9todo .map() que veremos en un tema posterior de Array functions . B\u00fasqueda y comprobaci\u00f3n \u00b6 Existen varios m\u00e9todos para realizar ciertas comprobaciones con arrays: M\u00e9todo Descripci\u00f3n Array.isArray(obj) Comprueba si obj es un array. Devuelve true o false . .includes(obj, from) Comprueba si obj es uno de los elementos incluidos en el array. .indexOf(obj, from) Devuelve la posici\u00f3n de la primera aparici\u00f3n de obj desde from . .lastIndexOf(obj, from) Devuelve la posici\u00f3n de la \u00faltima aparici\u00f3n de obj desde from . El primero de ellos, Array.isArray(obj) se utiliza para comprobar si obj es un array o no, devolviendo un booleano. Los otros tres m\u00e9todos funcionan exactamente igual que sus equivalentes en los . El m\u00e9todo includes() comprueba si el elemento obj pasado por par\u00e1metro es uno de los elementos que incluye el array, partiendo desde la posici\u00f3n from . Si se omite from , se parte desde 0 . const array = [5, 10, 15, 20, 25]; Array.isArray(array); // true array.includes(10); // true array.includes(10, 2); // false array.indexOf(25); // 4 array.lastIndexOf(10, 0); // -1 Por otro lado, tenemos indexOf() y lastIndexOf() dos funciones que se utilizan para devolver la posici\u00f3n del elemento obj pasado por par\u00e1metro, empezando a buscar en la posici\u00f3n from ( o 0 si se omite ). El primer m\u00e9todo, devuelve la primera aparici\u00f3n, mientras que el segundo m\u00e9todo devuelve la \u00faltima aparici\u00f3n. Modificaci\u00f3n de arrays \u00b6 Es posible que tengamos un array espec\u00edfico al que queremos hacer ciertas modificaciones donde slice() y splice() se quedan cortos ( o resulta m\u00e1s c\u00f3modo utilizar los siguientes m\u00e9todos ). Existen algunos m\u00e9todos introducidos en ECMAScript 6 que nos permiten crear una versi\u00f3n modificada de un array, mediante m\u00e9todos como copyWithin() o fill() : M\u00e9todo Descripci\u00f3n .copyWithin(pos, ini, end) Devuelve , copiando en pos los \u00edtems desde ini a end . .fill(obj, ini, end) Devuelve un relleno de obj desde ini hasta end . El primero de ellos, copyWithin(pos, ini, end) nos permite crear una copia del array que alteraremos de la siguiente forma: en la posici\u00f3n pos copiaremos los elementos del propio array que aparecen desde la posici\u00f3n ini hasta la posici\u00f3n end . Es decir, desde la posici\u00f3n 0 hasta pos ser\u00e1 exactamente igual, y de ah\u00ed en adelante, ser\u00e1 una copia de los valores de la posici\u00f3n ini a la posici\u00f3n end . Veamos algunos ejemplos: const array = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]; // Estos m\u00e9todos modifican el array original array.copyWithin(5, 0, 1); // Devuelve ['a', 'b', 'c', 'd', 'e', 'a'] array.copyWithin(3, 0, 3); // Devuelve ['a', 'b', 'c', 'a', 'b', 'c'] array.fill(\"Z\", 0, 5); // Devuelve ['Z', 'Z', 'Z', 'Z', 'Z', 'c'] Por otro lado, el m\u00e9todo fill(obj, ini, end) es mucho m\u00e1s sencillo. Se encarga de devolver una versi\u00f3n del array, rellenando con el elemento obj desde la posici\u00f3n ini hasta la posici\u00f3n end . Ordenaciones \u00b6 En Javascript, es muy habitual que tengamos arrays y queramos ordenar su contenido por diferentes criterios. En este apartado, vamos a ver los m\u00e9todos reverse() y sort() , utiles para ordenar un array: M\u00e9todo Descripci\u00f3n .reverse() Invierte el orden de elementos del array. .sort() Ordena los elementos del array bajo un criterio de ordenaci\u00f3n alfab\u00e9tica. .sort(func) Ordena los elementos del array bajo un criterio de ordenaci\u00f3n func . En primer lugar, el m\u00e9todo reverse() cambia los elementos del array en orden inverso, es decir, si tenemos [5, 4, 3] lo modifica de modo que ahora tenemos [3, 4, 5] . Por otro lado, el m\u00e9todo sort() realiza una ordenaci\u00f3n ( por orden alfab\u00e9tico ) de los elementos del array: const array = [\"Alberto\", \"Ana\", \"Mauricio\", \"Bernardo\", \"Zoe\"]; // Ojo, cada l\u00ednea est\u00e1 modificando el array original array.sort(); // ['Alberto', 'Ana', 'Bernardo', 'Mauricio', 'Zoe'] array.reverse(); // ['Zoe', 'Mauricio', 'Bernardo', 'Ana', 'Alberto'] Un detalle muy importante es que estos dos m\u00e9todos modifican el array original , adem\u00e1s de devolver el array modificado. Si no quieres que el array original cambie, asegurate de crear primero una copia del array, para as\u00ed realizar la ordenaci\u00f3n sobre esa copia y no sobre el original. Sin embargo, la ordenaci\u00f3n anterior se realiz\u00f3 sobre y todo fue bien. Veamos que ocurre si intentamos ordenar un array de n\u00fameros: const array = [1, 8, 2, 32, 9, 7, 4]; array.sort(); // Devuelve [1, 2, 32, 4, 7, 8, 9], que NO es el resultado deseado Esto ocurre porque, al igual que en el ejemplo anterior, el tipo de ordenaci\u00f3n que realiza sort() por defecto es una ordenaci\u00f3n alfab\u00e9tica, mientras que en esta ocasi\u00f3n buscamos una ordenaci\u00f3n natural , que es la que se suele utilizar con n\u00fameros. Esto se puede hacer en Javascript, pero requiere pasarle por par\u00e1metro al sort() lo que se llama una funci\u00f3n de comparaci\u00f3n . Funci\u00f3n de comparaci\u00f3n \u00b6 Como hemos visto, la ordenaci\u00f3n que realiza sort() por defecto es siempre una ordenaci\u00f3n alfab\u00e9tica. Sin embargo, podemos pasarle por par\u00e1metro lo que se conoce con los nombres de funci\u00f3n de ordenaci\u00f3n o funci\u00f3n de comparaci\u00f3n . Dicha funci\u00f3n, lo que hace es establecer otro criterio de ordenaci\u00f3n, en lugar del que tiene por defecto: const array = [1, 8, 2, 32, 9, 7, 4]; // Funci\u00f3n de comparaci\u00f3n para ordenaci\u00f3n natural const fc = function (a, b) { return a > b; }; array.sort(fc); // Devuelve [1, 2, 4, 7, 8, 9, 32], que S\u00cd es el resultado deseado Como se puede ver en el ejemplo anterior, creando la funci\u00f3n de ordenaci\u00f3n fc y pas\u00e1ndola por par\u00e1metro a sort() , le indicamos como debe hacer la ordenaci\u00f3n y ahora si la realiza correctamente. Si profundizamos en la tarea que realiza el sort() , lo que hace concretamente es analizar pares de elementos del array en cuesti\u00f3n. El primer elemento es a y el segundo elemento es b . Por lo tanto, al pasarle la funci\u00f3n de comparaci\u00f3n fc , dicha funci\u00f3n se encargar\u00e1 de, si devuelve true cambia el orden de a y b , si devuelve false los mantiene igual. Esto es lo que se conoce como el m\u00e9todo de la burbuja , uno de los sistemas de ordenaci\u00f3n m\u00e1s sencillos. Obviamente, el usuario puede crear sus propias funciones de comparaci\u00f3n con criterios espec\u00edficos y personalizados, no s\u00f3lo el que se muestra como ejemplo. Array functions \u00b6 En un tema posterior, veremos como desde Javascript es posible realizar bucles mediante las array functions , unos m\u00e9todos especiales de los que permiten realizar bucles de una forma m\u00e1s legible, utilizando callbacks. Fuente: Lenguaje Javascript por Manz","title":"Fundamentos de Javascript"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#fundamentos-de-javascript","text":"","title":"Fundamentos de Javascript"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#tipos-de-datos","text":"En Javascript, al igual que en la mayor\u00eda de los lenguajes de programaci\u00f3n, al declarar una variable y guardar su contenido, tambi\u00e9n le estamos asignando un tipo de dato , ya sea de forma impl\u00edcita o expl\u00edcita. El tipo de dato no es m\u00e1s que la naturaleza de su contenido: contenido num\u00e9rico, contenido de texto, etc...","title":"Tipos de datos"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#que-tipos-de-lenguajes-existen","text":"A grandes rasgos, nos podemos encontrar con dos tipos de lenguajes de programaci\u00f3n: Lenguajes est\u00e1ticos : Cuando creamos una variable, debemos indicar el tipo de dato del valor que va a contener. En consecuencia, el valor asignado finalmente, siempre deber\u00e1 ser del tipo de dato que hemos indicado ( si definimos que es un n\u00famero debe ser un n\u00famero, si definimos que es un texto debe ser un texto, etc... ). Lenguajes din\u00e1micos : Cuando creamos una variable, no es necesario indicarle el tipo de dato que va a contener. El lenguaje de programaci\u00f3n se encargar\u00e1 de deducir el tipo de dato ( dependiendo del valor que le hayamos asignado ). En el caso de los lenguajes din\u00e1micos , realmente el tipo de dato se asocia al valor ( en lugar de a la variable ). De esta forma, es mucho m\u00e1s f\u00e1cil entender que a lo largo del programa, dicha variable puede \u00abcambiar\u00bb a tipos de datos diferentes, ya que la restricci\u00f3n del tipo de dato est\u00e1 asociada al valor y no a la variable en s\u00ed. No obstante, para simplificar, en los primeros temas siempre hablaremos de variables y sus tipos de datos respectivos. Javascript pertenece a los lenguajes din\u00e1micos , ya que autom\u00e1ticamente detecta de que tipo de dato se trata en cada caso, dependiendo del contenido que le hemos asignado a la variable. Para algunos desarrolladores \u2014 sobre todo, n\u00f3veles \u2014 esto les resulta una ventaja, ya que es mucho m\u00e1s sencillo declarar variables sin tener que preocuparte del tipo de dato que necesitan. Sin embargo, para muchos otros desarrolladores \u2014 generalmente, avanzados \u2014 es una desventaja, ya que pierdes el control de la informaci\u00f3n almacenada y esto en muchas ocasiones puede desembocar en problemas o situaciones inesperadas. En Javascript existen mecanismos para convertir o forzar los tipos de datos de las variables, sin embargo, muchos programadores prefieren declarar expl\u00edcitamente los tipos de datos, ya que les aporta cierta confianza y seguridad. Este grupo de desarrolladores suelen optar por utilizar lenguajes como Typescript , que no es m\u00e1s que \u00abvarias capas de caracter\u00edsticas a\u00f1adidas\u00bb a Javascript. En muchas ocasiones ( y de manera informal ) tambi\u00e9n se suele hacer referencia a lenguajes tipados ( tipado fuerte, o fuertemente tipado ) o lenguajes no tipados ( tipado d\u00e9bil, debilmente tipado ), para indicar si el lenguaje requiere indicar manualmente el tipo de dato de las variables o no, respectivamente.","title":"\u00bfQu\u00e9 tipos de lenguajes existen?"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#que-son-los-tipos-de-datos","text":"En Javascript disponemos de los siguientes tipos de datos: Tipo de dato Descripci\u00f3n Ejemplo b\u00e1sico number Valor num\u00e9rico (enteros, decimales, etc...) 42 string Valor de texto (cadenas de texto, car\u00e1cteres, etc...) 'MZ' boolean Valor booleano (valores verdadero o falso) true undefined Valor sin definir (variable sin inicializar) undefined function Funci\u00f3n (funci\u00f3n guardada en una variable) function() {} object Objeto (estructura m\u00e1s compleja) {} Para empezar, nos centraremos en los tres primeros, denominados tipos de datos primitivos , y en los temas siguientes veremos detalles sobre los siguientes. Para saber que tipo de dato tiene una variable, debemos observar que valor le hemos dado. Si es un valor num\u00e9rico, ser\u00e1 de tipo number . Si es un valor de texto, ser\u00e1 de tipo string , si es verdadero o falso, ser\u00e1 de tipo booleano . Veamos un ejemplo en el que identificaremos que tipo de dato tiene cada variable: var s = \"Hola, me llamo Manz\"; // s, de string var n = 42; // n, de n\u00famero var b = true; // b, de booleano var u; // u, de undefined Como se puede ver, en este ejemplo, es muy sencillo saber que tipos de datos tienen cada variable.","title":"\u00bfQu\u00e9 son los tipos de datos?"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#que-tipo-de-dato-tiene-una-variable","text":"Nos encontraremos que muchas veces no resulta tan sencillo saber que tipo de dato tiene una variable, o simplemente viene oculto porque el valor lo devuelve una funci\u00f3n o alguna otra raz\u00f3n similar. Hay varias formas de saber que tipo de dato tiene una variable en Javascript:","title":"\u00bfQu\u00e9 tipo de dato tiene una variable?"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#utilizando-typeof","text":"Si tenemos dudas, podemos utilizar la funci\u00f3n typeof , que nos devuelve el tipo de dato de la variable que le pasemos por par\u00e1metro. Veamos que nos devuelve typeof() sobre las variables del ejemplo anterior: console.log(typeof s); // \"string\" console.log(typeof n); // \"number\" console.log(typeof b); // \"boolean\" console.log(typeof u); // \"undefined\" Como se puede ver, mediante la funci\u00f3n typeof podremos determinar que tipo de dato se esconde en una variable. Observa tambi\u00e9n que la variable u , al haber sido declarada sin valor, Javascript le da un tipo de dato especial: undefined ( sin definir ). La funci\u00f3n typeof() solo sirve para variables con tipos de datos b\u00e1sicos o primitivos.","title":"Utilizando typeof()"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#utilizando-constructorname","text":"M\u00e1s adelante, nos encontraremos que en muchos casos, typeof() resulta insuficiente porque en tipos de datos m\u00e1s avanzados simplemente nos indica que son objetos . Con constructor.name podemos obtener el tipo de constructor que se utiliza, un concepto que veremos m\u00e1s adelante dentro del tema de clases. De momento, si lo necesitamos, podemos comprobarlo as\u00ed: console.log(s.constructor.name); // String console.log(n.constructor.name); // Number console.log(b.constructor.name); // Boolean console.log(u.constructor.name); // ERROR, s\u00f3lo funciona con variables definidas OJO : S\u00f3lo funciona en variables definidas ( no undefined ) y s\u00f3lo en ECMAScript 6. Que Javascript determine los tipos de datos autom\u00e1ticamente no quiere decir que debamos despreocuparnos por ello. En muchos casos, debemos conocer el tipo de dato de una variable e incluso necesitaremos convertirla a otros tipos de datos antes de usarla. M\u00e1s adelante veremos formas de convertir entre tipos de datos.","title":"Utilizando constructor.name"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#variables-y-constantes","text":"En javascript es muy sencillo declarar y utilizar variables, pero aunque sea un procedimiento simple, hay que tener una serie de conceptos previos muy claros antes de continuar para evitar futuras confusiones, sobre todo si estamos acostumbrados a otros lenguajes m\u00e1s tradicionales.","title":"Variables y constantes"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#variables","text":"En programaci\u00f3n, las variables son espacios donde se puede guardar informaci\u00f3n y asociarla a un determinado nombre. De esta forma, cada vez que se consulte ese nombre posteriormente, te devolver\u00e1 la informaci\u00f3n que contiene. La primera vez que se realiza este paso se suele llamar inicializar una variable . En Javascript, si una variable no est\u00e1 inicializada, contendr\u00e1 un valor especial: undefined , que significa que su valor no est\u00e1 definido a\u00fan, o lo que es lo mismo, que no contiene informaci\u00f3n: var a; // Declaramos una variable \"a\", pero no le asociamos ning\u00fan contenido. var b = 0; // Declaramos una variable de nombre \"b\", y le asociamos el n\u00famero 0. console.log(b); // Muestra 0 (el valor guardado en la variable \"b\") console.log(a); // Muestra \"undefined\" (no hay valor guardado en la variable \"a\") Como se puede observar, hemos utilizado console.log() para consultar la informaci\u00f3n que contienen las variables indicadas. OJO : Las may\u00fasculas y min\u00fasculas en los nombres de las variables de Javascript importan . No es lo mismo una variable llamada precio que una variable llamada Precio , pueden contener valores diferentes. Si tenemos que declarar muchas variables consecutivas, una buena pr\u00e1ctica suele ser escribir s\u00f3lo el primer var y separar por comas las diferentes variables con sus respectivos contenidos ( m\u00e9todo 3 ). Aunque se podr\u00eda escribir todo en una misma l\u00ednea ( m\u00e9todo 2 ), con el \u00faltimo m\u00e9todo el c\u00f3digo es mucho m\u00e1s f\u00e1cil de leer: // M\u00e9todo 1: Declaraci\u00f3n de variables de forma independiente var a = 3; var c = 1; var d = 2; // M\u00e9todo 2: Declaraci\u00f3n masiva de variables con el mismo var var a = 3, c = 1, d = 2; // M\u00e9todo 3: Igual al anterior, pero mejorando la legibilidad del c\u00f3digo var a = 3, c = 1, d = 2; Como su propio nombre indica, una variable puede variar su contenido, ya que aunque contenga una cierta informaci\u00f3n, se puede volver a cambiar. A esta acci\u00f3n ya no se le llama inicializar una variable, sino declarar una variable ( o m\u00e1s concretamente, redeclarar ). En el c\u00f3digo se puede diferenciar porque se omite el var : var a = 40; // Inicializamos la variable \"a\" al valor 40. a = 50; // Ahora, hemos declarado que pasa a contener 50 en lugar de 40.","title":"Variables"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#ambitos-de-variables-var","text":"Cuando inicializamos una variable al principio de nuestro programa y le asignamos un valor, ese valor generalmente est\u00e1 disponible a lo largo de todo el programa. Sin embargo, esto puede variar dependiendo de m\u00faltiples factores. Se conoce como \u00e1mbito de una variable a la zona donde esa variable sigue existiendo. Por ejemplo, si consultamos el valor de una variable antes de inicializarla, no existe: console.log(e); // Muestra \"undefined\", en este punto la variable \"e\" no existe var e = 40; console.log(e); // Aqu\u00ed muestra 40, existe porque ya se ha inicializado anteriormente En el ejemplo anterior, el \u00e1mbito de la variable e comienza a partir de su inicializaci\u00f3n y \"vive\" hasta el final del programa. A esto se le llama \u00e1mbito global y es el ejemplo m\u00e1s sencillo. M\u00e1s adelante veremos que se va complicando y a veces no resulta tan obvio saber en que \u00e1mbito se encuentra. En el enfoque tradicional de Javascript, es decir, cuando se utiliza la palabra clave var para declarar variables, existen dos \u00e1mbitos principales: \u00e1mbito global y \u00e1mbito a nivel de funci\u00f3n . Observemos el siguiente ejemplo: var a = 1; console.log(a); // Aqu\u00ed accedemos a la \"a\" global, que vale 1 function x() { console.log(a); // En esta l\u00ednea el valor de \"a\" es undefined var a = 5; // Aqu\u00ed creamos una variable \"a\" a nivel de funci\u00f3n console.log(a); // Aqu\u00ed el valor de \"a\" es 5 (a nivel de funci\u00f3n) console.log(window.a); // Aqu\u00ed el valor de \"a\" es 1 (\u00e1mbito global) } x(); // Aqu\u00ed se ejecuta el c\u00f3digo de la funci\u00f3n x() console.log(a); // En esta l\u00ednea el valor de \"a\" es 1 En el ejemplo anterior vemos que el valor de a dentro de una funci\u00f3n no es el 1 inicial, sino que estamos en otro \u00e1mbito diferente donde la variable a anterior no existe: un \u00e1mbito a nivel de funci\u00f3n . Mientras estemos dentro de una funci\u00f3n, las variables inicializadas en ella estar\u00e1n en el \u00e1mbito de la propia funci\u00f3n. OJO : Podemos utilizar el objeto especial window para acceder directamente al \u00e1mbito global independientemente de donde nos encontremos. Esto ocurre as\u00ed porque las variables globales se almacenan dentro del objeto window ( la pesta\u00f1a actual del navegador web ). var a = 1; console.log(a); // Aqu\u00ed accedemos a la \"a\" global, que vale 1 function x() { console.log(a); // En esta l\u00ednea el valor de \"a\" es 1 a = 5; // Aqu\u00ed creamos una variable \"a\" en el \u00e1mbito anterior console.log(a); // Aqu\u00ed el valor de \"a\" es 5 (a nivel de funci\u00f3n) console.log(window.a); // Aqu\u00ed el valor de \"a\" es 5 (\u00e1mbito global) } x(); // Aqu\u00ed se ejecuta el c\u00f3digo de la funci\u00f3n x() console.log(a); // En esta l\u00ednea el valor de \"a\" es 5 En este ejemplo se omite el var dentro de la funci\u00f3n, y vemos que en lugar de crear una variable en el \u00e1mbito de la funci\u00f3n, se modifica el valor de la variable a a nivel global. Dependiendo de donde y como accedamos a la variable a , obtendremos un valor u otro. Siempre que sea posible se deber\u00eda utilizar let y const ( ver a continuaci\u00f3n ), en lugar de var . Declarar variables mediante var se recomienda en fases de aprendizaje o en el caso de que se quiera mantener compatibilidad con navegadores muy antiguos utilizando ECMAScript 5, sin embargo, hay estrategias mejores a seguir que utilizar var en la actualidad.","title":"\u00c1mbitos de variables: var"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#ambitos-de-variables-let","text":"En las versiones modernas de Javascript ( ES6 o ECMAScript 2015 ) o posteriores, se introduce la palabra clave let en sustituci\u00f3n de var . Con ella, en lugar de utilizar los \u00e1mbitos globales y a nivel de funci\u00f3n ( var ), utilizamos los \u00e1mbitos cl\u00e1sicos de programaci\u00f3n: \u00e1mbito global y \u00e1mbito local . La diferencia se puede ver claramente en el uso de un bucle for con var y con let : /** Opci\u00f3n 1: Bucle con let **/ console.log(\"Antes: \", p); // Antes: undefined for (let p = 0; p < 3; p++) console.log(\"- \", p); // Durante: 0, 1, 2 console.log(\"Despu\u00e9s: \", p); // Despu\u00e9s: undefined /** Opci\u00f3n 2: Bucle con var **/ console.log(\"Antes: \", p); // Antes: undefined for (var p = 0; p < 3; p++) console.log(\"- \", p); // Durante: 0, 1, 2 console.log(\"Despu\u00e9s: \", p); // Despu\u00e9s: 3 (WTF!) Vemos que utilizando let la variable p s\u00f3lo existe dentro del bucle, \u00e1mbito local, mientras que utilizando var la variable p sigue existiendo fuera del bucle, ya que debe tener un \u00e1mbito global o a nivel de funci\u00f3n.","title":"\u00c1mbitos de variables: let"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#constantes","text":"De forma tradicional, Javascript no incorporaba constantes. Sin embargo, en ECMAScript 2015 ( ES6 ) se a\u00f1ade la palabra clave const , que inicializada con un valor concreto, permite crear variables con valores que no pueden ser cambiados. const NAME = \"Manz\"; console.log(NAME); En el ejemplo anterior vemos un ejemplo de const , que funciona de forma parecida a let . Una buena pr\u00e1ctica es escribir el nombre de la constante en may\u00fasculas, para identificar r\u00e1pidamente que se trata de una constante y no una variable, cuando leemos c\u00f3digo ajeno. Realmente, las constantes de Javascript son variables inicializadas a un valor espec\u00edfico y que no pueden redeclararse. No confundir con valores inmutables, ya que como veremos posteriormente, los objetos si pueden ser modificados a\u00fan siendo constantes.","title":"Constantes"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#objetos-basicos","text":"Uno de los aspectos m\u00e1s importantes del lenguaje Javascript es el concepto de objeto , puesto que pr\u00e1cticamente todo lo que utilizamos en Javascript, son objetos. Sin embargo, tiene ligeras diferencias con los objetos de otros lenguajes de programaci\u00f3n, as\u00ed que vamos a comenzar con una explicaci\u00f3n sencilla y m\u00e1s adelante ampliaremos este tema en profundidad.","title":"Objetos b\u00e1sicos"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#que-son-los-objetos","text":"En Javascript, existe un tipo de dato llamado objeto . No es m\u00e1s que una variable especial que puede contener m\u00e1s variables en su interior. De esta forma, tenemos la posibilidad de organizar m\u00faltiples variables de la misma tem\u00e1tica dentro de un objeto. Veamos algunos ejemplos: En muchos lenguajes de programaci\u00f3n, para crear un objeto se utiliza la palabra clave new . En Javascript tambi\u00e9n se puede hacer: const objeto = new Object(); // Esto es un objeto \u00abgen\u00e9rico\u00bb vac\u00edo Sin embargo, siempre que podamos, en Javascript se prefiere utilizar lo que se llaman los literales , un m\u00e9todo abreviado para crear objetos directamente, sin necesidad de utilizar la palabra new .","title":"\u00bfQu\u00e9 son los objetos?"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#declaracion-de-un-objeto","text":"Los literales de los objetos en Javascript son las llaves {} . Este ejemplo es equivalente al anterior, pero es m\u00e1s corto, r\u00e1pido y c\u00f3modo, por lo que se aconseja declararlos as\u00ed: const objeto = {}; // Esto es un objeto vac\u00edo Pero hasta ahora, solo hemos creado un objeto vac\u00edo. Vamos a crear un nuevo objeto, que contenga variables con informaci\u00f3n en su interior: // Declaraci\u00f3n del objeto const player = { name: \"Manz\", life: 99, strength: 10, }; Estas variables dentro de los objetos se suelen denominar propiedades . Como se puede ver, un objeto en Javascript nos permite encapsular en su interior informaci\u00f3n relacionada, para posteriormente poder acceder a ella de forma m\u00e1s sencilla e intuitiva.","title":"Declaraci\u00f3n de un objeto"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#acceso-a-sus-propiedades","text":"Una vez tengamos un objeto, podemos acceder a sus propiedades de dos formas diferentes: a trav\u00e9s de la notaci\u00f3n con puntos o a trav\u00e9s de la notaci\u00f3n con corchetes . // Notaci\u00f3n con puntos console.log(player.name); // Muestra \"Manz\" console.log(player.life); // Muestra 99 // Notaci\u00f3n con corchetes console.log(player[\"name\"]); // Muestra \"Manz\" console.log(player[\"life\"]); // Muestra 99 El programador puede utilizar la notaci\u00f3n que m\u00e1s le guste. La m\u00e1s utilizada en Javascript suele ser la notaci\u00f3n con puntos , mientras que la notaci\u00f3n con corchetes se suele conocer en otros lenguajes como \u00abarrays asociativos\u00bb. A algunos programadores puede resultarles confuso utilizar objetos con la notaci\u00f3n de corchetes, ya que en otros lenguajes de programaci\u00f3n los objetos y los arrays asociativos son cosas diferentes, y en Javascript ambos conceptos se mezclan. Hay ciertos casos en los que s\u00f3lo se puede utilizar la notaci\u00f3n con corchetes , como por ejemplo cuando se utilizan espacios en el nombre de la propiedad. Es imposible hacerlo con la notaci\u00f3n con puntos.","title":"Acceso a sus propiedades"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#anadir-propiedades","text":"Tambi\u00e9n podemos a\u00f1adir propiedades al objeto despu\u00e9s de haberlo creado, aunque la sintaxis cambia ligeramente. Veamos un ejemplo equivalente al anterior: // Declaraci\u00f3n del objeto const player = {}; // A\u00f1adimos mediante notaci\u00f3n con puntos player.name = \"Manz\"; player.life = 99; player.strength = 10; // A\u00f1adimos mediante notaci\u00f3n con corchetes player[\"name\"] = \"Manz\"; player[\"life\"] = 99; player[\"strength\"] = 10; Las propiedades del objeto pueden ser utilizadas como variables. De hecho, utilizar los objetos como elementos para organizar m\u00faltiples variables suele ser una buena pr\u00e1ctica en Javascript.","title":"A\u00f1adir propiedades"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#tipos-de-objetos","text":"Hasta ahora, solo hemos visto los objetos \u00abgen\u00e9ricos\u00bb, en Javascript conocidos como tipo , declar\u00e1ndolos con un new Object() o con un literal {} , dos formas equivalentes de hacer lo mismo. Al generar una variable de tipo , esa variable \u00abhereda\u00bb una serie de m\u00e9todos ( del objeto Object en este caso ). const o = {}; o.toString(); // Devuelve '[object Object]' (Un objeto de tipo Object) En este ejemplo, toString() es uno de esos m\u00e9todos que tienen todas las variables de tipo . Sin embargo, hasta ahora y sin saberlo, cuando creamos una variable de un determinado tipo de dato ( sea primitivo o no ), es tambi\u00e9n de tipo , ya que todas las variables heredan de este tipo de dato. Por lo tanto, nuestra variable tendr\u00e1 no s\u00f3lo los m\u00e9todos de su tipo de dato, sino tambi\u00e9n los m\u00e9todos heredados de : const s = \"hola\"; s.toString(); // Devuelve 'hola' M\u00e1s adelante, veremos los m\u00e9todos que heredan las variables de tipo y comprobaremos que los objetos tienen detr\u00e1s de si muchos m\u00e1s conceptos que los que hemos visto hasta ahora y que su definici\u00f3n es mucho m\u00e1s amplia.","title":"Tipos de objetos"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#variables-numericas-number","text":"En Javascript crear variables num\u00e9ricas es muy sencillo, pero hay que conocer bien como trabajar con ellas y los diferentes m\u00e9todos de los que dispone.","title":"Variables num\u00e9ricas (Number)"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#que-es-una-variable-numerica","text":"En Javascript, los n\u00fameros son uno de los tipos de datos b\u00e1sicos ( tipos primitivos ) que para crearlos, simplemente basta con escribirlos. No obstante, en Javascript todo son objetos, como veremos m\u00e1s adelante, y tambi\u00e9n se pueden declarar como si fueran un objeto: Constructor Descripci\u00f3n new Number(n) Crea un objeto num\u00e9rico a partir del n\u00famero n pasado por par\u00e1metro. n Simplemente, el n\u00famero en cuesti\u00f3n. Notaci\u00f3n preferida . Sin embargo, aunque existan varias formas de declararlos, no se suele utilizar la notaci\u00f3n new con objetos primitivos ya que es bastante m\u00e1s tedioso y complicado que utilizar la notaci\u00f3n de literales: // Literales const n1 = 4; const n2 = 15.8; // Objetos const n1 = new Number(4); const n2 = new Number(15.8); Cualquier par\u00e1metro pasado al new Number() que no sea un n\u00famero, dar\u00e1 como resultado un valor NaN ( ver m\u00e1s adelante ).","title":"\u00bfQu\u00e9 es una variable num\u00e9rica?"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#constantes-numericas","text":"Existe una serie de constantes definidas en relaci\u00f3n a las variables num\u00e9ricas. La mayor\u00eda de ellas establecen l\u00edmites m\u00e1ximos y m\u00ednimos, veamos su significado: Constante Valor en Javascript Descripci\u00f3n Number.POSITIVE_INFINITY Infinity Infinito positivo: +\u221e Number.NEGATIVE_INFINITY -Infinity Infinito negativo: -\u221e Number.MAX_VALUE 1.7976931348623157e+308 Valor m\u00e1s grande Number.MIN_VALUE 5e-324 Valor m\u00e1s peque\u00f1o Number.MAX_SAFE_INTEGER 9007199254740991 Valor seguro m\u00e1s grande Number.MIN_SAFE_INTEGER -9007199254740991 Valor seguro m\u00e1s peque\u00f1o Number.EPSILON 2``-52 N\u00famero muy peque\u00f1o: \u03b5 Number.NaN NaN Not A Number La diferencia entre Number.MAX_VALUE y Number.MAX_SAFE_INTEGER es que, el primero es el valor m\u00e1ximo que es posible representar en Javascript. Por otro lado, el segundo es el valor m\u00e1ximo para realizar c\u00e1lculos con seguridad en Javascript. Los lenguajes de programaci\u00f3n est\u00e1n sujetos a la precisi\u00f3n num\u00e9rica debido a la forma interna en la que guardan valores num\u00e9ricos. Si necesitamos realizar operaciones con muy alta precisi\u00f3n num\u00e9rica en Javascript, se recomienda utilizar librer\u00edas como decimal.js o bigNumber.js .","title":"Constantes num\u00e9ricas"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#nan-not-a-number","text":"El acr\u00f3nimo NaN es un valor especial de Javascript que significa Not A Number ( No es un n\u00famero ). Este valor se usa para representar valores imposibles o indeterminados, como por ejemplo, resultados matem\u00e1ticos de operaciones como: 0 / 0 (Indeterminaciones) 4 - 'a' (Valores imposibles) NaN + 4 (Operaciones con NaN como operando) Este valor se utiliza habitualmente para detectar si una operaci\u00f3n ha fallado o ha dado un valor no representable. Sin embargo, no podemos compararlo literalmente con NaN , sino que tenemos que usar la funci\u00f3n Number.isNaN() : let num = NaN; // La siguiente operaci\u00f3n, contra toda l\u00f3gica, es falsa num == NaN; // false // Se debe usar Number.isNaN() para comprobar si el valor es NaN Number.isNaN(num); // true // Si comprobamos el tipo de dato de NaN, nos dir\u00e1 que es num\u00e9rico typeof num; // number Como se puede ver en la \u00faltima l\u00ednea del ejemplo anterior, mencionar que en Javascript, si comprobamos el tipo de dato de NaN con typeof nos dir\u00e1 que es un n\u00famero. Puede parecer il\u00f3gico que Not A Number sea un n\u00famero, esto ocurre porque NaN est\u00e1 en un contexto num\u00e9rico. En otras palabras, dentro de los tipos de datos num\u00e9ricos, NaN es un conjunto de n\u00fameros que no se pueden representar.","title":"NaN (Not A Number)"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#comprobaciones-numericas","text":"En Javascript tenemos varias funciones para conocer la naturaleza de una variable num\u00e9rica (n\u00famero finito, n\u00famero entero, n\u00famero seguro o si no es representable como un n\u00famero). Las podemos ver a continuaci\u00f3n en la siguiente tabla: M\u00e9todo Descripci\u00f3n Number.isFinite( n ) Comprueba si n es un n\u00famero finito. Number.isInteger( n ) Comprueba si n es un n\u00famero entero. Number.isSafeInteger( n ) Comprueba si n es un n\u00famero seguro. Number.isNaN( n ) Comprueba si n no es un n\u00famero. Ten en cuenta que estas funciones devuelven un booleano ( valor de verdadero o falso ), lo que lo hace ideales para usarlas como condiciones en bucles o condicionales. A continuaci\u00f3n veamos dos ejemplos para cada una de estas funciones: // \u00bfN\u00famero finito? Number.isFinite(42); // true Number.isFinite(Infinity); // false, es infinito // \u00bfN\u00famero entero? Number.isInteger(5); // true Number.isInteger(4.6); // false, es decimal // \u00bfN\u00famero seguro? Number.isSafeInteger(1e15); // true Number.isSafeInteger(1e16); // false, es un valor no seguro // \u00bfNo es un n\u00famero? Number.isNaN(NaN); // true Number.isNaN(5); // false, es un n\u00famero Recuerda no hacer comprobaciones directas con NaN, sino utilizar la funci\u00f3n Number.isNaN() .","title":"Comprobaciones num\u00e9ricas"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#conversion-numerica","text":"En muchos casos tendremos variables de texto que nos interesa convertir a n\u00famero, para realizar operaciones posteriormente con ellas. Para ello, lo ideal es utilizar las funciones de parseo num\u00e9rico, parseInt() y parseFloat() . Veamos cuales son y c\u00f3mo se pueden utilizar: M\u00e9todo Descripci\u00f3n Number.parseInt( s ) Convierte una cadena de texto s en un n\u00famero entero. Number.parseInt( s , radix ) Idem al anterior, pero desde una base radix . Number.parseFloat( s ) Convierte una cadena de texto s en un n\u00famero decimal. Number.parseFloat( s , radix ) Idem al anterior, pero desde una base radix . Para ilustrar esto, veamos un ejemplo con parseInt() cuando solo le pasamos un par\u00e1metro ( un texto ) que queremos convertir a n\u00famero: Number.parseInt(\"42\"); // 42 Number.parseInt(\"42\u20ac\"); // 42 Number.parseInt(\"N\u00fam. 42\"); // NaN Number.parseInt(\"A\"); // NaN Nota que la funci\u00f3n parseInt() funciona perfectamente para variables de texto que contienen n\u00fameros o que empiezan por n\u00fameros. Esto es muy \u00fatil para eliminar unidades de variables de texto. Sin embargo, si la variable de texto comienza por un valor que no es num\u00e9rico, parseInt() devolver\u00e1 un NaN . Si lo que queremos es quedarnos con el n\u00famero que aparece m\u00e1s adelante en la variable de texto, habr\u00e1 que manipular ese texto con alguna de las funciones que veremos en el apartado de variables de texto. Veamos ahora que ocurre si utilizamos parseInt() con dos par\u00e1metros, donde el primero es el texto con el n\u00famero y el segundo es la base num\u00e9rica del n\u00famero: Number.parseInt(\"11101\", 2); // 29 en binario Number.parseInt(\"31\", 8); // 25 en octal Number.parseInt(\"FF\", 16); // 255 en hexadecimal Esta modalidad de parseInt() se suele utilizar cuando queremos pasar a base decimal un n\u00famero que se encuentra en otra base ( binaria, octal, hexadecimal... ). Al igual que con parseInt() tenemos otra funci\u00f3n llamada parseFloat() . Funciona exactamente igual a la primera, s\u00f3lo que la primera est\u00e1 espec\u00edficamente dise\u00f1ada para utilizar con n\u00fameros enteros y la segunda para n\u00fameros decimales. Si utilizamos parseInt() con un n\u00famero decimal, nos quedaremos s\u00f3lo con la parte entera, mientras que parseFloat() la conservar\u00e1.","title":"Conversi\u00f3n num\u00e9rica"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#representacion-numerica","text":"Por \u00faltimo, en el caso de querer cambiar el tipo de representaci\u00f3n num\u00e9rica, podemos utilizar las siguientes funciones para alternar entre exponencial y punto fijo : M\u00e9todo Descripci\u00f3n .toExponential( n ) Convierte el n\u00famero a notaci\u00f3n exponencial con n decimales. .toFixed( n ) Convierte el n\u00famero a notaci\u00f3n de punto fijo con n decimales. .toPrecision( p ) Utiliza p d\u00edgitos de precisi\u00f3n en el n\u00famero. Observemos el siguiente ejemplo aplicando las funciones anteriores al n\u00famero decimal 1.5 : (1.5).toExponential(2); // \"1.50e+0\" en exponencial (1.5).toFixed(2); // \"1.50\" en punto fijo (1.5).toPrecision(1); // \"2\"","title":"Representaci\u00f3n num\u00e9rica"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#operaciones-matematicas-math","text":"Cuando trabajamos con Javascript, es posible realizar gran cantidad de operaciones matem\u00e1ticas de forma nativa, sin necesidad de librer\u00edas externas. Para ello, haremos uso del objeto Math , un objeto interno de Javascript que tiene incorporadas ciertas constantes y m\u00e9todos ( funciones ) para trabajar matem\u00e1ticamente.","title":"Operaciones matem\u00e1ticas (Math)"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#constantes-de-math","text":"El objeto Math de Javascript incorpora varias constantes que podemos necesitar en algunas operaciones matem\u00e1ticas. Veamos su significado y valor aproximado: Constante Descripci\u00f3n Valor Math.E N\u00famero de Euler 2.718281828459045 Math.LN2 Logaritmo natural en base 2 0.6931471805599453 Math.LN10 Logaritmo decimal 2.302585092994046 Math.LOG2E Logaritmo base 2 de E 1.4426950408889634 Math.LOG10E Logaritmo base 10 de E 0.4342944819032518 Math.PI N\u00famero PI o \u03a0 3.141592653589793 Math.SQRT1_2 Ra\u00edz cuadrada de \u00bd 0.7071067811865476 Math.SQRT2 Ra\u00edz cuadrada de 2 1.4142135623730951 Adem\u00e1s de estas constantes, el objeto Math tambi\u00e9n nos proporciona gran cantidad de m\u00e9todos o funciones para trabajar con n\u00fameros. Vamos a analizarlos.","title":"Constantes de Math"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#metodos-matematicos","text":"Los siguientes m\u00e9todos matem\u00e1ticos est\u00e1n disponibles en Javascript a trav\u00e9s del objeto Math . Observa que algunos de ellos s\u00f3lo est\u00e1n disponibles en ECMAScript 6 : M\u00e9todo Descripci\u00f3n Ejemplo Math.abs(x) Devuelve el valor absoluto de x . |x| Math.sign(x) Devuelve el signo del n\u00famero: 1 positivo, -1 negativo Math.exp(x) Exponenciaci\u00f3n . Devuelve el n\u00famero e elevado a x . e``x Math.expm1(x) Equivalente a Math.exp(x) - 1 . e``x``-1 Math.max(a, b, c...) Devuelve el n\u00famero m\u00e1s grande de los indicados por par\u00e1metro. Math.min(a, b, c...) Devuelve el n\u00famero m\u00e1s peque\u00f1o de los indicados por par\u00e1metro. Math.pow(base, exp) Potenciaci\u00f3n . Devuelve el n\u00famero base elevado a exp . base``exp Math.sqrt(x) Devuelve la ra\u00edz cuadrada de x . \u221ax Math.cbrt(x) Devuelve la ra\u00edz c\u00fabica de x . \u221a``3``x Math.imul(a, b) Equivalente a a * b , pero a nivel de bits. Math.clz32(x) Devuelve el n\u00famero de ceros a la izquierda de x en binario (32 bits). Veamos algunos ejemplos aplicados a las mencionadas funciones anteriormente: Math.abs(-5); // 5 Math.sign(-5); // -1 Math.exp(1); // e, o sea, 2.718281828459045 Math.expm1(1); // 1.718281828459045 Math.max(1, 40, 5, 15); // 40 Math.min(5, 10, -2, 0); // -2 Math.pow(2, 10); // 1024 Math.sqrt(2); // 1.4142135623730951 Math.cbrt(2); // 1.2599210498948732 Math.imul(0xffffffff, 7); // -7 // Ejemplo de clz32 (count leading zeros) const x = 1; \"0\".repeat(Math.clz32(x)) + x.toString(2); // Devuelve \"00000000000000000000000000000001\" Existe uno m\u00e1s, Math.random() que merece una explicaci\u00f3n m\u00e1s detallada, por lo que lo explicamos en el apartado siguiente.","title":"M\u00e9todos matem\u00e1ticos"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#metodo-mathrandom","text":"Uno de los m\u00e9todos m\u00e1s \u00fatiles e interesantes del objeto Math es Math.random() . M\u00e9todo Descripci\u00f3n Ejemplo Math.random() Devuelve un n\u00famero al azar entre 0 y 1 con 16 decimales. Este m\u00e9todo nos da un n\u00famero al azar entre los valores 0 y 1 , con 16 decimales. Normalmente, cuando queremos trabajar con n\u00fameros aleatorios, lo que buscamos es obtener un n\u00famero entero al azar entre a y b . Para ello, se suele hacer lo siguiente: // Obtenemos un n\u00famero al azar entre [0, 1) con 16 decimales let x = Math.random(); // Multiplicamos dicho n\u00famero por el valor m\u00e1ximo que buscamos (5) x = x * 5; // Redondeamos inferiormente, qued\u00e1ndonos s\u00f3lo con la parte entera x = Math.floor(x); Este ejemplo nos dar\u00e1 en x un valor al azar entre 0 y 5 ( 5 no incluido ). Lo hemos realizado por pasos para entenderlo mejor, pero podemos realizarlo directamente como se ve en el siguiente ejemplo: // N\u00famero al azar entre 0 y 5 (no incluido) const x = Math.floor(Math.random() * 5); // Equivalente al anterior const x = ~~(Math.random() * 5); Como se puede ver en el segundo ejemplo anterior, utilizamos el operador a nivel de bits ~~ ( doble negaci\u00f3n ) como reemplazo r\u00e1pido de Math.floor() , una funci\u00f3n que realiza un redondeo inferior, y que veremos al final de este tema. Si lo deseas, puedes utilizar librer\u00edas espec\u00edficas para generar n\u00fameros aleatorios como random.js o chance.js , esta \u00faltima permitiendo incluso generar otros tipos de datos aleatorios como textos, GUIDs o colores hexadecimales.","title":"M\u00e9todo Math.random()"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#metodos-de-logaritmos","text":"Javascript incorpora varios m\u00e9todos en el objeto Math para trabajar con logaritmos. Desde logaritmos neperianos hasta logaritmos binarios a trav\u00e9s de las siguientes funciones: M\u00e9todo Descripci\u00f3n y Ejemplo Math.log(x) Devuelve el logaritmo natural en base e de x . Ej: log``e x o ln x Math.log10(x) Devuelve el logaritmo decimal (en base 10) de x . Ej: log``10 x \u00f3 log x Math.log2(x) Devuelve el logaritmo binario (en base 2) de x . Ej: log``2 x Math.log1p(x) Devuelve el logaritmo natural de (1+x) . Ej: log``e (1+x) o ln (1+x) A continuaci\u00f3n, unos ejemplos de estas funciones aplicadas: Math.log(2); // 0.6931471805599453 Math.log10(2); // 0.3010299956639812 Math.log2(2); // 1 Math.log1p(2); // 1.0986122886681096","title":"M\u00e9todos de logaritmos"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#metodos-de-redondeo","text":"Como hemos visto anteriormente, es muy com\u00fan necesitar m\u00e9todos para redondear n\u00fameros y reducir el n\u00famero de decimales o aproximar a una cifra concreta. Para ello, de forma nativa, Javascript proporciona los siguientes m\u00e9todos de redondeo: M\u00e9todo Descripci\u00f3n Math.round(x) Devuelve el redondeo de x ( el entero m\u00e1s cercano ) Math.ceil(x) Devuelve el redondeo superior de x . ( el entero m\u00e1s alto ) Math.floor(x) Devuelve el redondeo inferior de x . ( el entero m\u00e1s bajo ) Math.fround(x) Devuelve el redondeo de x ( flotante con precisi\u00f3n simple ) Math.trunc(x) Trunca el n\u00famero x ( devuelve s\u00f3lo la parte entera ) Veamos las diferencias de utilizar los diferentes m\u00e9todos anteriores para redondear un n\u00famero decimal y los resultados obtenidos: // Redondeo natural, el m\u00e1s cercano Math.round(3.75); // 4 Math.round(3.25); // 3 // Redondeo superior (el m\u00e1s alto) Math.ceil(3.75); // 4 Math.ceil(3.25); // 4 // Redondeo inferior (el m\u00e1s bajo) Math.floor(3.75); // 3 Math.floor(3.25); // 3 // Redondeo con precisi\u00f3n Math.round(3.123456789); // 3 Math.fround(3.123456789); // 3.1234567165374756 // Truncado (s\u00f3lo parte entera) Math.trunc(3.75); // 3 Math.round(-3.75); // -4 Math.trunc(-3.75); // -3","title":"M\u00e9todos de redondeo"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#metodos-trigonometricos","text":"Por \u00faltimo, y no por ello menos importante, el objeto Math nos proporciona de forma nativa una serie de m\u00e9todos trigonom\u00e9tricos, que nos permiten hacer c\u00e1lculos con operaciones como seno , coseno , tangente y relacionados: M\u00e9todo Descripci\u00f3n Math.sin(x) Seno de x Math.asin(x) Arcoseno de x Math.sinh(x) Seno hiperb\u00f3lico de x Math.asinh(x) Arcoseno hiperb\u00f3lico de x Math.cos(x) Coseno de x Math.acos(x) Arcocoseno de x Math.cosh(x) Coseno hiperb\u00f3lico de x Math.acosh(x) Arcocoseno hiperb\u00f3lico de x Math.tan(x) Tangente de x Math.atan(x) Arcotangente de x Math.tanh(x) Tangente hiperb\u00f3lica de x Math.atanh(x) Arcotangente hiperb\u00f3lica de x Math.atan2(x, y) Arcotangente del conciente de x/y Math.hypot(a, b..) Devuelve la ra\u00edz cuadrada de a``2 + b``2 + ...","title":"M\u00e9todos trigonom\u00e9tricos"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#otras-librerias-matematicas","text":"Si de forma nativa no encuentras una forma sencilla de resolver el problema matem\u00e1tico que tienes entre manos, no olvides que existen una serie de librer\u00edas de terceros que pueden hacernos la vida m\u00e1s f\u00e1cil a la hora de trabajar con otros valores matem\u00e1ticos. A continuaci\u00f3n, detallamos algunas de ellas: Librer\u00eda Descripci\u00f3n GitHub Math.js Librer\u00eda matem\u00e1tica de prop\u00f3sito general. josdejong/mathjs Fraction.js Librer\u00eda matem\u00e1tica para trabajar con fracciones. infusion/Fraction.js Polynomial.js Librer\u00eda matem\u00e1tica para trabajar con polinomios. infusion/Polynomial.js Complex.js Librer\u00eda matem\u00e1tica para trabajar con n\u00fameros complejos. infusion/Complex.js Angles.js Librer\u00eda matem\u00e1tica para trabajar con \u00e1ngulos. infusion/Angles.js BitSet.js Librer\u00eda matem\u00e1tica para trabajar con vectores de bits. infusion/BitSet.js Habr\u00e1s comprobado que, al contrario que muchos otros objetos de Javascript, en estas ocasiones hemos indicado expl\u00edcitamente el objeto, por ejemplo Math.round(numero) , en lugar de hacerlo sobre la variable: numero.round() . Esto ocurre porque Math es un objeto con m\u00e9todos y constantes est\u00e1ticas , algo que veremos en profundidad en futuros temas.","title":"Otras librer\u00edas matem\u00e1ticas"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#variables-de-texto-string","text":"En Javascript y en el mundo del desarrollo web, una de las tareas que m\u00e1s solemos hacer es manejar cadenas de texto y realizando tareas con ellas. Por lo tanto, tenemos que familiarizarnos con el tipo de dato .","title":"Variables de texto (String)"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#que-es-un-string","text":"En programaci\u00f3n, cuando hablamos de una varible que posee informaci\u00f3n de texto, decimos que su tipo de dato es . En Javascript, es muy sencillo crear una variable de texto, hay dos formas de hacerlo: Constructor|Descripci\u00f3n :---|:---| new String(s) |Crea un objeto de texto a partir del texto s pasado por par\u00e1metro. 's' |Simplemente, el texto entre comillas. Notaci\u00f3n preferida . Los son tipos de datos primitivos, y como tal, es m\u00e1s sencillo utilizar los literales que la notaci\u00f3n con new . Para englobar los textos, se pueden utilizar comillas simples ' , comillas dobles \" o backticks ` ( ver m\u00e1s adelante ). Aunque es posible utilizar comillas simples o comillas dobles en los , se recomienda decantarse por uno de los dos estilos y no mezclarlos. Muchas empresas o equipos de desarrollo tienen gu\u00edas de estilos para delimitar cu\u00e1l utilizar. A continuaci\u00f3n, un ejemplo de declaraci\u00f3n de variables de texto en Javascript: // Literales const texto1 = \"\u00a1Hola a todos!\"; const texto2 = \"Otro mensaje de texto\"; // Objeto const texto1 = new String(\"\u00a1Hola a todos!\"); const texto2 = new String(\"Otro mensaje de texto\"); A diferencia de otros lenguajes de programaci\u00f3n, que separan el tipo de dato ( cadena de texto ) del tipo de dato char ( un solo car\u00e1cter ), Javascript los mantiene a ambos dentro del tipo de dato , por lo que una variable, aunque s\u00f3lo contenga un car\u00e1cter, sigue siendo un .","title":"\u00bfQu\u00e9 es un string?"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#propiedades","text":"Al crear una variable con contenido de texto, o sea un , autom\u00e1ticamente, esa variable pasa a tener a su disposici\u00f3n todas las propiedades y m\u00e9todos disponibles para este tipo de dato, por lo que podemos utilizarlos en nuestro c\u00f3digo como iremos viendo a continuaci\u00f3n. Propiedad|Descripci\u00f3n :---|:---| .length |Devuelve el n\u00famero de car\u00e1cteres de la variable de tipo string en cuesti\u00f3n. En el caso de los strings, solo tenemos una propiedad, .length , que devuelve el tama\u00f1o de la variable de texto en cuesti\u00f3n. N\u00f3tese en los siguientes ejemplos que se han utilizado directamente, sin necesidad de guardarlos en una variable antes: \"Hola\".length; // 4 \"Adi\u00f3s\".length; // 5 \"\".length; // 0 \"\u00a1Yeah!\".length; // 6 Pero las caracter\u00edsticas m\u00e1s interesantes de los strings se encuentran en los m\u00e9todos de dicho tipo de dato. Ten en cuenta que, en las variables de texto, los m\u00e9todos se ejecutan sobre el propio texto del , devolviendo informaci\u00f3n modificada a partir de este. Vamos a dar un repaso a los m\u00e9todos que existen.","title":"Propiedades"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#metodos-de-posiciones","text":"En primer lugar existen varios m\u00e9todos que permiten darnos informaci\u00f3n sobre la posici\u00f3n o ubicaci\u00f3n que ocupa un determinado car\u00e1cter o texto. Esta posici\u00f3n tambi\u00e9n suele denominarse \u00edndice . Veamos detalladamente dicho m\u00e9todos: M\u00e9todo Descripci\u00f3n Oper. .charAt(pos) Devuelve el car\u00e1cter en la posici\u00f3n pos de la variable. [] .concat(str1, str2...) Devuelve el texto de la variable unido a str1 , a str2 ... + .indexOf(str) Devuelve la primera posici\u00f3n del texto str . .indexOf(str, from) Idem al anterior, partiendo desde la posici\u00f3n from . .lastIndexOf(str, from) Idem al anterior, pero devuelve la \u00faltima posici\u00f3n. El m\u00e9todo .charAt(pos) nos permite comprobar que car\u00e1cter se encuentra en la posici\u00f3n pos del texto. Este m\u00e9todo devolver\u00e1 un con dicho car\u00e1cter. En caso de pasarle una posici\u00f3n que no existe o imposible ( negativa ), simplemente nos devolver\u00e1 un vac\u00edo . El valor por defecto de pos es 0 . No obstante, es preferible utilizar el operador [] para obtener el car\u00e1cter que ocupa una posici\u00f3n, ya que es m\u00e1s corto y r\u00e1pido de utilizar y mucho m\u00e1s claro. La diferencia respecto a charAt() es que el operador [] devuelve si en esa posici\u00f3n no existe ning\u00fan car\u00e1cter. \"Manz\".charAt(0); // 'M' \"Manz\".charAt(1); // 'a' \"Manz\".charAt(10); // '' \"Manz\"[0]; // 'M' \"Manz\"[1]; // 'a' \"Manz\"[10]; // undefined El m\u00e9todo .concat(str1, str2...) permite concatenar ( unir ) los textos pasados por par\u00e1metros al de la propia variable. Al igual que el m\u00e9todo anterior, es preferible utilizar el operador + , ya que es mucho m\u00e1s r\u00e1pido y legible. Mucho cuidado con utilizar el operador + , ya que depende de los tipos de datos con los que se usen puede producir un efecto diferente. El operador + usado con realiza concatenaciones, mientras que usado con realiza sumas. \"Manz\".concat(\"i\", \"to\"); // 'Manzito' \"Manz\" + \"i\" + \"to\"; // 'Manzito' \"Manz\" + 4 + 5; // 'Manz45' 10 + 5 + 4 + 5; // 24 Por \u00faltimo, nos queda el m\u00e9todo indexOf(str, from) , que es la funci\u00f3n opuesta a charAt() . La funci\u00f3n indexOf(str) buscar\u00e1 el subtexto str en nuestra variable y nos devolver\u00e1 un con la posici\u00f3n de la primera aparici\u00f3n de dicho subtexto. En caso de no encontrarlo, devolver\u00e1 -1 . El par\u00e1metro from es opcional, y es la posici\u00f3n en la que empezar\u00e1 a buscar, que por defecto ( si no se suministra ) es 0 . \"LenguajeJS, p\u00e1gina de Javascript\".indexOf(\"n\"); // 2 \"LenguajeJS, p\u00e1gina de Javascript\".indexOf(\"n\", 3); // 16 \"LenguajeJS, p\u00e1gina de Javascript\".indexOf(\"n\", 17); // -1 \"LenguajeJS, p\u00e1gina de Javascript\".lastIndexOf(\"n\"); // 16 \"LenguajeJS, p\u00e1gina de Javascript\".lastIndexOf(\"n\", 3); // 2 El m\u00e9todo lastIndexOf(str, from) funciona exactamente igual que el anterior, s\u00f3lo que realiza la b\u00fasqueda de la \u00faltima aparici\u00f3n en lugar de la primera aparici\u00f3n.","title":"M\u00e9todos de posiciones"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#metodos-para-busquedas","text":"Los siguientes m\u00e9todos se utilizan para realizar b\u00fasquedas o comprobaciones de subtextos en el texto de un : M\u00e9todo Descripci\u00f3n .startsWith(s, from) Comprueba si el texto comienza por s desde la posici\u00f3n from . .endsWith(s, to) Comprueba si el texto hasta la posici\u00f3n to , termina por s . .includes(s, from) Comprueba si el texto contiene el subtexto s desde la posici\u00f3n from . .search(regex) Busca si hay un patr\u00f3n que encaje con regex y devuelve la posici\u00f3n. .match(regex) Idem a la anterior, pero devuelve las coincidencias encontradas. Por ejemplo, el m\u00e9todo startsWith(str, from) devolver\u00e1 true si la variable comienza por el texto proporcionado en str . Si adem\u00e1s se indica el par\u00e1metro opcional from , empezar\u00e1 en la posici\u00f3n from del . De la misma forma, el m\u00e9todo endsWith() comprueba cuando un acaba en str , y el m\u00e9todo includes() comprueba si el subtexto dado est\u00e1 inclu\u00eddo en el . Algunos ejemplos: \"Manz\".startsWith(\"M\"); // true ('Manz' empieza por 'M') \"Manz\".startsWith(\"a\", 1); // true ('anz' empieza por 'a') \"Manz\".endsWith(\"o\"); // false ('Manz' no acaba en 'o') \"Manz\".endsWith(\"n\", 3); // true ('Man' acaba en 'n') \"Manz\".includes(\"an\"); // true ('Manz' incluye 'an') \"Manz\".includes(\"M\", 1); // false ('anz' no incluye 'M') Por otro lado, los m\u00e9todos search() y match() realizan b\u00fasquedas m\u00e1s potentes y flexibles con . La diferencia de cada una es que, mientras el m\u00e9todo search() devuelve la posici\u00f3n, matches() devuelve un con las coincidencias. // La expresi\u00f3n regular /o/g busca globalmente las \"o\" en el texto \"Hola a todos\".search(/o/g); // 1, porque la primera \"o\" est\u00e1 en la posici\u00f3n 1 \"Hola a todos\".match(/o/g); // ['o', 'o', 'o'], las 3 \"o\" que encuentra Las expresiones regulares permiten realizar cosas mucho m\u00e1s avanzadas que las que se muestran en este ejemplo, por lo tanto, las abordaremos en temas posteriores.","title":"M\u00e9todos para b\u00fasquedas"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#metodos-para-transformar","text":"En Javascript podemos utilizar algunos m\u00e9todos para modificar un realizando alguna operaci\u00f3n de transformaci\u00f3n. En esta tabla tenemos dichos m\u00e9todos: M\u00e9todo Descripci\u00f3n .repeat(n) Devuelve el texto de la variable repetido n veces. .toLowerCase() Devuelve el texto de la variable en min\u00fasculas. .toUpperCase() Devuelve el texto de la variable en may\u00fasculas. .trim() Devuelve el texto sin espacios a la izquierda y derecha. .trimStart() Devuelve el texto sin espacios a la izquierda. .trimEnd() Devuelve el texto sin espacios a la derecha. .replace(str|regex, newstr) Reemplaza la primera aparici\u00f3n del texto str por newstr . .replaceAll(str|regex, newstr) Reemplaza todas las apariciones del texto str por newstr . .replace(str|regex, func) Idem a .replace() , pero reemplazando por la devoluci\u00f3n de func . .substr(ini, len) Devuelve el subtexto desde la posici\u00f3n ini hasta ini+len . .substring(ini, end) Devuelve el subtexto desde la posici\u00f3n ini hasta end . .slice(ini, end) Idem a .substr() con leves diferencias . .split(sep|regex, limit) Separa el texto usando sep como separador, en limit fragmentos. .padStart(len, str) Rellena el principio de la cadena con str hasta llegar al tama\u00f1o len . .padEnd(len, str) Rellena el final de la cadena con str hasta llegar al tama\u00f1o len . El m\u00e9todo repeat(n) devuelve como el texto repetido n veces. Por otro lado, los m\u00e9todos toLowerCase() y toUpperCase() devuelven el texto convertido todo a min\u00fasculas o todo a may\u00fasculas respectivamente: \"Na\".repeat(5); // 'NaNaNaNaNa' \"MANZ\".toLowerCase(); // 'manz' \"manz\".toUpperCase(); // 'MANZ' \" Hola \".trim(); // 'Hola' Por \u00faltimo, el m\u00e9todo trim() , informalmente traducido como \u00abafeitar\u00bb se encarga de devolver el texto eliminando los espacios sobrantes que hay a la izquierda o a la derecha del texto ( y s\u00f3lo esos, nunca los que hay entre palabras ). De la misma forma, trimStart() y trimEnd() realizan la misma tarea s\u00f3lo a la izquierda y s\u00f3lo a la derecha respectivamente.","title":"M\u00e9todos para transformar"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#reemplazar-textos","text":"Uno de los m\u00e9todos m\u00e1s interesantes de transformaci\u00f3n de es el replace(str, newstr) . Su funcionalidad m\u00e1s b\u00e1sica, como se ve en el primer ejemplo, se trata de devolver el texto en cuesti\u00f3n, reemplazando el texto str por newstr ( \u00a1y solo la primera aparici\u00f3n! ): \"Amigo\".replace(\"A\", \"Ene\"); // 'Enemigo' \"Dispara\".replace(\"a\", \"i\"); // 'Dispira' (s\u00f3lo reemplaza la primera aparici\u00f3n) \"Dispara\".replace(/a/g, \"i\"); // 'Dispiri' (reemplaza todas las ocurrencias) Si lo que nos interesa es reemplazar todas las apariciones, tendremos que hacer uso de las expresiones regulares , que veremos en temas posteriores a este. A grandes rasgos, en el tercer ejemplo anterior, en lugar de indicar el string 'a' indicamos la expresi\u00f3n regular /a/g que buscar\u00e1 todas las apariciones de a de forma global ( todas las ocurrencias ). Desde ECMAScript {.es2021} es posible utilizar replaceAll() para reemplazar todas las ocurrencias de un texto o de una expresi\u00f3n regular. Funciona exactamente igual que replace() , s\u00f3lo que reemplaza todas las ocurrencias en vez de solamente la primera. Adem\u00e1s, el m\u00e9todo replace() nos permite indicar, como segundo par\u00e1metro una en lugar de un , permitiendo utilizar dicha funci\u00f3n para realizar un proceso m\u00e1s complejo al reemplazar, en lugar de simplemente reemplazar por un . Sin embargo, para aprender a utilizar esta funcionalidad, antes tendremos que aprender los callbacks , que veremos tambi\u00e9n m\u00e1s adelante.","title":"Reemplazar textos"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#extraer-subtextos","text":"Otras de las operaciones fundamentales de los es la posibilidad de extraer peque\u00f1os fragmentos de texto de textos m\u00e1s grandes. Para ello tenemos dos aproximaciones para realizarlo: con el m\u00e9todo substr() o con el m\u00e9todo substring() . En el primer caso, el m\u00e9todo substr(ini, len) nos solicita dos par\u00e1metros, ini , que es la posici\u00f3n inicial del subtexto, y len , que es el tama\u00f1o o longitud que tendr\u00e1 el texto. De esta forma, substr(2, 4) extrae el fragmento de texto desde la posici\u00f3n 2 y desde esa posici\u00f3n 4 posiciones m\u00e1s. En el caso de omitirse el par\u00e1metro len , se devuelve el subtexto hasta el final del texto original: \"Submarino\".substr(3); // 'marino' (desde el 3 en adelante) \"Submarino\".substr(3, 1); // 'm' (desde el 3, hasta el 3+1) \"Submarino\".substring(3); // 'marino' (desde el 3 en adelante) \"Submarino\".substring(3, 6); // 'mar' (desde el 3, hasta el 6) Por otro lado, el m\u00e9todo substring(ini, end) extrae el fragmento de texto desde la posici\u00f3n ini hasta la posici\u00f3n end . De igual forma al anterior, si se omite el par\u00e1metro end , el subtexto abarcar\u00e1 hasta el final del texto original.","title":"Extraer subtextos"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#crear-arrays-a-partir-de-textos","text":"Otro m\u00e9todo muy \u00fatil es split(sep) , un m\u00e9todo que permite dividir un por el substring sep como separador, devolviendo un array con cada una de las partes divididas. Es muy \u00fatil para crear arrays , o dividir en diferentes secciones textos que tienen separadores repetidos como podr\u00edan ser comas, puntos o pipes: \"1.2.3.4.5\".split(\".\"); // ['1', '2', '3', '4', '5'] (5 elementos) \"Hola a todos\".split(\" \"); // ['Hola', 'a', 'todos'] (3 elementos) \"C\u00f3digo\".split(\"\"); // ['C', '\u00f3', 'd', 'i', 'g', 'o'] (6 elementos) En el \u00faltimo ejemplo, el separador es una cadena vac\u00eda , es decir, \u00abning\u00fan car\u00e1cter\u00bb. Si le indicamos a split() que separe por \u00abning\u00fan car\u00e1cter\u00bb, lo que hace es hacer una divisi\u00f3n en su unidad m\u00ednima, car\u00e1cter por car\u00e1cter. En el tema de los arrays veremos un m\u00e9todo llamado join() que es justo el opuesto de split() . Si split separa un string en varios y los mete en un array, join une varios elementos de un array a\u00f1adi\u00e9ndole un separador y lo convierte en string.","title":"Crear Arrays a partir de textos"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#relleno-de-cadenas","text":"Otra transformaci\u00f3n interesante con los es la resultante de utilizar m\u00e9todos como padStart(len, str) o padEnd(len, str) . Ambos m\u00e9todos toman dos par\u00e1metros: len la longitud deseada del resultante y str el car\u00e1cter a utilizar como relleno. El objetivo de ambas funciones es devolver un nuevo con la informaci\u00f3n original existente, pero ampliando su tama\u00f1o a len y rellenando el resto con str , al principio si se usa padStart() o al final si se usa padEnd() : \"5\".padStart(6, \"0\"); // '000005' \"A\".padEnd(5, \"\u00b7\"); // 'A\u00b7\u00b7\u00b7\u00b7' Estos m\u00e9todos resultan especialmente interesantes para formatear horas, como por ejemplo en el caso que queremos que las cifras menores a 10 aparezcan en formato 00 en lugar de 0 .","title":"Relleno de cadenas"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#metodos-unicode","text":"Unicode es el nombre por el que se conoce al sistema moderno de codificaci\u00f3n de car\u00e1cteres que se usa en inform\u00e1tica. A grandes rasgos, cada car\u00e1cter como podr\u00eda ser la A , la B o cualquier otro, tiene su representaci\u00f3n Unicode , que se basa en un c\u00f3digo o code point . Por ejemplo, el car\u00e1cter A corresponde al c\u00f3digo Unicode U+0041 . Este 0041 realmente est\u00e1 en hexadecimal, por lo que 0x0041 en decimal ser\u00eda igual a 65 . Existen much\u00edsimos c\u00f3digos, ya que cualquier car\u00e1cter existente, tiene su propio c\u00f3digo Unicode. En Javascript, tenemos dos m\u00e9todos interesantes relacionado con este tema: M\u00e9todo Descripci\u00f3n String.fromCharCode(num) Devuelve el car\u00e1cter del valor unicode indicado en num . .charCodeAt(pos) Devuelve el valor unicode del car\u00e1cter de la posici\u00f3n pos del texto. El primero de ellos es un m\u00e9todo est\u00e1tico, por lo que hay que escribir directamente String.fromCharCode() y no utilizarlo desde una variable. Para usar este m\u00e9todo, le pasamos un num por par\u00e1metro, que indicar\u00e1 el n\u00famero o c\u00f3digo Unicode al que queremos hacer referencia, y el m\u00e9todo nos devolver\u00e1 un con el car\u00e1cter Unicode en cuesti\u00f3n: String.fromCharCode(65); // 'A' (65 es el c\u00f3digo U+0041 en decimal) String.fromCharCode(0x0041); // 'A' (0x0041 es el c\u00f3digo U+0041 en hexadecimal) \"A\".charCodeAt(0); // 65 \"A\".charCodeAt(0).toString(16); // 41 Por otro lado, el m\u00e9todo charCodeAt() es la operaci\u00f3n inversa a String.fromCharCode() con alg\u00fan extra. A charCodeAt(pos) le pasamos una posici\u00f3n con pos por par\u00e1metro. Esto buscar\u00e1 el car\u00e1cter de la posici\u00f3n pos del y nos devolver\u00e1 su c\u00f3digo Unicode ( por defecto, en decimal ). Si queremos pasarlo a otra base num\u00e9rica, podemos hacer uso del m\u00e9todo toString(base) indicando 16 como base . Observa a continuaci\u00f3n que, los famosos emojis ( por ejemplo ), son realmente una combinaci\u00f3n de 2 c\u00f3digos Unicode: // El valor unicode del emoji \ud83d\udc26 es (55357, 56358) emoji = \"\ud83d\udc26\"; codigos = []; for (let i = 0; i < emoji.length; i++) { codigos.push(emoji.charCodeAt(i)); } String.fromCharCode(...codigos); // '\ud83d\udc26' (Usamos desestructuraci\u00f3n, ver m\u00e1s adelante) Observa que modificando el \u00faltimo c\u00f3digo Unicode, podemos obtener diferentes emojis : String.fromCharCode(55357, 56358); // '\ud83d\udc26' String.fromCharCode(55357, 56359); // '\ud83d\udc27' String.fromCharCode(55357, 56360); // '\ud83d\udc28' (\"\\u0041\"); // 'A' (\"\\ud83d\\udc28\"); // '\ud83d\udc28' Una forma r\u00e1pida de escribir car\u00e1cteres Unicode es utilizando la secuencia de escape \\u seguida del c\u00f3digo Unicode en hexadecimal del caracter en cuesti\u00f3n, como se ve en los dos \u00faltimos ejemplos anteriores.","title":"M\u00e9todos Unicode"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#interpolacion-de-variables","text":"En ECMAScript se introduce una interesante mejora en la manipulaci\u00f3n general de , sobre todo respecto a la legibilidad de c\u00f3digo. Hasta ahora, si quer\u00edamos concatenar el valor de algunas variables con textos predefinidos por nosotros, ten\u00edamos que hacer algo parecido a esto: const sujeto = \"frase\"; const adjetivo = \"concatenada\"; \"Una \" + sujeto + \" bien \" + adjetivo; // 'Una frase bien concatenada' A medida que a\u00f1adimos m\u00e1s variables, el c\u00f3digo se hace bastante menos claro y m\u00e1s complejo de leer, especialmente si tenemos que a\u00f1adir arrays, introducir comillas simples que habr\u00eda que escapar con \\' o combinar comillas simples con dobles, etc... Para evitarlo, se introducen las backticks ( comillas hacia atr\u00e1s ), que nos permiten interpolar el valor de las variables sin tener que cerrar, concatenar y abrir la cadena de texto continuamente: const sujeto = \"frase\"; const adjetivo = \"concatenada\"; `Una ${sujeto} mejor ${adjetivo}`; // 'Una frase mejor concatenada' Esto es una funcionalidad muy simple, pero que mejora sustancialmente la calidad de c\u00f3digo generado. Eso s\u00ed, recuerda que se introduce en ECMAScript 6 , con todo lo que ello conlleva.","title":"Interpolaci\u00f3n de variables"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#fechas-nativas-date","text":"En muchas ocasiones necesitaremos guardar o trabajar con fechas en nuestros programas. Una fecha tiene datos mixtos: d\u00eda, mes y a\u00f1o, pero tambi\u00e9n puede ser m\u00e1s precisa y tener hora, minutos y/o segundos. Adem\u00e1s, la hora puede estar en varios formatos. Toda esta informaci\u00f3n no se podr\u00eda guardar en una sola variable num\u00e9rica, y tampoco es apropiado guardar en formato de texto, porque luego no podr\u00edamos hacer c\u00e1lculos de fechas con ella. Para ello, tenemos un objeto llamado Date que nos vendr\u00e1 perfecto para estos casos.","title":"Fechas nativas (Date)"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#que-es-el-tipo-de-dato-date","text":"Javascript nos provee de un tipo de dato llamado Date , con el que podemos trabajar facilmente con fechas de forma nativa y pr\u00e1ctica. Sin embargo, trabajar con fechas no es f\u00e1cil y la primera vez que tenemos que hacerlo es muy f\u00e1cil equivocarse si no tenemos claros algunos conceptos. Lo primero es ver los constructores para saber como podemos construir una variable de tipo Date : Constructor Descripci\u00f3n new Date() Obtiene la fecha del momento actual. new Date(str) Convierte el texto con formato YYYY/MM/DD HH:MM:SS a fecha. new Date(num) Convierte el n\u00famero num , en formato Tiempo UNIX , a fecha UTC. new Date(y, m, d, h, min, s, ms) Crea una fecha UTC a partir de componentes num\u00e9ricos * . Podemos utilizar estas cuatro formas para crear fechas en Javascript. Observa que en algunos casos se menciona fecha UTC . De momento, vamos a obviar esta parte y m\u00e1s adelante profundizaremos en ella. Veamos algunos ejemplos para crear fechas con estos 4 constructores: // Obtenemos la fecha actual y la guardamos en la variable f const f = new Date(); // Obtenemos la fecha 30 de Enero de 2018, a las 23h 30m 14seg const f = new Date(\"2018/01/30 23:30:14\"); // Obtenemos la fecha del juicio final a partir de un timestamp o Tiempo UNIX new Date(872817240000); // Creamos una fecha pasando cada uno de sus componentes num\u00e9ricos* new Date(y, m, d, h, min, s, ms); OJO : Mucho cuidado con los \u00abcomponentes num\u00e9ricos\u00bb mencionados en el \u00faltimo ejemplo. Si utilizamos el formato new Date(y, m, d, h, min, s, ms) , hay que saber que, como m\u00ednimo, los par\u00e1metros y ( a\u00f1o ) y m ( mes ) son obligatorios , el resto son par\u00e1metros opcionales. Adem\u00e1s, si utilizamos este esquema, hay que tener en cuenta que hay ciertas caracter\u00edsticas especiales: El par\u00e1metro m ( mes ) se proporciona con valores no reales que se recalcular\u00e1n. Es decir, si indicamos un 1 nos referimos a febrero y no a enero . Si queremos referirnos a enero tenemos que indicar un 0 . Si indicamos valores negativos contabilizamos hacia atr\u00e1s. Por ejemplo, con 2018, -1 estar\u00edamos indicando diciembre de 2017 . De la misma forma, 2018, 12 har\u00eda referencia a enero de 2019 . Lo mismo ocurre con otros par\u00e1metros; 2018, 0, 32 har\u00eda referencia al 1 de febrero de 2018.","title":"\u00bfQu\u00e9 es el tipo de dato Date?"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#tiempo-unix","text":"El Tiempo UNIX ( o UNIX timestamp ) es un formato num\u00e9rico utilizado para calcular una fecha en UNIX. Es una forma poco pr\u00e1ctica y legible para humanos, pero muy eficiente en t\u00e9rminos inform\u00e1ticos. Se trata de un n\u00famero que representa la cantidad de segundos transcurridos desde la fecha 1/1/1970, a las 00:00:00 . As\u00ed pues, siendo n\u00fameros, resulta muy f\u00e1cil trabajar y operar con ellos. Una fecha A y una fecha posterior B , si hacemos B - A nos devuelve el n\u00famero de segundos transcurridos entre ambas fechas, con lo que se podr\u00eda sacar la diferencia de tiempo. No obstante, el Tiempo UNIX sirve para trabajar con fechas a bajo nivel. Si lo deseas, al final del tema encontrar\u00e1s una tabla con librer\u00edas m\u00e1s c\u00f3modas y pr\u00e1cticas para trabajar con fechas en Javascript. Existen dos m\u00e9todos que se pueden utilizar para crear fechas, al margen de los constructores anteriores, s\u00f3lo que estos devuelven directamente el Tiempo UNIX de la fecha especificada: M\u00e9todo Descripci\u00f3n Date.now() Devuelve el Tiempo UNIX de la fecha actual. Equivalente a +new Date() . Date.parse(str) Convierte un de fecha a Tiempo UNIX . Equivalente a +new Date(str) . Veamos algunos ejemplos aplicados para entenderlos: // Estas tres operaciones son equivalentes const f = Date.now(); const f = +new Date(); const f = new Date().getTime(); // Estas tres operaciones son equivalentes const f = Date.parse(\"2018/10/30\"); const f = +new Date(\"2018/10/30\"); const f = new Date(\"2018/10/30\").getTime(); En el primer caso, utilizamos directamente los m\u00e9todos est\u00e1ticos now() y parse() para obtener el n\u00famero con el tiempo Unix . En el segundo caso, creamos un objeto Date con new Date() , lo que devuelve una fecha. Sin embargo, en Javascript, podemos preceder a esa fecha con el s\u00edmbolo + , oblig\u00e1ndolo a evaluarlo de forma num\u00e9rica, lo que hace que obtenga el tiempo Unix a partir de la fecha. En el tercer caso, escribimos en una l\u00ednea dos acciones: crear la variable de fecha con new Date() y posteriormente, sobre esa fecha, hacemos un getTime() , que nos devuelve el tiempo Unix de un Date, como veremos m\u00e1s adelante.","title":"Tiempo UNIX"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#getters-obtener-fechas","text":"Una vez hemos creado una fecha y tenemos el objeto , podemos trabajar muy facilmente con estas variables a trav\u00e9s de sus sencillos m\u00e9todos. Los siguientes son una lista de getters , funciones para obtener informaci\u00f3n, sobre la fecha almacenada: M\u00e9todo Descripci\u00f3n .getDay() Devuelve el d\u00eda de la semana: OJO: 0 Domingo, 6 S\u00e1bado. .getFullYear() Devuelve el a\u00f1o con 4 cifras. .getMonth() Devuelve la representaci\u00f3n interna del mes. OJO: 0 Enero - 11 Diciembre. .getDate() Devuelve el d\u00eda del mes. .getHours() Devuelve la hora. OJO: Formato militar; 23 en lugar de 11 . .getMinutes() Devuelve los minutos. .getSeconds() Devuelve los segundos. .getMilliseconds() Devuelve los milisegundos. .getTime() Devuelve el UNIX Timestamp : segundos transcurridos desde 1/1/1970 . .getTimezoneOffset() Diferencia horaria ( en min ) de la hora local respecto a UTC (ver m\u00e1s adelante). Algunos ejemplos del uso de estos m\u00e9todos ser\u00edan los siguientes: const f = new Date(\"2018/01/30 15:30:10.999\"); f.getDay(); // 2 (Martes) f.getDate(); // 30 f.getMonth(); // 0 (Enero) f.getFullYear(); // 2018 f.getHours(); // 15 f.getMinutes(); // 30 f.getSeconds(); // 10 f.getMilliseconds(); // 999 f.getTimezoneOffset(); // 0 f.getTime(); // 1517326210999 (Tiempo Unix) Observa que Javascript no tiene forma de devolver, por ejemplo, el d\u00eda de la semana o el mes en formato de texto. Sin embargo, ello se puede hacer de forma muy sencilla utilizando un array: const MESES = [ \"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Mayo\", \"Junio\", \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\", ]; const f = new Date(); MESES[f.getMonth()]; // Devuelve el mes actual en formato de texto Curiosidad : El m\u00e9todo getYear() se utilizaba para devolver la fecha con formato de 2 cifras. Se dej\u00f3 de usar debido a la llegada del efecto 2000 , reemplaz\u00e1ndose por el m\u00e9todo getFullYear() que usa el formato de 4 cifras.","title":"Getters: Obtener fechas"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#setters-cambiar-fechas","text":"De la misma forma que en el apartado anterior podemos obtener fechas espec\u00edficas, con los setters podemos modificarlas o alterarlas. M\u00e9todo Descripci\u00f3n .setFullYear(year) Altera el a\u00f1o de la fecha, cambi\u00e1ndolo por year . Formato de 4 d\u00edgitos. .setMonth(month) Altera el mes de la fecha, cambi\u00e1ndolo por month . Ojo : 0-11 (Ene-Dic). .setDate(day) Altera el d\u00eda de la fecha, cambi\u00e1ndolo por day . .setHour(hour) Altera la hora de la fecha, cambi\u00e1ndola por hour . .setMinutes(min) Altera los minutos de la fecha, cambi\u00e1ndolos por min . .setSeconds(sec) Altera los segundos de la fecha, cambi\u00e1ndolos por sec . .setMilliseconds(ms) Altera los milisegundos de la fecha, cambi\u00e1ndolos por ms . Nota : Adem\u00e1s de cambiar la fecha del objeto en cuesti\u00f3n, estos m\u00e9todos devuelven un en tiempo Unix , con la fecha modificada. De la misma forma que mencionamos anteriormente, hay que tener en cuenta que los valores pasados a estos m\u00e9todos pueden recalcular fechas: setMonth(0) implica Enero , setDate(0) implica \u00faltimo d\u00eda del mes anterior, setDate(-1) implica pen\u00faltimo d\u00eda del mes anterior, etc... const f = new Date(\"2018/01/30 15:30:10.999\"); f.setDate(15); // Cambia a 15/01/2018 15:30:10.999 (Devuelve 1516030210999) f.setMonth(1); // Cambia a 15/02/2018 15:30:10.999 (Devuelve 1518708610999) f.setFullYear(2020); // Cambia a 15/02/2020 15:30:10.999 (Devuelve 1581780610999) f.setHours(21); // Cambia a 15/02/2020 21:30:10.999 (Devuelve 1581802210999) f.setMinutes(00); // Cambia a 15/02/2020 21:00:10.999 (Devuelve 1581800410999) f.setSeconds(3); // Cambia a 15/02/2020 21:00:03.999 (Devuelve 1581800403999) f.setMilliseconds(79); // Cambia a 15/02/2020 21:00:03.079 (Devuelve 1581800403079) f.setTime(872817240000); // Cambia a 29/08/1997 02:14:00.000 (Devuelve 872817240000) Ten en cuenta que los mismos m\u00e9todos anteriores, soportan varios par\u00e1metros, para hacer m\u00e1s c\u00f3modo su utilizaci\u00f3n y no tener que estar us\u00e1ndolos uno por uno. As\u00ed por ejemplo, se puede usar setFullYear() para cambiar a\u00f1o, a\u00f1o y mes, o a\u00f1o, mes y d\u00eda: M\u00e9todo Descripci\u00f3n .setFullYear(y, m, d) Altera el a\u00f1o, mes y d\u00eda de una fecha. .setMonth(m, d) Altera el mes y d\u00eda de una fecha. .setHour(h, m, s, ms) Altera la hora, minutos, segundos y milisegundos. .setMinutes(m, s, ms) Altera los minutos, segundos y milisegundos. .setSeconds(s, ms) Altera los segundos y milisegundos. .setTime(ts) Establece una fecha a partir del tiempo Unix ts . Por \u00faltimo, tambi\u00e9n tenemos a nuestra disposici\u00f3n el m\u00e9todo setter setTime(ts) , que nos permite establecer una fecha a partir de un tiempo Unix ts . Es el equivalente a hacer un new Date(ts) .","title":"Setters: Cambiar fechas"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#representacion-de-fechas","text":"Otro detalle m\u00e1s delicado dentro del trabajo con fechas es a la hora de mostrar una fecha en un formato espec\u00edfico. Podemos utilizar el formato por defecto que nos ofrece Javascript, pero lo m\u00e1s habitual es que queramos hacerlo en otro diferente, utilizando nuestra configuraci\u00f3n horaria, abreviaturas u otros detalles. En Javascript tenemos varios m\u00e9todos ( muy limitados, eso s\u00ed ) para representar las fechas: M\u00e9todo Descripci\u00f3n Formato por defecto Fri Aug 24 2018 00:23:31 GMT+0100 .toDateString() Devuelve formato s\u00f3lo de fecha: Fri Aug 24 2018 .toLocaleDateString() Idem al anterior, pero en el formato regional actual: 24/8/2018 .toTimeString() Devuelve formato s\u00f3lo de hora: 00:23:24 GMT+0100 ... .toLocaleTimeString() Idem al anterior, pero en el formato regional actual: 0:26:37 .toISOString() Devuelve la fecha en el formato ISO 8601 : 2018-08-23T23:27:29.380Z .toJSON() Idem al anterior, pero asegur\u00e1ndose que ser\u00e1 compatible con JSON. .toUTCString() Devuelve la fecha, utilizando UTC ( ver m\u00e1s adelante ). El m\u00e9todo toISOString() devuelve un formato que intenta ser el est\u00e1ndar a la hora de manejar fechas en Internet o documentos en general. B\u00e1sicamente, una regla mnemot\u00e9cnica es pensar que se escriben desde magnitudes m\u00e1s altas ( a\u00f1o ) hasta las magnitudes m\u00e1s bajas ( milisegundos ). La fecha y la hora se separa con una T y cada componente con un - o un : dependiendo de si es fecha o es hora. Los milisegundos se separan siempre con . . La Z del final indica que es una fecha UTC . Existen algunas librer\u00edas interesantes que permiten trabajar muy f\u00e1cilmente con la representaci\u00f3n de fechas o incluso otros detalles. Lo comentaremos un poco m\u00e1s adelante.","title":"Representaci\u00f3n de fechas"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#utc-y-zonas-horarias","text":"Para facilitar las cosas, hasta ahora hemos obviado un tema bastante importante: las zonas horarias . Probablemente te habr\u00e1s percatado de que podr\u00eda ser necesario trabajar y manejar diferencias horarias , porque por ejemplo necesitamos utilizar diferentes horas locales de distintos lugares del planeta. Para manejar esto, Javascript permite indicar tambi\u00e9n la diferencia horaria respecto al meridiano Greenwich , indicada como GMT . Por ejemplo, podemos tener una fecha A 2018/01/01 15:30:00 GMT+0000 , y una fecha B 2018/01/02 18:30:00 GMT+0200 . La fecha A no tiene diferencia horaria (GMT+0000), sin embargo, la fecha B si la tiene (GMT+0200), por lo que en Javascript al hacer un new Date(str) de dicha fecha, se recalcula autom\u00e1ticamente y se guarda la fecha modificada y sin diferencia horaria. En este caso, se le restan 2 horas a la fecha B. Es importante darse cuenta que, en Javascript, cuando usamos new Date() sin par\u00e1metros, obtendremos una fecha que puede incluir diferencias horarias: const f = new Date(); // Mon Aug 27 2018 01:39:21 GMT+0100 f.getTimezoneOffset(); // -60 (1 hora menos) Sin embargo, si hacemos uso de new Date(str) , pas\u00e1ndole una fecha como par\u00e1metro de texto, autom\u00e1ticamente se recalcula la diferencia horaria, sumando/restando las horas, y se obtiene finalmente la fecha con diferencia horaria cero : const f = new Date(\"2018/01/30 23:15:30 GMT+0100\"); f; // Tue Jan 30 2018 22:15:30 GMT+0000 En este caso, al recalcular y guardar la fecha/hora sin diferencias horarias, decimos que estamos utilizando el Tiempo Universal Coordinado o UTC . Tambi\u00e9n podemos utilizar el m\u00e9todo est\u00e1tico Date.UTC() donde le podemos pasar los par\u00e1metros de los componentes num\u00e9ricos de la fecha, tal c\u00f3mo lo hacemos en el constructor new Date(y, m, d, h, min, s, ms) anteriormente mencionado. Adem\u00e1s de lo anterior, recuerda que tambi\u00e9n tenemos todos los m\u00e9todos Getters y Setters mencionados en su versi\u00f3n UTC. Por ejemplo, en el caso de getHours() tenemos una versi\u00f3n getUTCHours() que devuelve las horas de acuerdo al UTC ( Tiempo Universal Coordinado ).","title":"UTC y zonas horarias"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#librerias-para-fechas","text":"En muchos casos, el objeto de Javascript puede quedarse corto para el usuario, que echa mucho de menos algunas funciones espec\u00edficas, mayor comodidad al trabajar con fechas, o que simplemente necesita un mayor control. Existen m\u00faltiples librer\u00edas alternativas para trabajar con fechas, citamos algunas de ellas: Librer\u00eda Descripci\u00f3n GitHub Moment.js Manejo de fechas y horas en JS. moment/moment date-fns Moderna librer\u00eda de fechas. date-fns/date-fns Day.js Librer\u00eda inmutable (2KB) alternativa a Moment.js iamkun/dayjs js-joda Librer\u00eda inmutable de fechas para JS. js-joda/js-joda Datejs Librer\u00eda alternativa para trabajar con fechas. datejs/Datejs fecha Librer\u00eda ligera para formatear y parsear fechas. taylorhakes/fecha Con ellas, podr\u00e1s trabajar con mayor comodidad o profundidad con fechas y horas en Javascript.","title":"Librer\u00edas para fechas"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#funciones","text":"Una vez conocemos las bases de las funciones que hemos explicado en el tema de introducci\u00f3n funciones b\u00e1sicas , podemos continuar avanzando dentro del apartado de las funciones. En Javascript, las funciones son uno de los tipos de datos m\u00e1s importantes, ya que estamos continuamente utiliz\u00e1ndolas a lo largo de nuestro c\u00f3digo. Y no, no me he equivocado ni he escrito mal el texto anterior; a continuaci\u00f3n veremos que las funciones tambi\u00e9n pueden ser tipos de datos: typeof function () {}; // 'function'","title":"Funciones"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#creacion-de-funciones","text":"Hay varias formas de crear funciones en Javascript: por declaraci\u00f3n ( la m\u00e1s usada por principiantes ), por expresi\u00f3n ( la m\u00e1s habitual en programadores con experiencia ) o mediante constructor de objeto ( no recomendada ): Constructor Descripci\u00f3n function nombre(p1, p2...) { } Crea una funci\u00f3n mediante declaraci\u00f3n . var nombre = function(p1, p2...) { } Crea una funci\u00f3n mediante expresi\u00f3n . new Function(p1, p2..., code); Crea una funci\u00f3n mediante un constructor de objeto .","title":"Creaci\u00f3n de funciones"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#funciones-por-declaracion","text":"Probablemente, la forma m\u00e1s popular de estas tres, y a la que estaremos acostumbrados si venimos de otros lenguajes de programaci\u00f3n, es la primera, a la creaci\u00f3n de funciones por declaraci\u00f3n . Esta forma permite declarar una funci\u00f3n que existir\u00e1 a lo largo de todo el c\u00f3digo: function saludar() { return \"Hola\"; } saludar(); // 'Hola' typeof saludar; // 'function' De hecho, podr\u00edamos ejecutar la funci\u00f3n saludar() incluso antes de haberla creado y funcionar\u00eda correctamente, ya que Javascript primero busca las declaraciones de funciones y luego procesa el resto del c\u00f3digo.","title":"Funciones por declaraci\u00f3n"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#funciones-por-expresion","text":"Sin embargo, en Javascript es muy habitual encontrarse c\u00f3digos donde los programadores \u00abguardan funciones\u00bb dentro de variables, para posteriormente \u00abejecutar dichas variables\u00bb. Se trata de un enfoque diferente, creaci\u00f3n de funciones por expresi\u00f3n , que fundamentalmente, hacen lo mismo con algunas diferencias: // El segundo \"saludar\" (nombre de la funci\u00f3n) se suele omitir: es redundante const saludo = function saludar() { return \"Hola\"; }; saludo(); // 'Hola' Con este nuevo enfoque, estamos creando una funci\u00f3n en el interior de una variable , lo que nos permitir\u00e1 posteriormente ejecutar la variable ( como si fuera una funci\u00f3n ). Observa que el nombre de la funci\u00f3n ( en este ejemplo: saludar ) pasa a ser in\u00fatil, ya que si intentamos ejecutar saludar() nos dir\u00e1 que no existe y si intentamos ejecutar saludo() funciona correctamente. \u00bfQu\u00e9 ha pasado? Ahora el nombre de la funci\u00f3n pasa a ser el nombre de la variable, mientras que el nombre de la funci\u00f3n desaparece y se omite, dando paso a lo que se llaman las funciones an\u00f3nimas ( o funciones lambda ).","title":"Funciones por expresi\u00f3n"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#funciones-como-objetos","text":"Como curiosidad, debes saber que se pueden declarar funciones como si fueran objetos . Sin embargo, es un enfoque que no se suele utilizar en producci\u00f3n. Simplemente es interesante saberlo para darse cuenta que en Javascript todo pueden ser objetos: const saludar = new Function(\"return 'Hola';\"); saludar(); // 'Hola'","title":"Funciones como objetos"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#funciones-anonimas","text":"Las funciones an\u00f3nimas o funciones lambda son un tipo de funciones que se declaran sin nombre de funci\u00f3n y se alojan en el interior de una variable y haciendo referencia a ella cada vez que queramos utilizarla: // Funci\u00f3n an\u00f3nima \"saludo\" const saludo = function () { return \"Hola\"; }; saludo; // \u0192 () { return 'Hola'; } saludo(); // 'Hola' Observa que en la \u00faltima l\u00ednea del ejemplo anterior, estamos ejecutando la variable, es decir, ejecutando la funci\u00f3n que contiene la variable. Sin embargo, en la l\u00ednea anterior hacemos referencia a la variable ( sin ejecutarla, no hay par\u00e9ntesis ) y nos devuelve la funci\u00f3n en s\u00ed. La diferencia fundamental entre las funciones por declaraci\u00f3n y las funciones por expresi\u00f3n es que estas \u00faltimas s\u00f3lo est\u00e1n disponibles a partir de la inicializaci\u00f3n de la variable. Si \u00abejecutamos la variable\u00bb antes de declararla, nos dar\u00e1 un error.","title":"Funciones an\u00f3nimas"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#callbacks","text":"Ahora que conocemos las funciones an\u00f3nimas , podremos comprender m\u00e1s f\u00e1cilmente como utilizar callbacks ( tambi\u00e9n llamadas funciones callback o retrollamadas ). A grandes rasgos, un callback ( llamada hacia atr\u00e1s ) es pasar una funci\u00f3n B por par\u00e1metro a una funci\u00f3n A , de modo que la funci\u00f3n A puede ejecutar esa funci\u00f3n B de forma gen\u00e9rica desde su c\u00f3digo, y nosotros podemos definirlas desde fuera de dicha funci\u00f3n: // fB = Funci\u00f3n B const fB = function () { console.log(\"Funci\u00f3n B ejecutada.\"); }; // fA = Funci\u00f3n A const fA = function (callback) { callback(); }; fA(fB); Esto nos podr\u00eda permitir crear varias funciones para utilizar a modo de callback y reutilizarlas posteriormente con diferentes prop\u00f3sitos. De hecho, los callbacks muchas veces son la primera estrategia que se suele utilizar en Javascript para trabajar la asincron\u00eda, uno de los temas que veremos m\u00e1s adelante: // fB = Funci\u00f3n B (callback) const fB = function () { console.log(\"Funci\u00f3n B ejecutada.\"); }; // fError = Funci\u00f3n Error (callback) const fError = function () { console.error(\"Error\"); }; // fA = Funci\u00f3n A const fA = function (callback, callbackError) { const n = ~~(Math.random() * 5); if (n > 2) callback(); else callbackError(); }; fA(fB, fError); // Si ejecutamos varias veces, algunas dar\u00e1n error y otras no Viendo este ejemplo, podemos planear ejecutar la funci\u00f3n fA() cambiando los callbacks seg\u00fan nos interese, sin necesidad de crear funciones con el mismo c\u00f3digo repetido una y otra vez. Adem\u00e1s, en el caso de que las funciones callbacks sean muy cortas, muchas veces utilizamos directamente la funci\u00f3n an\u00f3nima, sin necesidad de guardarla en una variable previamente: // fA = Funci\u00f3n A const fA = function (callback, callbackError) { const n = ~~(Math.random() * 5); if (n > 2) callback(); else callbackError(); }; fA( function () { console.log(\"Funci\u00f3n B ejecutada.\"); }, function () { console.error(\"Error\"); } ); Aunque, como se puede ver, se suele evitar para facilitar la legibilidad del c\u00f3digo, y s\u00f3lo se utiliza en casos muy espec\u00edficos donde est\u00e1s seguro que no vas a reutilizar la funci\u00f3n callback o no te interesa guardarla en una variable.","title":"Callbacks"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#funciones-autoejecutables","text":"Pueden existir casos en los que necesites crear una funci\u00f3n y ejecutarla sobre la marcha. En Javascript es muy sencillo crear funciones autoejecutables . B\u00e1sicamente, s\u00f3lo tenemos que envolver entre par\u00e9ntesis la funci\u00f3n an\u00f3nima en cuesti\u00f3n ( no necesitamos que tenga nombre, puesto que no la vamos a guardar ) y luego, ejecutarla: // Funci\u00f3n autoejecutable (function () { console.log(\"Hola!!\"); })(); // Funci\u00f3n autoejecutable con par\u00e1metros (function (name) { console.log(`\u00a1Hola, ${name}!`); })(\"Manz\"); De hecho, tambi\u00e9n podemos utilizar par\u00e1metros en dichas funciones autoejecutables. Observa que s\u00f3lo hay que pasar dichos par\u00e1metros al final de la funci\u00f3n autoejecutable. Ten en cuenta, que si la funci\u00f3n autoejecutable devuelve alg\u00fan valor con return , a diferencia de las funciones por expresi\u00f3n , en este caso lo que se almacena en la variable es el valor que devuelve la funci\u00f3n autoejecutada: const f = (function (name) { return `\u00a1Hola, ${name}!`; })(\"Manz\"); f; // '\u00a1Hola, Manz!` typeof f; // 'string'","title":"Funciones autoejecutables"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#clausuras","text":"Las clausuras o cierres, es un concepto relacionado con las funciones y los \u00e1mbitos que suele costar comprender cuando se empieza en Javascript. Es importante tener las bases de funciones claras hasta este punto, lo que permitir\u00e1 entender las bases de una clausura. A grandes rasgos, en Javascript, una clausura o cierre se define como una funci\u00f3n que \u00abencierra\u00bb variables en su propio \u00e1mbito ( y que contin\u00faan existiendo a\u00fan habiendo terminado la funci\u00f3n ). Por ejemplo, veamos el siguiente ejemplo: // Clausura: Funci\u00f3n incr() const incr = (function () { let num = 0; return function () { num++; return num; }; })(); typeof incr; // 'function' incr(); // 1 incr(); // 2 incr(); // 3 Tenemos una funci\u00f3n an\u00f3nima que es tambi\u00e9n una funci\u00f3n autoejecutable. Aunque parece una funci\u00f3n por expresi\u00f3n, no lo es, ya que la variable incr est\u00e1 guardando lo que devuelve la funci\u00f3n an\u00f3nima autoejecutable, que a su vez, es otra funci\u00f3n diferente. La \u00abmagia\u00bb de las clausuras es que en el interior de la funci\u00f3n autoejecutable estamos creando una variable num que se guardar\u00e1 en el \u00e1mbito de dicha funci\u00f3n, por lo tanto existir\u00e1 con el valor declarado: 0 . Por lo tanto, en la variable incr tenemos una funci\u00f3n por expresi\u00f3n que adem\u00e1s conoce el valor de una variable num , que s\u00f3lo existe dentro de incr . Si nos fijamos en la funci\u00f3n que devolvemos, lo que hace es incrementar el valor de num y devolverlo. Como la variable incr es una clausura y mantiene la variable en su propio \u00e1mbito, veremos que a medida que ejecutamos incr() , los valores de num ( que estamos devolviendo ) conservan su valor y se van incrementando.","title":"Clausuras"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#arrow-functions","text":"Las Arrow functions , funciones flecha o \u00abfat arrow\u00bb son una forma corta de escribir funciones que aparece en Javascript a partir de ECMAScript 6 . B\u00e1sicamente, se trata de reemplazar eliminar la palabra function y a\u00f1adir => antes de abrir las llaves: const func = function () { return \"Funci\u00f3n tradicional.\"; }; const func = () => { return \"Funci\u00f3n flecha.\"; }; Sin embargo, las funciones flechas tienen algunas ventajas a la hora de simplificar c\u00f3digo bastante interesantes: Si el cuerpo de la funci\u00f3n s\u00f3lo tiene una l\u00ednea, podemos omitir las llaves ( {} ). Adem\u00e1s, en ese caso, autom\u00e1ticamente se hace un return de esa \u00fanica l\u00ednea, por lo que podemos omitir tambi\u00e9n el return . En el caso de que la funci\u00f3n no tenga par\u00e1metros, se indica como en el ejemplo anterior: () => . En el caso de que la funci\u00f3n tenga un solo par\u00e1metro, se puede indicar simplemente el nombre del mismo: e => . En el caso de que la funci\u00f3n tenga 2 \u00f3 m\u00e1s par\u00e1metros, se indican entre par\u00e9ntesis: (a, b) => . Si queremos devolver un objeto, que coincide con la sintaxis de las llaves, se puede englobar con par\u00e9ntesis: ({name: 'Manz'}) . Por lo tanto, el ejemplo anterior se puede simplificar a\u00fan m\u00e1s: const func = () => \"Funci\u00f3n flecha.\"; // 0 par\u00e1metros: Devuelve \"Funci\u00f3n flecha\" const func = (e) => e + 1; // 1 par\u00e1metro: Devuelve el valor de e + 1 const func = (a, b) => a + b; // 2 par\u00e1metros: Devuelve el valor de a + b Las funciones flecha hacen que el c\u00f3digo sea mucho m\u00e1s legible y claro de escribir, mejorando la productividad y la claridad a la hora de escribir c\u00f3digo.","title":"Arrow functions"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#ambito-lexico-de-this","text":"Aunque a\u00fan no la hemos utilizado, una de las principales diferencias de las funciones flecha respecto a las funciones tradicionales, es el valor de la palabra clave this , que no siempre es la misma. Por ejemplo, si utilizamos una funci\u00f3n de forma global en nuestro programa, no notaremos ninguna diferencia: // Si son funciones globales const a = function () { console.log(this); }; const b = () => { console.log(this); }; a(); // Window b(); // Window Sin embargo, si utilizamos una funci\u00f3n en el interior de un objeto, como suele ser el caso m\u00e1s habitual, si encontraremos diferencias. Observa que en la primera funci\u00f3n, donde se utiliza una funci\u00f3n tradicional, el this devuelve el objeto padre de la funci\u00f3n. Por otro lado, en la segunda funci\u00f3n, donde se utiliza una funci\u00f3n flecha, el this no devuelve el objeto padre de la funci\u00f3n, sino que devuelve Window . padre = { a: function () { console.log(this); }, b: () => { console.log(this); }, }; padre.a(); // padre padre.b(); // Window Esta es una diferencia clave que hay que tener bien en cuenta a la hora de trabajar con las funciones flecha . Una buena pr\u00e1ctica es utilizar funciones tradicionales como las funciones de primer nivel y, luego, en su interior o en callbacks, utilizar funciones flecha.","title":"\u00c1mbito l\u00e9xico de this"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#arrays","text":"A medida que trabajamos en nuestro c\u00f3digo, se hace necesario agrupar valores en una misma variable, para representar conjuntos de datos con cierta relaci\u00f3n entre s\u00ed. Para ello, tenemos la opci\u00f3n de crear objetos , o unas variables m\u00e1s sencillas llamadas arrays .","title":"Arrays"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#que-es-un-array","text":"Un es una colecci\u00f3n o agrupaci\u00f3n de elementos en una misma variable, cada uno de ellos ubicado por la posici\u00f3n que ocupa en el array. En Javascript, se pueden definir de varias formas: Constructor Descripci\u00f3n new Array(len) Crea un array de len elementos . new Array(e1, e2...) Crea un array con ninguno o varios elementos. [e1, e2...] Simplemente, los elementos dentro de corchetes: [] . Notaci\u00f3n preferida . Por ejemplo, podr\u00edamos tener un array que en su primera posici\u00f3n tenemos el 'a', en la segunda el 'b' y en la tercera el 'c'. En Javascript, esto se crear\u00eda de esta forma: // Forma tradicional const array = new Array(\"a\", \"b\", \"c\"); // Mediante literales (preferida) const array = [\"a\", \"b\", \"c\"]; // Array con 3 elementos const empty = []; // Array vac\u00edo (0 elementos) const mixto = [\"a\", 5, true]; // Array mixto (string, number, boolean) Al contrario que muchos otros lenguajes de programaci\u00f3n, Javascript permite que se puedan realizar arrays de tipo mixto , no siendo obligatorio que todos los elementos sean del mismo tipo de dato ( en el ejemplo anterior, ). OJO : Al crear un array con new Array(num) , si solo indicamos un par\u00e1metro y num es un n\u00famero, Javascript crear\u00e1 un array de num elementos sin definir. Es decir, a = new Array(3) ser\u00eda equivalente a a = [undefined, undefined, undefined] . Esto no ocurre con su equivalente, a = [3] , donde estamos creando un array con un \u00fanico elemento: 3 .","title":"\u00bfQu\u00e9 es un array?"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#acceso-a-elementos","text":"Al igual que los , saber el n\u00famero elementos que tiene un array es muy sencillo. S\u00f3lo hay que acceder a la propiedad .length , que nos devolver\u00e1 el n\u00famero de elementos existentes en un array: M\u00e9todo Descripci\u00f3n .length Devuelve el n\u00famero de elementos del array. [pos] Operador que devuelve el elemento n\u00famero pos del array. Por otro lado, si lo que queremos es acceder a un elemento espec\u00edfico del array, no hay m\u00e1s que utilizar el operador [] , al igual que hacemos con los para acceder a un car\u00e1cter concreto. En este caso, accedemos a la posici\u00f3n del elemento que queremos recuperar sobre el array: const array = [\"a\", \"b\", \"c\"]; array[0]; // 'a' array[2]; // 'c' array[5]; // undefined Recuerda que las posiciones empiezan a contar desde 0 y que si intentamos acceder a una posici\u00f3n que no existe ( mayor del tama\u00f1o del array ), nos devolver\u00e1 un .","title":"Acceso a elementos"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#anadir-o-eliminar-elementos","text":"Existen varias formas de a\u00f1adir elementos a un array existente. Veamos los m\u00e9todos que podemos usar para ello: M\u00e9todo Descripci\u00f3n .push(obj1, obj2...) A\u00f1ade uno o varios elementos al final del array. Devuelve tama\u00f1o del array. .pop() Elimina y devuelve el \u00faltimo elemento del array. .unshift(obj1, obj2...) A\u00f1ade uno o varios elementos al inicio del array. Devuelve tama\u00f1o del array. .shift() Elimina y devuelve el primer elemento del array. .concat(obj1, obj2...) Concatena los elementos (o elementos de los arrays) pasados por par\u00e1metro. En los arrays, Javascript proporciona m\u00e9todos tanto para insertar o eliminar elementos por el final del array: push() y pop() , como para insertar o eliminar elementos por el principio del array: unshift() y shift() . Salvo por esto, funcionan exactamente igual. El m\u00e9todo de inserci\u00f3n, push() o unshift() inserta los elementos pasados por par\u00e1metro en el array y devuelve el tama\u00f1o actual que tiene el array despu\u00e9s de la inserci\u00f3n. Por otro lado, los m\u00e9todos de extracci\u00f3n, pop() o shift() , extraen y devuelven el elemento. const array = [\"a\", \"b\", \"c\"]; // Array inicial array.push(\"d\"); // Devuelve 4. Ahora array = ['a', 'b', 'c', 'd'] array.pop(); // Devuelve 'd'. Ahora array = ['a', 'b', 'c'] array.unshift(\"Z\"); // Devuelve 4. Ahora array = ['Z', 'a', 'b', 'c'] array.shift(); // Devuelve 'Z'. Ahora array = ['a', 'b', 'c'] Adem\u00e1s, al igual que en los , tenemos el m\u00e9todo concat() , que nos permite concatenar los elementos pasados por par\u00e1metro en un array. Se podr\u00eda pensar que los m\u00e9todos .push() y concat() funcionan de la misma forma, pero no es exactamente as\u00ed. Veamos un ejemplo: const array = [1, 2, 3]; array.push(4, 5, 6); // Devuelve 6. Ahora array = [1, 2, 3, 4, 5, 6] array.push([7, 8, 9]); // Devuelve 7. Ahora array = [1, 2, 3, 4, 5, 6, [7, 8, 9]] const array = [1, 2, 3]; array = array.concat(4, 5, 6); // Devuelve 6. Ahora array = [1, 2, 3, 4, 5, 6] array = array.concat([7, 8, 9]); // Devuelve 9. Ahora array = [1, 2, 3, 4, 5, 6, 7, 8, 9] Observa un detalle muy importante. El m\u00e9todo concat() , a diferencia de push() , no modifica el array sobre el cu\u00e1l trabajamos y al que le a\u00f1adimos los elementos, sino que simplemente lo devuelve. Al margen de esto, observa que en el caso de pasar un array por par\u00e1metro, push() lo inserta como un array, mientras que concat() inserta cada uno de sus elementos. Tambi\u00e9n hay que tener cuidado al utilizar el operador + con los arrays. A diferencia de lo que quiz\u00e1s puede parecer intuitivo, utilizando este operador no se a\u00f1aden los elementos al array, sino que se convierten los arrays en string y luego se concatenan. Veremos m\u00e1s sobre estas conversiones impl\u00edcitas en temas posteriores.","title":"A\u00f1adir o eliminar elementos"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#creacion-de-arrays","text":"Existen m\u00e9todos para crear peque\u00f1os arrays derivados de otras variables u objetos. Es el caso de los m\u00e9todos slice() y splice() . Luego, tambi\u00e9n hablaremos del m\u00e9todo join() y el m\u00e9todo est\u00e1tico Array.from() : M\u00e9todo Descripci\u00f3n .slice(ini, end) Devuelve los elementos desde posici\u00f3n ini hasta end (exclu\u00eddo). .splice(ini, num) Elimina y devuelve num elementos desde posici\u00f3n ini . .splice(ini, num, o1, o2...) Idem. Adem\u00e1s inserta o1 , o2 ... en la posici\u00f3n ini . .join(sep) Une los elementos del array por sep en un . Array.from(o, f, thisVal) Crea un array a partir de o (algo similar a un array). El m\u00e9todo slice() devuelve los elementos del array desde la posici\u00f3n ini hasta la posici\u00f3n end , permitiendo crear un nuevo array m\u00e1s peque\u00f1o con ese grupo de elementos. Recuerda que las posiciones empiezan a contar desde 0 . En el caso de que no se proporcione el par\u00e1metro end , se devuelven todos los elementos desde la posici\u00f3n ini hasta el final del array. Por otro lado, ten en cuenta que el array sobre el que realizamos el m\u00e9todo slice() no sufre ninguna modificaci\u00f3n, s\u00f3lo se devuelve por par\u00e1metro el array creado. Diferente es el caso del m\u00e9todo splice() , el cu\u00e1l realiza algo parecido a slice() pero con una gran diferencia: modifica el array original . En el m\u00e9todo splice() el segundo par\u00e1metro num no es la posici\u00f3n final del subarray, sino el tama\u00f1o del array final, es decir, el n\u00famero de elementos que se van a obtener desde la posici\u00f3n ini . Por lo tanto, con el m\u00e9todo splice() , devolvemos un array con los elementos desde la posici\u00f3n ini hasta la posici\u00f3n ini + num . El array original es modificado, ya que se eliminan los elementos desde la posici\u00f3n ini hasta la posici\u00f3n ini + num . Es posible tambi\u00e9n indicar una serie de par\u00e1metros opcionales despu\u00e9s de los mencionados, que permitir\u00e1n adem\u00e1s de la extracci\u00f3n de elementos, insertar dichos elementos justo donde hicimos la extracci\u00f3n. Veamos un ejemplo ilustrativo: const array = [\"a\", \"b\", \"c\", \"d\", \"e\"]; // .slice() no modifica el array array.slice(2, 4); // Devuelve ['c', 'd']. El array no se modifica. // .splice() si modifica el array array.splice(2, 2); // Devuelve ['c', 'd']. Ahora array = ['a', 'b', 'e'] array.splice(1, 0, \"z\", \"x\"); // Devuelve []. Ahora array = ['a', 'z', 'x', 'b', 'e'] A ra\u00edz de este \u00faltimo ejemplo, tambi\u00e9n podemos insertar elementos en una posici\u00f3n concreta del array de estas dos formas alternativas: utilizando slice() y concat() o utilizando splice() y una caracter\u00edstica que veremos m\u00e1s adelante llamada desestructuraci\u00f3n : const a = [1, 2, 3, 8, 9, 10]; a.slice(0, 3).concat([4, 5, 6, 7], a.slice(3, 6)); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] const a = [1, 2, 3, 8, 9, 10]; a.splice(3, 0, ...[4, 5, 6, 7]); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] En ciertos casos, nos podr\u00eda interesar reducir el tama\u00f1o de un array para quedarnos con sus primeros elementos y descartar el resto. Hay una forma muy sencilla y eficiente que es modificar directamente el tama\u00f1o del array mediante .length . Por ejemplo, hacer un a.length = 4 en un array de 8 elementos, reducir\u00e1 el array a los primeros 4 elementos de una forma eficiente, ya que no crea un nuevo array, sino que reduce el tama\u00f1o del actual y descarta el resto de elementos. Adem\u00e1s, tambi\u00e9n tenemos otro m\u00e9todo con el que es posible crear un a partir de un . Se trata del m\u00e9todo split() que vimos en el tema de los . En este caso, el m\u00e9todo join() es su contrapartida. Con join() podemos crear un con todos los elementos del array, separ\u00e1ndolo por el texto que le pasemos por par\u00e1metro: const array = [\"a\", \"b\", \"c\"]; array.join(\"->\"); // Devuelve 'a->b->c' array.join(\".\"); // Devuelve 'a.b.c' \"a.b.c\".split(\".\"); // Devuelve ['a', 'b', 'c'] \"5.4.3.2.1\".split(\".\"); // Devuelve ['5', '4', '3', '2', '1'] Ten en cuenta que, como se puede ver en el \u00faltimo ejemplo, split() siempre devolver\u00e1 los elementos como . Por \u00faltimo, mencionar tambi\u00e9n el m\u00e9todo est\u00e1tico Array.from() . Aunque ahora no le encontraremos mucha utilidad, nos resultar\u00e1 muy interesante m\u00e1s adelante. Este m\u00e9todo se suele utilizar para convertir variables \u00abparecidas\u00bb a los arrays ( pero que no son arrays ) en arrays reales. Este el caso de variables como ( que pueden actuar como array de strings ) o de nodos de un documento ( elementos del DOM, como veremos en temas posteriores ): Array.from(\"hola\"); // ['h', 'o', 'l', 'a'] Array.from(document.querySelector(\"body\")); // [body.document] De forma opcional, Array.from(obj) puede recibir dos par\u00e1metros m\u00e1s, al margen de obj : una funci\u00f3n f y un par\u00e1metro thisVal . El funcionamiento de estos par\u00e1metros es similar al del m\u00e9todo .map() que veremos en un tema posterior de Array functions .","title":"Creaci\u00f3n de arrays"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#busqueda-y-comprobacion","text":"Existen varios m\u00e9todos para realizar ciertas comprobaciones con arrays: M\u00e9todo Descripci\u00f3n Array.isArray(obj) Comprueba si obj es un array. Devuelve true o false . .includes(obj, from) Comprueba si obj es uno de los elementos incluidos en el array. .indexOf(obj, from) Devuelve la posici\u00f3n de la primera aparici\u00f3n de obj desde from . .lastIndexOf(obj, from) Devuelve la posici\u00f3n de la \u00faltima aparici\u00f3n de obj desde from . El primero de ellos, Array.isArray(obj) se utiliza para comprobar si obj es un array o no, devolviendo un booleano. Los otros tres m\u00e9todos funcionan exactamente igual que sus equivalentes en los . El m\u00e9todo includes() comprueba si el elemento obj pasado por par\u00e1metro es uno de los elementos que incluye el array, partiendo desde la posici\u00f3n from . Si se omite from , se parte desde 0 . const array = [5, 10, 15, 20, 25]; Array.isArray(array); // true array.includes(10); // true array.includes(10, 2); // false array.indexOf(25); // 4 array.lastIndexOf(10, 0); // -1 Por otro lado, tenemos indexOf() y lastIndexOf() dos funciones que se utilizan para devolver la posici\u00f3n del elemento obj pasado por par\u00e1metro, empezando a buscar en la posici\u00f3n from ( o 0 si se omite ). El primer m\u00e9todo, devuelve la primera aparici\u00f3n, mientras que el segundo m\u00e9todo devuelve la \u00faltima aparici\u00f3n.","title":"B\u00fasqueda y comprobaci\u00f3n"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#modificacion-de-arrays","text":"Es posible que tengamos un array espec\u00edfico al que queremos hacer ciertas modificaciones donde slice() y splice() se quedan cortos ( o resulta m\u00e1s c\u00f3modo utilizar los siguientes m\u00e9todos ). Existen algunos m\u00e9todos introducidos en ECMAScript 6 que nos permiten crear una versi\u00f3n modificada de un array, mediante m\u00e9todos como copyWithin() o fill() : M\u00e9todo Descripci\u00f3n .copyWithin(pos, ini, end) Devuelve , copiando en pos los \u00edtems desde ini a end . .fill(obj, ini, end) Devuelve un relleno de obj desde ini hasta end . El primero de ellos, copyWithin(pos, ini, end) nos permite crear una copia del array que alteraremos de la siguiente forma: en la posici\u00f3n pos copiaremos los elementos del propio array que aparecen desde la posici\u00f3n ini hasta la posici\u00f3n end . Es decir, desde la posici\u00f3n 0 hasta pos ser\u00e1 exactamente igual, y de ah\u00ed en adelante, ser\u00e1 una copia de los valores de la posici\u00f3n ini a la posici\u00f3n end . Veamos algunos ejemplos: const array = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]; // Estos m\u00e9todos modifican el array original array.copyWithin(5, 0, 1); // Devuelve ['a', 'b', 'c', 'd', 'e', 'a'] array.copyWithin(3, 0, 3); // Devuelve ['a', 'b', 'c', 'a', 'b', 'c'] array.fill(\"Z\", 0, 5); // Devuelve ['Z', 'Z', 'Z', 'Z', 'Z', 'c'] Por otro lado, el m\u00e9todo fill(obj, ini, end) es mucho m\u00e1s sencillo. Se encarga de devolver una versi\u00f3n del array, rellenando con el elemento obj desde la posici\u00f3n ini hasta la posici\u00f3n end .","title":"Modificaci\u00f3n de arrays"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#ordenaciones","text":"En Javascript, es muy habitual que tengamos arrays y queramos ordenar su contenido por diferentes criterios. En este apartado, vamos a ver los m\u00e9todos reverse() y sort() , utiles para ordenar un array: M\u00e9todo Descripci\u00f3n .reverse() Invierte el orden de elementos del array. .sort() Ordena los elementos del array bajo un criterio de ordenaci\u00f3n alfab\u00e9tica. .sort(func) Ordena los elementos del array bajo un criterio de ordenaci\u00f3n func . En primer lugar, el m\u00e9todo reverse() cambia los elementos del array en orden inverso, es decir, si tenemos [5, 4, 3] lo modifica de modo que ahora tenemos [3, 4, 5] . Por otro lado, el m\u00e9todo sort() realiza una ordenaci\u00f3n ( por orden alfab\u00e9tico ) de los elementos del array: const array = [\"Alberto\", \"Ana\", \"Mauricio\", \"Bernardo\", \"Zoe\"]; // Ojo, cada l\u00ednea est\u00e1 modificando el array original array.sort(); // ['Alberto', 'Ana', 'Bernardo', 'Mauricio', 'Zoe'] array.reverse(); // ['Zoe', 'Mauricio', 'Bernardo', 'Ana', 'Alberto'] Un detalle muy importante es que estos dos m\u00e9todos modifican el array original , adem\u00e1s de devolver el array modificado. Si no quieres que el array original cambie, asegurate de crear primero una copia del array, para as\u00ed realizar la ordenaci\u00f3n sobre esa copia y no sobre el original. Sin embargo, la ordenaci\u00f3n anterior se realiz\u00f3 sobre y todo fue bien. Veamos que ocurre si intentamos ordenar un array de n\u00fameros: const array = [1, 8, 2, 32, 9, 7, 4]; array.sort(); // Devuelve [1, 2, 32, 4, 7, 8, 9], que NO es el resultado deseado Esto ocurre porque, al igual que en el ejemplo anterior, el tipo de ordenaci\u00f3n que realiza sort() por defecto es una ordenaci\u00f3n alfab\u00e9tica, mientras que en esta ocasi\u00f3n buscamos una ordenaci\u00f3n natural , que es la que se suele utilizar con n\u00fameros. Esto se puede hacer en Javascript, pero requiere pasarle por par\u00e1metro al sort() lo que se llama una funci\u00f3n de comparaci\u00f3n .","title":"Ordenaciones"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#funcion-de-comparacion","text":"Como hemos visto, la ordenaci\u00f3n que realiza sort() por defecto es siempre una ordenaci\u00f3n alfab\u00e9tica. Sin embargo, podemos pasarle por par\u00e1metro lo que se conoce con los nombres de funci\u00f3n de ordenaci\u00f3n o funci\u00f3n de comparaci\u00f3n . Dicha funci\u00f3n, lo que hace es establecer otro criterio de ordenaci\u00f3n, en lugar del que tiene por defecto: const array = [1, 8, 2, 32, 9, 7, 4]; // Funci\u00f3n de comparaci\u00f3n para ordenaci\u00f3n natural const fc = function (a, b) { return a > b; }; array.sort(fc); // Devuelve [1, 2, 4, 7, 8, 9, 32], que S\u00cd es el resultado deseado Como se puede ver en el ejemplo anterior, creando la funci\u00f3n de ordenaci\u00f3n fc y pas\u00e1ndola por par\u00e1metro a sort() , le indicamos como debe hacer la ordenaci\u00f3n y ahora si la realiza correctamente. Si profundizamos en la tarea que realiza el sort() , lo que hace concretamente es analizar pares de elementos del array en cuesti\u00f3n. El primer elemento es a y el segundo elemento es b . Por lo tanto, al pasarle la funci\u00f3n de comparaci\u00f3n fc , dicha funci\u00f3n se encargar\u00e1 de, si devuelve true cambia el orden de a y b , si devuelve false los mantiene igual. Esto es lo que se conoce como el m\u00e9todo de la burbuja , uno de los sistemas de ordenaci\u00f3n m\u00e1s sencillos. Obviamente, el usuario puede crear sus propias funciones de comparaci\u00f3n con criterios espec\u00edficos y personalizados, no s\u00f3lo el que se muestra como ejemplo.","title":"Funci\u00f3n de comparaci\u00f3n"},{"location":"desarrollo/javascript/02-fundamentos_de_javascript/#array-functions","text":"En un tema posterior, veremos como desde Javascript es posible realizar bucles mediante las array functions , unos m\u00e9todos especiales de los que permiten realizar bucles de una forma m\u00e1s legible, utilizando callbacks. Fuente: Lenguaje Javascript por Manz","title":"Array functions"},{"location":"desarrollo/javascript/03-caracteristicas/","text":"Caracter\u00edsticas \u00b6 Array functions \u00b6 As\u00ed como tenemos un conjunto de m\u00e9todos para realizar sobre variables que sean u otro conjunto de m\u00e9todos para variables que sean , existe una serie de m\u00e9todos que podemos utilizar sobre variables que sean de tipo . Son las llamadas array functions que veremos a continuaci\u00f3n. \u00bfQu\u00e9 son las Array functions? \u00b6 B\u00e1sicamente, son m\u00e9todos que tiene cualquier variable que sea de tipo , y que permite realizar una operaci\u00f3n con todos los elementos de dicho array para conseguir un objetivo concreto, dependiendo del m\u00e9todo. En general, a dichos m\u00e9todos se les pasa por par\u00e1metro una funci\u00f3n callback y unos par\u00e1metros opcionales. Estas son las Array functions que podemos encontrarnos en Javascript: M\u00e9todo Descripci\u00f3n .forEach(cb, arg) Realiza la operaci\u00f3n definida en cb por cada elemento del array. .every(cb, arg) Comprueba si todos los elementos del array cumplen la condici\u00f3n de cb . .some(cb, arg) Comprueba si al menos un elem. del array cumple la condici\u00f3n de cb . .map(cb, arg) Construye un array con lo que devuelve cb por cada elemento del array. .filter(cb, arg) Construye un array con los elementos que cumplen el filtro de cb . .findIndex(cb, arg) Devuelve la posici\u00f3n del elemento que cumple la condici\u00f3n de cb . .find(cb, arg) Devuelve el elemento que cumple la condici\u00f3n de cb . .reduce(cb, arg) Ejecuta cb con cada elemento (de izq a der), acumulando el resultado. .reduceRight(cb, arg) Idem al anterior, pero en orden de derecha a izquierda. A grandes rasgos, a cada uno de estos m\u00e9todos se les pasa una funci\u00f3n callback que se ejecutar\u00e1 por cada uno de los elementos que contiene el array. Empecemos por forEach() , que es quiz\u00e1s el m\u00e1s sencillo de todos. forEach (Cada uno) \u00b6 Como se puede ver, el m\u00e9todo forEach() no devuelve nada y espera que se le pase por par\u00e1metro una que se ejecutar\u00e1 por cada elemento del array. Esa funci\u00f3n, puede ser pasada en cualquiera de los formatos que hemos visto: como funci\u00f3n tradicional o como funci\u00f3n flecha: const arr = [\"a\", \"b\", \"c\", \"d\"]; // Con funciones por expresi\u00f3n const f = function () { console.log(\"Un elemento.\"); }; arr.forEach(f); // Con funciones an\u00f3nimas arr.forEach(function () { console.log(\"Un elemento.\"); }); // Con funciones flecha arr.forEach(() => console.log(\"Un elemento.\")); Sin embargo, este ejemplo no tiene demasiada utilidad. A la callback se le pueden pasar varios par\u00e1metros opcionales: Si se le pasa un primer par\u00e1metro , este ser\u00e1 el elemento del array. Si se le pasa un segundo par\u00e1metro , este ser\u00e1 la posici\u00f3n en el array. Si se le pasa un tercer par\u00e1metro , este ser\u00e1 el array en cuesti\u00f3n. Veamos un ejemplo: const arr = [\"a\", \"b\", \"c\", \"d\"]; arr.forEach((e) => console.log(e)); // Devuelve 'a' / 'b' / 'c' / 'd' arr.forEach((e, i) => console.log(e, i)); // Devuelve 'a' 0 / 'b' 1 / 'c' 2 / 'd' 3 arr.forEach((e, i, a) => console.log(a[0])); // Devuelve 'a' / 'a' / 'a' / 'a' En este ejemplo, he nombrado e al par\u00e1metro que har\u00e1 referencia al elemento , i al par\u00e1metro que har\u00e1 referencia al \u00edndice ( posici\u00f3n del array ) y a al par\u00e1metro que har\u00e1 referencia al array en cuesti\u00f3n. A\u00fan as\u00ed, el usuario puede ponerle a estos par\u00e1metros el nombre que prefiera. Como se puede ver, realmente forEach() es otra forma de hacer un bucle ( sobre un array ), sin tener que recurrir a bucles tradicionales como for o while . Como vemos en la tabla anterior, al m\u00e9todo forEach() se le puede pasar un segundo par\u00e1metro arg , que representa el valor que sobreescribir\u00eda a la palabra clave this en el c\u00f3digo dentro de la funci\u00f3n callback . De necesitar esta funcionalidad, recuerda que no puedes utilizar las funciones flecha, ya que el this no tiene efecto en ellas. every (Todos) \u00b6 El m\u00e9todo every() permite comprobar si todos y cada uno de los elementos de un array cumplen la condici\u00f3n que se especifique en la callback : const arr = [\"a\", \"b\", \"c\", \"d\"]; arr.every((e) => e.length == 1); // true En este caso, la magia est\u00e1 en el callback . La condici\u00f3n es que la longitud de cada elemento del array sea 1 . Si dicha funci\u00f3n devuelve true , significa que cumple la condici\u00f3n, si devuelve false , no la cumple. Por lo tanto, si todos los elementos del array devuelven true , entonces every() devolver\u00e1 true . Si expandimos el ejemplo anterior a un c\u00f3digo m\u00e1s detallado, tendr\u00edamos el siguiente ejemplo equivalente, que quiz\u00e1s sea m\u00e1s comprensible para entenderlo: const arr = [\"a\", \"b\", \"c\", \"d\"]; // Esta funci\u00f3n se ejecuta por cada elemento del array const todos = function (e) { // Si el tama\u00f1o del string es igual a 1 if (e.length == 1) return true; else return false; }; arr.every(todos); // Le pasamos la funci\u00f3n callback todos() a every some (Al menos uno) \u00b6 De la misma forma que el m\u00e9todo anterior sirve para comprobar si todos los elementos del array cumplen una determinada condici\u00f3n, con some() podemos comprobar si al menos uno de los elementos del array, cumplen dicha condici\u00f3n definida por el callback . const arr = [\"a\", \"bb\", \"c\", \"d\"]; arr.some((e) => e.length == 2); // true Observa que en este ejemplo, el m\u00e9todo some() devuelve true porque existe al menos un elemento del array con una longitud de 2 car\u00e1cteres. map (Transformaciones) \u00b6 El m\u00e9todo map() es un m\u00e9todo muy potente y \u00fatil para trabajar con arrays, puesto que su objetivo es devolver un nuevo array donde cada uno de sus elementos ser\u00e1 lo que devuelva la funci\u00f3n callback por cada uno de los elementos del array original: const arr = [\"Ana\", \"Pablo\", \"Pedro\", \"Pancracio\", \"Heriberto\"]; const nuevoArr = arr.map((e) => e.length); nuevoArr; // Devuelve [3, 5, 5, 9, 9] Observa que el array devuelto por map() es nuevoArr , y cada uno de los elementos que lo componente, es el n\u00famero devuelto por el callback (e.length), que no es otra cosa sino el tama\u00f1o de cada . Este m\u00e9todo nos permite hacer multitud de operaciones, ya que donde devolvemos e.length podriamos devolver el propio modificado o cualquier otra cosa. filter (Filtrado) \u00b6 El m\u00e9todo filter() nos permite filtrar los elementos de un array y devolver un nuevo array con s\u00f3lo los elementos que queramos. Para ello, utilizaremos la funci\u00f3n callback para establecer una condici\u00f3n que devuelve true s\u00f3lo en los elementos que nos interesen: const arr = [\"Ana\", \"Pablo\", \"Pedro\", \"Pancracio\", \"Heriberto\"]; const nuevoArr = arr.filter((e) => e[0] == \"P\"); nuevoArr; // Devuelve ['Pablo', 'Pedro', 'Pancracio'] En este ejemplo, filtramos s\u00f3lo los elementos en los que su primera letra sea P . Por lo tanto, la variable nuevoArr ser\u00e1 un array con s\u00f3lo esos elementos. Ten en cuenta que si ning\u00fan elemento cumple la condici\u00f3n, filter() devuelve un vac\u00edo. find (B\u00fasqueda) \u00b6 En ECMAScript 6 se introducen dos nuevos m\u00e9todos dentro de las Array functions : find() y findIndex() . Ambos se utilizan para buscar elementos de un array mediante una condici\u00f3n, la diferencia es que el primero devuelve el elemento mientras que el segundo devuelve su posici\u00f3n en el array original. Veamos como funcionan: const arr = [\"Ana\", \"Pablo\", \"Pedro\", \"Pancracio\", \"Heriberto\"]; arr.find((e) => e.length == 5); // 'Pablo' arr.findIndex((e) => e.length == 5); // 1 La condici\u00f3n que hemos utilizado en este ejemplo es buscar el elemento que tiene 5 car\u00e1cteres de longitud. Al buscarlo en el array original, el primero que encontramos es Pablo , puesto que find() devolver\u00e1 'Pablo' y findIndex() devolver\u00e1 1 , que es la segunda posici\u00f3n del array donde se encuentra. En el caso de no encontrar ning\u00fan elemento que cumpla la condici\u00f3n, find() devolver\u00e1 , mientras que findIndex() , que debe devolver un , devolver\u00e1 -1 . reduce (Acumuladores) \u00b6 Por \u00faltimo, nos encontramos con una pareja de m\u00e9todos denominados reduce() y reduceRight() . Ambos m\u00e9todos se encargan de recorrer todos los elementos del array, e ir acumulando sus valores ( o alguna operaci\u00f3n diferente ) y sumarlo todo, para devolver su resultado final. En este par de m\u00e9todos, encontraremos una primera diferencia en su funci\u00f3n callback , puesto que en lugar de tener los cl\u00e1sicos par\u00e1metros opcionales (e, i, a) que hemos utilizado hasta ahora, tiene (p, e, i, a) , donde vemos que aparece un primer par\u00e1metro extra inicial: p . En la primera iteraci\u00f3n, p contiene el valor del primer elemento del array y e del segundo. En siguientes iteraciones, p es el acumulador que contiene lo que devolvi\u00f3 el callback en la iteraci\u00f3n anterior, mientras que e es el siguiente elemento del array, y as\u00ed sucesivamente. Veamos un ejemplo para entenderlo: const arr = [95, 5, 25, 10, 25]; arr.reduce((p, e) => { console.log(`P=${p} e=${e}`); return p + e; }); // P=95 e=5 (1\u00aa iteraci\u00f3n: elemento 1: 95 + elemento 2: 5) = 100 // P=100 e=25 (2\u00aa iteraci\u00f3n: 100 + elemento 3: 25) = 125 // P=125 e=10 (3\u00aa iteraci\u00f3n: 125 + elemento 4: 10) = 135 // P=135 e=25 (4\u00aa iteraci\u00f3n: 135 + elemento 5: 25) = 160 // Finalmente, devuelve 160 Gracias a esto, podemos utilizar el m\u00e9todo reduce() como acumulador de elementos de izquierda a derecha y reduceRight() como acumulador de elementos de derecha a izquierda. Veamos un ejemplo de cada uno, realizando una resta en lugar de una suma: const arr = [95, 5, 25, 10, 25]; arr.reduce((p, e) => p - e); // 95 - 5 - 25 - 10 - 25. Devuelve 30 arr.reduceRight((p, e) => p - e); // 25 - 10 - 25 - 5 - 95. Devuelve -110 Recuerda que en cualquiera de estas array functions puedes realizar operaciones o condiciones tanto con el par\u00e1metro e ( elemento ), como con el par\u00e1metro i ( \u00edndice o posici\u00f3n ) o con el par\u00e1metro a ( array ). Iteradores \u00b6 En ECMAScript 6 se introducen unos m\u00e9todos muy \u00fatiles para utilizar como iteradores ( objetos preparados para recorrer los elementos de un array y devolver informaci\u00f3n ). Hablamos de los m\u00e9todos keys() , values() y entries() . El primero de ellos permite avanzar en un array, mientras va devolviendo las posiciones, el segundo los valores ( el elemento en s\u00ed ) y el tercero devuelve un array con la posici\u00f3n en el primer elemento y el valor en el segundo elemento. M\u00e9todo Descripci\u00f3n i .keys() Permite iterar un array e ir devolviendo sus \u00edndices o posiciones (keys). i .values() Permite iterar un array e ir devolviendo sus valores (elementos). i .entries() Permite iterar un array e ir devolviendo un array [\u00edndice, valor] . Estos m\u00e9todos, combinados con un for...of por ejemplo, permiten recorrer los arrays y obtener diferente informaci\u00f3n del array r\u00e1pidamente. En el siguiente ejemplo utilizamos una caracter\u00edstica avanzada que veremos m\u00e1s adelante llamada desestructuraci\u00f3n : const arr = [\"Sonic\", \"Mario\", \"Luigi\"]; // Obtiene un array con las keys (posiciones) const keys = [...arr.keys()]; // [0, 1, 2] // Obtiene un array con los valores (elementos) const values = [...arr.values()]; // ['Sonic', 'Mario', 'Luigi'] // Obtiene un array con las entradas (par key, valor) const entries = [...arr.entries()]; // [[0, 'Sonic'], [1, 'Mario'], [2, 'Luigi']] Expresiones regulares (RegExp) \u00b6 En muchas ocasiones nos encontraremos en la situaci\u00f3n de querer realizar una o varias acciones si se cumple un determinado caso. Pero muchas veces, esos casos no son tan simples, sino que existe un n\u00famero muy alto de situaciones diferentes que no podemos cubrir de formas tradicionales. En esas situaciones es donde las expresiones regulares quiz\u00e1s nos puedan ser de ayuda. \u00bfQu\u00e9 es una RegExp? \u00b6 Las expresiones regulares ( a menudo llamadas RegExp o RegEx ) son un sistema para buscar, capturar o reemplazar texto utilizando patrones . Estos patrones permiten realizar una b\u00fasqueda de texto de una forma relativamente sencilla y abstracta, de forma que abarca una gran cantidad de posibilidades que de otra forma ser\u00eda imposible o muy costosa. Constructor Descripci\u00f3n new RegExp(r, flags) Crea una nueva expresi\u00f3n regular a partir de r con los flags indicados. /r/flags Simplemente, la expresi\u00f3n regular r entre barras / . Notaci\u00f3n preferida. As\u00ed pues, podr\u00edamos crear expresiones regulares de estas dos formas, siempre teniendo como notaci\u00f3n preferida la primera: // Notaci\u00f3n literal (preferida) const r = /.a.o/i; // Notaci\u00f3n de objeto const r = new RegExp(\".a.o\", \"i\"); const r = new RegExp(/.a.o/, \"i\"); En ambos ejemplos, estamos estableciendo la expresi\u00f3n regular .a.o , donde el punto ( como veremos m\u00e1s adelante ) es un comod\u00edn que simboliza cualquier car\u00e1cter, y la i es un flag que establece que no diferencia may\u00fasculas de min\u00fasculas. En Javascript, se prefiere utilizar las barras / para delimitar una expresi\u00f3n regular en una variable. Se trata de una forma m\u00e1s c\u00f3moda y compacta que evita tener que hacer un new del objeto . Propiedades de una RegExp \u00b6 Cada expresi\u00f3n regular creada, tiene unas propiedades definidas, donde podemos consultar ciertas caracter\u00edsticas de la expresi\u00f3n regular en cuesti\u00f3n. Adem\u00e1s, tambi\u00e9n tiene unas propiedades de comprobaci\u00f3n para saber si un flag determinado est\u00e1 activo o no: Propiedades Descripci\u00f3n .source Devuelve un string con la expresi\u00f3n regular original al crear el objeto ( sin flags ). .flags Devuelve un string con los flags activados en la expresi\u00f3n regular. .lastIndex Devuelve la posici\u00f3n donde se encontr\u00f3 una ocurrencia en la \u00faltima b\u00fasqueda. .global Comprueba si el flag g est\u00e1 activo en la expresi\u00f3n regular. .ignoreCase Comprueba si el flag i est\u00e1 activo en la expresi\u00f3n regular. .multiline Comprueba si el flag m est\u00e1 activo en la expresi\u00f3n regular. .unicode Comprueba si el flag u est\u00e1 activo en la expresi\u00f3n regular. .sticky Comprueba si el flag y est\u00e1 activo en la expresi\u00f3n regular. El funcionamiento de los flags los veremos en el apartado siguiente. No obstante, con las propiedades .source y .flags se puede obtener casi toda la informaci\u00f3n que se puede hacer con dichos flags. const r = /reg/gi; r.source; // 'reg' r.flags; // 'ig' r.flags.includes(\"g\"); // true (equivalente a r.global) r.flags.includes(\"u\"); // false (equivalente a r.unicode) Tambi\u00e9n podemos comprobar si un flag est\u00e1 activo con la propiedad .flags combinada con includes() , como se puede ver en el ejemplo anterior. Por otro lado, .source nos devuelve un con la expresi\u00f3n regular definida ( y sin flags ). La utilidad de lastIndex() la veremos m\u00e1s adelante. Flags de una RegExp \u00b6 El segundo par\u00e1metro del new RegExp() o el que se escribe despu\u00e9s de la segunda barra / delimitadora del literal de las expresiones regulares, son una serie de car\u00e1cteres que indican los flags activos en la expresi\u00f3n regular en cuesti\u00f3n: const r1 = /reg/; const r2 = /reg/i; const r3 = /reg/gi; La expresi\u00f3n regular r1 no tiene ning\u00fan flag activado, mientras que r2 tiene el flag i activado y r3 tiene el flag i y el flag g activado. Veamos para que sirve cada flag: Flag Booleano Descripci\u00f3n i .ignoreCase Ignora may\u00fasculas y min\u00fasculas. Se suele denominar insensible a may\u00fas/min\u00fas . g .global B\u00fasqueda global. Sigue buscando coincidencias en lugar de pararse al encontrar una. m .multiline Multil\u00ednea. Permite a ^ y $ tratar los finales de l\u00ednea \\r o \\n . u .unicode Unicode. Interpreta el patr\u00f3n como un c\u00f3digo de una secuencia Unicode. y .sticky Sticky. Busca s\u00f3lo desde la posici\u00f3n indicada por lastIndex . Cada una de estas flags se pueden comprobar si est\u00e1n activas desde Javascript con su booleano asociado, que es una propiedad de la expresi\u00f3n regular: const r = /reg/gi; r.global; // true r.ignoreCase; // true r.multiline; // false r.sticky; // false r.unicode; // false M\u00e9todos de RegExp \u00b6 Los objetos RegExp tienen varios m\u00e9todos para utilizar expresiones regulares contra textos y saber si \u00abcasan\u00bb o no, es decir, si el patr\u00f3n de la expresi\u00f3n regular encaja con el texto propuesto. M\u00e9todo Descripci\u00f3n test(str) Comprueba si la expresi\u00f3n regular \u00abcasa\u00bb con el texto str pasado por par\u00e1metro. exec(str) Ejecuta una b\u00fasqueda de patr\u00f3n en el texto str . Devuelve un array con las capturas. Por ejemplo, veamos como utilizar la expresi\u00f3n regular del ejemplo anterior con el m\u00e9todo test() para comprobar si encaja con un texto determinado: const r = /.a.o/i; r.test(\"gato\"); // true r.test(\"pato\"); // true r.test(\"perro\"); // false r.test(\"DATO\"); // true (el flag i permite may\u00fas/min\u00fas) El m\u00e9todo exec() lo veremos un poco m\u00e1s adelante en el apartado de captura de patrones , ya que es algo m\u00e1s complejo. Primero debemos aprender que car\u00e1cteres especiales existen en las expresiones regulares para dominarlas. Car\u00e1cteres especiales \u00b6 Antes de comenzar a utilizar expresiones regulares hay que aprender la parte m\u00e1s compleja de ellas: los car\u00e1cteres especiales. Dentro de las expresiones regulares, existen ciertos car\u00e1cteres que tienen un significado especial, y tambi\u00e9n, muchos de ellos dependen de donde se encuentren para tener ese significado especial, por lo que hay que aprender bien como funcionan. Clases b\u00e1sicas \u00b6 Empecemos con algunos de los m\u00e1s sencillos: Caracter especial Descripci\u00f3n . Comod\u00edn, cualquier caracter. \\ Invierte el significado de un car\u00e1cter. Si es especial, lo escapa. Si no, lo vuelve especial. \\t Caracter especial. Tabulador. \\r Caracter especial. Retorno de carro. A menudo denominado CR . \\n Caracter especial. Nueva l\u00ednea. A menudo denominado \u00abline feed\u00bb o LF . En esta peque\u00f1a tabla vemos algunos caracteres especiales que podemos usar en expresiones regulares. Observa que al igual que con otros tipos de datos, podemos utilizar el m\u00e9todo test() sobre el literal de la expresi\u00f3n regular, sin necesidad de guardarla en una variable previamente: // Buscamos RegExp que encaje con \"Manz\" /M.nz/.test(\"Manz\"); // true /M.nz/.test(\"manz\"); // false (La \u00abM\u00bb debe ser may\u00fascula) /M.nz/i.test(\"manz\"); // true (Ignoramos may\u00fas/min\u00fas con el flag \u00abi\u00bb) // Buscamos RegExp que encaje con \"A.\" /A./.test(\"A.\"); // true (Ojo, nos da true, pero el punto es comod\u00edn) /A./.test(\"Ab\"); // true (Nos da true con cualquier cosa) /A\\./.test(\"A.\"); // true (Soluci\u00f3n correcta) /A\\./.test(\"Ab\"); // false (Ahora no deja pasar algo que no sea punto) Conjunto de car\u00e1cteres o alternativas \u00b6 Dentro de las expresiones regulares los corchetes [] tienen un significado especial. Se trata de un mecanismo para englobar un conjunto de car\u00e1cteres personalizado . Por otro lado, si incluimos un circunflejo ^ antes de los car\u00e1cteres del corchete, invertimos el significado, pasando a ser que no exista el conjunto de car\u00e1cteres personalizado: Caracter especial Descripci\u00f3n [] Rango de car\u00e1cteres. Cualquiera de los caracteres del interior de los corchetes. [^] No exista cualquiera de los caracteres del interior de los corchetes. | Establece una alternativa: lo que est\u00e1 a la izquierda o lo que est\u00e1 a la derecha. Por \u00faltimo, tenemos el \u00abpipe\u00bb | , con el que podemos establecer alternativas. Veamos un ejemplo aplicado a esto, que se ver\u00e1 m\u00e1s claro: const r = /[aeiou]/i; // RegExp que acepta vocales (may\u00fas/min\u00fas) r.test(\"a\"); // true (es vocal) r.test(\"E\"); // true (es vocal, y tiene flag \u00abi\u00bb) r.test(\"t\"); // false (no es vocal) const r = /[^aeiou]/i; // RegExp que acepta lo que no sea vocal (may\u00fas/min\u00fas) r.test(\"a\"); // false r.test(\"E\"); // false r.test(\"T\"); // true r.test(\"m\"); // true const r = /casa|cama/; // RegExp que acepta la primera o la segunda opci\u00f3n r.test(\"casa\"); // true r.test(\"cama\"); // true r.test(\"capa\"); // false En el interior de los corchetes, si establecemos dos car\u00e1cteres separados por gui\u00f3n, por ejemplo [0-9] , se entiende que indicamos el rango de car\u00e1cteres entre 0 y 9 , sin tener que escribirlos todos expl\u00edcitamente. De esta forma podemos crear rangos como [A-Z] ( may\u00fasculas ) o [a-z] ( min\u00fasculas ), o incluso varios rangos espec\u00edficos como [A-Za-z0-9] : Caracter especial Alternativa Descripci\u00f3n [0-9] \\d Un d\u00edgito del 0 al 9. [^0-9] \\D No exista un d\u00edgito del 0 al 9. [A-Z] Letra may\u00fascula de la A a la Z . Excluye \u00f1 o letras acentuadas. [a-z] Letra min\u00fascula de la a a la z . Excluye \u00f1 o letras acentuadas. [A-Za-z0-9] \\w Car\u00e1cter alfanum\u00e9rico (letra may\u00fascula, min\u00fascula o d\u00edgito). [^A-Za-z0-9] \\W No exista car\u00e1cter alfanum\u00e9rico (letra may\u00fascula, min\u00fascula o d\u00edgito). [ \\t\\r\\n\\f] \\s Car\u00e1cter de espacio en blanco (espacio, TAB , CR , LF o FF ). [^ \\t\\r\\n\\f] \\S No exista car\u00e1cter de espacio en blanco (espacio, TAB , CR , LF o FF ). \\xN Car\u00e1cter hexadecimal n\u00famero N . \\uN Car\u00e1cter Unicode n\u00famero N . Observa que en esta tabla tenemos una notaci\u00f3n alternativa que es equivalente al caracter especial indicado. Por ejemplo, es lo mismo escribir [0-9] que \\d . Algunos programadores encuentran m\u00e1s explicativa la primera forma y otros m\u00e1s c\u00f3moda la segunda. Anclas \u00b6 Dentro de las expresiones regulares, las anclas son un recurso muy importante, ya que permiten deliminar los patrones de b\u00fasqueda e indicar si empiezan o terminan por car\u00e1cteres concretos, siendo mucho m\u00e1s espec\u00edficos al realizar la b\u00fasqueda: Caracter especial Descripci\u00f3n ^ Ancla. Delimina el inicio del patr\u00f3n. Significa empieza por . $ Ancla. Delimina el final del patr\u00f3n. Significa acaba en . \\b Posici\u00f3n de una palabra limitada por espacios, puntuaci\u00f3n o inicio/final. \\B Opuesta al anterior. Posici\u00f3n entre 2 caracteres alfanum\u00e9ricos o no alfanum\u00e9ricos. Las dos primeras son bastante \u00fatiles cuando sabemos que el texto que estamos buscando termina o empieza de una forma concreta. De este modo podemos hacer cosas como las siguientes: const r = /^mas/i; r.test(\"Formas\"); // false (no empieza por \"mas\") r.test(\"Master\"); // true r.test(\"Masticar\"); // true const r = /do$/i; r.test(\"V\u00edvido\"); // true r.test(\"Domin\u00f3\"); // false Por otro lado, \\b nos permite indicar si el texto adyacente est\u00e1 seguido o precedido de un l\u00edmite de palabra ( espacio ), puntuaci\u00f3n ( comas o puntos ) o inicio o final del : const r = /fo\\b/; r.test(\"Esto es un p\u00e1rrafo de texto.\"); // true (tras \"fo\" hay un l\u00edmite de palabra) r.test(\"Esto es un p\u00e1rrafo.\"); // true (tras \"fo\" hay un signo de puntuaci\u00f3n) r.test(\"Un c\u00edrculo es una forma.\"); // false (tras \"fo\" sigue la palabra) r.test(\"Frase que termina en fo\"); // true (tras \"fo\" termina el string) Por \u00faltimo, \\B es la operaci\u00f3n opuesta a \\b , por lo que podemos utilizarla cuando nos interesa que el texto no est\u00e9 delimitado por una palabra, puntuaci\u00f3n o string en s\u00ed. Cuantificadores \u00b6 En las expresiones regulares los cuantificadores permiten indicar cu\u00e1ntas veces se puede repetir el car\u00e1cter inmediatamente anterior. Existen varios tipos de cuantificadores: Caracter especial Descripci\u00f3n * El car\u00e1cter anterior puede aparecer 0 o m\u00e1s veces. + El car\u00e1cter anterior puede aparecer 1 o m\u00e1s veces. ? El car\u00e1cter anterior puede aparecer o no aparecer. {n} El car\u00e1cter anterior aparece n veces. {n,} El car\u00e1cter anterior aparece n o m\u00e1s veces. {n,m} El car\u00e1cter anterior aparece de n a m veces. Veamos algunos ejemplos para aprender a aplicarlos. Comencemos con * ( 0 o m\u00e1s veces ): // 'a' aparece 0 o m\u00e1s veces en el string const r = /a*/; r.test(\"\"); // true ('a' aparece 0 veces) r.test(\"a\"); // true ('a' aparece 1 veces) r.test(\"aa\"); // true ('a' aparece 2 veces) r.test(\"aba\"); // true ('a' aparece 2 veces) r.test(\"bbb\"); // true ('a' aparece 0 veces) El cuantificador + es muy parecido a * , s\u00f3lo que con el primero es necesario que el car\u00e1cter anterior aparezca al menos una vez: // 'a' aparece 1 o m\u00e1s veces (equivalente a /aa*/) const r = /a+/; r.test(\"\"); // false ('a' aparece 0 veces) r.test(\"a\"); // true ('a' aparece 1 veces) r.test(\"aa\"); // true ('a' aparece 2 veces) r.test(\"aba\"); // true ('a' aparece 2 veces) r.test(\"bbb\"); // false ('a' aparece 0 veces) El cuantificador ? se suele utilizar para indicar que el car\u00e1cter anterior es opcional ( puede aparecer o puede no aparecer ). Normalmente se utiliza cuando quieres indicar que no importa que aparezca un car\u00e1cter opcional: const r = /disparos?/i; r.test(\"Escuch\u00e9 disparos en la habitaci\u00f3n.\"); // true r.test(\"Efectu\u00f3 un disparo al sujeto.\"); // true r.test(\"La pistola era de agua.\"); // false Los tres cuantificadores siguientes, se utilizan cuando necesitamos concretar m\u00e1s el n\u00famero de repeticiones del caracter anterior. Por ejemplo, {n} indica un n\u00famero exacto, {n,} indica al menos n veces y {n,m} establece que se repita de n a m veces. // Un n\u00famero formado de 2 d\u00edgitos (del 0 al 9) const r = /[0-9]{2}/; r.test(42); // true r.test(88); // true r.test(1); // false r.test(100); // true Observa que el \u00faltimo aparece como true . Esto ocurre porque en la expresi\u00f3n regular no se han establecido anclas que delimiten el inicio y/o el final del texto. Si las a\u00f1adimos, es m\u00e1s estricto con las comprobaciones: const r = /^[0-9]{2}$/; r.test(4); // false r.test(55); // true r.test(100); // false const r = /^[0-9]{3,}$/; r.test(33); // false r.test(4923); // true const r = /^[0-9]{2,5}$/; r.test(2); // false r.test(444); // true r.test(543213); // false Si quieres profundizar con las expresiones regulares , puedes jugar a RegEx People , un peque\u00f1o y b\u00e1sico juego para aprender a utilizar las expresiones regulares y buscar patrones, con su c\u00f3digo fuente disponible en GitHub . Recuerda tambi\u00e9n que aunque test() espera un por par\u00e1metro, en caso de enviarle otro objeto, lo pasar\u00e1 a mediante el m\u00e9todo toString() que existe en todos los objetos de Javascript Captura de patrones \u00b6 Pero con las expresiones regulares no s\u00f3lo podemos realizar b\u00fasquedas de patrones. Una de las caracter\u00edsticas m\u00e1s importantes de las expresiones regulares es lo potente y vers\u00e1til que resultan las capturas de patrones . Toda expresi\u00f3n regular que utilice la parentizaci\u00f3n ( englobe con par\u00e9ntesis fragmentos de texto ) est\u00e1 realizando impl\u00edcitamente una captura de texto, que es muy \u00fatil para obtener r\u00e1pidamente informaci\u00f3n. Para ello, dejamos de utilizar el m\u00e9todo test(str) y comenzamos a utilizar exec(str) , que funciona exactamente igual, s\u00f3lo que devuelve un array con las capturas realizadas. Antes de empezar a utilizarlo, necesitamos saber detalles sobre la parentizaci\u00f3n : Caracter especial Descripci\u00f3n (x) El patr\u00f3n inclu\u00eddo dentro de par\u00e9ntesis se captura y se guarda en $1 o sucesivos. (?:x) Si inclu\u00edmos ?: al inicio del contenido de los par\u00e9ntesis, evitamos capturar ese patr\u00f3n. x(?=y) Busca s\u00f3lo si x est\u00e1 seguido de y . x(?!y) Busca s\u00f3lo si x no est\u00e1 seguido de y . As\u00ed pues, vamos a realizar una captura a trav\u00e9s de los par\u00e9ntesis de una expresi\u00f3n regular: // RegExp que captura palabras de 3 letras. const r = /\\b([a-z]{3})\\b/gi; const str = \"Hola a todos, amigos m\u00edos. Esto es una prueba que permitir\u00e1 ver que ocurre.\"; r.global; // true (el flag global est\u00e1 activado) r.exec(str); // ['una', 'una'] index: 35 r.exec(str); // ['que', 'que'] index: 46 r.exec(str); // ['ver', 'ver'] index: 60 r.exec(str); // ['que', 'que'] index: 64 r.exec(str); // null El m\u00e9todo exec() nos permite ejecutar una b\u00fasqueda sobre el texto str hasta encontrar una coincidencia. En ese caso, se detiene la b\u00fasqueda y nos devuelve un array con los capturados por la parentizaci\u00f3n. Si el flag g est\u00e1 activado, podemos volver a ejecutar exec() para continuar buscando la siguiente aparici\u00f3n, hasta que no encuentre ninguna m\u00e1s, que devolver\u00e1 null . RegEx en Strings \u00b6 Quiz\u00e1s, generalmente el usuario prefiera utilizar el m\u00e9todo match(reg) de los , que permiten ejecutar la b\u00fasqueda de la expresi\u00f3n regular reg pasada por par\u00e1metro, sobre esa variable de texto. El resultado es que nos devuelve un con los capturados: const r = /\\b([a-z]{3})\\b/gi; const str = \"Hola a todos, amigos m\u00edos. Esto es una prueba que permitir\u00e1 ver que ocurre.\"; str.match(r); // Devuelve ['una', 'que', 'ver', 'que'] const r = /\\bv([0-9]+)\\.([0-9]+)\\.([0-9]+)\\b/; const str = \"v1.0.21\"; str.match(r); // Devuelve ['v1.0.21', '1', '0', '21'] En el caso de no existir parentizaci\u00f3n , el array devuelto contiene un con todo el texto capturado. En el caso de existir m\u00faltiples parentizaciones ( como en el \u00faltimo ejemplo ), el array devuelto contiene un con todo el texto capturado, y un por cada parentizaci\u00f3n. Recuerda que los tienen varios m\u00e9todos que permiten el uso de expresiones regulares para realizar operaciones, como por ejemplo, el replace() , para hacer reemplazos en todas las ocurrencias: const daenerys = \"Javascript es un gran lenguaje\"; daenerys.replace(/[aeou]/g, \"i\"); // 'Jiviscript is in grin lingiiji' JSON \u00b6 Cuando trabajamos con mucha cantidad de informaci\u00f3n, se puede volver necesario aislar el c\u00f3digo de programaci\u00f3n de los datos. De esta forma, podemos guardar informaci\u00f3n en un fichero independiente, separado del archivo donde tenemos el c\u00f3digo de nuestro programa. As\u00ed, si necesitamos actualizar o modificar datos, no tenemos que tocar el c\u00f3digo de nuestro programa. \u00bfQu\u00e9 es JSON? \u00b6 JSON son las siglas de JavaScript Object Notation , y no es m\u00e1s que un formato ligero de datos, con una estructura ( notaci\u00f3n ) espec\u00edfica, que es totalmente compatible de forma nativa con Javascript. Como su propio nombre indica, JSON se basa en la sintaxis que tiene Javascript para crear objetos. Un archivo JSON m\u00ednimo debe tener la siguiente sintaxis: { } Esto simplemente es un objeto vac\u00edo. Un archivo JSON, puede contener varios tipos de datos: { \"name\": \"Manz\", \"life\": 99, \"dead\": false, \"props\": [\"invisibility\", \"coding\", \"happymood\"], \"senses\": { \"vision\": 50, \"audition\": 75, \"taste\": 40, \"smell\": 50, \"touch\": 80 } } Como se puede ver, en JSON todos los textos deben estar entrecomillados con \u00abcomillas dobles\u00bb, y solo se pueden utilizar tipos de datos como , , , , o null . Un valor null , simplemente, tambi\u00e9n ser\u00eda un JSON v\u00e1lido. OJO : JSON no permite utilizar tipos de datos como , , o valores undefined . Tampoco es v\u00e1lido incluir comentarios en un JSON. Mucho cuidado con las comillas mal cerradas o las comas sobrantes ( antes de un cierre de llaves, por ejemplo ). Suelen ser motivos de error de sintaxis frecuentemente. Si tienes dudas sobre si la sintaxis del JSON que has constru\u00eddo es correcta, puedes utilizar JSONLint , una p\u00e1gina que te permitir\u00e1 pegar el c\u00f3digo JSON y validarlo para saber si es correcto. Tambi\u00e9n nos puede servir para indentar correctamente el JSON. \u00bfC\u00f3mo utilizar JSON? \u00b6 Si analizamos bien la sintaxis de un JSON, nos daremos cuenta que es muy similar a algo a lo que ya deber\u00edamos estar acostumbrados: const o = { name: \"Manz\", life: 99, }; Simplemente a\u00f1adiendo const o = al principio, nos daremos cuenta ( si no era evidente ya ) de que se trata de un objeto de Javascript y que no deber\u00eda ser muy sencillo pasar de JSON a Javascript y viceversa. En Javascript tenemos una serie de m\u00e9todos que nos facilitan esa tarea, pudiendo trabajar con que contengan JSON y objetos Javascript de forma indiferente: M\u00e9todo Descripci\u00f3n JSON.parse(str) Convierte el texto str (un JSON v\u00e1lido) a un objeto y lo devuelve. JSON.stringify(obj) Convierte un objeto Javascript obj a su representaci\u00f3n JSON y la devuelve. Convertir JSON a Objeto \u00b6 La acci\u00f3n de convertir JSON a objeto Javascript se le suele denominar parsear . Es una acci\u00f3n que analiza un que contiene un JSON v\u00e1lido y devuelve un objeto Javascript con dicha informaci\u00f3n correctamente estructurada. Para ello, utilizaremos el m\u00e9todo JSON.parse() : const str = '{ \"name\": \"Manz\", \"life\": 99 }'; const obj = JSON.parse(str); obj.name; // 'Manz' obj.life; // 99 Como se puede ver, obj es un objeto generado a partir del JSON recogido en la variable str y podemos consultar sus propiedades y trabajar con ellas sin problemas. Convertir Objeto a JSON \u00b6 La acci\u00f3n inversa, convertir un objeto Javascript a JSON tambi\u00e9n se puede realizar facilmente haciendo uso del m\u00e9todo JSON.stringify() . Este m\u00e9todo dificil de pronunciar viene a ser algo as\u00ed como \u00abconvertir a texto\u00bb, y lo podemos utilizar para transformar un objeto de Javascript a JSON r\u00e1pidamente: const obj = { name: \"Manz\", life: 99, saludar: function () { return \"Hola!\"; }, }; const str = JSON.stringify(obj); str; // '{\"name\":\"Manz\",\"life\":99}' Observa que, como hab\u00edamos dicho, las funciones no est\u00e1n soportadas por JSON , por lo que si intentamos convertir un objeto que contiene m\u00e9todos o funciones, JSON.stringify() no fallar\u00e1, pero simplemente devolver\u00e1 un omitiendo las propiedades que contengan funciones. Leyendo JSON externo \u00b6 Teniendo en cuenta todo lo visto hasta ahora, JSON es un formato ideal para guardar en peque\u00f1os archivos de texto que se puedan leer desde Javascript, pasar a objetos y trabajar con ellos. Para hacer esto, existen varias estrategias. La m\u00e1s com\u00fan es utilizar AJAX para leer este tipo de datos, pero eso lo veremos m\u00e1s adelante. Recursos para JSON \u00b6 Existen varios recursos interesantes para trabajar con JSON y que pueden sernos de utilidad como programadores. Cito varios de ellos a continuaci\u00f3n: Nombre Descripci\u00f3n GitHub JSONLint Validador JSON. Comprueba sintaxis e indica errores. - JSONLint Validador JSON. Tambi\u00e9n disponible versi\u00f3n de terminal (CLI). @zaach/jsonlint prettyjson Lector de JSON para terminal (CLI) con resaltado en colores. @rafeca/prettyjson JSONEditor Editor JSON visual y online. @josdejong/jsoneditor JSONSelect Selector de datos JSON al estilo CSS. Experimental. @lloyd/JSONSelect Clases ES6 \u00b6 Una vez dominamos las bases de la programaci\u00f3n y nuestro c\u00f3digo va creciendo cada vez m\u00e1s, comprobaremos que las funciones no suelen ser suficiente como para organizar nuestro c\u00f3digo y los mecanismos que tenemos a nuestro alcance quiz\u00e1s no resultan todo lo pr\u00e1cticos que deber\u00edan ser. Aunque Javascript no soporta clases de forma nativa, en ECMAScript 2015 se introduce la posibilidad de usar clases como en otros lenguajes, aunque internamente Javascript traduce estas clases al sistema basado en prototipos que usa en realidad. Para los programadores funciona a modo de az\u00facar sint\u00e1ctico , es decir, s\u00f3lo \u00abendulza\u00bb la forma de trabajar para que sea m\u00e1s agradable para nosotros. \u00bfQu\u00e9 es una clase? \u00b6 Una clase es una forma de organizar c\u00f3digo de forma entendible con el objetivo de simplificar el funcionamiento de nuestro programa. Adem\u00e1s, hay que tener en cuenta que las clases son \u00abconceptos abstractos\u00bb de los que se pueden crear objetos de programaci\u00f3n, cada uno con sus caracter\u00edsticas concretas. Esto puede ser complicado de entender con palabras, pero se ve muy claro con ejemplos: En primer lugar tenemos la clase . La clase es el concepto abstracto de un objeto, mientras que el objeto es el elemento final que se basa en la clase. En la imagen anterior tenemos varios ejemplos: En el primer ejemplo tenemos dos variables: pato y lucas . Ambos son animales, por lo que son objetos que est\u00e1n basados en la clase Animal . Tanto pato como lucas tienen las caracter\u00edsticas que estar\u00e1n definidas en la clase Animal : color, sonido que emiten, nombre, etc... En el segundo ejemplo tenemos dos variables seat y opel . Se trata de dos coches, que son veh\u00edculos, puesto que est\u00e1n basados en la clase Veh\u00edculo . Cada uno tendr\u00e1 las caracter\u00edsticas de su clase: color del veh\u00edculo, n\u00famero de ruedas, marca, modelo, etc... En el tercer ejemplo tenemos dos variables cuadrado y c2 . Se trata de dos formas geom\u00e9tricas, que al igual que los ejemplos anteriores tendr\u00e1n sus propias caracter\u00edsticas, como por ejemplo el tama\u00f1o de sus lados. El elemento cuadrado puede tener un lado de 3 cm y el elemento c2 puede tener un lado de 6 cm. En Javascript se utiliza una sintaxis muy similar a otros lenguajes como, por ejemplo, Java. Declarar una clase es tan sencillo como escribir lo siguiente: // Declaraci\u00f3n de una clase class Animal {} // Crear o instanciar un objeto const pato = new Animal(); El nombre elegido deber\u00eda hacer referencia a la informaci\u00f3n que va a contener dicha clase. Piensa que el objetivo de las clases es almacenar en ella todo lo que tenga relaci\u00f3n ( en este ejemplo, con los animales ). Si te fijas, es lo que venimos haciendo hasta ahora con objetos como , , u otros. Observa que luego creamos una variable donde hacemos un new Animal() . Estamos creando una variable pato ( un objeto ) que es de tipo Animal , y que contendr\u00e1 todas las caracter\u00edsticas definidas dentro de la clase Animal ( de momento, vac\u00eda ). Una norma de estilo en el mundo de la programaci\u00f3n es que las clases deben siempre empezar en may\u00fasculas . Esto nos ayudar\u00e1 a diferenciarlas s\u00f3lo con leerlas. Si te interesa este tema, puedes echar un vistazo al tema de las convenciones de nombres en programaci\u00f3n . Elementos de una clase \u00b6 Una clase tiene diferentes **caracter\u00edsticas que la forman, vamos a ir explic\u00e1ndolas todas detalladamente. Pero primero, una tabla general para verlas en conjunto: Elemento Descripci\u00f3n Propiedad Variable que existe dentro de una clase. Puede ser p\u00fablica o privada. Propiedad p\u00fablica Propiedad a la que se puede acceder desde fuera de la clase. Propiedad privada Propiedad a la que no se puede acceder desde fuera de la clase. Propiedad computada Funci\u00f3n para acceder a una propiedad con modificaciones (getter/setter). M\u00e9todo Funci\u00f3n que existe dentro de una clase. Puede ser p\u00fablica o privada. M\u00e9todo p\u00fablico M\u00e9todo que se puede ejecutar desde dentro y fuera de la clase. M\u00e9todo privado M\u00e9todo que s\u00f3lo se puede ejecutar desde dentro de la clase. M\u00e9todo est\u00e1tico M\u00e9todo que se ejecuta directamente desde la clase, no desde la instancia. Constructor M\u00e9todo que se ejecuta autom\u00e1ticamente cuando se crea una instancia. Como vemos, todos estas caracter\u00edsticas se dividen en dos grupos: las propiedades ( a grandes rasgos, variables dentro de clases ) y los m\u00e9todos ( a grandes rasgos, funciones dentro de clases ). Veamos cada una de ellas en detalle, pero empecemos por los m\u00e9todos . \u00bfQu\u00e9 es un m\u00e9todo? \u00b6 Hasta ahora hab\u00edamos visto que los m\u00e9todos eran funciones que viven dentro de una variable, m\u00e1s concretamente de un objeto. Los objetos de tipo tienen varios m\u00e9todos, los objetos de tipo tiene otros m\u00e9todos, etc... Justo eso es lo que definimos en el interior de una clase. Si a\u00f1adimos un m\u00e9todo a la clase Animal , al crear cualquier variable haciendo un new Animal() , tendr\u00e1 autom\u00e1ticamente ese m\u00e9todo disponible. Ten en cuenta que podemos crear varias variables de tipo Animal y ser\u00e1n totalmente independientes cada una: // Declaraci\u00f3n de clase class Animal { // M\u00e9todos hablar() { return \"Cuak\"; } } // Creaci\u00f3n de una instancia u objeto const pato = new Animal(); pato.hablar(); // 'Cuak' const donald = new Animal(); donald.hablar(); // 'Cuak' Observa que el m\u00e9todo hablar() , que se encuentra dentro de la clase Animal , existe en las variables pato y donald porque realmente son de tipo Animal . Al igual que con las funciones, se le pueden pasar varios par\u00e1metros al m\u00e9todo y trabajar con ellos como venimos haciendo normalmente con las funciones. \u00bfQu\u00e9 es un m\u00e9todo est\u00e1tico? \u00b6 En el caso anterior, para usar un m\u00e9todo de una clase, como por ejemplo hablar() , debemos crear el objeto basado en la clase haciendo un new de la clase. Lo que se denomina crear un objeto o una instancia de la clase. En algunos casos, nos puede interesar crear m\u00e9todos est\u00e1ticos en una clase porque para utilizarlos no hace falta crear ese objeto, sino que se pueden ejecutar directamente sobre la clase directamente: class Animal { static despedirse() { return \"Adi\u00f3s\"; } hablar() { return \"Cuak\"; } } Animal.despedirse(); // 'Adi\u00f3s' Como veremos m\u00e1s adelante, lo habitual suele ser utilizar m\u00e9todos normales ( no est\u00e1ticos ), porque normalmente nos suele interesar crear varios objetos y guardar informaci\u00f3n diferente en cada uno de ellos, y para eso tendr\u00edamos que instanciar un objeto. Una de las limitaciones de los m\u00e9todos est\u00e1ticos es que en su interior s\u00f3lo podremos hacer referencia a elementos que tambi\u00e9n sean est\u00e1ticos. No podremos acceder a propiedades o m\u00e9todos no est\u00e1ticos, ya que necesitar\u00edamos instanciar un objeto para hacerlo. Los m\u00e9todos est\u00e1ticos se suelen utilizar para crear funciones de apoyo que realicen tareas concretas o gen\u00e9ricas, porque est\u00e1n relacionadas con la clase en general. \u00bfQu\u00e9 es un constructor? \u00b6 Se le llama constructor a un tipo especial de m\u00e9todo de una clase, que se ejecuta autom\u00e1ticamente a la hora de hacer un new de dicha clase. Una clase solo puede tener un constructor , y en el caso de que no se especifique un constructor a una clase, tendr\u00e1 uno vac\u00edo de forma impl\u00edcita. Veamos el ejemplo anterior, donde a\u00f1adiremos un constructor a la clase: // Declaraci\u00f3n de clase class Animal { // M\u00e9todo que se ejecuta al hacer un new constructor() { console.warn(\"Ha nacido un pato.\"); } // M\u00e9todos hablar() { return \"Cuak\"; } } // Creaci\u00f3n de una instancia u objeto const pato = new Animal(); // 'Ha nacido un pato' El constructor es un mecanismo muy interesante y utilizado para tareas de inicializaci\u00f3n o que quieres realizar tras haber creado el nuevo objeto. Otros lenguajes de programaci\u00f3n tienen concepto de destructor ( el opuesto al constructor ), sin embargo, en Javascript no existe este concepto. Ojo : En un constructor no se puede utilizar nunca un return , puesto que al hacer un new se devuelve siempre el propio objeto creado. \u00bfQu\u00e9 es una propiedad? \u00b6 Las clases, siendo estructuras para guardar informaci\u00f3n, pueden guardar variables con su correspondiente informaci\u00f3n. Dicho concepto se denomina propiedades y en Javascript se realiza en el interior del constructor, precedido de la palabra clave this ( que hace referencia a \u00abeste\u00bb elemento, es decir, la clase ), como puedes ver en el siguiente ejemplo: class Animal { constructor(n = \"pato\") { this.nombre = n; } hablar() { return \"Cuak\"; } quienSoy() { return \"Hola, soy \" + this.nombre; } } // Creaci\u00f3n de objetos const pato = new Animal(); pato.quienSoy(); // 'Hola, soy pato' const donald = new Animal(\"Donald\"); pato.quienSoy(); // 'Hola, soy Donald' Desde ECMAScript se pueden declarar propiedades en la parte superior de la clase, justo despu\u00e9s de abrir el { del class . De esta forma, ya no es necesario utilizar la palabra clave this ni declararlas obligatoriamente dentro del constructor() . Como se puede ver, estas propiedades existen en la clase, y se puede establecer de forma que todos los objetos tengan el mismo valor, o como en el ejemplo anterior, tengan valores diferentes dependiendo del objeto en cuesti\u00f3n, pas\u00e1ndole los valores espec\u00edficos por par\u00e1metro. Observa que, las propiedades de la clase podr\u00e1n ser modificadas externamente, ya que por defecto son propiedades p\u00fablicas : const pato = new Animal(\"Donald\"); pato.quienSoy(); // 'Hola, soy Donald' pato.nombre = \"Paco\"; pato.quienSoy(); // 'Hola, soy Paco' Propiedades y m\u00e9todos privados \u00b6 A partir de la versi\u00f3n ECMAScript , se introduce la posibilidad de crear campos de clase privados ( los cuales a\u00fan cuentan con poco soporte ). Antiguamente todas las propiedades y m\u00e9todos eran p\u00fablicos por defecto, pero ahora tambi\u00e9n pueden ser privados. Para ello, solo hay que a\u00f1adir el car\u00e1cter # justo antes del nombre de la propiedad o m\u00e9todo: class Animal { #miSecreto = \"Me gusta Internet Explorer\"; #decirSecreto() { return this.#miSecreto; } decirSacrilegio() { return this.#decirSecreto(); } } const patitoFeo = new Animal(); patitoFeo.#decirSecreto(); // Error patitoFeo.decirSacrilegio(); // OK Estas propiedades o m\u00e9todos precedidos de # son privados y s\u00f3lo podr\u00e1n ser llamados desde un m\u00e9todo de clase, ya que si se hace desde fuera obtendremos un error similar al siguiente: Uncaught SyntaxError: Private field '#decirSecreto' must be declared in an enclosing class Sin embargo, si se llama a un m\u00e9todo p\u00fablico como decirSacrilegio() , que a su vez llama a un m\u00e9todo privado ( pero desde dentro de la clase ), todo funcionar\u00e1 correctamente sin error, ya que el m\u00e9todo #decirSecreto() se est\u00e1 llamando desde dentro de la clase. Los \u00e1mbitos en una clase \u00b6 Dentro de una clase tenemos dos tipos de \u00e1mbitos: \u00e1mbito de m\u00e9todo y \u00e1mbito de clase : En primer lugar, veamos el \u00e1mbito dentro de un m\u00e9todo . Si declaramos variables o funciones dentro de un m\u00e9todo con var , let o const , estos elementos existir\u00e1n s\u00f3lo en el m\u00e9todo en cuesti\u00f3n. Adem\u00e1s, no ser\u00e1n accesibles desde fuera del m\u00e9todo: class Clase { constructor() { const name = \"Manz\"; console.log(\"Constructor: \" + name); } metodo() { console.log(\"M\u00e9todo: \" + name); } } const c = new Clase(); // 'Constructor: Manz' c.name; // undefined c.metodo(); // 'M\u00e9todo: ' Observa que la variable name solo se muestra cuando se hace referencia a ella dentro del constructor() que es donde se cre\u00f3 y donde existe. En segundo lugar, tenemos el \u00e1mbito de clase . Podemos crear propiedades precedidas por this. ( desde dentro del constructor ) y desde desde la parte superior de la clase, lo que significa que estas propiedades tendr\u00e1n alcance en toda la clase, tanto desde el constructor, como desde otros m\u00e9todos del mismo: class Clase { role = \"Teacher\"; // ES2020+ constructor() { this.name = \"Manz\"; console.log(\"Constructor: \" + this.name); } metodo() { console.log(\"M\u00e9todo: \" + this.name); } } const c = new Clase(); // 'Constructor: Manz' c.name; // 'Manz' c.metodo(); // 'M\u00e9todo: Manz' c.role; // 'Teacher' Ojo, estas propiedades tambi\u00e9n pueden ser modificadas desde fuera de la clase, simplemente asign\u00e1ndole otro valor. Si quieres evitarlo, a\u00f1ade el # antes del nombre de la propiedad al declararla. La palabra clave this \u00b6 Como te habr\u00e1s fijado en ejemplos anteriores, hemos introducido la palabra clave this , que hace referencia al elemento padre que la contiene. As\u00ed pues, si escribimos this.nombre dentro de un m\u00e9todo, estaremos haciendo referencia a la propiedad nombre que existe dentro de ese objeto. De la misma forma, si escribimos this.hablar() estaremos ejecutando el m\u00e9todo hablar() de ese objeto. Veamos el siguiente ejemplo, volviendo al s\u00edmil de los animales: class Animal { constructor(n = \"pato\") { this.nombre = n; } hablar() { return \"Cuak\"; } quienSoy() { return \"Hola, soy \" + this.nombre + \". ~\" + this.hablar(); } } const pato = new Animal(\"Donald\"); pato.quienSoy(); // 'Hola, soy Donald. ~Cuak' Ten en cuenta que si usas this en contextos concretos, como por ejemplo fuera de una clase te devolver\u00e1 el objeto Window , que no es m\u00e1s que una referencia al objeto global de la pesta\u00f1a actual donde nos encontramos y tenemos cargada la p\u00e1gina web. Es importante tener mucho cuidado con la palabra clave this , ya que en muchas situaciones creeremos que devolver\u00e1 una referencia al elemento padre que la contiene, pero devolver\u00e1 el objeto Window porque se encuentra fuera de una clase o dentro de una funci\u00f3n con otro contexto. Aseg\u00farate siempre de que this tiene el valor que realmente crees que tiene. Propiedades computadas \u00b6 En algunos casos nos puede interesar utilizar lo que se llaman propiedades computadas . Las propiedades computadas son un tipo de propiedades a las que queremos realizarle ligeros cambios antes de guardarla o antes de obtenerla. Imagina un caso en el que, tenemos una clase con 3 propiedades A , B y C que guardan valores espec\u00edficos. Sin embargo, B y C guardan unos valores que se precalculan con unas f\u00f3rmulas pero que parten del valor de la propiedad A . En lugar de guardar las 3 propiedades por separadas y tener que mantenerlas actualizadas, podemos simplemente crear una propiedad A , y una propiedad computada B y C , que obtendr\u00e1n el valor de A y aplicar\u00e1n la formula en cuesti\u00f3n para devolver el valor resultante. Por ejemplo, en una clase Circulo podr\u00edamos tener una propiedad radio con un valor num\u00e9rico y una propiedad computada area que devuelve ese valor num\u00e9rico elevado por 2 y multiplicado por \u03c0 , ya que el \u00e1rea de un c\u00edrculo es \u03c0 \u00b7 radio\u00b2 . \u00bfQu\u00e9 es un getter? \u00b6 Los getters son la forma de definir propiedades computadas de lectura en una clase. Veamos un ejemplo sobre el ejemplo anterior de la clase Animal : class Animal { constructor(n) { this._nombre = n; } get nombre() { return \"Sr. \" + this._nombre; } hablar() { return \"Cuak\"; } quienSoy() { return \"Hola, soy \" + this.nombre; } } // Creaci\u00f3n de objetos const pato = new Animal(\"Donald\"); pato.nombre; // 'Sr. Donald' pato.nombre = \"Pancracio\"; // 'Pancracio' pato.nombre; // 'Sr. Donald' Si observas los resultados de este \u00faltimo ejemplo, puedes comprobar que la diferencia al utilizar getters es que las propiedades con get no se pueden cambiar, son de s\u00f3lo lectura. \u00bfQu\u00e9 es un setter? \u00b6 De la misma forma que tenemos un getter para obtener informaci\u00f3n mediante propiedades computadas , tambi\u00e9n podemos tener un setter , que es el mismo concepto pero en lugar de obtener informaci\u00f3n, para establecer informaci\u00f3n. Si inclu\u00edmos un getter y un setter a una propiedad en una clase, podremos modificarla directamente: class Animal { constructor(n) { this.nombre = n; } get nombre() { return \"Sr. \" + this._nombre; } set nombre(n) { this._nombre = n.trim(); } hablar() { return \"Cuak\"; } quienSoy() { return \"Hola, soy \" + this.nombre; } } // Creaci\u00f3n de objetos const pato = new Animal(\"Donald\"); pato.nombre; // 'Sr. Donald' pato.nombre = \" Lucas \"; // ' Lucas ' pato.nombre; // 'Sr. Lucas' Observa que de la misma forma que con los getters , podemos realizar tareas sobre los par\u00e1metros del setter antes de guardarlos en la propiedad interna. Esto nos servir\u00e1 para hacer modificaciones previas, como por ejemplo, en el ejemplo anterior, realizando un trim() para limpiar posibles espacios antes de guardar esa informaci\u00f3n. En el siguiente art\u00edculo seguiremos explorando las clases, centr\u00e1ndonos en esta ocasi\u00f3n en la denominada herencia de clases . Herencia de Clases \u00b6 A medida que trabajamos con Clases y objetos en nuestro c\u00f3digo, una de las caracter\u00edsticas fundamentales que nos ayudan a reutilizar c\u00f3digo y simplificar nuestro trabajo es la herencia de Clases . Con esta caracter\u00edstica podemos establecer una jerarqu\u00eda de elementos y reutilizar caracter\u00edsticas seg\u00fan en que nivel se encuentra cada elemento. Tomemos el ejemplo del cap\u00edtulo anterior de la forma geom\u00e9trica para trabajar con \u00e9l: Observa que en primer lugar tenemos una clase superior llamada Forma que representa a una forma geom\u00e9trica. Dicha forma geom\u00e9trica tendr\u00e1 las caracter\u00edsticas comunes a todos los elementos ( color, nombre... ). Luego, vemos que tenemos varias clases: Cuadrado , Circulo y Triangulo . Dichas clases tendr\u00e1n las caracter\u00edsticas propias de cada una: el Cuadrado tendr\u00e1 una caracter\u00edstica que ser\u00e1 lado , el C\u00edrculo tendr\u00e1 radio y diametro , etc... Adem\u00e1s, las clases heredan las caracter\u00edsticas comunes de su padre, en este caso de la clase Forma . As\u00ed, finalmente los elementos c1 y c2 son objetos generados a partir de la clase Cuadrado , los elementos r1 y r2 son objetos generados a partir de la clase Circulo y as\u00ed sucesivamente. \u00bfQu\u00e9 es extender una clase? \u00b6 En Javascript, a partir de ECMAScript podemos \u00ab extender clases \u00bb de forma muy similar a como se hace en otros lenguajes de programaci\u00f3n como Java. Veamos el ejemplo del cap\u00edtulo anterior pasado a Clases que utilizan herencia: // Clase padre class Forma { constructor() { console.log(\"Soy una forma geom\u00e9trica.\"); } gritar() { console.log(\"YEP!!\"); } } // Clases hijas class Cuadrado extends Forma { constructor() { super(); console.log(\"Soy un cuadrado.\"); } } class Circulo extends Forma { constructor() { super(); console.log(\"Soy un c\u00edrculo.\"); } } class Triangulo extends Forma { constructor() { super(); console.log(\"Soy un tri\u00e1ngulo.\"); } } Observa que la clase padre Forma muestra un mensaje en su constructor y tiene un m\u00e9todo gritar() . Cada clase hija extiende a su clase padre, por lo que la clase Cuadrado ser\u00e1 una mezcla de la clase Forma m\u00e1s la clase Cuadrado . El m\u00e9todo especial super() llama al constructor de la clase padre, por lo que si creamos varios objetos, funcionar\u00e1 en cascada, mostrando primero el texto del constructor del padre, y luego el texto del constructor del hijo: const c1 = new Cuadrado(); // 'Soy una forma geom\u00e9trica.' // 'Soy un cuadrado.' c1.gritar(); // 'YEP!!' const t1 = new Triangulo(); // 'Soy una forma geom\u00e9trica.' // 'Soy un tri\u00e1ngulo.' t1.gritar(); // 'YEP!!' Adem\u00e1s, todas las clases hijas heredar\u00e1n el m\u00e9todo gritar() , ya que pertenece a la clase padre Forma y todas extienden de ella. Recuerda que es obligatorio llamar a super() en el constructor de la clase hija antes de realizar ninguna tarea. No te olvides de escribirlo. La palabra clave super \u00b6 Como hemos visto, la palabra clave super() hace referencia a la superclase, es decir, a la clase padre. Se debe indicar de forma obligatoria en el constructor de las clases hijas que extienden de un padre, no obstante, tambi\u00e9n podemos utilizarlas en m\u00e9todos para llamar de forma opcional u obligatoria a m\u00e9todos del padre para que hagan tareas complementarias o parciales: class Padre { tarea() { console.log(\"Tarea del padre...\"); } } class Hijo extends Padre { tarea() { super.tarea(); console.log(\"Tarea del hijo...\"); } } Si nos fijamos en el ejemplo anterior, en el caso de que la clase Hijo no tuviera m\u00e9todo tarea() heredar\u00eda dicho m\u00e9todo de su clase padre, ejecut\u00e1ndolo. En el caso del ejemplo anterior, tiene un m\u00e9todo tarea() en la clase hijo que sobreescribe el m\u00e9todo tarea() del padre, realizando \u00fanicamente el c\u00f3digo indicado en esa clase hija. Sin embargo, la diferencia radica en lo siguiente: Si se indica super.tarea() ( donde tarea es el nombre del m\u00e9todo de la clase padre ), esto llamar\u00e1 y ejecutar\u00e1 el m\u00e9todo de la clase Padre, y al terminar, continua realizando el c\u00f3digo del m\u00e9todo de la clase hija. Es el caso del ejemplo anterior. Si no se indica super.tarea() , el m\u00e9todo tarea() de la clase hijo sobreescribe al de la clase Padre, ocult\u00e1ndolo y ejecutando s\u00f3lo el c\u00f3digo de la clase hija. Es nuestra decisi\u00f3n que camino tomar, en algunos casos nos interesar\u00e1 una de estas posibilidades y en otras ocasiones nos interesar\u00e1 otra. ESLint \u00b6 Los linters son herramientas de programaci\u00f3n que examinan el c\u00f3digo del programador y lo ayudan a corregir errores de sintaxis, c\u00f3digo incorrecto, malas pr\u00e1cticas o costumbres o incluso ayudarlo a seguir gu\u00edas de estilo, favoreciendo escribir c\u00f3digo de calidad y acostumbrando al usuario a solventar ciertos problemas comunes en fases tempranas ( y no tan tempranas ) como programador. Hay que tener claro que un linter no s\u00f3lo busca errores que hacen que nuestro c\u00f3digo no funcione, sino que tambi\u00e9n nos ayuda a corregir malos h\u00e1bitos. Un programa puede ser perfectamente v\u00e1lido y funcionar correctamente, y a\u00fan as\u00ed, ESLint encontrar errores en \u00e9l. \u00bfQu\u00e9 es ESLint? \u00b6 ESLint es un linter que examina c\u00f3digo Javascript, siguiendo unas ciertas normas y criterios personalizables por el programador, para que el c\u00f3digo Javascript siga ciertos est\u00e1ndares y estilos, favoreciendo la escritura de c\u00f3digo de calidad. Existen otras herramientas similares como JSHint o JSLint , sin embargo, ESLint ofrece muchas caracter\u00edsticas que lo hacen destacar sobre los anteriores. ESLint es totalmente configurable y puedes indicarle que criterios ( llamados reglas ) quieres que utilice y cuales prefieres que ignore, adapt\u00e1ndose a las necesidades de cualquier empresa, programador o equipo de trabajo. Instalaci\u00f3n de ESLint \u00b6 Aunque la herramienta ESLint requiere como m\u00ednimo Node 6.14+ y NPM 3+ para funcionar, es recomendable tener la \u00faltima versi\u00f3n estable de Node / NPM instalada desde la web oficial , ya que otras versiones inclu\u00eddas en los repositorios por defecto de Debian o Ubuntu no est\u00e1n completamente actualizadas y pueden carecer de funcionalidades como npx o similares. Aqu\u00ed tienes una gu\u00eda para instalar Node/NPM . Para instalar ESLint en nuestro proyecto haremos lo siguiente: $ npm install --save-dev eslint Este comando instalar\u00e1 ESLint en nuestro proyecto ( localmente ) y a\u00f1adir\u00e1 la referencia del paquete al fichero package.json ( que debe existir previamente ). Para ejecutar ESLint en nuestro proyecto escribiremos npx eslint . Para m\u00e1s informaci\u00f3n, lee esta secci\u00f3n: \u00bfQu\u00e9 es npx? . Configuraci\u00f3n inicial de ESLint \u00b6 Una vez instalado, en la carpeta ra\u00edz de nuestro proyecto escribimos lo siguiente: $ npx eslint --init Esto arrancar\u00e1 un asistente para configurar ESLint en nuestro proyecto, pregunt\u00e1ndonos algunas cuestiones sobre el proyecto a revisar. Hagamos un repaso r\u00e1pido: How would you like to use ESLint? \u00b6 Esta opci\u00f3n nos permite seleccionar el modo en el que funcionar\u00e1 el linter. To check syntax only nos revisa s\u00f3lo la sintaxis de nuestro c\u00f3digo, To check syntax and find problems adem\u00e1s nos ayuda a encontrar potenciales problemas y To check syntax, find problems, and enforce code style adem\u00e1s de lo anterior, nos ayuda a reforzar nuestro estilo de c\u00f3digo. Se recomienda utilizar la \u00faltima. What type of modules does your project use? \u00b6 Esta opci\u00f3n nos permite seleccionar la forma en la que importamos c\u00f3digo Javascript. Si utilizamos import , seleccionamos JavaScript modules (import/export) . Por otro lado, si estamos utilizando el sistema de node con require , seleccionaremos CommonJS (require/exports) . Which framework does your project use? \u00b6 Esta opci\u00f3n nos da la posibilidad de indicar si usamos un framework espec\u00edfico como React o Vue.js y as\u00ed poder adaptarse a la sintaxis correspondiente de estos frameworks. Si no fuera el caso, seleccionamos None of these . Where does your code run? \u00b6 Con esta opci\u00f3n enfocamos el linter para revisar c\u00f3digo orientado a navegadores, marcando Browser , o c\u00f3digo orientado a otros sistemas como Node . Ten en cuenta que puedes marcar ambas si as\u00ed lo necesitas. How would you like to define a style for your project? \u00b6 Esta es una de las opciones m\u00e1s importantes, ya que con ella nutrimos al linter con la informaci\u00f3n necesaria para saber como corregir nuestro c\u00f3digo. Las opciones disponibles son Use a popular style guide , Answer questions about your style o Inspect your JavaScript file(s) , y las explicaremos en los siguientes apartados. What format do you want your config file to be in? \u00b6 Esta opci\u00f3n nos pregunta en que formato queremos guardar la configuraci\u00f3n de ESLint. Tenemos a nuestra disposici\u00f3n un formato Javascript , otro YAML y otro JSON . Personalmente, suelo optar por el \u00faltimo, ya que suele ser el m\u00e1s extendido. Would you like to install them now with npm? \u00b6 Por \u00faltimo, y dependiendo de las opciones escogidas, nos puede aparecer un mensaje como este, que al responderlo de forma afirmativa, instalar\u00e1 autom\u00e1ticamente los paquetes de NPM necesarios. Use a popular style guide \u00b6 En este modo, ESLint utilizar\u00e1 una gu\u00eda de estilo predefinida, creada por otra empresa o grupo. Por defecto tenemos las 3 siguientes para elegir: Promotores GitHub Nombre del paquete (NPM) Observaciones Airbnb @airbnb/javascript eslint-config-airbnb StandardJS @standard/standard eslint-config-standard Google @google/eslint-config-google eslint-config-google Cada una de ellas, tiene una serie de reglas preconfiguradas que luego, puedes modificar o cambiar si lo deseas. Tambi\u00e9n puedes crear/modificar tu propio conjunto de reglas, aunque eso te llevar\u00e1 un poco m\u00e1s de tiempo. Adem\u00e1s de estos 3 paquetes del asistente, existen muchos otros como eslint-config-react-app , eslint-config-prettier , eslint-config-eslint , eslint-config-jest-enzyme y muchos otros que puedes buscar en NPM con un simple npm search eslint-config e instalar con un npm install seguido del nombre del paquete. Ten en cuenta que aunque el asistente de ESLint instala y configura los paquetes necesarios autom\u00e1ticamente, si queremos hacerlo con una gu\u00eda concreta no basta con hacer el npm install , sino que adem\u00e1s hay que modificar el archivo de configuraci\u00f3n, como se ver\u00e1 m\u00e1s adelante. Answer questions about style \u00b6 En el caso de que no queramos utilizar un paquete de reglas preconfiguradas, ESLint permite crear uno desde cero mediante una serie de preguntas que nos realizar\u00e1 y determinar\u00e1n de forma general el estilo que utilizamos: What style of indentation do you use? \u00b6 Esta opci\u00f3n nos pregunta si queremos que el c\u00f3digo est\u00e9 indentado con tabuladores o con espacios. En el caso de los espacios, puedes indicar incluso cuantos espacios requieres. Equivale a la regla rules.indent . What quotes do you use for strings? \u00b6 Debemos indicar en esta opci\u00f3n si utilizamos comillas dobles o comillas simples para los . Equivale a la regla rules.quotes . What line endings do you use? \u00b6 Esta opci\u00f3n nos permite indicar si escribimos c\u00f3digo en Windows o en Unix (Linux). Equivale a la regla rules.linebreak-style . Do you require semicolons? \u00b6 Esta opci\u00f3n nos pregunta si queremos utilizar punto y coma al final de cada sentencia. Recuerda que en Javascript es opcional el uso de punto y coma. Equivale a la regla rules.semi . Obviamente, estas no son sino las preguntas principales y m\u00e1s importantes para tener un fichero de configuraci\u00f3n de reglas m\u00ednimo para comenzar. Puedes encontrar todas las reglas que tiene ESLint en esta p\u00e1gina: reglas de ESLint . Inspect your JavaScript file(s) \u00b6 Por \u00faltimo, esta tercera opci\u00f3n se basar\u00e1 en una inspecci\u00f3n de tus archivos Javascript para determinar cu\u00e1l ser\u00eda la gu\u00eda de estilo que deber\u00edas utilizar, siguiendo las normas que se utilizan en los archivos Javascript actuales. Formato de configuraci\u00f3n \u00b6 En cualquiera de las 3 opciones del asistente, se nos preguntar\u00e1 What format do you want your config file to be in? . Esta opci\u00f3n nos permite seleccionar que formato de configuraci\u00f3n queremos utilizar en nuestro proyecto para utilizar con ESLint . Ten en cuenta que el asistente anterior lo que hace es generar un fichero de configuraci\u00f3n con reglas de ESLint que luego podr\u00e1s modificar, a\u00f1adir y/o personalizar. En principio, puedes utilizar el formato que m\u00e1s te guste. Si existen varios archivos de configuraci\u00f3n, tendr\u00e1 preferencia en el orden de la siguiente lista. Las opciones disponibles son: Javascript : Generar\u00e1 un archivo de configuraci\u00f3n .eslintrc.js YAML : Generar\u00e1 un archivo de configuraci\u00f3n .eslintrc.yaml o .eslintrc.yml JSON : Generar\u00e1 un archivo de configuraci\u00f3n .eslintrc.json . Aunque en el formato JSON no se admiten comentarios, ESLint s\u00ed soporta comentarios de tipo /* */ . Tambi\u00e9n es posible utilizar un objeto eslintConfig dentro del package.json de nuestro proyecto. Antiguamente se utilizaba un fichero .eslintrc ( YAML o JSON ), pero est\u00e1 marcado como obsoleto, por lo que ser\u00eda conveniente evitar utilizar ese nombre para el fichero de configuraci\u00f3n. Por \u00faltimo, comentar que tambi\u00e9n es posible crear un fichero .eslintignore donde podemos indicar archivos o globs ( patrones de archivos, comodines, etc... ) que se ignorar\u00e1n a la hora de realizar una comprobaci\u00f3n de ESLint . Se pueden a\u00f1adir comentarios, con l\u00ednea que comiencen por # . Configuraci\u00f3n de ejemplo \u00b6 A continuaci\u00f3n, tenemos un fichero de configuraci\u00f3n de ejemplo de ESLint , con las opciones recomendadas y ciertas reglas personalizadas y comentadas: { /* Entorno de desarrollo: https://eslint.org/docs/user-guide/configuring#specifying-environments */ \"env\": { \"browser\": true, /* El objetivo del c\u00f3digo es ejecutar en navegadores */ \"es6\": true /* El c\u00f3digo estar\u00e1 escrito en ES6 */ }, /* Activa las reglas marcadas con \u2713 en la documentaci\u00f3n oficial de ESLint: https://eslint.org/docs/rules/ y el paquete eslint-config-standard */ \"extends\": [\"eslint:recommended\", \"standard\"], /* Opciones de parseo: https://eslint.org/docs/user-guide/configuring#specifying-parser-options */ \"parserOptions\": { \"ecmaVersion\": 2018, /* Establece la versi\u00f3n de ECMAScript que se usar\u00e1 */ \"sourceType\": \"module\" /* Indica si se usan m\u00f3dulos ES6 o solo scripts */ }, /* Reglas de ESLint personalizadas (sobreescriben a anteriores): https://eslint.org/docs/rules/ */ \"rules\": { /* Indentaci\u00f3n a 2 espacios: https://eslint.org/docs/rules/indent */ \"indent\": [ \"error\", 2 ], /* Finales de l\u00ednea de UNIX: https://eslint.org/docs/rules/linebreak-style */ \"linebreak-style\": [ \"error\", \"unix\" ], /* Uso de comillas simples para strings: https://eslint.org/docs/rules/quotes */ \"quotes\": [ \"error\", \"single\" ], /* Uso de punto y coma obligatorio: https://eslint.org/docs/rules/semi */ \"semi\": [ \"error\", \"always\" ] } } Podemos guardar este fichero con nombre .eslintrc.json en la carpeta ra\u00edz de nuestro proyecto y escribir en una terminal el siguiente comando para que nos revise los errores de nuestro c\u00f3digo ( asumiendo que queremos revisar un archivo llamado index.js ): $ npx eslint src/js/index.js Tambi\u00e9n se pueden usar globs como *.js o similares. Observa que en la opci\u00f3n extends del archivo de configuraci\u00f3n se est\u00e1n utilizando dos fuentes de datos. Por un lado, las recomendaciones b\u00e1sicas oficiales de ESLint, y por otro lado, la gu\u00eda de estilo eslint-config-standard . En el caso de querer seguir a\u00f1adiendo m\u00e1s gu\u00edas s\u00f3lo necesitar\u00edamos a\u00f1adir el nombre del paquete, omitiendo el fragmento eslint-config- . Plugins de ESLint \u00b6 Aunque se pueden mostrar los errores por terminal, algo m\u00e1s c\u00f3modo y com\u00fan es configurarlo en nuestro editor de c\u00f3digo para que nos muestre las recomendaciones y errores a medida que vamos escribiendo nuestro programa. Tambi\u00e9n puede ser interesante tenerlo configurado con alg\u00fan automatizador como WebPack o Gulp y que nos aparezca cuando estemos trabajando con \u00e9l. A continuaci\u00f3n tienes una lista de editores o automatizadores con algunas de las extensiones o plugins que puedes instalar para usar ESLint: Editor o sistema Plugin o extensi\u00f3n Visual Studio Code VSCode ESLint Adobe Brackets Backets ESLint IntelliJ IDEA ESLint Plugin ATOM linter-eslint Vim ALE o Syntastic Sublime Text 3 SublimeLinter-eslint Gulp gulp-eslint Webpack eslint-loader RollUp rollup-plugin-eslint M\u00f3dulos ECMAScript (ESM) \u00b6 Uno de los principales problemas que ha ido arrastrando Javascript desde sus inicios es la dificultad de organizar de una forma adecuada una aplicaci\u00f3n grande, con muchas l\u00edneas de c\u00f3digo. En muchos lenguajes, cuando un programa crece, se comienza a estructurar en funciones y, posteriormente, en clases . De esta forma organizamos de forma m\u00e1s l\u00f3gica el c\u00f3digo de nuestro programa. Pero tener todo el c\u00f3digo en un s\u00f3lo fichero Javascript tambi\u00e9n se vuelve confuso y complejo de organizar. En la mayor\u00eda de los lenguajes de programaci\u00f3n, las clases se dividen en ficheros diferentes, de modo que cada clase est\u00e1 localizada en un fichero separado . Esto en el \u00ablado del cliente\u00bb ( como es el caso de Javascript en el navegador ) presenta varias problem\u00e1ticas. En un principio, y de forma nativa, la forma m\u00e1s extendida era incluir varias etiquetas <script> desde nuestra p\u00e1gina HTML. De esta forma, pod\u00edamos tener varios ficheros Javascript separados, cada uno para una finalidad concreta. Sin embargo, este sistema es poco modular, ofrec\u00eda un control pobre y resultaba lento, ya que sobrecargaba al cliente con m\u00faltiples peticiones extra. Con el tiempo, se desarrollaron otros sistemas como CommonJS ( utilizado en NodeJS ) o RequireJS ( AMD ), cada uno con sus particularidades, virtudes y desventajas. \u00bfQu\u00e9 son los m\u00f3dulos ES? \u00b6 En ECMAScript se introduce una caracter\u00edstica nativa denominada M\u00f3dulos ES o ESM , que permite la importaci\u00f3n y exportaci\u00f3n de c\u00f3digo entre diferentes ficheros Javascript, eliminando las desventajas que ten\u00edamos hasta ahora y permitiendo trabajar de forma m\u00e1s flexible desde el c\u00f3digo Javascript. Para trabajar con m\u00f3dulos tenemos a nuestra disposici\u00f3n las siguientes palabras clave: Declaraci\u00f3n Descripci\u00f3n export Exporta uno o varios elementos (variables, funciones, clases...) del fichero actual import Importa uno o varios elementos (variables, funciones, clases...) desde otro fichero .js Mediante la palabra clave export crearemos un objeto ( m\u00f3dulo de exportaci\u00f3n ) que contendr\u00e1 una o varias propiedades. En estas propiedades podremos guardar variables, funciones o clases ( a partir de ahora, elementos ). Si dicho m\u00f3dulo ya existe, podremos ir a\u00f1adiendo m\u00e1s propiedades. Por otro lado, con la palabra clave import podremos leer dichos m\u00f3dulos de otros ficheros y utilizar sus propiedades en nuestro c\u00f3digo. Exportaci\u00f3n de m\u00f3dulos \u00b6 Por defecto, un fichero Javascript no tiene m\u00f3dulo de exportaci\u00f3n si no se usa un export al menos una vez. Existen varias formas de exportar c\u00f3digo mediante la palabra clave export : Forma Descripci\u00f3n export { name }; A\u00f1ade el elemento name al m\u00f3dulo de exportaci\u00f3n. export { n1, n2, n3... }; A\u00f1ade los elementos indicados ( n1 , n2 , n3 ...) al m\u00f3dulo de exportaci\u00f3n. export * from './file.js'; A\u00f1ade todos los elementos del m\u00f3dulo file.js al m\u00f3dulo de exportaci\u00f3n. export declaration; Declara una variable, funci\u00f3n o clase y la a\u00f1ade al m\u00f3dulo de exportaci\u00f3n. export default declaration; Declara una funci\u00f3n o clase y la a\u00f1ade al m\u00f3dulo de exportaci\u00f3n. Es posible renombrar los elementos sobre la marcha utilizando as seguido del nuevo nombre. Adem\u00e1s, si se indica default como nuevo nombre, ese elemento ser\u00e1 la exportaci\u00f3n por defecto . S\u00f3lo puede haber una exportaci\u00f3n por defecto por fichero. Veamos algunos ejemplos: let number = 4; const saludar = () => \"\u00a1Hola!\"; const goodbye = () => \"\u00a1Adi\u00f3s!\"; class Clase {} export { number }; // Se crea un m\u00f3dulo y se a\u00f1ade number export { saludar, goodbye as despedir }; // Se a\u00f1ade saludar y despedir al m\u00f3dulo export { Clase as default }; // Se a\u00f1ade Clase al m\u00f3dulo (default) export { saludar as otroNombre }; // Se a\u00f1ade otroNombre al m\u00f3dulo Tambi\u00e9n es posible exportar variables, funciones o clases simplemente incluyendo la palabra export a la izquierda de la l\u00ednea de su declaraci\u00f3n: export const f1 = () => 42; // Se crea un m\u00f3dulo y se a\u00f1ade f1 // Se a\u00f1ade f2 al m\u00f3dulo (default) export default function f2() { return \"Manz\"; } Ten en cuenta que en el caso de utilizar una exportaci\u00f3n por defecto en una declaraci\u00f3n, no es posible utilizar var , let o const . Tampoco es posible usar export dentro de funciones, bucles o contextos espec\u00edficos. Importaci\u00f3n de m\u00f3dulos \u00b6 Si por un lado tenemos export , la palabra clave import es su opuesta. Con ella podemos cargar un m\u00f3dulo de exportaci\u00f3n de otro fichero Javascript, con todos los elementos exportados que contiene. Existen varias formas de importar c\u00f3digo utilizando import : Forma Descripci\u00f3n import nombre from './file.js'; Importa s\u00f3lo el elemento por defecto de file.js en nombre . import { nombre } from './file.js'; Importa s\u00f3lo el elemento nombre de file.js . import { n1, n2.. } from './file.js'; Importa los elementos indicados desde file.js . import * as obj from './file.js'; Importa todos los elementos de file.js en el objeto obj . import './file.js'; No importa elementos, pero ejecuta el c\u00f3digo de file.js . Recuerda, que al igual que con la exportaci\u00f3n , tambi\u00e9n puedes renombrar elementos utilizando as seguido del nuevo nombre. En el primer caso, importamos el elemento por defecto desde el m\u00f3dulo file.js y lo guardamos en la variable nombre . En el segundo y tercer caso, importamos los elementos indicados en el interior de los corchetes, desde el m\u00f3dulo file.js . En el cuarto caso, importamos todos los elementos del m\u00f3dulo externo file.js en un objeto de nombre obj ( es obligatorio indicar el nombre ) y en el quinto caso, no importamos elementos, pero leemos el c\u00f3digo del m\u00f3dulo y lo ejecutamos. Convenciones de m\u00f3dulos ES \u00b6 Si queremos utilizar import y export desde el navegador directamente, deberemos a\u00f1adir los archivos con m\u00f3dulos con la etiqueta <script> utilizando el atributo type=\"module\" . Estas etiquetas de m\u00f3dulos se cargan en diferido, o lo que es lo mismo, como si fueran un <script defer> : Por norma general, a los archivos Javascript con m\u00f3dulos se les pone la extensi\u00f3n .js , aunque tambi\u00e9n se pueden encontrar con otra extensi\u00f3n como .es2015 o .mjs . Se aconseja utilizar las rutas UNIX en los export e import , ya que son las que tienen mejor soporte, tanto en navegadores como en NodeJS . Tambi\u00e9n se pueden indicar rutas absolutas para cargar directamente desde el navegador: // Incorrecto import { elemento } from \"module.mjs\"; import { elemento } from \"folder/module.mjs\"; // Correcto import { elemento } from \"./module.mjs\"; // misma carpeta del .js import { elemento } from \"/module.mjs\"; // carpeta ra\u00edz import { elemento } from \"../module.mjs\"; // carpeta anterior al .js import { ceil } from \" https://unpkg.com/lodash-es@4.17.11/lodash.js \"; Una pr\u00e1ctica habitual es realizar las exportaciones al final de los ficheros Javascript. Aunque no es obligatorio, muchos desarrolladores esperan que los export aparezcan al final del c\u00f3digo, ya que as\u00ed sol\u00eda hacerse tambi\u00e9n en NodeJS con los module.exports . Fuente: Lenguaje Javascript por Manz \u00b6","title":"Caracter\u00edsticas"},{"location":"desarrollo/javascript/03-caracteristicas/#caracteristicas","text":"","title":"Caracter\u00edsticas"},{"location":"desarrollo/javascript/03-caracteristicas/#array-functions","text":"As\u00ed como tenemos un conjunto de m\u00e9todos para realizar sobre variables que sean u otro conjunto de m\u00e9todos para variables que sean , existe una serie de m\u00e9todos que podemos utilizar sobre variables que sean de tipo . Son las llamadas array functions que veremos a continuaci\u00f3n.","title":"Array functions"},{"location":"desarrollo/javascript/03-caracteristicas/#que-son-las-array-functions","text":"B\u00e1sicamente, son m\u00e9todos que tiene cualquier variable que sea de tipo , y que permite realizar una operaci\u00f3n con todos los elementos de dicho array para conseguir un objetivo concreto, dependiendo del m\u00e9todo. En general, a dichos m\u00e9todos se les pasa por par\u00e1metro una funci\u00f3n callback y unos par\u00e1metros opcionales. Estas son las Array functions que podemos encontrarnos en Javascript: M\u00e9todo Descripci\u00f3n .forEach(cb, arg) Realiza la operaci\u00f3n definida en cb por cada elemento del array. .every(cb, arg) Comprueba si todos los elementos del array cumplen la condici\u00f3n de cb . .some(cb, arg) Comprueba si al menos un elem. del array cumple la condici\u00f3n de cb . .map(cb, arg) Construye un array con lo que devuelve cb por cada elemento del array. .filter(cb, arg) Construye un array con los elementos que cumplen el filtro de cb . .findIndex(cb, arg) Devuelve la posici\u00f3n del elemento que cumple la condici\u00f3n de cb . .find(cb, arg) Devuelve el elemento que cumple la condici\u00f3n de cb . .reduce(cb, arg) Ejecuta cb con cada elemento (de izq a der), acumulando el resultado. .reduceRight(cb, arg) Idem al anterior, pero en orden de derecha a izquierda. A grandes rasgos, a cada uno de estos m\u00e9todos se les pasa una funci\u00f3n callback que se ejecutar\u00e1 por cada uno de los elementos que contiene el array. Empecemos por forEach() , que es quiz\u00e1s el m\u00e1s sencillo de todos.","title":"\u00bfQu\u00e9 son las Array functions?"},{"location":"desarrollo/javascript/03-caracteristicas/#foreach-cada-uno","text":"Como se puede ver, el m\u00e9todo forEach() no devuelve nada y espera que se le pase por par\u00e1metro una que se ejecutar\u00e1 por cada elemento del array. Esa funci\u00f3n, puede ser pasada en cualquiera de los formatos que hemos visto: como funci\u00f3n tradicional o como funci\u00f3n flecha: const arr = [\"a\", \"b\", \"c\", \"d\"]; // Con funciones por expresi\u00f3n const f = function () { console.log(\"Un elemento.\"); }; arr.forEach(f); // Con funciones an\u00f3nimas arr.forEach(function () { console.log(\"Un elemento.\"); }); // Con funciones flecha arr.forEach(() => console.log(\"Un elemento.\")); Sin embargo, este ejemplo no tiene demasiada utilidad. A la callback se le pueden pasar varios par\u00e1metros opcionales: Si se le pasa un primer par\u00e1metro , este ser\u00e1 el elemento del array. Si se le pasa un segundo par\u00e1metro , este ser\u00e1 la posici\u00f3n en el array. Si se le pasa un tercer par\u00e1metro , este ser\u00e1 el array en cuesti\u00f3n. Veamos un ejemplo: const arr = [\"a\", \"b\", \"c\", \"d\"]; arr.forEach((e) => console.log(e)); // Devuelve 'a' / 'b' / 'c' / 'd' arr.forEach((e, i) => console.log(e, i)); // Devuelve 'a' 0 / 'b' 1 / 'c' 2 / 'd' 3 arr.forEach((e, i, a) => console.log(a[0])); // Devuelve 'a' / 'a' / 'a' / 'a' En este ejemplo, he nombrado e al par\u00e1metro que har\u00e1 referencia al elemento , i al par\u00e1metro que har\u00e1 referencia al \u00edndice ( posici\u00f3n del array ) y a al par\u00e1metro que har\u00e1 referencia al array en cuesti\u00f3n. A\u00fan as\u00ed, el usuario puede ponerle a estos par\u00e1metros el nombre que prefiera. Como se puede ver, realmente forEach() es otra forma de hacer un bucle ( sobre un array ), sin tener que recurrir a bucles tradicionales como for o while . Como vemos en la tabla anterior, al m\u00e9todo forEach() se le puede pasar un segundo par\u00e1metro arg , que representa el valor que sobreescribir\u00eda a la palabra clave this en el c\u00f3digo dentro de la funci\u00f3n callback . De necesitar esta funcionalidad, recuerda que no puedes utilizar las funciones flecha, ya que el this no tiene efecto en ellas.","title":"forEach (Cada uno)"},{"location":"desarrollo/javascript/03-caracteristicas/#every-todos","text":"El m\u00e9todo every() permite comprobar si todos y cada uno de los elementos de un array cumplen la condici\u00f3n que se especifique en la callback : const arr = [\"a\", \"b\", \"c\", \"d\"]; arr.every((e) => e.length == 1); // true En este caso, la magia est\u00e1 en el callback . La condici\u00f3n es que la longitud de cada elemento del array sea 1 . Si dicha funci\u00f3n devuelve true , significa que cumple la condici\u00f3n, si devuelve false , no la cumple. Por lo tanto, si todos los elementos del array devuelven true , entonces every() devolver\u00e1 true . Si expandimos el ejemplo anterior a un c\u00f3digo m\u00e1s detallado, tendr\u00edamos el siguiente ejemplo equivalente, que quiz\u00e1s sea m\u00e1s comprensible para entenderlo: const arr = [\"a\", \"b\", \"c\", \"d\"]; // Esta funci\u00f3n se ejecuta por cada elemento del array const todos = function (e) { // Si el tama\u00f1o del string es igual a 1 if (e.length == 1) return true; else return false; }; arr.every(todos); // Le pasamos la funci\u00f3n callback todos() a every","title":"every (Todos)"},{"location":"desarrollo/javascript/03-caracteristicas/#some-al-menos-uno","text":"De la misma forma que el m\u00e9todo anterior sirve para comprobar si todos los elementos del array cumplen una determinada condici\u00f3n, con some() podemos comprobar si al menos uno de los elementos del array, cumplen dicha condici\u00f3n definida por el callback . const arr = [\"a\", \"bb\", \"c\", \"d\"]; arr.some((e) => e.length == 2); // true Observa que en este ejemplo, el m\u00e9todo some() devuelve true porque existe al menos un elemento del array con una longitud de 2 car\u00e1cteres.","title":"some (Al menos uno)"},{"location":"desarrollo/javascript/03-caracteristicas/#map-transformaciones","text":"El m\u00e9todo map() es un m\u00e9todo muy potente y \u00fatil para trabajar con arrays, puesto que su objetivo es devolver un nuevo array donde cada uno de sus elementos ser\u00e1 lo que devuelva la funci\u00f3n callback por cada uno de los elementos del array original: const arr = [\"Ana\", \"Pablo\", \"Pedro\", \"Pancracio\", \"Heriberto\"]; const nuevoArr = arr.map((e) => e.length); nuevoArr; // Devuelve [3, 5, 5, 9, 9] Observa que el array devuelto por map() es nuevoArr , y cada uno de los elementos que lo componente, es el n\u00famero devuelto por el callback (e.length), que no es otra cosa sino el tama\u00f1o de cada . Este m\u00e9todo nos permite hacer multitud de operaciones, ya que donde devolvemos e.length podriamos devolver el propio modificado o cualquier otra cosa.","title":"map (Transformaciones)"},{"location":"desarrollo/javascript/03-caracteristicas/#filter-filtrado","text":"El m\u00e9todo filter() nos permite filtrar los elementos de un array y devolver un nuevo array con s\u00f3lo los elementos que queramos. Para ello, utilizaremos la funci\u00f3n callback para establecer una condici\u00f3n que devuelve true s\u00f3lo en los elementos que nos interesen: const arr = [\"Ana\", \"Pablo\", \"Pedro\", \"Pancracio\", \"Heriberto\"]; const nuevoArr = arr.filter((e) => e[0] == \"P\"); nuevoArr; // Devuelve ['Pablo', 'Pedro', 'Pancracio'] En este ejemplo, filtramos s\u00f3lo los elementos en los que su primera letra sea P . Por lo tanto, la variable nuevoArr ser\u00e1 un array con s\u00f3lo esos elementos. Ten en cuenta que si ning\u00fan elemento cumple la condici\u00f3n, filter() devuelve un vac\u00edo.","title":"filter (Filtrado)"},{"location":"desarrollo/javascript/03-caracteristicas/#find-busqueda","text":"En ECMAScript 6 se introducen dos nuevos m\u00e9todos dentro de las Array functions : find() y findIndex() . Ambos se utilizan para buscar elementos de un array mediante una condici\u00f3n, la diferencia es que el primero devuelve el elemento mientras que el segundo devuelve su posici\u00f3n en el array original. Veamos como funcionan: const arr = [\"Ana\", \"Pablo\", \"Pedro\", \"Pancracio\", \"Heriberto\"]; arr.find((e) => e.length == 5); // 'Pablo' arr.findIndex((e) => e.length == 5); // 1 La condici\u00f3n que hemos utilizado en este ejemplo es buscar el elemento que tiene 5 car\u00e1cteres de longitud. Al buscarlo en el array original, el primero que encontramos es Pablo , puesto que find() devolver\u00e1 'Pablo' y findIndex() devolver\u00e1 1 , que es la segunda posici\u00f3n del array donde se encuentra. En el caso de no encontrar ning\u00fan elemento que cumpla la condici\u00f3n, find() devolver\u00e1 , mientras que findIndex() , que debe devolver un , devolver\u00e1 -1 .","title":"find (B\u00fasqueda)"},{"location":"desarrollo/javascript/03-caracteristicas/#reduce-acumuladores","text":"Por \u00faltimo, nos encontramos con una pareja de m\u00e9todos denominados reduce() y reduceRight() . Ambos m\u00e9todos se encargan de recorrer todos los elementos del array, e ir acumulando sus valores ( o alguna operaci\u00f3n diferente ) y sumarlo todo, para devolver su resultado final. En este par de m\u00e9todos, encontraremos una primera diferencia en su funci\u00f3n callback , puesto que en lugar de tener los cl\u00e1sicos par\u00e1metros opcionales (e, i, a) que hemos utilizado hasta ahora, tiene (p, e, i, a) , donde vemos que aparece un primer par\u00e1metro extra inicial: p . En la primera iteraci\u00f3n, p contiene el valor del primer elemento del array y e del segundo. En siguientes iteraciones, p es el acumulador que contiene lo que devolvi\u00f3 el callback en la iteraci\u00f3n anterior, mientras que e es el siguiente elemento del array, y as\u00ed sucesivamente. Veamos un ejemplo para entenderlo: const arr = [95, 5, 25, 10, 25]; arr.reduce((p, e) => { console.log(`P=${p} e=${e}`); return p + e; }); // P=95 e=5 (1\u00aa iteraci\u00f3n: elemento 1: 95 + elemento 2: 5) = 100 // P=100 e=25 (2\u00aa iteraci\u00f3n: 100 + elemento 3: 25) = 125 // P=125 e=10 (3\u00aa iteraci\u00f3n: 125 + elemento 4: 10) = 135 // P=135 e=25 (4\u00aa iteraci\u00f3n: 135 + elemento 5: 25) = 160 // Finalmente, devuelve 160 Gracias a esto, podemos utilizar el m\u00e9todo reduce() como acumulador de elementos de izquierda a derecha y reduceRight() como acumulador de elementos de derecha a izquierda. Veamos un ejemplo de cada uno, realizando una resta en lugar de una suma: const arr = [95, 5, 25, 10, 25]; arr.reduce((p, e) => p - e); // 95 - 5 - 25 - 10 - 25. Devuelve 30 arr.reduceRight((p, e) => p - e); // 25 - 10 - 25 - 5 - 95. Devuelve -110 Recuerda que en cualquiera de estas array functions puedes realizar operaciones o condiciones tanto con el par\u00e1metro e ( elemento ), como con el par\u00e1metro i ( \u00edndice o posici\u00f3n ) o con el par\u00e1metro a ( array ).","title":"reduce (Acumuladores)"},{"location":"desarrollo/javascript/03-caracteristicas/#iteradores","text":"En ECMAScript 6 se introducen unos m\u00e9todos muy \u00fatiles para utilizar como iteradores ( objetos preparados para recorrer los elementos de un array y devolver informaci\u00f3n ). Hablamos de los m\u00e9todos keys() , values() y entries() . El primero de ellos permite avanzar en un array, mientras va devolviendo las posiciones, el segundo los valores ( el elemento en s\u00ed ) y el tercero devuelve un array con la posici\u00f3n en el primer elemento y el valor en el segundo elemento. M\u00e9todo Descripci\u00f3n i .keys() Permite iterar un array e ir devolviendo sus \u00edndices o posiciones (keys). i .values() Permite iterar un array e ir devolviendo sus valores (elementos). i .entries() Permite iterar un array e ir devolviendo un array [\u00edndice, valor] . Estos m\u00e9todos, combinados con un for...of por ejemplo, permiten recorrer los arrays y obtener diferente informaci\u00f3n del array r\u00e1pidamente. En el siguiente ejemplo utilizamos una caracter\u00edstica avanzada que veremos m\u00e1s adelante llamada desestructuraci\u00f3n : const arr = [\"Sonic\", \"Mario\", \"Luigi\"]; // Obtiene un array con las keys (posiciones) const keys = [...arr.keys()]; // [0, 1, 2] // Obtiene un array con los valores (elementos) const values = [...arr.values()]; // ['Sonic', 'Mario', 'Luigi'] // Obtiene un array con las entradas (par key, valor) const entries = [...arr.entries()]; // [[0, 'Sonic'], [1, 'Mario'], [2, 'Luigi']]","title":"Iteradores"},{"location":"desarrollo/javascript/03-caracteristicas/#expresiones-regulares-regexp","text":"En muchas ocasiones nos encontraremos en la situaci\u00f3n de querer realizar una o varias acciones si se cumple un determinado caso. Pero muchas veces, esos casos no son tan simples, sino que existe un n\u00famero muy alto de situaciones diferentes que no podemos cubrir de formas tradicionales. En esas situaciones es donde las expresiones regulares quiz\u00e1s nos puedan ser de ayuda.","title":"Expresiones regulares (RegExp)"},{"location":"desarrollo/javascript/03-caracteristicas/#que-es-una-regexp","text":"Las expresiones regulares ( a menudo llamadas RegExp o RegEx ) son un sistema para buscar, capturar o reemplazar texto utilizando patrones . Estos patrones permiten realizar una b\u00fasqueda de texto de una forma relativamente sencilla y abstracta, de forma que abarca una gran cantidad de posibilidades que de otra forma ser\u00eda imposible o muy costosa. Constructor Descripci\u00f3n new RegExp(r, flags) Crea una nueva expresi\u00f3n regular a partir de r con los flags indicados. /r/flags Simplemente, la expresi\u00f3n regular r entre barras / . Notaci\u00f3n preferida. As\u00ed pues, podr\u00edamos crear expresiones regulares de estas dos formas, siempre teniendo como notaci\u00f3n preferida la primera: // Notaci\u00f3n literal (preferida) const r = /.a.o/i; // Notaci\u00f3n de objeto const r = new RegExp(\".a.o\", \"i\"); const r = new RegExp(/.a.o/, \"i\"); En ambos ejemplos, estamos estableciendo la expresi\u00f3n regular .a.o , donde el punto ( como veremos m\u00e1s adelante ) es un comod\u00edn que simboliza cualquier car\u00e1cter, y la i es un flag que establece que no diferencia may\u00fasculas de min\u00fasculas. En Javascript, se prefiere utilizar las barras / para delimitar una expresi\u00f3n regular en una variable. Se trata de una forma m\u00e1s c\u00f3moda y compacta que evita tener que hacer un new del objeto .","title":"\u00bfQu\u00e9 es una RegExp?"},{"location":"desarrollo/javascript/03-caracteristicas/#propiedades-de-una-regexp","text":"Cada expresi\u00f3n regular creada, tiene unas propiedades definidas, donde podemos consultar ciertas caracter\u00edsticas de la expresi\u00f3n regular en cuesti\u00f3n. Adem\u00e1s, tambi\u00e9n tiene unas propiedades de comprobaci\u00f3n para saber si un flag determinado est\u00e1 activo o no: Propiedades Descripci\u00f3n .source Devuelve un string con la expresi\u00f3n regular original al crear el objeto ( sin flags ). .flags Devuelve un string con los flags activados en la expresi\u00f3n regular. .lastIndex Devuelve la posici\u00f3n donde se encontr\u00f3 una ocurrencia en la \u00faltima b\u00fasqueda. .global Comprueba si el flag g est\u00e1 activo en la expresi\u00f3n regular. .ignoreCase Comprueba si el flag i est\u00e1 activo en la expresi\u00f3n regular. .multiline Comprueba si el flag m est\u00e1 activo en la expresi\u00f3n regular. .unicode Comprueba si el flag u est\u00e1 activo en la expresi\u00f3n regular. .sticky Comprueba si el flag y est\u00e1 activo en la expresi\u00f3n regular. El funcionamiento de los flags los veremos en el apartado siguiente. No obstante, con las propiedades .source y .flags se puede obtener casi toda la informaci\u00f3n que se puede hacer con dichos flags. const r = /reg/gi; r.source; // 'reg' r.flags; // 'ig' r.flags.includes(\"g\"); // true (equivalente a r.global) r.flags.includes(\"u\"); // false (equivalente a r.unicode) Tambi\u00e9n podemos comprobar si un flag est\u00e1 activo con la propiedad .flags combinada con includes() , como se puede ver en el ejemplo anterior. Por otro lado, .source nos devuelve un con la expresi\u00f3n regular definida ( y sin flags ). La utilidad de lastIndex() la veremos m\u00e1s adelante.","title":"Propiedades de una RegExp"},{"location":"desarrollo/javascript/03-caracteristicas/#flags-de-una-regexp","text":"El segundo par\u00e1metro del new RegExp() o el que se escribe despu\u00e9s de la segunda barra / delimitadora del literal de las expresiones regulares, son una serie de car\u00e1cteres que indican los flags activos en la expresi\u00f3n regular en cuesti\u00f3n: const r1 = /reg/; const r2 = /reg/i; const r3 = /reg/gi; La expresi\u00f3n regular r1 no tiene ning\u00fan flag activado, mientras que r2 tiene el flag i activado y r3 tiene el flag i y el flag g activado. Veamos para que sirve cada flag: Flag Booleano Descripci\u00f3n i .ignoreCase Ignora may\u00fasculas y min\u00fasculas. Se suele denominar insensible a may\u00fas/min\u00fas . g .global B\u00fasqueda global. Sigue buscando coincidencias en lugar de pararse al encontrar una. m .multiline Multil\u00ednea. Permite a ^ y $ tratar los finales de l\u00ednea \\r o \\n . u .unicode Unicode. Interpreta el patr\u00f3n como un c\u00f3digo de una secuencia Unicode. y .sticky Sticky. Busca s\u00f3lo desde la posici\u00f3n indicada por lastIndex . Cada una de estas flags se pueden comprobar si est\u00e1n activas desde Javascript con su booleano asociado, que es una propiedad de la expresi\u00f3n regular: const r = /reg/gi; r.global; // true r.ignoreCase; // true r.multiline; // false r.sticky; // false r.unicode; // false","title":"Flags de una RegExp"},{"location":"desarrollo/javascript/03-caracteristicas/#metodos-de-regexp","text":"Los objetos RegExp tienen varios m\u00e9todos para utilizar expresiones regulares contra textos y saber si \u00abcasan\u00bb o no, es decir, si el patr\u00f3n de la expresi\u00f3n regular encaja con el texto propuesto. M\u00e9todo Descripci\u00f3n test(str) Comprueba si la expresi\u00f3n regular \u00abcasa\u00bb con el texto str pasado por par\u00e1metro. exec(str) Ejecuta una b\u00fasqueda de patr\u00f3n en el texto str . Devuelve un array con las capturas. Por ejemplo, veamos como utilizar la expresi\u00f3n regular del ejemplo anterior con el m\u00e9todo test() para comprobar si encaja con un texto determinado: const r = /.a.o/i; r.test(\"gato\"); // true r.test(\"pato\"); // true r.test(\"perro\"); // false r.test(\"DATO\"); // true (el flag i permite may\u00fas/min\u00fas) El m\u00e9todo exec() lo veremos un poco m\u00e1s adelante en el apartado de captura de patrones , ya que es algo m\u00e1s complejo. Primero debemos aprender que car\u00e1cteres especiales existen en las expresiones regulares para dominarlas.","title":"M\u00e9todos de RegExp"},{"location":"desarrollo/javascript/03-caracteristicas/#caracteres-especiales","text":"Antes de comenzar a utilizar expresiones regulares hay que aprender la parte m\u00e1s compleja de ellas: los car\u00e1cteres especiales. Dentro de las expresiones regulares, existen ciertos car\u00e1cteres que tienen un significado especial, y tambi\u00e9n, muchos de ellos dependen de donde se encuentren para tener ese significado especial, por lo que hay que aprender bien como funcionan.","title":"Car\u00e1cteres especiales"},{"location":"desarrollo/javascript/03-caracteristicas/#clases-basicas","text":"Empecemos con algunos de los m\u00e1s sencillos: Caracter especial Descripci\u00f3n . Comod\u00edn, cualquier caracter. \\ Invierte el significado de un car\u00e1cter. Si es especial, lo escapa. Si no, lo vuelve especial. \\t Caracter especial. Tabulador. \\r Caracter especial. Retorno de carro. A menudo denominado CR . \\n Caracter especial. Nueva l\u00ednea. A menudo denominado \u00abline feed\u00bb o LF . En esta peque\u00f1a tabla vemos algunos caracteres especiales que podemos usar en expresiones regulares. Observa que al igual que con otros tipos de datos, podemos utilizar el m\u00e9todo test() sobre el literal de la expresi\u00f3n regular, sin necesidad de guardarla en una variable previamente: // Buscamos RegExp que encaje con \"Manz\" /M.nz/.test(\"Manz\"); // true /M.nz/.test(\"manz\"); // false (La \u00abM\u00bb debe ser may\u00fascula) /M.nz/i.test(\"manz\"); // true (Ignoramos may\u00fas/min\u00fas con el flag \u00abi\u00bb) // Buscamos RegExp que encaje con \"A.\" /A./.test(\"A.\"); // true (Ojo, nos da true, pero el punto es comod\u00edn) /A./.test(\"Ab\"); // true (Nos da true con cualquier cosa) /A\\./.test(\"A.\"); // true (Soluci\u00f3n correcta) /A\\./.test(\"Ab\"); // false (Ahora no deja pasar algo que no sea punto)","title":"Clases b\u00e1sicas"},{"location":"desarrollo/javascript/03-caracteristicas/#conjunto-de-caracteres-o-alternativas","text":"Dentro de las expresiones regulares los corchetes [] tienen un significado especial. Se trata de un mecanismo para englobar un conjunto de car\u00e1cteres personalizado . Por otro lado, si incluimos un circunflejo ^ antes de los car\u00e1cteres del corchete, invertimos el significado, pasando a ser que no exista el conjunto de car\u00e1cteres personalizado: Caracter especial Descripci\u00f3n [] Rango de car\u00e1cteres. Cualquiera de los caracteres del interior de los corchetes. [^] No exista cualquiera de los caracteres del interior de los corchetes. | Establece una alternativa: lo que est\u00e1 a la izquierda o lo que est\u00e1 a la derecha. Por \u00faltimo, tenemos el \u00abpipe\u00bb | , con el que podemos establecer alternativas. Veamos un ejemplo aplicado a esto, que se ver\u00e1 m\u00e1s claro: const r = /[aeiou]/i; // RegExp que acepta vocales (may\u00fas/min\u00fas) r.test(\"a\"); // true (es vocal) r.test(\"E\"); // true (es vocal, y tiene flag \u00abi\u00bb) r.test(\"t\"); // false (no es vocal) const r = /[^aeiou]/i; // RegExp que acepta lo que no sea vocal (may\u00fas/min\u00fas) r.test(\"a\"); // false r.test(\"E\"); // false r.test(\"T\"); // true r.test(\"m\"); // true const r = /casa|cama/; // RegExp que acepta la primera o la segunda opci\u00f3n r.test(\"casa\"); // true r.test(\"cama\"); // true r.test(\"capa\"); // false En el interior de los corchetes, si establecemos dos car\u00e1cteres separados por gui\u00f3n, por ejemplo [0-9] , se entiende que indicamos el rango de car\u00e1cteres entre 0 y 9 , sin tener que escribirlos todos expl\u00edcitamente. De esta forma podemos crear rangos como [A-Z] ( may\u00fasculas ) o [a-z] ( min\u00fasculas ), o incluso varios rangos espec\u00edficos como [A-Za-z0-9] : Caracter especial Alternativa Descripci\u00f3n [0-9] \\d Un d\u00edgito del 0 al 9. [^0-9] \\D No exista un d\u00edgito del 0 al 9. [A-Z] Letra may\u00fascula de la A a la Z . Excluye \u00f1 o letras acentuadas. [a-z] Letra min\u00fascula de la a a la z . Excluye \u00f1 o letras acentuadas. [A-Za-z0-9] \\w Car\u00e1cter alfanum\u00e9rico (letra may\u00fascula, min\u00fascula o d\u00edgito). [^A-Za-z0-9] \\W No exista car\u00e1cter alfanum\u00e9rico (letra may\u00fascula, min\u00fascula o d\u00edgito). [ \\t\\r\\n\\f] \\s Car\u00e1cter de espacio en blanco (espacio, TAB , CR , LF o FF ). [^ \\t\\r\\n\\f] \\S No exista car\u00e1cter de espacio en blanco (espacio, TAB , CR , LF o FF ). \\xN Car\u00e1cter hexadecimal n\u00famero N . \\uN Car\u00e1cter Unicode n\u00famero N . Observa que en esta tabla tenemos una notaci\u00f3n alternativa que es equivalente al caracter especial indicado. Por ejemplo, es lo mismo escribir [0-9] que \\d . Algunos programadores encuentran m\u00e1s explicativa la primera forma y otros m\u00e1s c\u00f3moda la segunda.","title":"Conjunto de car\u00e1cteres o alternativas"},{"location":"desarrollo/javascript/03-caracteristicas/#anclas","text":"Dentro de las expresiones regulares, las anclas son un recurso muy importante, ya que permiten deliminar los patrones de b\u00fasqueda e indicar si empiezan o terminan por car\u00e1cteres concretos, siendo mucho m\u00e1s espec\u00edficos al realizar la b\u00fasqueda: Caracter especial Descripci\u00f3n ^ Ancla. Delimina el inicio del patr\u00f3n. Significa empieza por . $ Ancla. Delimina el final del patr\u00f3n. Significa acaba en . \\b Posici\u00f3n de una palabra limitada por espacios, puntuaci\u00f3n o inicio/final. \\B Opuesta al anterior. Posici\u00f3n entre 2 caracteres alfanum\u00e9ricos o no alfanum\u00e9ricos. Las dos primeras son bastante \u00fatiles cuando sabemos que el texto que estamos buscando termina o empieza de una forma concreta. De este modo podemos hacer cosas como las siguientes: const r = /^mas/i; r.test(\"Formas\"); // false (no empieza por \"mas\") r.test(\"Master\"); // true r.test(\"Masticar\"); // true const r = /do$/i; r.test(\"V\u00edvido\"); // true r.test(\"Domin\u00f3\"); // false Por otro lado, \\b nos permite indicar si el texto adyacente est\u00e1 seguido o precedido de un l\u00edmite de palabra ( espacio ), puntuaci\u00f3n ( comas o puntos ) o inicio o final del : const r = /fo\\b/; r.test(\"Esto es un p\u00e1rrafo de texto.\"); // true (tras \"fo\" hay un l\u00edmite de palabra) r.test(\"Esto es un p\u00e1rrafo.\"); // true (tras \"fo\" hay un signo de puntuaci\u00f3n) r.test(\"Un c\u00edrculo es una forma.\"); // false (tras \"fo\" sigue la palabra) r.test(\"Frase que termina en fo\"); // true (tras \"fo\" termina el string) Por \u00faltimo, \\B es la operaci\u00f3n opuesta a \\b , por lo que podemos utilizarla cuando nos interesa que el texto no est\u00e9 delimitado por una palabra, puntuaci\u00f3n o string en s\u00ed.","title":"Anclas"},{"location":"desarrollo/javascript/03-caracteristicas/#cuantificadores","text":"En las expresiones regulares los cuantificadores permiten indicar cu\u00e1ntas veces se puede repetir el car\u00e1cter inmediatamente anterior. Existen varios tipos de cuantificadores: Caracter especial Descripci\u00f3n * El car\u00e1cter anterior puede aparecer 0 o m\u00e1s veces. + El car\u00e1cter anterior puede aparecer 1 o m\u00e1s veces. ? El car\u00e1cter anterior puede aparecer o no aparecer. {n} El car\u00e1cter anterior aparece n veces. {n,} El car\u00e1cter anterior aparece n o m\u00e1s veces. {n,m} El car\u00e1cter anterior aparece de n a m veces. Veamos algunos ejemplos para aprender a aplicarlos. Comencemos con * ( 0 o m\u00e1s veces ): // 'a' aparece 0 o m\u00e1s veces en el string const r = /a*/; r.test(\"\"); // true ('a' aparece 0 veces) r.test(\"a\"); // true ('a' aparece 1 veces) r.test(\"aa\"); // true ('a' aparece 2 veces) r.test(\"aba\"); // true ('a' aparece 2 veces) r.test(\"bbb\"); // true ('a' aparece 0 veces) El cuantificador + es muy parecido a * , s\u00f3lo que con el primero es necesario que el car\u00e1cter anterior aparezca al menos una vez: // 'a' aparece 1 o m\u00e1s veces (equivalente a /aa*/) const r = /a+/; r.test(\"\"); // false ('a' aparece 0 veces) r.test(\"a\"); // true ('a' aparece 1 veces) r.test(\"aa\"); // true ('a' aparece 2 veces) r.test(\"aba\"); // true ('a' aparece 2 veces) r.test(\"bbb\"); // false ('a' aparece 0 veces) El cuantificador ? se suele utilizar para indicar que el car\u00e1cter anterior es opcional ( puede aparecer o puede no aparecer ). Normalmente se utiliza cuando quieres indicar que no importa que aparezca un car\u00e1cter opcional: const r = /disparos?/i; r.test(\"Escuch\u00e9 disparos en la habitaci\u00f3n.\"); // true r.test(\"Efectu\u00f3 un disparo al sujeto.\"); // true r.test(\"La pistola era de agua.\"); // false Los tres cuantificadores siguientes, se utilizan cuando necesitamos concretar m\u00e1s el n\u00famero de repeticiones del caracter anterior. Por ejemplo, {n} indica un n\u00famero exacto, {n,} indica al menos n veces y {n,m} establece que se repita de n a m veces. // Un n\u00famero formado de 2 d\u00edgitos (del 0 al 9) const r = /[0-9]{2}/; r.test(42); // true r.test(88); // true r.test(1); // false r.test(100); // true Observa que el \u00faltimo aparece como true . Esto ocurre porque en la expresi\u00f3n regular no se han establecido anclas que delimiten el inicio y/o el final del texto. Si las a\u00f1adimos, es m\u00e1s estricto con las comprobaciones: const r = /^[0-9]{2}$/; r.test(4); // false r.test(55); // true r.test(100); // false const r = /^[0-9]{3,}$/; r.test(33); // false r.test(4923); // true const r = /^[0-9]{2,5}$/; r.test(2); // false r.test(444); // true r.test(543213); // false Si quieres profundizar con las expresiones regulares , puedes jugar a RegEx People , un peque\u00f1o y b\u00e1sico juego para aprender a utilizar las expresiones regulares y buscar patrones, con su c\u00f3digo fuente disponible en GitHub . Recuerda tambi\u00e9n que aunque test() espera un por par\u00e1metro, en caso de enviarle otro objeto, lo pasar\u00e1 a mediante el m\u00e9todo toString() que existe en todos los objetos de Javascript","title":"Cuantificadores"},{"location":"desarrollo/javascript/03-caracteristicas/#captura-de-patrones","text":"Pero con las expresiones regulares no s\u00f3lo podemos realizar b\u00fasquedas de patrones. Una de las caracter\u00edsticas m\u00e1s importantes de las expresiones regulares es lo potente y vers\u00e1til que resultan las capturas de patrones . Toda expresi\u00f3n regular que utilice la parentizaci\u00f3n ( englobe con par\u00e9ntesis fragmentos de texto ) est\u00e1 realizando impl\u00edcitamente una captura de texto, que es muy \u00fatil para obtener r\u00e1pidamente informaci\u00f3n. Para ello, dejamos de utilizar el m\u00e9todo test(str) y comenzamos a utilizar exec(str) , que funciona exactamente igual, s\u00f3lo que devuelve un array con las capturas realizadas. Antes de empezar a utilizarlo, necesitamos saber detalles sobre la parentizaci\u00f3n : Caracter especial Descripci\u00f3n (x) El patr\u00f3n inclu\u00eddo dentro de par\u00e9ntesis se captura y se guarda en $1 o sucesivos. (?:x) Si inclu\u00edmos ?: al inicio del contenido de los par\u00e9ntesis, evitamos capturar ese patr\u00f3n. x(?=y) Busca s\u00f3lo si x est\u00e1 seguido de y . x(?!y) Busca s\u00f3lo si x no est\u00e1 seguido de y . As\u00ed pues, vamos a realizar una captura a trav\u00e9s de los par\u00e9ntesis de una expresi\u00f3n regular: // RegExp que captura palabras de 3 letras. const r = /\\b([a-z]{3})\\b/gi; const str = \"Hola a todos, amigos m\u00edos. Esto es una prueba que permitir\u00e1 ver que ocurre.\"; r.global; // true (el flag global est\u00e1 activado) r.exec(str); // ['una', 'una'] index: 35 r.exec(str); // ['que', 'que'] index: 46 r.exec(str); // ['ver', 'ver'] index: 60 r.exec(str); // ['que', 'que'] index: 64 r.exec(str); // null El m\u00e9todo exec() nos permite ejecutar una b\u00fasqueda sobre el texto str hasta encontrar una coincidencia. En ese caso, se detiene la b\u00fasqueda y nos devuelve un array con los capturados por la parentizaci\u00f3n. Si el flag g est\u00e1 activado, podemos volver a ejecutar exec() para continuar buscando la siguiente aparici\u00f3n, hasta que no encuentre ninguna m\u00e1s, que devolver\u00e1 null .","title":"Captura de patrones"},{"location":"desarrollo/javascript/03-caracteristicas/#regex-en-strings","text":"Quiz\u00e1s, generalmente el usuario prefiera utilizar el m\u00e9todo match(reg) de los , que permiten ejecutar la b\u00fasqueda de la expresi\u00f3n regular reg pasada por par\u00e1metro, sobre esa variable de texto. El resultado es que nos devuelve un con los capturados: const r = /\\b([a-z]{3})\\b/gi; const str = \"Hola a todos, amigos m\u00edos. Esto es una prueba que permitir\u00e1 ver que ocurre.\"; str.match(r); // Devuelve ['una', 'que', 'ver', 'que'] const r = /\\bv([0-9]+)\\.([0-9]+)\\.([0-9]+)\\b/; const str = \"v1.0.21\"; str.match(r); // Devuelve ['v1.0.21', '1', '0', '21'] En el caso de no existir parentizaci\u00f3n , el array devuelto contiene un con todo el texto capturado. En el caso de existir m\u00faltiples parentizaciones ( como en el \u00faltimo ejemplo ), el array devuelto contiene un con todo el texto capturado, y un por cada parentizaci\u00f3n. Recuerda que los tienen varios m\u00e9todos que permiten el uso de expresiones regulares para realizar operaciones, como por ejemplo, el replace() , para hacer reemplazos en todas las ocurrencias: const daenerys = \"Javascript es un gran lenguaje\"; daenerys.replace(/[aeou]/g, \"i\"); // 'Jiviscript is in grin lingiiji'","title":"RegEx en Strings"},{"location":"desarrollo/javascript/03-caracteristicas/#json","text":"Cuando trabajamos con mucha cantidad de informaci\u00f3n, se puede volver necesario aislar el c\u00f3digo de programaci\u00f3n de los datos. De esta forma, podemos guardar informaci\u00f3n en un fichero independiente, separado del archivo donde tenemos el c\u00f3digo de nuestro programa. As\u00ed, si necesitamos actualizar o modificar datos, no tenemos que tocar el c\u00f3digo de nuestro programa.","title":"JSON"},{"location":"desarrollo/javascript/03-caracteristicas/#que-es-json","text":"JSON son las siglas de JavaScript Object Notation , y no es m\u00e1s que un formato ligero de datos, con una estructura ( notaci\u00f3n ) espec\u00edfica, que es totalmente compatible de forma nativa con Javascript. Como su propio nombre indica, JSON se basa en la sintaxis que tiene Javascript para crear objetos. Un archivo JSON m\u00ednimo debe tener la siguiente sintaxis: { } Esto simplemente es un objeto vac\u00edo. Un archivo JSON, puede contener varios tipos de datos: { \"name\": \"Manz\", \"life\": 99, \"dead\": false, \"props\": [\"invisibility\", \"coding\", \"happymood\"], \"senses\": { \"vision\": 50, \"audition\": 75, \"taste\": 40, \"smell\": 50, \"touch\": 80 } } Como se puede ver, en JSON todos los textos deben estar entrecomillados con \u00abcomillas dobles\u00bb, y solo se pueden utilizar tipos de datos como , , , , o null . Un valor null , simplemente, tambi\u00e9n ser\u00eda un JSON v\u00e1lido. OJO : JSON no permite utilizar tipos de datos como , , o valores undefined . Tampoco es v\u00e1lido incluir comentarios en un JSON. Mucho cuidado con las comillas mal cerradas o las comas sobrantes ( antes de un cierre de llaves, por ejemplo ). Suelen ser motivos de error de sintaxis frecuentemente. Si tienes dudas sobre si la sintaxis del JSON que has constru\u00eddo es correcta, puedes utilizar JSONLint , una p\u00e1gina que te permitir\u00e1 pegar el c\u00f3digo JSON y validarlo para saber si es correcto. Tambi\u00e9n nos puede servir para indentar correctamente el JSON.","title":"\u00bfQu\u00e9 es JSON?"},{"location":"desarrollo/javascript/03-caracteristicas/#como-utilizar-json","text":"Si analizamos bien la sintaxis de un JSON, nos daremos cuenta que es muy similar a algo a lo que ya deber\u00edamos estar acostumbrados: const o = { name: \"Manz\", life: 99, }; Simplemente a\u00f1adiendo const o = al principio, nos daremos cuenta ( si no era evidente ya ) de que se trata de un objeto de Javascript y que no deber\u00eda ser muy sencillo pasar de JSON a Javascript y viceversa. En Javascript tenemos una serie de m\u00e9todos que nos facilitan esa tarea, pudiendo trabajar con que contengan JSON y objetos Javascript de forma indiferente: M\u00e9todo Descripci\u00f3n JSON.parse(str) Convierte el texto str (un JSON v\u00e1lido) a un objeto y lo devuelve. JSON.stringify(obj) Convierte un objeto Javascript obj a su representaci\u00f3n JSON y la devuelve.","title":"\u00bfC\u00f3mo utilizar JSON?"},{"location":"desarrollo/javascript/03-caracteristicas/#convertir-json-a-objeto","text":"La acci\u00f3n de convertir JSON a objeto Javascript se le suele denominar parsear . Es una acci\u00f3n que analiza un que contiene un JSON v\u00e1lido y devuelve un objeto Javascript con dicha informaci\u00f3n correctamente estructurada. Para ello, utilizaremos el m\u00e9todo JSON.parse() : const str = '{ \"name\": \"Manz\", \"life\": 99 }'; const obj = JSON.parse(str); obj.name; // 'Manz' obj.life; // 99 Como se puede ver, obj es un objeto generado a partir del JSON recogido en la variable str y podemos consultar sus propiedades y trabajar con ellas sin problemas.","title":"Convertir JSON a Objeto"},{"location":"desarrollo/javascript/03-caracteristicas/#convertir-objeto-a-json","text":"La acci\u00f3n inversa, convertir un objeto Javascript a JSON tambi\u00e9n se puede realizar facilmente haciendo uso del m\u00e9todo JSON.stringify() . Este m\u00e9todo dificil de pronunciar viene a ser algo as\u00ed como \u00abconvertir a texto\u00bb, y lo podemos utilizar para transformar un objeto de Javascript a JSON r\u00e1pidamente: const obj = { name: \"Manz\", life: 99, saludar: function () { return \"Hola!\"; }, }; const str = JSON.stringify(obj); str; // '{\"name\":\"Manz\",\"life\":99}' Observa que, como hab\u00edamos dicho, las funciones no est\u00e1n soportadas por JSON , por lo que si intentamos convertir un objeto que contiene m\u00e9todos o funciones, JSON.stringify() no fallar\u00e1, pero simplemente devolver\u00e1 un omitiendo las propiedades que contengan funciones.","title":"Convertir Objeto a JSON"},{"location":"desarrollo/javascript/03-caracteristicas/#leyendo-json-externo","text":"Teniendo en cuenta todo lo visto hasta ahora, JSON es un formato ideal para guardar en peque\u00f1os archivos de texto que se puedan leer desde Javascript, pasar a objetos y trabajar con ellos. Para hacer esto, existen varias estrategias. La m\u00e1s com\u00fan es utilizar AJAX para leer este tipo de datos, pero eso lo veremos m\u00e1s adelante.","title":"Leyendo JSON externo"},{"location":"desarrollo/javascript/03-caracteristicas/#recursos-para-json","text":"Existen varios recursos interesantes para trabajar con JSON y que pueden sernos de utilidad como programadores. Cito varios de ellos a continuaci\u00f3n: Nombre Descripci\u00f3n GitHub JSONLint Validador JSON. Comprueba sintaxis e indica errores. - JSONLint Validador JSON. Tambi\u00e9n disponible versi\u00f3n de terminal (CLI). @zaach/jsonlint prettyjson Lector de JSON para terminal (CLI) con resaltado en colores. @rafeca/prettyjson JSONEditor Editor JSON visual y online. @josdejong/jsoneditor JSONSelect Selector de datos JSON al estilo CSS. Experimental. @lloyd/JSONSelect","title":"Recursos para JSON"},{"location":"desarrollo/javascript/03-caracteristicas/#clases-es6","text":"Una vez dominamos las bases de la programaci\u00f3n y nuestro c\u00f3digo va creciendo cada vez m\u00e1s, comprobaremos que las funciones no suelen ser suficiente como para organizar nuestro c\u00f3digo y los mecanismos que tenemos a nuestro alcance quiz\u00e1s no resultan todo lo pr\u00e1cticos que deber\u00edan ser. Aunque Javascript no soporta clases de forma nativa, en ECMAScript 2015 se introduce la posibilidad de usar clases como en otros lenguajes, aunque internamente Javascript traduce estas clases al sistema basado en prototipos que usa en realidad. Para los programadores funciona a modo de az\u00facar sint\u00e1ctico , es decir, s\u00f3lo \u00abendulza\u00bb la forma de trabajar para que sea m\u00e1s agradable para nosotros.","title":"Clases ES6"},{"location":"desarrollo/javascript/03-caracteristicas/#que-es-una-clase","text":"Una clase es una forma de organizar c\u00f3digo de forma entendible con el objetivo de simplificar el funcionamiento de nuestro programa. Adem\u00e1s, hay que tener en cuenta que las clases son \u00abconceptos abstractos\u00bb de los que se pueden crear objetos de programaci\u00f3n, cada uno con sus caracter\u00edsticas concretas. Esto puede ser complicado de entender con palabras, pero se ve muy claro con ejemplos: En primer lugar tenemos la clase . La clase es el concepto abstracto de un objeto, mientras que el objeto es el elemento final que se basa en la clase. En la imagen anterior tenemos varios ejemplos: En el primer ejemplo tenemos dos variables: pato y lucas . Ambos son animales, por lo que son objetos que est\u00e1n basados en la clase Animal . Tanto pato como lucas tienen las caracter\u00edsticas que estar\u00e1n definidas en la clase Animal : color, sonido que emiten, nombre, etc... En el segundo ejemplo tenemos dos variables seat y opel . Se trata de dos coches, que son veh\u00edculos, puesto que est\u00e1n basados en la clase Veh\u00edculo . Cada uno tendr\u00e1 las caracter\u00edsticas de su clase: color del veh\u00edculo, n\u00famero de ruedas, marca, modelo, etc... En el tercer ejemplo tenemos dos variables cuadrado y c2 . Se trata de dos formas geom\u00e9tricas, que al igual que los ejemplos anteriores tendr\u00e1n sus propias caracter\u00edsticas, como por ejemplo el tama\u00f1o de sus lados. El elemento cuadrado puede tener un lado de 3 cm y el elemento c2 puede tener un lado de 6 cm. En Javascript se utiliza una sintaxis muy similar a otros lenguajes como, por ejemplo, Java. Declarar una clase es tan sencillo como escribir lo siguiente: // Declaraci\u00f3n de una clase class Animal {} // Crear o instanciar un objeto const pato = new Animal(); El nombre elegido deber\u00eda hacer referencia a la informaci\u00f3n que va a contener dicha clase. Piensa que el objetivo de las clases es almacenar en ella todo lo que tenga relaci\u00f3n ( en este ejemplo, con los animales ). Si te fijas, es lo que venimos haciendo hasta ahora con objetos como , , u otros. Observa que luego creamos una variable donde hacemos un new Animal() . Estamos creando una variable pato ( un objeto ) que es de tipo Animal , y que contendr\u00e1 todas las caracter\u00edsticas definidas dentro de la clase Animal ( de momento, vac\u00eda ). Una norma de estilo en el mundo de la programaci\u00f3n es que las clases deben siempre empezar en may\u00fasculas . Esto nos ayudar\u00e1 a diferenciarlas s\u00f3lo con leerlas. Si te interesa este tema, puedes echar un vistazo al tema de las convenciones de nombres en programaci\u00f3n .","title":"\u00bfQu\u00e9 es una clase?"},{"location":"desarrollo/javascript/03-caracteristicas/#elementos-de-una-clase","text":"Una clase tiene diferentes **caracter\u00edsticas que la forman, vamos a ir explic\u00e1ndolas todas detalladamente. Pero primero, una tabla general para verlas en conjunto: Elemento Descripci\u00f3n Propiedad Variable que existe dentro de una clase. Puede ser p\u00fablica o privada. Propiedad p\u00fablica Propiedad a la que se puede acceder desde fuera de la clase. Propiedad privada Propiedad a la que no se puede acceder desde fuera de la clase. Propiedad computada Funci\u00f3n para acceder a una propiedad con modificaciones (getter/setter). M\u00e9todo Funci\u00f3n que existe dentro de una clase. Puede ser p\u00fablica o privada. M\u00e9todo p\u00fablico M\u00e9todo que se puede ejecutar desde dentro y fuera de la clase. M\u00e9todo privado M\u00e9todo que s\u00f3lo se puede ejecutar desde dentro de la clase. M\u00e9todo est\u00e1tico M\u00e9todo que se ejecuta directamente desde la clase, no desde la instancia. Constructor M\u00e9todo que se ejecuta autom\u00e1ticamente cuando se crea una instancia. Como vemos, todos estas caracter\u00edsticas se dividen en dos grupos: las propiedades ( a grandes rasgos, variables dentro de clases ) y los m\u00e9todos ( a grandes rasgos, funciones dentro de clases ). Veamos cada una de ellas en detalle, pero empecemos por los m\u00e9todos .","title":"Elementos de una clase"},{"location":"desarrollo/javascript/03-caracteristicas/#que-es-un-metodo","text":"Hasta ahora hab\u00edamos visto que los m\u00e9todos eran funciones que viven dentro de una variable, m\u00e1s concretamente de un objeto. Los objetos de tipo tienen varios m\u00e9todos, los objetos de tipo tiene otros m\u00e9todos, etc... Justo eso es lo que definimos en el interior de una clase. Si a\u00f1adimos un m\u00e9todo a la clase Animal , al crear cualquier variable haciendo un new Animal() , tendr\u00e1 autom\u00e1ticamente ese m\u00e9todo disponible. Ten en cuenta que podemos crear varias variables de tipo Animal y ser\u00e1n totalmente independientes cada una: // Declaraci\u00f3n de clase class Animal { // M\u00e9todos hablar() { return \"Cuak\"; } } // Creaci\u00f3n de una instancia u objeto const pato = new Animal(); pato.hablar(); // 'Cuak' const donald = new Animal(); donald.hablar(); // 'Cuak' Observa que el m\u00e9todo hablar() , que se encuentra dentro de la clase Animal , existe en las variables pato y donald porque realmente son de tipo Animal . Al igual que con las funciones, se le pueden pasar varios par\u00e1metros al m\u00e9todo y trabajar con ellos como venimos haciendo normalmente con las funciones.","title":"\u00bfQu\u00e9 es un m\u00e9todo?"},{"location":"desarrollo/javascript/03-caracteristicas/#que-es-un-metodo-estatico","text":"En el caso anterior, para usar un m\u00e9todo de una clase, como por ejemplo hablar() , debemos crear el objeto basado en la clase haciendo un new de la clase. Lo que se denomina crear un objeto o una instancia de la clase. En algunos casos, nos puede interesar crear m\u00e9todos est\u00e1ticos en una clase porque para utilizarlos no hace falta crear ese objeto, sino que se pueden ejecutar directamente sobre la clase directamente: class Animal { static despedirse() { return \"Adi\u00f3s\"; } hablar() { return \"Cuak\"; } } Animal.despedirse(); // 'Adi\u00f3s' Como veremos m\u00e1s adelante, lo habitual suele ser utilizar m\u00e9todos normales ( no est\u00e1ticos ), porque normalmente nos suele interesar crear varios objetos y guardar informaci\u00f3n diferente en cada uno de ellos, y para eso tendr\u00edamos que instanciar un objeto. Una de las limitaciones de los m\u00e9todos est\u00e1ticos es que en su interior s\u00f3lo podremos hacer referencia a elementos que tambi\u00e9n sean est\u00e1ticos. No podremos acceder a propiedades o m\u00e9todos no est\u00e1ticos, ya que necesitar\u00edamos instanciar un objeto para hacerlo. Los m\u00e9todos est\u00e1ticos se suelen utilizar para crear funciones de apoyo que realicen tareas concretas o gen\u00e9ricas, porque est\u00e1n relacionadas con la clase en general.","title":"\u00bfQu\u00e9 es un m\u00e9todo est\u00e1tico?"},{"location":"desarrollo/javascript/03-caracteristicas/#que-es-un-constructor","text":"Se le llama constructor a un tipo especial de m\u00e9todo de una clase, que se ejecuta autom\u00e1ticamente a la hora de hacer un new de dicha clase. Una clase solo puede tener un constructor , y en el caso de que no se especifique un constructor a una clase, tendr\u00e1 uno vac\u00edo de forma impl\u00edcita. Veamos el ejemplo anterior, donde a\u00f1adiremos un constructor a la clase: // Declaraci\u00f3n de clase class Animal { // M\u00e9todo que se ejecuta al hacer un new constructor() { console.warn(\"Ha nacido un pato.\"); } // M\u00e9todos hablar() { return \"Cuak\"; } } // Creaci\u00f3n de una instancia u objeto const pato = new Animal(); // 'Ha nacido un pato' El constructor es un mecanismo muy interesante y utilizado para tareas de inicializaci\u00f3n o que quieres realizar tras haber creado el nuevo objeto. Otros lenguajes de programaci\u00f3n tienen concepto de destructor ( el opuesto al constructor ), sin embargo, en Javascript no existe este concepto. Ojo : En un constructor no se puede utilizar nunca un return , puesto que al hacer un new se devuelve siempre el propio objeto creado.","title":"\u00bfQu\u00e9 es un constructor?"},{"location":"desarrollo/javascript/03-caracteristicas/#que-es-una-propiedad","text":"Las clases, siendo estructuras para guardar informaci\u00f3n, pueden guardar variables con su correspondiente informaci\u00f3n. Dicho concepto se denomina propiedades y en Javascript se realiza en el interior del constructor, precedido de la palabra clave this ( que hace referencia a \u00abeste\u00bb elemento, es decir, la clase ), como puedes ver en el siguiente ejemplo: class Animal { constructor(n = \"pato\") { this.nombre = n; } hablar() { return \"Cuak\"; } quienSoy() { return \"Hola, soy \" + this.nombre; } } // Creaci\u00f3n de objetos const pato = new Animal(); pato.quienSoy(); // 'Hola, soy pato' const donald = new Animal(\"Donald\"); pato.quienSoy(); // 'Hola, soy Donald' Desde ECMAScript se pueden declarar propiedades en la parte superior de la clase, justo despu\u00e9s de abrir el { del class . De esta forma, ya no es necesario utilizar la palabra clave this ni declararlas obligatoriamente dentro del constructor() . Como se puede ver, estas propiedades existen en la clase, y se puede establecer de forma que todos los objetos tengan el mismo valor, o como en el ejemplo anterior, tengan valores diferentes dependiendo del objeto en cuesti\u00f3n, pas\u00e1ndole los valores espec\u00edficos por par\u00e1metro. Observa que, las propiedades de la clase podr\u00e1n ser modificadas externamente, ya que por defecto son propiedades p\u00fablicas : const pato = new Animal(\"Donald\"); pato.quienSoy(); // 'Hola, soy Donald' pato.nombre = \"Paco\"; pato.quienSoy(); // 'Hola, soy Paco'","title":"\u00bfQu\u00e9 es una propiedad?"},{"location":"desarrollo/javascript/03-caracteristicas/#propiedades-y-metodos-privados","text":"A partir de la versi\u00f3n ECMAScript , se introduce la posibilidad de crear campos de clase privados ( los cuales a\u00fan cuentan con poco soporte ). Antiguamente todas las propiedades y m\u00e9todos eran p\u00fablicos por defecto, pero ahora tambi\u00e9n pueden ser privados. Para ello, solo hay que a\u00f1adir el car\u00e1cter # justo antes del nombre de la propiedad o m\u00e9todo: class Animal { #miSecreto = \"Me gusta Internet Explorer\"; #decirSecreto() { return this.#miSecreto; } decirSacrilegio() { return this.#decirSecreto(); } } const patitoFeo = new Animal(); patitoFeo.#decirSecreto(); // Error patitoFeo.decirSacrilegio(); // OK Estas propiedades o m\u00e9todos precedidos de # son privados y s\u00f3lo podr\u00e1n ser llamados desde un m\u00e9todo de clase, ya que si se hace desde fuera obtendremos un error similar al siguiente: Uncaught SyntaxError: Private field '#decirSecreto' must be declared in an enclosing class Sin embargo, si se llama a un m\u00e9todo p\u00fablico como decirSacrilegio() , que a su vez llama a un m\u00e9todo privado ( pero desde dentro de la clase ), todo funcionar\u00e1 correctamente sin error, ya que el m\u00e9todo #decirSecreto() se est\u00e1 llamando desde dentro de la clase.","title":"Propiedades y m\u00e9todos privados"},{"location":"desarrollo/javascript/03-caracteristicas/#los-ambitos-en-una-clase","text":"Dentro de una clase tenemos dos tipos de \u00e1mbitos: \u00e1mbito de m\u00e9todo y \u00e1mbito de clase : En primer lugar, veamos el \u00e1mbito dentro de un m\u00e9todo . Si declaramos variables o funciones dentro de un m\u00e9todo con var , let o const , estos elementos existir\u00e1n s\u00f3lo en el m\u00e9todo en cuesti\u00f3n. Adem\u00e1s, no ser\u00e1n accesibles desde fuera del m\u00e9todo: class Clase { constructor() { const name = \"Manz\"; console.log(\"Constructor: \" + name); } metodo() { console.log(\"M\u00e9todo: \" + name); } } const c = new Clase(); // 'Constructor: Manz' c.name; // undefined c.metodo(); // 'M\u00e9todo: ' Observa que la variable name solo se muestra cuando se hace referencia a ella dentro del constructor() que es donde se cre\u00f3 y donde existe. En segundo lugar, tenemos el \u00e1mbito de clase . Podemos crear propiedades precedidas por this. ( desde dentro del constructor ) y desde desde la parte superior de la clase, lo que significa que estas propiedades tendr\u00e1n alcance en toda la clase, tanto desde el constructor, como desde otros m\u00e9todos del mismo: class Clase { role = \"Teacher\"; // ES2020+ constructor() { this.name = \"Manz\"; console.log(\"Constructor: \" + this.name); } metodo() { console.log(\"M\u00e9todo: \" + this.name); } } const c = new Clase(); // 'Constructor: Manz' c.name; // 'Manz' c.metodo(); // 'M\u00e9todo: Manz' c.role; // 'Teacher' Ojo, estas propiedades tambi\u00e9n pueden ser modificadas desde fuera de la clase, simplemente asign\u00e1ndole otro valor. Si quieres evitarlo, a\u00f1ade el # antes del nombre de la propiedad al declararla.","title":"Los \u00e1mbitos en una clase"},{"location":"desarrollo/javascript/03-caracteristicas/#la-palabra-clave-this","text":"Como te habr\u00e1s fijado en ejemplos anteriores, hemos introducido la palabra clave this , que hace referencia al elemento padre que la contiene. As\u00ed pues, si escribimos this.nombre dentro de un m\u00e9todo, estaremos haciendo referencia a la propiedad nombre que existe dentro de ese objeto. De la misma forma, si escribimos this.hablar() estaremos ejecutando el m\u00e9todo hablar() de ese objeto. Veamos el siguiente ejemplo, volviendo al s\u00edmil de los animales: class Animal { constructor(n = \"pato\") { this.nombre = n; } hablar() { return \"Cuak\"; } quienSoy() { return \"Hola, soy \" + this.nombre + \". ~\" + this.hablar(); } } const pato = new Animal(\"Donald\"); pato.quienSoy(); // 'Hola, soy Donald. ~Cuak' Ten en cuenta que si usas this en contextos concretos, como por ejemplo fuera de una clase te devolver\u00e1 el objeto Window , que no es m\u00e1s que una referencia al objeto global de la pesta\u00f1a actual donde nos encontramos y tenemos cargada la p\u00e1gina web. Es importante tener mucho cuidado con la palabra clave this , ya que en muchas situaciones creeremos que devolver\u00e1 una referencia al elemento padre que la contiene, pero devolver\u00e1 el objeto Window porque se encuentra fuera de una clase o dentro de una funci\u00f3n con otro contexto. Aseg\u00farate siempre de que this tiene el valor que realmente crees que tiene.","title":"La palabra clave this"},{"location":"desarrollo/javascript/03-caracteristicas/#propiedades-computadas","text":"En algunos casos nos puede interesar utilizar lo que se llaman propiedades computadas . Las propiedades computadas son un tipo de propiedades a las que queremos realizarle ligeros cambios antes de guardarla o antes de obtenerla. Imagina un caso en el que, tenemos una clase con 3 propiedades A , B y C que guardan valores espec\u00edficos. Sin embargo, B y C guardan unos valores que se precalculan con unas f\u00f3rmulas pero que parten del valor de la propiedad A . En lugar de guardar las 3 propiedades por separadas y tener que mantenerlas actualizadas, podemos simplemente crear una propiedad A , y una propiedad computada B y C , que obtendr\u00e1n el valor de A y aplicar\u00e1n la formula en cuesti\u00f3n para devolver el valor resultante. Por ejemplo, en una clase Circulo podr\u00edamos tener una propiedad radio con un valor num\u00e9rico y una propiedad computada area que devuelve ese valor num\u00e9rico elevado por 2 y multiplicado por \u03c0 , ya que el \u00e1rea de un c\u00edrculo es \u03c0 \u00b7 radio\u00b2 .","title":"Propiedades computadas"},{"location":"desarrollo/javascript/03-caracteristicas/#que-es-un-getter","text":"Los getters son la forma de definir propiedades computadas de lectura en una clase. Veamos un ejemplo sobre el ejemplo anterior de la clase Animal : class Animal { constructor(n) { this._nombre = n; } get nombre() { return \"Sr. \" + this._nombre; } hablar() { return \"Cuak\"; } quienSoy() { return \"Hola, soy \" + this.nombre; } } // Creaci\u00f3n de objetos const pato = new Animal(\"Donald\"); pato.nombre; // 'Sr. Donald' pato.nombre = \"Pancracio\"; // 'Pancracio' pato.nombre; // 'Sr. Donald' Si observas los resultados de este \u00faltimo ejemplo, puedes comprobar que la diferencia al utilizar getters es que las propiedades con get no se pueden cambiar, son de s\u00f3lo lectura.","title":"\u00bfQu\u00e9 es un getter?"},{"location":"desarrollo/javascript/03-caracteristicas/#que-es-un-setter","text":"De la misma forma que tenemos un getter para obtener informaci\u00f3n mediante propiedades computadas , tambi\u00e9n podemos tener un setter , que es el mismo concepto pero en lugar de obtener informaci\u00f3n, para establecer informaci\u00f3n. Si inclu\u00edmos un getter y un setter a una propiedad en una clase, podremos modificarla directamente: class Animal { constructor(n) { this.nombre = n; } get nombre() { return \"Sr. \" + this._nombre; } set nombre(n) { this._nombre = n.trim(); } hablar() { return \"Cuak\"; } quienSoy() { return \"Hola, soy \" + this.nombre; } } // Creaci\u00f3n de objetos const pato = new Animal(\"Donald\"); pato.nombre; // 'Sr. Donald' pato.nombre = \" Lucas \"; // ' Lucas ' pato.nombre; // 'Sr. Lucas' Observa que de la misma forma que con los getters , podemos realizar tareas sobre los par\u00e1metros del setter antes de guardarlos en la propiedad interna. Esto nos servir\u00e1 para hacer modificaciones previas, como por ejemplo, en el ejemplo anterior, realizando un trim() para limpiar posibles espacios antes de guardar esa informaci\u00f3n. En el siguiente art\u00edculo seguiremos explorando las clases, centr\u00e1ndonos en esta ocasi\u00f3n en la denominada herencia de clases .","title":"\u00bfQu\u00e9 es un setter?"},{"location":"desarrollo/javascript/03-caracteristicas/#herencia-de-clases","text":"A medida que trabajamos con Clases y objetos en nuestro c\u00f3digo, una de las caracter\u00edsticas fundamentales que nos ayudan a reutilizar c\u00f3digo y simplificar nuestro trabajo es la herencia de Clases . Con esta caracter\u00edstica podemos establecer una jerarqu\u00eda de elementos y reutilizar caracter\u00edsticas seg\u00fan en que nivel se encuentra cada elemento. Tomemos el ejemplo del cap\u00edtulo anterior de la forma geom\u00e9trica para trabajar con \u00e9l: Observa que en primer lugar tenemos una clase superior llamada Forma que representa a una forma geom\u00e9trica. Dicha forma geom\u00e9trica tendr\u00e1 las caracter\u00edsticas comunes a todos los elementos ( color, nombre... ). Luego, vemos que tenemos varias clases: Cuadrado , Circulo y Triangulo . Dichas clases tendr\u00e1n las caracter\u00edsticas propias de cada una: el Cuadrado tendr\u00e1 una caracter\u00edstica que ser\u00e1 lado , el C\u00edrculo tendr\u00e1 radio y diametro , etc... Adem\u00e1s, las clases heredan las caracter\u00edsticas comunes de su padre, en este caso de la clase Forma . As\u00ed, finalmente los elementos c1 y c2 son objetos generados a partir de la clase Cuadrado , los elementos r1 y r2 son objetos generados a partir de la clase Circulo y as\u00ed sucesivamente.","title":"Herencia de Clases"},{"location":"desarrollo/javascript/03-caracteristicas/#que-es-extender-una-clase","text":"En Javascript, a partir de ECMAScript podemos \u00ab extender clases \u00bb de forma muy similar a como se hace en otros lenguajes de programaci\u00f3n como Java. Veamos el ejemplo del cap\u00edtulo anterior pasado a Clases que utilizan herencia: // Clase padre class Forma { constructor() { console.log(\"Soy una forma geom\u00e9trica.\"); } gritar() { console.log(\"YEP!!\"); } } // Clases hijas class Cuadrado extends Forma { constructor() { super(); console.log(\"Soy un cuadrado.\"); } } class Circulo extends Forma { constructor() { super(); console.log(\"Soy un c\u00edrculo.\"); } } class Triangulo extends Forma { constructor() { super(); console.log(\"Soy un tri\u00e1ngulo.\"); } } Observa que la clase padre Forma muestra un mensaje en su constructor y tiene un m\u00e9todo gritar() . Cada clase hija extiende a su clase padre, por lo que la clase Cuadrado ser\u00e1 una mezcla de la clase Forma m\u00e1s la clase Cuadrado . El m\u00e9todo especial super() llama al constructor de la clase padre, por lo que si creamos varios objetos, funcionar\u00e1 en cascada, mostrando primero el texto del constructor del padre, y luego el texto del constructor del hijo: const c1 = new Cuadrado(); // 'Soy una forma geom\u00e9trica.' // 'Soy un cuadrado.' c1.gritar(); // 'YEP!!' const t1 = new Triangulo(); // 'Soy una forma geom\u00e9trica.' // 'Soy un tri\u00e1ngulo.' t1.gritar(); // 'YEP!!' Adem\u00e1s, todas las clases hijas heredar\u00e1n el m\u00e9todo gritar() , ya que pertenece a la clase padre Forma y todas extienden de ella. Recuerda que es obligatorio llamar a super() en el constructor de la clase hija antes de realizar ninguna tarea. No te olvides de escribirlo.","title":"\u00bfQu\u00e9 es extender una clase?"},{"location":"desarrollo/javascript/03-caracteristicas/#la-palabra-clave-super","text":"Como hemos visto, la palabra clave super() hace referencia a la superclase, es decir, a la clase padre. Se debe indicar de forma obligatoria en el constructor de las clases hijas que extienden de un padre, no obstante, tambi\u00e9n podemos utilizarlas en m\u00e9todos para llamar de forma opcional u obligatoria a m\u00e9todos del padre para que hagan tareas complementarias o parciales: class Padre { tarea() { console.log(\"Tarea del padre...\"); } } class Hijo extends Padre { tarea() { super.tarea(); console.log(\"Tarea del hijo...\"); } } Si nos fijamos en el ejemplo anterior, en el caso de que la clase Hijo no tuviera m\u00e9todo tarea() heredar\u00eda dicho m\u00e9todo de su clase padre, ejecut\u00e1ndolo. En el caso del ejemplo anterior, tiene un m\u00e9todo tarea() en la clase hijo que sobreescribe el m\u00e9todo tarea() del padre, realizando \u00fanicamente el c\u00f3digo indicado en esa clase hija. Sin embargo, la diferencia radica en lo siguiente: Si se indica super.tarea() ( donde tarea es el nombre del m\u00e9todo de la clase padre ), esto llamar\u00e1 y ejecutar\u00e1 el m\u00e9todo de la clase Padre, y al terminar, continua realizando el c\u00f3digo del m\u00e9todo de la clase hija. Es el caso del ejemplo anterior. Si no se indica super.tarea() , el m\u00e9todo tarea() de la clase hijo sobreescribe al de la clase Padre, ocult\u00e1ndolo y ejecutando s\u00f3lo el c\u00f3digo de la clase hija. Es nuestra decisi\u00f3n que camino tomar, en algunos casos nos interesar\u00e1 una de estas posibilidades y en otras ocasiones nos interesar\u00e1 otra.","title":"La palabra clave super"},{"location":"desarrollo/javascript/03-caracteristicas/#eslint","text":"Los linters son herramientas de programaci\u00f3n que examinan el c\u00f3digo del programador y lo ayudan a corregir errores de sintaxis, c\u00f3digo incorrecto, malas pr\u00e1cticas o costumbres o incluso ayudarlo a seguir gu\u00edas de estilo, favoreciendo escribir c\u00f3digo de calidad y acostumbrando al usuario a solventar ciertos problemas comunes en fases tempranas ( y no tan tempranas ) como programador. Hay que tener claro que un linter no s\u00f3lo busca errores que hacen que nuestro c\u00f3digo no funcione, sino que tambi\u00e9n nos ayuda a corregir malos h\u00e1bitos. Un programa puede ser perfectamente v\u00e1lido y funcionar correctamente, y a\u00fan as\u00ed, ESLint encontrar errores en \u00e9l.","title":"ESLint"},{"location":"desarrollo/javascript/03-caracteristicas/#que-es-eslint","text":"ESLint es un linter que examina c\u00f3digo Javascript, siguiendo unas ciertas normas y criterios personalizables por el programador, para que el c\u00f3digo Javascript siga ciertos est\u00e1ndares y estilos, favoreciendo la escritura de c\u00f3digo de calidad. Existen otras herramientas similares como JSHint o JSLint , sin embargo, ESLint ofrece muchas caracter\u00edsticas que lo hacen destacar sobre los anteriores. ESLint es totalmente configurable y puedes indicarle que criterios ( llamados reglas ) quieres que utilice y cuales prefieres que ignore, adapt\u00e1ndose a las necesidades de cualquier empresa, programador o equipo de trabajo.","title":"\u00bfQu\u00e9 es ESLint?"},{"location":"desarrollo/javascript/03-caracteristicas/#instalacion-de-eslint","text":"Aunque la herramienta ESLint requiere como m\u00ednimo Node 6.14+ y NPM 3+ para funcionar, es recomendable tener la \u00faltima versi\u00f3n estable de Node / NPM instalada desde la web oficial , ya que otras versiones inclu\u00eddas en los repositorios por defecto de Debian o Ubuntu no est\u00e1n completamente actualizadas y pueden carecer de funcionalidades como npx o similares. Aqu\u00ed tienes una gu\u00eda para instalar Node/NPM . Para instalar ESLint en nuestro proyecto haremos lo siguiente: $ npm install --save-dev eslint Este comando instalar\u00e1 ESLint en nuestro proyecto ( localmente ) y a\u00f1adir\u00e1 la referencia del paquete al fichero package.json ( que debe existir previamente ). Para ejecutar ESLint en nuestro proyecto escribiremos npx eslint . Para m\u00e1s informaci\u00f3n, lee esta secci\u00f3n: \u00bfQu\u00e9 es npx? .","title":"Instalaci\u00f3n de ESLint"},{"location":"desarrollo/javascript/03-caracteristicas/#configuracion-inicial-de-eslint","text":"Una vez instalado, en la carpeta ra\u00edz de nuestro proyecto escribimos lo siguiente: $ npx eslint --init Esto arrancar\u00e1 un asistente para configurar ESLint en nuestro proyecto, pregunt\u00e1ndonos algunas cuestiones sobre el proyecto a revisar. Hagamos un repaso r\u00e1pido:","title":"Configuraci\u00f3n inicial de ESLint"},{"location":"desarrollo/javascript/03-caracteristicas/#how-would-you-like-to-use-eslint","text":"Esta opci\u00f3n nos permite seleccionar el modo en el que funcionar\u00e1 el linter. To check syntax only nos revisa s\u00f3lo la sintaxis de nuestro c\u00f3digo, To check syntax and find problems adem\u00e1s nos ayuda a encontrar potenciales problemas y To check syntax, find problems, and enforce code style adem\u00e1s de lo anterior, nos ayuda a reforzar nuestro estilo de c\u00f3digo. Se recomienda utilizar la \u00faltima.","title":"How would you like to use ESLint?"},{"location":"desarrollo/javascript/03-caracteristicas/#what-type-of-modules-does-your-project-use","text":"Esta opci\u00f3n nos permite seleccionar la forma en la que importamos c\u00f3digo Javascript. Si utilizamos import , seleccionamos JavaScript modules (import/export) . Por otro lado, si estamos utilizando el sistema de node con require , seleccionaremos CommonJS (require/exports) .","title":"What type of modules does your project use?"},{"location":"desarrollo/javascript/03-caracteristicas/#which-framework-does-your-project-use","text":"Esta opci\u00f3n nos da la posibilidad de indicar si usamos un framework espec\u00edfico como React o Vue.js y as\u00ed poder adaptarse a la sintaxis correspondiente de estos frameworks. Si no fuera el caso, seleccionamos None of these .","title":"Which framework does your project use?"},{"location":"desarrollo/javascript/03-caracteristicas/#where-does-your-code-run","text":"Con esta opci\u00f3n enfocamos el linter para revisar c\u00f3digo orientado a navegadores, marcando Browser , o c\u00f3digo orientado a otros sistemas como Node . Ten en cuenta que puedes marcar ambas si as\u00ed lo necesitas.","title":"Where does your code run?"},{"location":"desarrollo/javascript/03-caracteristicas/#how-would-you-like-to-define-a-style-for-your-project","text":"Esta es una de las opciones m\u00e1s importantes, ya que con ella nutrimos al linter con la informaci\u00f3n necesaria para saber como corregir nuestro c\u00f3digo. Las opciones disponibles son Use a popular style guide , Answer questions about your style o Inspect your JavaScript file(s) , y las explicaremos en los siguientes apartados.","title":"How would you like to define a style for your project?"},{"location":"desarrollo/javascript/03-caracteristicas/#what-format-do-you-want-your-config-file-to-be-in","text":"Esta opci\u00f3n nos pregunta en que formato queremos guardar la configuraci\u00f3n de ESLint. Tenemos a nuestra disposici\u00f3n un formato Javascript , otro YAML y otro JSON . Personalmente, suelo optar por el \u00faltimo, ya que suele ser el m\u00e1s extendido.","title":"What format do you want your config file to be in?"},{"location":"desarrollo/javascript/03-caracteristicas/#would-you-like-to-install-them-now-with-npm","text":"Por \u00faltimo, y dependiendo de las opciones escogidas, nos puede aparecer un mensaje como este, que al responderlo de forma afirmativa, instalar\u00e1 autom\u00e1ticamente los paquetes de NPM necesarios.","title":"Would you like to install them now with npm?"},{"location":"desarrollo/javascript/03-caracteristicas/#use-a-popular-style-guide","text":"En este modo, ESLint utilizar\u00e1 una gu\u00eda de estilo predefinida, creada por otra empresa o grupo. Por defecto tenemos las 3 siguientes para elegir: Promotores GitHub Nombre del paquete (NPM) Observaciones Airbnb @airbnb/javascript eslint-config-airbnb StandardJS @standard/standard eslint-config-standard Google @google/eslint-config-google eslint-config-google Cada una de ellas, tiene una serie de reglas preconfiguradas que luego, puedes modificar o cambiar si lo deseas. Tambi\u00e9n puedes crear/modificar tu propio conjunto de reglas, aunque eso te llevar\u00e1 un poco m\u00e1s de tiempo. Adem\u00e1s de estos 3 paquetes del asistente, existen muchos otros como eslint-config-react-app , eslint-config-prettier , eslint-config-eslint , eslint-config-jest-enzyme y muchos otros que puedes buscar en NPM con un simple npm search eslint-config e instalar con un npm install seguido del nombre del paquete. Ten en cuenta que aunque el asistente de ESLint instala y configura los paquetes necesarios autom\u00e1ticamente, si queremos hacerlo con una gu\u00eda concreta no basta con hacer el npm install , sino que adem\u00e1s hay que modificar el archivo de configuraci\u00f3n, como se ver\u00e1 m\u00e1s adelante.","title":"Use a popular style guide"},{"location":"desarrollo/javascript/03-caracteristicas/#answer-questions-about-style","text":"En el caso de que no queramos utilizar un paquete de reglas preconfiguradas, ESLint permite crear uno desde cero mediante una serie de preguntas que nos realizar\u00e1 y determinar\u00e1n de forma general el estilo que utilizamos:","title":"Answer questions about style"},{"location":"desarrollo/javascript/03-caracteristicas/#what-style-of-indentation-do-you-use","text":"Esta opci\u00f3n nos pregunta si queremos que el c\u00f3digo est\u00e9 indentado con tabuladores o con espacios. En el caso de los espacios, puedes indicar incluso cuantos espacios requieres. Equivale a la regla rules.indent .","title":"What style of indentation do you use?"},{"location":"desarrollo/javascript/03-caracteristicas/#what-quotes-do-you-use-for-strings","text":"Debemos indicar en esta opci\u00f3n si utilizamos comillas dobles o comillas simples para los . Equivale a la regla rules.quotes .","title":"What quotes do you use for strings?"},{"location":"desarrollo/javascript/03-caracteristicas/#what-line-endings-do-you-use","text":"Esta opci\u00f3n nos permite indicar si escribimos c\u00f3digo en Windows o en Unix (Linux). Equivale a la regla rules.linebreak-style .","title":"What line endings do you use?"},{"location":"desarrollo/javascript/03-caracteristicas/#do-you-require-semicolons","text":"Esta opci\u00f3n nos pregunta si queremos utilizar punto y coma al final de cada sentencia. Recuerda que en Javascript es opcional el uso de punto y coma. Equivale a la regla rules.semi . Obviamente, estas no son sino las preguntas principales y m\u00e1s importantes para tener un fichero de configuraci\u00f3n de reglas m\u00ednimo para comenzar. Puedes encontrar todas las reglas que tiene ESLint en esta p\u00e1gina: reglas de ESLint .","title":"Do you require semicolons?"},{"location":"desarrollo/javascript/03-caracteristicas/#inspect-your-javascript-files","text":"Por \u00faltimo, esta tercera opci\u00f3n se basar\u00e1 en una inspecci\u00f3n de tus archivos Javascript para determinar cu\u00e1l ser\u00eda la gu\u00eda de estilo que deber\u00edas utilizar, siguiendo las normas que se utilizan en los archivos Javascript actuales.","title":"Inspect your JavaScript file(s)"},{"location":"desarrollo/javascript/03-caracteristicas/#formato-de-configuracion","text":"En cualquiera de las 3 opciones del asistente, se nos preguntar\u00e1 What format do you want your config file to be in? . Esta opci\u00f3n nos permite seleccionar que formato de configuraci\u00f3n queremos utilizar en nuestro proyecto para utilizar con ESLint . Ten en cuenta que el asistente anterior lo que hace es generar un fichero de configuraci\u00f3n con reglas de ESLint que luego podr\u00e1s modificar, a\u00f1adir y/o personalizar. En principio, puedes utilizar el formato que m\u00e1s te guste. Si existen varios archivos de configuraci\u00f3n, tendr\u00e1 preferencia en el orden de la siguiente lista. Las opciones disponibles son: Javascript : Generar\u00e1 un archivo de configuraci\u00f3n .eslintrc.js YAML : Generar\u00e1 un archivo de configuraci\u00f3n .eslintrc.yaml o .eslintrc.yml JSON : Generar\u00e1 un archivo de configuraci\u00f3n .eslintrc.json . Aunque en el formato JSON no se admiten comentarios, ESLint s\u00ed soporta comentarios de tipo /* */ . Tambi\u00e9n es posible utilizar un objeto eslintConfig dentro del package.json de nuestro proyecto. Antiguamente se utilizaba un fichero .eslintrc ( YAML o JSON ), pero est\u00e1 marcado como obsoleto, por lo que ser\u00eda conveniente evitar utilizar ese nombre para el fichero de configuraci\u00f3n. Por \u00faltimo, comentar que tambi\u00e9n es posible crear un fichero .eslintignore donde podemos indicar archivos o globs ( patrones de archivos, comodines, etc... ) que se ignorar\u00e1n a la hora de realizar una comprobaci\u00f3n de ESLint . Se pueden a\u00f1adir comentarios, con l\u00ednea que comiencen por # .","title":"Formato de configuraci\u00f3n"},{"location":"desarrollo/javascript/03-caracteristicas/#configuracion-de-ejemplo","text":"A continuaci\u00f3n, tenemos un fichero de configuraci\u00f3n de ejemplo de ESLint , con las opciones recomendadas y ciertas reglas personalizadas y comentadas: { /* Entorno de desarrollo: https://eslint.org/docs/user-guide/configuring#specifying-environments */ \"env\": { \"browser\": true, /* El objetivo del c\u00f3digo es ejecutar en navegadores */ \"es6\": true /* El c\u00f3digo estar\u00e1 escrito en ES6 */ }, /* Activa las reglas marcadas con \u2713 en la documentaci\u00f3n oficial de ESLint: https://eslint.org/docs/rules/ y el paquete eslint-config-standard */ \"extends\": [\"eslint:recommended\", \"standard\"], /* Opciones de parseo: https://eslint.org/docs/user-guide/configuring#specifying-parser-options */ \"parserOptions\": { \"ecmaVersion\": 2018, /* Establece la versi\u00f3n de ECMAScript que se usar\u00e1 */ \"sourceType\": \"module\" /* Indica si se usan m\u00f3dulos ES6 o solo scripts */ }, /* Reglas de ESLint personalizadas (sobreescriben a anteriores): https://eslint.org/docs/rules/ */ \"rules\": { /* Indentaci\u00f3n a 2 espacios: https://eslint.org/docs/rules/indent */ \"indent\": [ \"error\", 2 ], /* Finales de l\u00ednea de UNIX: https://eslint.org/docs/rules/linebreak-style */ \"linebreak-style\": [ \"error\", \"unix\" ], /* Uso de comillas simples para strings: https://eslint.org/docs/rules/quotes */ \"quotes\": [ \"error\", \"single\" ], /* Uso de punto y coma obligatorio: https://eslint.org/docs/rules/semi */ \"semi\": [ \"error\", \"always\" ] } } Podemos guardar este fichero con nombre .eslintrc.json en la carpeta ra\u00edz de nuestro proyecto y escribir en una terminal el siguiente comando para que nos revise los errores de nuestro c\u00f3digo ( asumiendo que queremos revisar un archivo llamado index.js ): $ npx eslint src/js/index.js Tambi\u00e9n se pueden usar globs como *.js o similares. Observa que en la opci\u00f3n extends del archivo de configuraci\u00f3n se est\u00e1n utilizando dos fuentes de datos. Por un lado, las recomendaciones b\u00e1sicas oficiales de ESLint, y por otro lado, la gu\u00eda de estilo eslint-config-standard . En el caso de querer seguir a\u00f1adiendo m\u00e1s gu\u00edas s\u00f3lo necesitar\u00edamos a\u00f1adir el nombre del paquete, omitiendo el fragmento eslint-config- .","title":"Configuraci\u00f3n de ejemplo"},{"location":"desarrollo/javascript/03-caracteristicas/#plugins-de-eslint","text":"Aunque se pueden mostrar los errores por terminal, algo m\u00e1s c\u00f3modo y com\u00fan es configurarlo en nuestro editor de c\u00f3digo para que nos muestre las recomendaciones y errores a medida que vamos escribiendo nuestro programa. Tambi\u00e9n puede ser interesante tenerlo configurado con alg\u00fan automatizador como WebPack o Gulp y que nos aparezca cuando estemos trabajando con \u00e9l. A continuaci\u00f3n tienes una lista de editores o automatizadores con algunas de las extensiones o plugins que puedes instalar para usar ESLint: Editor o sistema Plugin o extensi\u00f3n Visual Studio Code VSCode ESLint Adobe Brackets Backets ESLint IntelliJ IDEA ESLint Plugin ATOM linter-eslint Vim ALE o Syntastic Sublime Text 3 SublimeLinter-eslint Gulp gulp-eslint Webpack eslint-loader RollUp rollup-plugin-eslint","title":"Plugins de ESLint"},{"location":"desarrollo/javascript/03-caracteristicas/#modulos-ecmascript-esm","text":"Uno de los principales problemas que ha ido arrastrando Javascript desde sus inicios es la dificultad de organizar de una forma adecuada una aplicaci\u00f3n grande, con muchas l\u00edneas de c\u00f3digo. En muchos lenguajes, cuando un programa crece, se comienza a estructurar en funciones y, posteriormente, en clases . De esta forma organizamos de forma m\u00e1s l\u00f3gica el c\u00f3digo de nuestro programa. Pero tener todo el c\u00f3digo en un s\u00f3lo fichero Javascript tambi\u00e9n se vuelve confuso y complejo de organizar. En la mayor\u00eda de los lenguajes de programaci\u00f3n, las clases se dividen en ficheros diferentes, de modo que cada clase est\u00e1 localizada en un fichero separado . Esto en el \u00ablado del cliente\u00bb ( como es el caso de Javascript en el navegador ) presenta varias problem\u00e1ticas. En un principio, y de forma nativa, la forma m\u00e1s extendida era incluir varias etiquetas <script> desde nuestra p\u00e1gina HTML. De esta forma, pod\u00edamos tener varios ficheros Javascript separados, cada uno para una finalidad concreta. Sin embargo, este sistema es poco modular, ofrec\u00eda un control pobre y resultaba lento, ya que sobrecargaba al cliente con m\u00faltiples peticiones extra. Con el tiempo, se desarrollaron otros sistemas como CommonJS ( utilizado en NodeJS ) o RequireJS ( AMD ), cada uno con sus particularidades, virtudes y desventajas.","title":"M\u00f3dulos ECMAScript (ESM)"},{"location":"desarrollo/javascript/03-caracteristicas/#que-son-los-modulos-es","text":"En ECMAScript se introduce una caracter\u00edstica nativa denominada M\u00f3dulos ES o ESM , que permite la importaci\u00f3n y exportaci\u00f3n de c\u00f3digo entre diferentes ficheros Javascript, eliminando las desventajas que ten\u00edamos hasta ahora y permitiendo trabajar de forma m\u00e1s flexible desde el c\u00f3digo Javascript. Para trabajar con m\u00f3dulos tenemos a nuestra disposici\u00f3n las siguientes palabras clave: Declaraci\u00f3n Descripci\u00f3n export Exporta uno o varios elementos (variables, funciones, clases...) del fichero actual import Importa uno o varios elementos (variables, funciones, clases...) desde otro fichero .js Mediante la palabra clave export crearemos un objeto ( m\u00f3dulo de exportaci\u00f3n ) que contendr\u00e1 una o varias propiedades. En estas propiedades podremos guardar variables, funciones o clases ( a partir de ahora, elementos ). Si dicho m\u00f3dulo ya existe, podremos ir a\u00f1adiendo m\u00e1s propiedades. Por otro lado, con la palabra clave import podremos leer dichos m\u00f3dulos de otros ficheros y utilizar sus propiedades en nuestro c\u00f3digo.","title":"\u00bfQu\u00e9 son los m\u00f3dulos ES?"},{"location":"desarrollo/javascript/03-caracteristicas/#exportacion-de-modulos","text":"Por defecto, un fichero Javascript no tiene m\u00f3dulo de exportaci\u00f3n si no se usa un export al menos una vez. Existen varias formas de exportar c\u00f3digo mediante la palabra clave export : Forma Descripci\u00f3n export { name }; A\u00f1ade el elemento name al m\u00f3dulo de exportaci\u00f3n. export { n1, n2, n3... }; A\u00f1ade los elementos indicados ( n1 , n2 , n3 ...) al m\u00f3dulo de exportaci\u00f3n. export * from './file.js'; A\u00f1ade todos los elementos del m\u00f3dulo file.js al m\u00f3dulo de exportaci\u00f3n. export declaration; Declara una variable, funci\u00f3n o clase y la a\u00f1ade al m\u00f3dulo de exportaci\u00f3n. export default declaration; Declara una funci\u00f3n o clase y la a\u00f1ade al m\u00f3dulo de exportaci\u00f3n. Es posible renombrar los elementos sobre la marcha utilizando as seguido del nuevo nombre. Adem\u00e1s, si se indica default como nuevo nombre, ese elemento ser\u00e1 la exportaci\u00f3n por defecto . S\u00f3lo puede haber una exportaci\u00f3n por defecto por fichero. Veamos algunos ejemplos: let number = 4; const saludar = () => \"\u00a1Hola!\"; const goodbye = () => \"\u00a1Adi\u00f3s!\"; class Clase {} export { number }; // Se crea un m\u00f3dulo y se a\u00f1ade number export { saludar, goodbye as despedir }; // Se a\u00f1ade saludar y despedir al m\u00f3dulo export { Clase as default }; // Se a\u00f1ade Clase al m\u00f3dulo (default) export { saludar as otroNombre }; // Se a\u00f1ade otroNombre al m\u00f3dulo Tambi\u00e9n es posible exportar variables, funciones o clases simplemente incluyendo la palabra export a la izquierda de la l\u00ednea de su declaraci\u00f3n: export const f1 = () => 42; // Se crea un m\u00f3dulo y se a\u00f1ade f1 // Se a\u00f1ade f2 al m\u00f3dulo (default) export default function f2() { return \"Manz\"; } Ten en cuenta que en el caso de utilizar una exportaci\u00f3n por defecto en una declaraci\u00f3n, no es posible utilizar var , let o const . Tampoco es posible usar export dentro de funciones, bucles o contextos espec\u00edficos.","title":"Exportaci\u00f3n de m\u00f3dulos"},{"location":"desarrollo/javascript/03-caracteristicas/#importacion-de-modulos","text":"Si por un lado tenemos export , la palabra clave import es su opuesta. Con ella podemos cargar un m\u00f3dulo de exportaci\u00f3n de otro fichero Javascript, con todos los elementos exportados que contiene. Existen varias formas de importar c\u00f3digo utilizando import : Forma Descripci\u00f3n import nombre from './file.js'; Importa s\u00f3lo el elemento por defecto de file.js en nombre . import { nombre } from './file.js'; Importa s\u00f3lo el elemento nombre de file.js . import { n1, n2.. } from './file.js'; Importa los elementos indicados desde file.js . import * as obj from './file.js'; Importa todos los elementos de file.js en el objeto obj . import './file.js'; No importa elementos, pero ejecuta el c\u00f3digo de file.js . Recuerda, que al igual que con la exportaci\u00f3n , tambi\u00e9n puedes renombrar elementos utilizando as seguido del nuevo nombre. En el primer caso, importamos el elemento por defecto desde el m\u00f3dulo file.js y lo guardamos en la variable nombre . En el segundo y tercer caso, importamos los elementos indicados en el interior de los corchetes, desde el m\u00f3dulo file.js . En el cuarto caso, importamos todos los elementos del m\u00f3dulo externo file.js en un objeto de nombre obj ( es obligatorio indicar el nombre ) y en el quinto caso, no importamos elementos, pero leemos el c\u00f3digo del m\u00f3dulo y lo ejecutamos.","title":"Importaci\u00f3n de m\u00f3dulos"},{"location":"desarrollo/javascript/03-caracteristicas/#convenciones-de-modulos-es","text":"Si queremos utilizar import y export desde el navegador directamente, deberemos a\u00f1adir los archivos con m\u00f3dulos con la etiqueta <script> utilizando el atributo type=\"module\" . Estas etiquetas de m\u00f3dulos se cargan en diferido, o lo que es lo mismo, como si fueran un <script defer> : Por norma general, a los archivos Javascript con m\u00f3dulos se les pone la extensi\u00f3n .js , aunque tambi\u00e9n se pueden encontrar con otra extensi\u00f3n como .es2015 o .mjs . Se aconseja utilizar las rutas UNIX en los export e import , ya que son las que tienen mejor soporte, tanto en navegadores como en NodeJS . Tambi\u00e9n se pueden indicar rutas absolutas para cargar directamente desde el navegador: // Incorrecto import { elemento } from \"module.mjs\"; import { elemento } from \"folder/module.mjs\"; // Correcto import { elemento } from \"./module.mjs\"; // misma carpeta del .js import { elemento } from \"/module.mjs\"; // carpeta ra\u00edz import { elemento } from \"../module.mjs\"; // carpeta anterior al .js import { ceil } from \" https://unpkg.com/lodash-es@4.17.11/lodash.js \"; Una pr\u00e1ctica habitual es realizar las exportaciones al final de los ficheros Javascript. Aunque no es obligatorio, muchos desarrolladores esperan que los export aparezcan al final del c\u00f3digo, ya que as\u00ed sol\u00eda hacerse tambi\u00e9n en NodeJS con los module.exports . Fuente: Lenguaje Javascript por Manz","title":"Convenciones de m\u00f3dulos ES"},{"location":"desarrollo/javascript/03-caracteristicas/#_1","text":"","title":""},{"location":"desarrollo/javascript/04-DOM/","text":"DOM \u00b6 \u00bfQu\u00e9 es el DOM? \u00b6 Cuando comenzamos en el mundo del desarrollo web , normalmente comenzamos por aprender a escribir etiquetado o marcado HTML y adem\u00e1s, a\u00f1adir estilos CSS para darle color, forma y algo de interacci\u00f3n. Sin embargo, a medida que avanzamos, nos damos cuenta que en cierta forma podemos estar bastante limitados. Si \u00fanicamente utilizamos HTML/CSS, s\u00f3lo podremos crear p\u00e1ginas \u00abest\u00e1ticas\u00bb ( sin demasiada personalizaci\u00f3n por parte del usuario ), pero si a\u00f1adimos Javascript, podremos crear p\u00e1ginas \u00abdin\u00e1micas\u00bb . Cuando hablamos de p\u00e1ginas din\u00e1micas, nos referimos a que podemos dotar de la potencia y flexibilidad que nos da un lenguaje de programaci\u00f3n para crear documentos y p\u00e1ginas mucho m\u00e1s ricas, que brinden una experiencia m\u00e1s completa y con el que se puedan automatizar un gran abanico de tareas y acciones. \u00bfQu\u00e9 es el DOM? \u00b6 Las siglas DOM significan Document Object Model , o lo que es lo mismo, la estructura del documento HTML. Una p\u00e1gina HTML est\u00e1 formada por m\u00faltiples etiquetas HTML, anidadas una dentro de otra, formando un \u00e1rbol de etiquetas relacionadas entre s\u00ed, que se denomina \u00e1rbol DOM ( o simplemente DOM ). En Javascript, cuando nos referimos al DOM nos referimos a esta estructura, que podemos modificar de forma din\u00e1mica desde Javascript, a\u00f1adiendo nuevas etiquetas, modificando o eliminando otras, cambiando sus atributos HTML, a\u00f1adiendo clases, cambiando el contenido de texto, etc... Al estar \"amparado\" por un lenguaje de programaci\u00f3n , todas estas tareas se pueden automatizar, incluso indicando que se realicen cuando el usuario haga acciones determinadas, como por ejemplo: pulsar un bot\u00f3n, mover el rat\u00f3n, hacer click en una parte del documento, escribir un texto, etc... El objeto document \u00b6 En Javascript, la forma de acceder al DOM es a trav\u00e9s de un objeto llamado document , que representa el \u00e1rbol DOM de la p\u00e1gina o pesta\u00f1a del navegador donde nos encontramos. En su interior pueden existir varios tipos de elementos, pero principalmente ser\u00e1n o : no es m\u00e1s que la representaci\u00f3n gen\u00e9rica de una etiqueta: HTMLElement . es una unidad m\u00e1s b\u00e1sica, la cu\u00e1l puede ser o un nodo de texto . Todos los elementos HTML , dependiendo del elemento que sean, tendr\u00e1n un tipo de dato espec\u00edfico. Algunos ejemplos: Tipo de dato Tipo espec\u00edfico Etiqueta Descripci\u00f3n HTMLElement HTMLDivElement <div> Capa divisoria invisible (en bloque). HTMLElement HTMLSpanElement <span> Capa divisoria invisible (en l\u00ednea). HTMLElement HTMLImageElement <img> Imagen. HTMLElement HTMLAudioElement <audio> Contenedor de audio. Obviamente, existen muchos tipos de datos espec\u00edficos, uno por cada etiqueta HTML. API nativa de Javascript \u00b6 En los siguientes cap\u00edtulos veremos que Javascript nos proporciona un conjunto de herramientas para trabajar de forma nativa con el DOM de la p\u00e1gina, entre las que se encuentran: Cap\u00edtulo del DOM Descripci\u00f3n \ud83d\udd0d Buscar etiquetas Familia de m\u00e9todos entre los que se encuentran funciones como .getElementById() , .querySelector() o .querySelectorAll() , entre otras. \ud83d\udd2e Crear etiquetas Una serie de m\u00e9todos y consejos para crear elementos en la p\u00e1gina y trabajar con ellos de forma din\u00e1mica. \ud83d\udd0c Insertar etiquetas Las mejores formas de a\u00f1adir elementos al DOM, ya sea utilizando propiedades como .innerHTML o m\u00e9todo como .appendChild() , .insertAdjacentHTML() , entre otros. \ud83c\udfad Gesti\u00f3n de clases CSS Consejos para la utilizaci\u00f3n de la API .classList de Javascript que nos permite manipular clases CSS desde JS, de modo que podamos a\u00f1adir, modificar, eliminar clases de CSS de un elemento de una forma pr\u00e1ctica y c\u00f3moda. \ud83d\udea2 Navegar entre elementos Utilizaci\u00f3n de una serie de m\u00e9todos y propiedades que nos permiten \u00abnavegar\u00bb a trav\u00e9s de la jerarqu\u00eda del DOM, ci\u00f1\u00e9ndonos a la estructura del documento y la posici\u00f3n de los elementos en la misma. Librer\u00edas de terceros \u00b6 En muchos casos, el rendimiento no es lo suficientemente importante como para justificar trabajar a bajo nivel, por lo que se prefiere utilizar algunas librer\u00edas de terceros que nos facilitan el trabajo a costa de reducir minimamente el rendimiento, pero permiti\u00e9ndonos programar m\u00e1s r\u00e1pidamente. Si es tu caso, puedes utilizar alguna de las siguientes librer\u00edas para abstraerte del DOM: Librer\u00eda Descripci\u00f3n GitHub RE:DOM Librer\u00eda para crear interfaces de usuario, basada en DOM. @redom/redom Voyeur.js Peque\u00f1a librer\u00eda para manipular el DOM @adriancooney/voyeur.js HtmlJs Motor de renderizaci\u00f3n de HTML y data binding (MVVM) @nhanfu/htmljs DOMtastic Librar\u00eda moderna y modular para DOM/Events @webpro/DOMtastic UmbrellaJS Librer\u00eda para manipular el DOM y eventos @franciscop/umbrella SuperDOM Manipulando DOM como si estuvieras en 2018 @szaranger/superdom Muchas veces, tambi\u00e9n se eligen frameworks de Javascript para trabajar, que en cierta forma tambi\u00e9n te abstraen de tener que gestionar el DOM a bajo nivel, y lo cambian por realizar otras tareas o estrategias relacionadas con el framework escogido. Seleccionar elementos del DOM \u00b6 Si nos encontramos en nuestro c\u00f3digo Javascript y queremos hacer modificaciones en un elemento de la p\u00e1gina HTML, lo primero que debemos hacer es buscar dicho elemento. Para ello, se suele intentar identificar el elemento a trav\u00e9s de alguno de sus atributos m\u00e1s utilizados, generalmente el id o la clase . M\u00e9todos tradicionales \u00b6 Existen varios m\u00e9todos, los m\u00e1s cl\u00e1sicos y tradicionales para realizar b\u00fasquedas de elementos en el documento. Observa que si lo que buscas es un elemento espec\u00edfico, lo mejor ser\u00eda utilizar getElementById() , en caso contrario, si utilizamos uno de los 3 siguientes m\u00e9todos, nos devolver\u00e1 un donde tendremos que elegir el elemento en cuesti\u00f3n posteriormente: M\u00e9todos de b\u00fasqueda Descripci\u00f3n .getElementById(id) Busca el elemento HTML con el id id . Si no, devuelve . .getElementsByClassName(class) Busca elementos con la clase class . Si no, devuelve [] . .getElementsByName(name) Busca elementos con atributo name name . Si no, devuelve [] . .getElementsByTagName(tag) Busca elementos tag . Si no encuentra ninguno, devuelve [] . Estos son los 4 m\u00e9todos tradicionales de Javascript para manipular el DOM. Se denominan tradicionales porque son los que existen en Javascript desde versiones m\u00e1s antiguas. Dichos m\u00e9todos te permiten buscar elementos en la p\u00e1gina dependiendo de los atributos id , class , name o de la propia etiqueta, respectivamente. getElementById() \u00b6 El primer m\u00e9todo, .getElementById(id) busca un elemento HTML con el id especificado en id por par\u00e1metro. En principio, un documento HTML bien constru\u00eddo no deber\u00eda tener m\u00e1s de un elemento con el mismo id , por lo tanto, este m\u00e9todo devolver\u00e1 siempre un solo elemento: const page = document.getElementById(\"page\"); // <div id=\"page\"></div> Recuerda que en el caso de no encontrar el elemento indicado, devolver\u00e1 . getElementsByClassName() \u00b6 Por otro lado, el m\u00e9todo .getElementsByClassName(class) permite buscar los elementos con la clase especificada en class . Es importante darse cuenta del matiz de que el metodo tiene getElements en plural, y esto es porque al devolver clases ( al contrario que los id ) se pueden repetir, y por lo tanto, devolvernos varios elementos, no s\u00f3lo uno. const items = document.getElementsByClassName(\"item\"); // [div, div, div] console.log(items[0]); // Primer item encontrado: <div class=\"item\"></div> console.log(items.length); // 3 Estos m\u00e9todos devuelven siempre un con todos los elementos encontrados que encajen con el criterio. En el caso de no encontrar ninguno, devolver\u00e1n un vac\u00edo: [] . Exactamente igual funcionan los m\u00e9todos getElementsByName(name) y getElementsByTagName(tag) , salvo que se encargan de buscar elementos HTML por su atributo name o por su propia etiqueta de elemento HTML, respectivamente: // Obtiene todos los elementos con atributo name=\"nickname\" const nicknames = document.getElementsByName(\"nickname\"); // Obtiene todos los elementos <div> de la p\u00e1gina const divs = document.getElementsByTagName(\"div\"); OJO : Aunque en esta documentaci\u00f3n se hace referencia a , realmente los m\u00e9todos de b\u00fasqueda generalmente devuelven un tipo de dato HTMLCollection o NodeList , que aunque act\u00faan de forma muy similar a un , no son arrays, y por lo tanto pueden carecer de algunos m\u00e9todos, como por ejemplo .forEach() . Recuerda que el primer m\u00e9todo tiene getElement en singular y el resto getElements en plural. Ten en cuenta ese detalle para no olvidarte que uno devuelve un s\u00f3lo elemento y el resto una lista de ellos. M\u00e9todos moderno \u00b6 Aunque podemos utilizar los m\u00e9todos tradicionales que acabamos de ver, actualmente tenemos a nuestra disposici\u00f3n dos nuevos m\u00e9todos de b\u00fasqueda de elementos que son mucho m\u00e1s c\u00f3modos y pr\u00e1cticos si conocemos y dominamos los selectores CSS . Es el caso de los m\u00e9todos .querySelector() y .querySelectorAll() : M\u00e9todo de b\u00fasqueda Descripci\u00f3n .querySelector(sel) Busca el primer elemento que coincide con el selector CSS sel . Si no, . .querySelectorAll(sel) Busca todos los elementos que coinciden con el selector CSS sel . Si no, [] . Con estos dos m\u00e9todos podemos realizar todo lo que hac\u00edamos con los m\u00e9todos tradicionales mencionados anteriormente e incluso muchas m\u00e1s cosas ( en menos c\u00f3digo ), ya que son muy flexibles y potentes gracias a los selectores CSS . querySelector() \u00b6 El primero, .querySelector(selector) devuelve el primer elemento que encuentra que encaja con el selector CSS suministrado en selector . Al igual que su \u00abequivalente\u00bb .getElementById() , devuelve un solo elemento y en caso de no coincidir con ninguno, devuelve : const page = document.querySelector(\"#page\"); // <div id=\"page\"></div> const info = document.querySelector(\".main .info\"); // <div class=\"info\"></div> Lo interesante de este m\u00e9todo, es que al permitir suministrarle un selector CSS b\u00e1sico o incluso un selector CSS avanzado , se vuelve un sistema mucho m\u00e1s potente. El primer ejemplo es equivalente a utilizar un .getElementById() , s\u00f3lo que en la versi\u00f3n de .querySelector() indicamos por par\u00e1metro un , y en el primero le pasamos un simple . Observa que estamos indicando un # porque se trata de un id . En el segundo ejemplo, estamos recuperando el primer elemento con clase info que se encuentre dentro de otro elemento con clase main . Eso podr\u00eda realizarse con los m\u00e9todos tradicionales, pero ser\u00eda menos directo ya que tendr\u00edamos que realizar varias llamadas, con .querySelector() se hace directamente con s\u00f3lo una. querySelectorAll() \u00b6 Por otro lado, el m\u00e9todo .querySelectorAll() realiza una b\u00fasqueda de elementos como lo hace el anterior, s\u00f3lo que como podremos intuir por ese All() , devuelve un con todos los elementos que coinciden con el CSS: // Obtiene todos los elementos con clase \"info\" const infos = document.querySelectorAll(\".info\"); // Obtiene todos los elementos con atributo name=\"nickname\" const nicknames = document.querySelectorAll('[name=\"nickname\"]'); // Obtiene todos los elementos <div> de la p\u00e1gina HTML const divs = document.querySelectorAll(\"div\"); En este caso, recuerda que .querySelectorAll() siempre nos devolver\u00e1 un de elementos. Depende de los elementos que encuentre mediante el , nos devolver\u00e1 un de 0 elementos o de 1 , 2 o m\u00e1s elementos. Al realizar una b\u00fasqueda de elementos y guardarlos en una variable, podemos realizar la b\u00fasqueda posteriormente sobre esa variable en lugar de hacerla sobre document . Esto permite realizar b\u00fasquedas acotadas por zonas, en lugar de realizarlo siempre sobre document , que buscar\u00e1 en todo el documento HTML. Crear elementos en el DOM \u00b6 Sobre todo si te encuentras en fase de aprendizaje, lo normal suele ser crear c\u00f3digo HTML desde un fichero HTML. Sin embargo, y sobre todo con el auge de las p\u00e1ginas SPA ( Single Page Application *) y los frameworks Javascript, esto ha cambiado bastante y es bastante frecuente crear c\u00f3digo HTML desde Javascript de forma din\u00e1mica. Esto tiene sus ventajas y sus desventajas. Un fichero .html siempre ser\u00e1 m\u00e1s sencillo, m\u00e1s \u00abest\u00e1tico\u00bb y m\u00e1s directo, ya que lo primero que analiza un navegador web es un fichero de marcado HTML. Por otro lado, un fichero .js es m\u00e1s complejo y menos directo, pero mucho m\u00e1s potente, \u00abdin\u00e1mico\u00bb y flexible, con menos limitaciones. En este art\u00edculo vamos a ver como podemos crear elementos HTML desde Javascript y aprovecharnos de la potencia de Javascript para hacer cosas que desde HTML, sin ayuda de Javascript, no podr\u00edamos realizar o costar\u00eda mucho m\u00e1s. Crear elementos HTML \u00b6 Existen una serie de m\u00e9todos para crear de forma eficiente diferentes elementos HTML o nodos, y que nos pueden convertir en una tarea muy sencilla el crear estructuras din\u00e1micas, mediante bucles o estructuras definidas: M\u00e9todos Descripci\u00f3n .createElement(tag, options) Crea y devuelve el elemento HTML definido por el tag . .createComment(text) Crea y devuelve un nodo de comentarios HTML <!-- text --> . .createTextNode(text) Crea y devuelve un nodo HTML con el texto text . .cloneNode(deep) Clona el nodo HTML y devuelve una copia. deep es false por defecto. .isConnected Indica si el nodo HTML est\u00e1 insertado en el documento HTML. Para empezar, nos centraremos principalmente en la primera, que es la que utilizamos para crear elementos HTML en el DOM. El m\u00e9todo createElement() \u00b6 Mediante el m\u00e9todo .createElement() podemos crear un HTML en memoria ( \u00a1no estar\u00e1 insertado a\u00fan en nuestro documento HTML! ). Con dicho elemento almacenado en una variable, podremos modificar sus caracter\u00edsticas o contenido, para posteriormente insertarlo en una posici\u00f3n determinada del DOM o documento HTML. Vamos a centrarnos en el proceso de creaci\u00f3n del elemento , y en el pr\u00f3ximo cap\u00edtulo veremos el apartado de insertarlo en el DOM. El funcionamiento de .createElement() es muy sencillo: se trata de pasarle el nombre de la etiqueta tag a utilizar. const div = document.createElement(\"div\"); // Creamos un <div></div> const span = document.createElement(\"span\"); // Creamos un <span></span> const img = document.createElement(\"img\"); // Creamos un <img> De la misma forma, podemos crear comentarios HTML con createComment() o nodos de texto sin etiqueta HTML con createTextNode() , pas\u00e1ndole a ambos un con el texto en cuesti\u00f3n. En ambos, se devuelve un que podremos utilizar luego para insertar en el documento HTML: const comment = document.createComment(\"Comentario\"); // <!--Comentario--> const text = document.createTextNode(\"Hola\"); // Nodo de texto: 'hola' El m\u00e9todo createElement() tiene un par\u00e1metro opcional denominado options . Si se indica, ser\u00e1 un objeto con una propiedad is para definir un elemento personalizado en una modalidad menos utilizada. Se ver\u00e1 m\u00e1s adelante en el apartado de Web Components . Ten presente que en los ejemplos que hemos visto estamos creando los elementos en una constante, pero de momento no est\u00e1n a\u00f1adi\u00e9ndose al documento HTML , por lo que no aparecer\u00edan visualmente. M\u00e1s adelante veremos como a\u00f1adirlos. El m\u00e9todo cloneNode() \u00b6 Hay que tener mucho cuidado al crear y duplicar elementos HTML. Un error muy com\u00fan es asignar un elemento que tenemos en otra variable, pensando que estamos creando una copia ( cuando no es as\u00ed ): const div = document.createElement(\"div\"); div.textContent = \"Elemento 1\"; const div2 = div; // NO se est\u00e1 haciendo una copia div2.textContent = \"Elemento 2\"; div.textContent; // 'Elemento 2' Con esto, quiz\u00e1s pueda parecer que estamos duplicando un elemento para crearlo a imagen y semejanza del original. Sin embargo, lo que se hace es una referencia al elemento original, de modo que si se modifica el div2 , tambi\u00e9n se modifica el elemento original. Para evitar esto, lo ideal es utilizar el m\u00e9todo cloneNode() : const div = document.createElement(\"div\"); div.textContent = \"Elemento 1\"; const div2 = div.cloneNode(); // Ahora S\u00cd estamos clonando div2.textContent = \"Elemento 2\"; div.textContent; // 'Elemento 1' El m\u00e9todo cloneNode(deep) acepta un par\u00e1metro deep opcional, a false por defecto, para indicar el tipo de clonaci\u00f3n que se realizar\u00e1: Si es true , clonar\u00e1 tambi\u00e9n sus hijos, conocido como una clonaci\u00f3n profunda ( Deep Clone ). Si es false , no clonar\u00e1 sus hijos, conocido como una clonaci\u00f3n superficial ( Shallow Clone ). La propiedad isConnected \u00b6 Por \u00faltimo, la propiedad isConnected nos indica si el nodo en cuesti\u00f3n est\u00e1 conectado al DOM, es decir, si est\u00e1 insertado en el documento HTML: Si es true , significa que el elemento est\u00e1 conectado al DOM. Si es false , significa que el elemento no est\u00e1 conectado al DOM. Hasta ahora, hemos creado elementos que no lo est\u00e1n ( permanecen s\u00f3lo en memoria ). En el cap\u00edtulo Insertar elementos en el DOM veremos como insertarlos en el documento HTML para que aparezca visualmente en la p\u00e1gina. Atributos HTML de un elemento \u00b6 Hasta ahora, hemos visto como crear elementos HTML con Javascript, pero no hemos visto como modificar los atributos HTML de dichas etiquetas creadas. En general, una vez tenemos un elemento sobre el que vamos a crear algunos atributos, lo m\u00e1s sencillo es asignarle valores como propiedades de objetos: const div = document.createElement(\"div\"); // <div></div> div.id = \"page\"; // <div id=\"page\"></div> div.className = \"data\"; // <div id=\"page\" class=\"data\"></div> div.style = \"color: red\"; // <div id=\"page\" class=\"data\" style=\"color: red\"></div> Sin embargo, en algunos casos esto se puede complicar ( como se ve en uno de los casos del ejemplo anterior ). Por ejemplo, la palabra class ( para crear clases ) o la palabra for ( para bucles ) son palabras reservadas de Javascript y no se podr\u00edan utilizar para crear atributos. Por ejemplo, si queremos establecer una clase, se debe utilizar la propiedad className . Es posible asignar a la propiedad className varias clases en un separadas por espacio. De esta forma se asignar\u00e1n m\u00faltiples clases. A\u00fan as\u00ed, recomendamos utilizar la propiedad classList que explicaremos m\u00e1s adelante en el cap\u00edtulo manipulaci\u00f3n de clases CSS . Aunque la forma anterior es la m\u00e1s r\u00e1pida, tenemos algunos m\u00e9todos para utilizar en un elemento HTML y a\u00f1adir, modificar o eliminar sus atributos: M\u00e9todos Descripci\u00f3n hasAttributes() Indica si el elemento tiene atributos HTML. hasAttribute(attr) Indica si el elemento tiene el atributo HTML attr . getAttributeNames() Devuelve un con los atributos del elemento. getAttribute(attr) Devuelve el valor del atributo attr del elemento o si no existe. removeAttribute(attr) Elimina el atributo attr del elemento. setAttribute(attr, value) A\u00f1ade o cambia el atributo attr al valor value . getAttributeNode(attr) Idem a getAttribute() pero devuelve el atributo como nodo . removeAttributeNode(attr) Idem a removeAttribute() pero devuelve el atributo como nodo . setAttributeNode(attr, value) Idem a setAttribute() pero devuelve el atributo como nodo . Estos m\u00e9todos son bastante autoexplicativos y f\u00e1ciles de entender, a\u00fan as\u00ed, vamos a ver unos ejemplos de uso donde podemos ver como funcionan: // Obtenemos <div id=\"page\" class=\"info data dark\" data-number=\"5\"></div> const div = document.querySelector(\"#page\"); div.hasAttribute(\"data-number\"); // true (data-number existe) div.hasAttributes(); // true (tiene 3 atributos) div.getAttributeNames(); // [\"id\", \"data-number\", \"class\"] div.getAttribute(\"id\"); // \"page\" div.removeAttribute(\"id\"); // <div class=\"info data dark\" data-number=\"5\"></div> div.setAttribute(\"id\", \"page\"); // (Vuelve a a\u00f1adirlo) Los tres \u00faltimos m\u00e9todos mencionados: getAttributeNode() , removeAttributeNode() y setAttributeNode() son versiones id\u00e9nticas a sus hom\u00f3nimos, s\u00f3lo que devuelven el afectado, \u00fatil si queremos guardarlo en una variable y seguir trabajando con \u00e9l. Recuerda que hasta ahora hemos visto como crear elementos y cambiar sus atributos, pero no los hemos insertado en el DOM o documento HTML, por lo que no los veremos visualmente en la p\u00e1gina. En el siguiente cap\u00edtulo abordaremos ese tema. Insertar elementos en el DOM \u00b6 En el cap\u00edtulo anterior hemos visto como crear elementos en el DOM , pero dichos elementos se creaban en memoria y los almacen\u00e1bamos en una variable o constante. No se conectaban al DOM o documento HTML de forma autom\u00e1tica, sino que debemos hacerlo manualmente, que es justo lo que veremos en este art\u00edculo: como insertar elementos en el DOM, as\u00ed como eliminarlos. En este art\u00edculo vamos a centrarnos en tres categor\u00edas: Reemplazar contenido de elementos en el DOM Insertar elementos en el DOM Eliminar elementos del DOM Reemplazar contenido \u00b6 Comenzaremos por la familia de propiedades siguientes, que enmarcamos dentro de la categor\u00eda de reemplazar contenido de elementos HTML. Se trata de una v\u00eda r\u00e1pida con la cu\u00e1l podemos a\u00f1adir ( o m\u00e1s bien, reemplazar ) el contenido de una etiqueta HTML. Las propiedades son las siguientes: Propiedades Descripci\u00f3n .nodeName Devuelve el nombre del nodo (etiqueta si es un elemento HTML). S\u00f3lo lectura. .textContent Devuelve el contenido de texto del elemento. Se puede asignar para modificar. .innerHTML Devuelve el contenido HTML del elemento. Se puede usar asignar para modificar. .outerHTML Idem a .innerHTML pero incluyendo el HTML del propio elemento HTML. .innerText Versi\u00f3n no est\u00e1ndar de .textContent de Internet Explorer con diferencias. Evitar . .outerText Versi\u00f3n no est\u00e1ndar de .textContent / .outerHTML de Internet Explorer. Evitar . La propiedad nodeName nos devuelve el nombre del todo, que en elementos HTML es interesante puesto que nos devuelve el nombre de la etiqueta en may\u00fasculas . Se trata de una propiedad de s\u00f3lo lectura, por lo cu\u00e1l no podemos modificarla, s\u00f3lo acceder a ella. La propiedad textContent \u00b6 La propiedad .textContent nos devuelve el contenido de texto de un elemento HTML. Es \u00fatil para obtener ( o modificar ) s\u00f3lo el texto dentro de un elemento, obviando el etiquetado HTML: const div = document.querySelector(\"div\"); // <div></div> div.textContent = \"Hola a todos\"; // <div>Hola a todos</div> div.textContent; // \"Hola a todos\" Observa que tambi\u00e9n podemos utilizarlo para reemplazar el contenido de texto , asign\u00e1ndolo como si fuera una variable o constante. En el caso de que el elemento tenga anidadas varias etiquetas HTML una dentro de otra, la propiedad .textContent se quedar\u00e1 s\u00f3lo con el contenido textual completo, como se puede ver en el siguiente ejemplo: // Obtenemos <div class=\"info\">Hola <strong>amigos</strong></div> const div = document.querySelector(\".info\"); div.textContent; // \"Hola amigos\" La propiedad innerHTML \u00b6 Por otro lado, la propiedad .innerHTML nos permite hacer lo mismo, pero interpretando el c\u00f3digo HTML indicado y renderizando sus elementos: const div = document.querySelector(\".info\"); // <div class=\"info\"></div> div.innerHTML = \"<strong>Importante</strong>\"; // Interpreta el HTML div.innerHTML; // \"<strong>Importante</strong>\" div.textContent; // \"Importante\" div.textContent = \"<strong>Importante</strong>\"; // No interpreta el HTML Observa que la diferencia principal entre .innerHTML y .textContent es que el primero renderiza e interpreta el marcado HTML, mientras que el segundo lo inserta como contenido de texto literalmente. Ten en cuenta que la propiedad .innerHTML comprueba y parsea el marcado HTML escrito ( corrigiendo si hay errores ) antes de realizar la asignaci\u00f3n. Por ejemplo, si en el ejemplo anterior nos olvidamos de escribir el cierre </strong> de la etiqueta, .innerHTML autom\u00e1ticamente lo cerrar\u00e1. Esto puede provocar algunas incongruencias si el c\u00f3digo es incorrecto o una disminuci\u00f3n de rendimiento en textos muy grandes que hay que preprocesar. Por otro lado, la propiedad .outerHTML es muy similar a .innerHTML . Mientras que esta \u00faltima devuelve el c\u00f3digo HTML del interior de un elemento HTML, .outerHTML devuelve tambi\u00e9n el c\u00f3digo HTML del propio elemento en cuesti\u00f3n. Esto puede ser muy \u00fatil para reemplazar un elemento HTML combin\u00e1ndolo con .innerHTML : const data = document.querySelector(\".data\"); data.innerHTML = \"<h1>Tema 1</h1>\"; data.textContent; // \"Tema 1\" data.innerHTML; // \"<h1>Tema 1</h1>\" data.outerHTML; // \"<div class=\"data\"><h1>Tema 1</h1></div>\" En este ejemplo se pueden observar las diferencias entre las propiedades .textContent ( contenido de texto ), .innerHTML ( contenido HTML ) y .outerHTML ( contenido y contenedor HTML ). Las propiedades .innerText y .outerText son propiedades no est\u00e1ndar de Internet Explorer. Se recomienda s\u00f3lo utilizarlas con motivos de fallbacks o para dar soporte a versiones antiguas de Internet Explorer. En su lugar deber\u00eda utilizarse .textContent . Insertar elementos \u00b6 A pesar de que los m\u00e9todos anteriores son suficientes para crear elementos y estructuras HTML complejas, s\u00f3lo son aconsejables para peque\u00f1os fragmentos de c\u00f3digo o texto, ya que en estructuras muy complejas ( con muchos elementos HTML ) la legibilidad del c\u00f3digo ser\u00eda menor y adem\u00e1s, el rendimiento podr\u00eda resentirse. Hemos aprendido a crear elementos HTML y sus atributos , pero a\u00fan no hemos visto como a\u00f1adirlos al documento HTML actual ( conectarlos al DOM ), operaci\u00f3n que se puede realizar de diferentes formas mediante los siguientes m\u00e9todos disponibles: M\u00e9todos Descripci\u00f3n .appendChild(node) A\u00f1ade como hijo el nodo node . Devuelve el nodo insertado. .insertAdjacentElement(pos, elem) Inserta el elemento elem en la posici\u00f3n pos . Si falla, . .insertAdjacentHTML(pos, str) Inserta el c\u00f3digo HTML str en la posici\u00f3n pos . .insertAdjacentText(pos, text) Inserta el texto text en la posici\u00f3n pos . .insertBefore(new, node) Inserta el nodo new antes de node y como hijo del nodo actual. De ellos, probablemente el m\u00e1s extendido es .appendChild() , no obstante, la familia de m\u00e9todos .insertAdjacent*() tambi\u00e9n tiene buen soporte en navegadores y puede usarse de forma segura en la actualidad. El m\u00e9todo appendChild() \u00b6 Uno de los m\u00e9todos m\u00e1s comunes para a\u00f1adir un elemento HTML creado con Javascript es appendChild() . Como su propio nombre indica, este m\u00e9todo realiza un \u00abappend\u00bb , es decir, inserta el elemento como un hijo al final de todos los elementos hijos que existan. Es importante tener clara esta particularidad, porque aunque es lo m\u00e1s com\u00fan, no siempre querremos insertar el elemento en esa posici\u00f3n: const img = document.createElement(\"img\"); img.src = \"https://lenguajejs.com/assets/logo.svg\"; img.alt = \"Logo Javascript\"; document.body.appendChild(img); En este ejemplo podemos ver como creamos un elemento <img> que a\u00fan no est\u00e1 conectado al DOM. Posteriormente, a\u00f1adimos los atributos src y alt , obligatorios en una etiqueta de imagen. Por \u00faltimo, conectamos al DOM el elemento, utilizando el m\u00e9todo .appendChild() sobre document.body que no es m\u00e1s que una referencia a la etiqueta <body> del documento HTML. Veamos otro ejemplo: const div = document.createElement(\"div\"); div.textContent = \"Esto es un div insertado con JS.\"; const app = document.createElement(\"div\"); // <div></div> app.id = \"app\"; // <div id=\"app\"></div> app.appendChild(div); // <div id=\"app\"><div>Esto es un div insertado con JS</div></div> En este ejemplo, estamos creando dos elementos, e insertando uno dentro de otro. Sin embargo, a diferencia del anterior, el elemento app no est\u00e1 conectado a\u00fan al DOM, sino que lo tenemos aislado en esa variable, sin insertar en el documento. Esto ocurre porque app lo acabamos de crear, y en el ejemplo anterior usabamos document.body que es una referencia a un elemento que ya existe en el documento. Los m\u00e9todos insertAdjacent*() \u00b6 Los m\u00e9todos de la familia insertAdjacent son bastante m\u00e1s vers\u00e1tiles que .appendChild() , ya que permiten muchas m\u00e1s posibilidades. Tenemos tres versiones diferentes: .insertAdjacentElement() donde insertamos un objeto .insertAdjacentHTML() donde insertamos c\u00f3digo HTML directamente ( similar a innerHTML ) .insertAdjacentText() donde no insertamos elementos HTML, sino un con texto En las tres versiones, debemos indicar por par\u00e1metro un pos como primer par\u00e1metro para indicar en que posici\u00f3n vamos a insertar el contenido. Hay 4 opciones posibles: beforebegin : El elemento se inserta antes de la etiqueta HTML de apertura. afterbegin : El elemento se inserta dentro de la etiqueta HTML, antes de su primer hijo . beforeend : El elemento se inserta dentro de la etiqueta HTML, despu\u00e9s de su \u00faltimo hijo . Es el equivalente a usar el m\u00e9todo .appendChild() . afterend : El elemento se inserta despu\u00e9s de la etiqueta HTML de cierre. Veamos algunos ejemplo aplicando cada uno de ellos con el m\u00e9todo .insertAdjacentElement() : const div = document.createElement(\"div\"); // <div></div> div.textContent = \"Ejemplo\"; // <div>Ejemplo</div> const app = document.querySelector(\"#app\"); // <div id=\"app\">App</div> app.insertAdjacentElement(\"beforebegin\", div); // Opci\u00f3n 1: <div>Ejemplo</div> <div id=\"app\">App</div> app.insertAdjacentElement(\"afterbegin\", div); // Opci\u00f3n 2: <div id=\"app\"> <div>Ejemplo</div> App</div> app.insertAdjacentElement(\"beforeend\", div); // Opci\u00f3n 3: <div id=\"app\">App <div>Ejemplo</div> </div> app.insertAdjacentElement(\"afterend\", div); // Opci\u00f3n 4: <div id=\"app\">App</div> <div>Ejemplo</div> Ten en cuenta que en el ejemplo muestro varias opciones alternativas , no lo que ocurrir\u00eda tras ejecutar las cuatro opciones una detr\u00e1s de otra. Por otro lado, notar que tenemos tres versiones en esta familia de m\u00e9todos, una que actua sobre elementos HTML ( la que hemos visto ), pero otras dos que actuan sobre c\u00f3digo HTML y sobre nodos de texto. Veamos un ejemplo de cada una: app.insertAdjacentElement(\"beforebegin\", div); // Opci\u00f3n 1: <div>Ejemplo</div> <div id=\"app\">App</div> app.insertAdjacentHTML(\"beforebegin\", '<p>Hola</p>'); // Opci\u00f3n 2: <p>Hola</p> <div id=\"app\">App</div> app.insertAdjacentText(\"beforebegin\", \"Hola a todos\"); // Opci\u00f3n 3: Hola a todos <div id=\"app\">App</div> El m\u00e9todo insertBefore() \u00b6 Por \u00faltimo, el m\u00e9todo insertBefore(newnode, node) es un m\u00e9todo m\u00e1s espec\u00edfico y menos utilizado en el que se puede especificar exactamente el lugar a insertar un nodo. El par\u00e1metro newnode es el nodo a insertar, mientras que node puede ser: ; insertando newnode despu\u00e9s del \u00faltimo nodo hijo. Equivalente a .appendChild() . o ; insertando newnode antes de dicho node de referencia. Eliminar elementos \u00b6 Al igual que podemos insertar o reemplazar elementos, tambi\u00e9n podemos eliminarlos. Ten en cuenta que al \u00abeliminar\u00bb un nodo o elemento HTML, lo que hacemos realmente no es borrarlo, sino desconectarlo del DOM o documento HTML , de modo que no est\u00e1n conectados, pero siguen existiendo. El m\u00e9todo remove() \u00b6 Probablemente, la forma m\u00e1s sencilla de eliminar nodos o elementos HTML es utilizando el m\u00e9todo .remove() sobre el nodo o etiqueta a eliminar: const div = document.querySelector(\".deleteme\"); div.isConnected; // true div.remove(); div.isConnected; // false En este caso, lo que hemos hecho es buscar el elemento HTML <div class=\"deleteme\"> en el documento HTML y desconectarlo de su elemento padre, de forma que dicho elemento pasa a no pertenecer al documento HTML. Sin embargo, existen algunos m\u00e9todos m\u00e1s para eliminar o reemplazar elementos: M\u00e9todos Descripci\u00f3n .remove() Elimina el propio nodo de su elemento padre. .removeChild(node) Elimina y devuelve el nodo hijo node . .replaceChild(new, old) Reemplaza el nodo hijo old por new . Devuelve old . El m\u00e9todo .remove() se encarga de desconectarse del DOM a s\u00ed mismo, mientras que el segundo m\u00e9todo, .removeChild() , desconecta el nodo o elemento HTML proporcionado. Por \u00faltimo, con el m\u00e9todo .replaceChild() se nos permite cambiar un nodo por otro. El m\u00e9todo removeChild() \u00b6 En algunos casos, nos puede interesar eliminar un nodo hijo de un elemento. Para esas situaciones, podemos utilizar el m\u00e9todo .removeChild(node) donde node es el nodo hijo que queremos eliminar: const div = document.querySelector(\".item:nth-child(2)\"); // <div class=\"item\">2</div> document.body.removeChild(div); // Desconecta el segundo .item El m\u00e9todo replaceChild() \u00b6 De la misma forma, el m\u00e9todo replaceChild(new, old) nos permite cambiar un nodo hijo old por un nuevo nodo hijo new . En ambos casos, el m\u00e9todo nos devuelve el nodo reemplazado: const div = document.querySelector(\".item:nth-child(2)\"); const newnode = document.createElement(\"div\"); newnode.textContent = \"DOS\"; document.body.replaceChild(newnode, div); Manipular clases CSS (classList) \u00b6 En CSS es muy com\u00fan utilizar m\u00faltiples clases CSS para asignar estilos relacionados dependiendo de lo que queramos. Para ello, basta hacer cosas como la que veremos a continuaci\u00f3n: <div class=\"element shine dark-theme\"></div> La clase element ser\u00eda la clase general que representa el elemento, y que tiene estilos fijos. La clase shine podr\u00eda tener una animaci\u00f3n CSS para aplicar un efecto de brillo. La clase dark-theme podr\u00eda tener los estilos de un elemento en un tema oscuro. Todo esto se utiliza sin problema de forma est\u00e1tica, pero cuando comenzamos a programar en Javascript, buscamos una forma din\u00e1mica , pr\u00e1ctica y c\u00f3moda de hacerlo desde Javascript, y es de lo que tratar\u00e1 este art\u00edculo. La propiedad className \u00b6 Javascript tiene a nuestra disposici\u00f3n una propiedad .className en todos los elementos HTML. Dicha propiedad contiene el valor del atributo HTML class , y puede tanto leerse como reemplazarse: Propiedad Descripci\u00f3n .className Acceso directo al valor del atributo HTML class . Tambi\u00e9n se puede asignar. .classList Objeto especial para manejar clases CSS. Contiene m\u00e9todos y propiedades de ayuda. La propiedad .className viene a ser la modalidad directa y r\u00e1pida de utilizar el getter .getAttribute(\"class\") y el setter .setAttribute(\"class\", v) . Veamos un ejemplo utilizando estas propiedades y m\u00e9todos y su equivalencia: const div = document.querySelector(\".element\"); // Obtener clases CSS div.className; // \"element shine dark-theme\" div.getAttribute(\"class\"); // \"element shine dark-theme\" // Modificar clases CSS div.className = \"elemento brillo tema-oscuro\"; div.setAttribute(\"class\", \"elemento brillo tema-oscuro\"); Trabajar con .className tiene una limitaci\u00f3n cuando trabajamos con m\u00faltiples clases CSS , y es que puedes querer realizar una manipulaci\u00f3n s\u00f3lo en una clase CSS concreta, dejando las dem\u00e1s intactas. En ese caso, modificar clases CSS mediante una asignaci\u00f3n .className se vuelve poco pr\u00e1ctico. Probablemente, la forma m\u00e1s interesante de manipular clases desde Javascript es mediante el objeto .classList . El objeto classList \u00b6 Para trabajar m\u00e1s c\u00f3modamente, existe un sistema muy interesante para trabajar con clases: el objeto classList . Se trata de un objeto especial ( lista de clases ) que contiene una serie de ayudantes que permiten trabajar con las clases de forma m\u00e1s intuitiva y l\u00f3gica. Si accedemos a .classList , nos devolver\u00e1 un ( lista ) de clases CSS de dicho elemento. Pero adem\u00e1s, incorpora una serie de m\u00e9todos ayudantes que nos har\u00e1n muy sencillo trabajar con clases CSS: M\u00e9todo Descripci\u00f3n .classList Devuelve la lista de clases del elemento HTML. .classList.item(n) Devuelve la clase n\u00famero n del elemento HTML. .classList.add(c1, c2, ...) A\u00f1ade las clases c1 , c2 ... al elemento HTML. .classList.remove(c1, c2, ...) Elimina las clases c1 , c2 ... del elemento HTML. .classList.contains(clase) Indica si la clase existe en el elemento HTML. .classList.toggle(clase) Si la clase no existe, la a\u00f1ade. Si no, la elimina. .classList.toggle(clase, expr) Si expr es true , a\u00f1ade clase . Si no, la elimina. .classList.replace(old, new) Reemplaza la clase old por la clase new . OJO : Recuerda que el objeto .classList aunque parece que devuelve un no es un array, sino un elemento que act\u00faa como un array, por lo que puede carecer de algunos m\u00e9todos o propiedades concretos. Si quieres convertirlo a un array real, utiliza Array.from() . Veamos un ejemplo de uso de cada m\u00e9todo de ayuda. Supongamos que tenemos el siguiente elemento HTML en nuestro documento. Vamos a acceder a el y a utilizar el objeto .classList con dicho elemento: <div id=\"page\" class=\"info data dark\" data-number=\"5\"></div> Observa que dicho elemento HTML tiene: Un atributo id Tres clases CSS: info , data y dark Un metadato HTML data-number A\u00f1adir y eliminar clases CSS \u00b6 Los m\u00e9todos classList.add() y classList.remove() permiten indicar una o m\u00faltiples clases CSS a a\u00f1adir o eliminar. Observa el siguiente c\u00f3digo donde se ilustra un ejemplo: const div = document.querySelector(\"#page\"); div.classList; // [\"info\", \"data\", \"dark\"] div.classList.add(\"uno\", \"dos\"); // No devuelve nada. div.classList; // [\"info\", \"data\", \"dark\", \"uno\", \"dos\"] div.classList.remove(\"uno\", \"dos\"); // No devuelve nada. div.classList; // [\"info\", \"data\", \"dark\"] En el caso de que se a\u00f1ada una clase CSS que ya exist\u00eda previamente, o que se elimine una clase CSS que no exist\u00eda, simplemente no ocurrir\u00e1 nada. Conmutar o alternar clases CSS \u00b6 Un ayudante muy interesante es el del m\u00e9todo classList.toggle() , que lo que hace es a\u00f1adir o eliminar la clase CSS dependiendo de si ya exist\u00eda previamente. Es decir, a\u00f1ade la clase si no exist\u00eda previamente o elimina la clase si exist\u00eda previamente: const div = document.querySelector(\"#page\"); div.classList; // [\"info\", \"data\", \"dark\"] div.classList.toggle(\"info\"); // Como \"info\" existe, lo elimina. Devuelve \"false\" div.classList; // [\"data\", \"dark\"] div.classList.toggle(\"info\"); // Como \"info\" no existe, lo a\u00f1ade. Devuelve \"true\" div.classList; // [\"info\", \"data\", \"dark\"] Observa que .toggle() devuelve un que ser\u00e1 true o false dependiendo de si, tras la operaci\u00f3n, la clase sigue existiendo o no. Ten en cuenta que en .toggle() , al contrario que .add() o .remove() , s\u00f3lo se puede indicar una clase CSS por par\u00e1metro. Otros m\u00e9todos de clases CSS \u00b6 Por otro lado, tenemos otros m\u00e9todos menos utilizados, pero tambi\u00e9n muy interesantes: El m\u00e9todo .classList.item(n) nos devuelve la clase CSS ubicada en la posici\u00f3n n . El m\u00e9todo .classList.contains(name) nos devuelve si la clase CSS name existe o no. El m\u00e9todo .classList.replace(old, current) cambia la clase old por la clase current . Veamos un ejemplo: const div = document.querySelector(\"#page\"); div.classList; // [\"info\", \"data\", \"dark\"] div.classList.item(1); // 'data' div.classList.contains(\"info\"); // Devuelve `true` (existe la clase) div.classList.replace(\"dark\", \"light\"); // Devuelve `true` (se hizo el cambio) Con todos estos m\u00e9todos de ayuda, nos resultar\u00e1 mucho m\u00e1s sencillo manipular clases CSS desde Javascript en nuestro c\u00f3digo. Navegar por elementos del DOM \u00b6 En algunas ocasiones en las que conocemos y controlamos perfectamente la estructura del c\u00f3digo HTML de la p\u00e1gina, nos puede resultar m\u00e1s c\u00f3modo tener a nuestra disposici\u00f3n una serie de propiedades para navegar por la jerarqu\u00eda de elementos HTML relacionados. Navegar a trav\u00e9s de elementos \u00b6 Las propiedades que veremos a continuaci\u00f3n devuelven informaci\u00f3n de otros elementos relacionados con el elemento en cuesti\u00f3n. Propiedades de elementos HTML Descripci\u00f3n children Devuelve una lista de elementos HTML hijos. parentElement Devuelve el padre del elemento o si no tiene. firstElementChild Devuelve el primer elemento hijo. lastElementChild Devuelve el \u00faltimo elemento hijo. previousElementSibling Devuelve el elemento hermano anterior o si no tiene. nextElementSibling Devuelve el elemento hermano siguiente o si no tiene. En primer lugar, tenemos la propiedad children que nos ofrece un con una lista de elementos HTML hijos. Podr\u00edamos acceder a cualquier hijo utilizando los corchetes de array y seguir utilizando otras propiedades en el hijo seleccionado. La propiedad firstElementChild ser\u00eda un acceso r\u00e1pido a children[0] La propiedad lastElementChild ser\u00eda un acceso r\u00e1pido al \u00faltimo elemento hijo. Por \u00faltimo, tenemos las propiedades previousElementSibling y nextElementSibling que nos devuelven los elementos hermanos anteriores o posteriores, respectivamente. La propiedad parentElement nos devolver\u00eda el padre del elemento en cuesti\u00f3n. En el caso de no existir alguno de estos elementos, nos devolver\u00eda . Consideremos el siguiente documento HTML: <html> <body> <div id=\"app\"> <div class=\"header\"> <h1>Titular</h1> </div> <p>P\u00e1rrafo de descripci\u00f3n</p> <a href=\"/\">Enlace</a> </div> </body> </html> Si trabajamos bajo este documento HTML, y utilizamos el siguiente c\u00f3digo Javascript, podremos \u00abnavegar\u00bb por la jerarqu\u00eda de elementos, movi\u00e9ndonos entre elementos padre, hijo o hermanos: document.body.children.length; // 1 document.body.children; // <div id=\"app\"> document.body.parentElement; // <html> const app = document.querySelector(\"#app\"); app.children; // [div.header, p, a] app.firstElementChild; // <div class=\"header\"> app.lastElementChild; // <a href=\"/\"> const a = app.querySelector(\"a\"); a.previousElementSibling; // <p> a.nextElementSibling; // null Estas son las propiedades m\u00e1s habituales para navegar entre elementos HTML, sin embargo, tenemos otra modalidad un poco m\u00e1s detallada. Navegar a trav\u00e9s de nodos \u00b6 La primera tabla que hemos visto nos muestra una serie de propiedades cuando trabajamos con . Sin embargo, si queremos hilar m\u00e1s fino y trabajar a nivel de , podemos utilizar las siguientes propiedades, que son equivalentes a las anteriores: Propiedades de nodos HTML Descripci\u00f3n childNodes Devuelve una lista de nodos hijos. Incluye nodos de texto y comentarios. parentNode Devuelve el nodo padre del nodo o si no tiene. firstChild Devuelve el primer nodo hijo. lastChild Devuelve el \u00faltimo nodo hijo. previousSibling Devuelve el nodo hermano anterior o si no tiene. nextSibling Devuelve el nodo hermano siguiente o si no tiene. Estas propiedades suelen ser m\u00e1s interesantes cuando queremos trabajar sobre nodos de texto, ya que incluso los espacios en blanco entre elementos HTML influyen. Volvamos a trabajar sobre el documento HTML anterior, pero ahora utilizando este grupo de propiedades basadas en : document.body.childNodes.length; // 3 document.body.childNodes; // [text, div#app, text] document.body.parentNode; // <html> const app = document.querySelector(\"#app\"); app.childNodes; // [text, div.header, text, p, text, a, text] app.firstChild.textContent; // \" \" app.lastChild.textContent; // \" \" const a = app.querySelector(\"a\"); a.previousSibling; // #text a.nextSibling; // #text Con todo esto, ya tenemos suficientes herramientas para trabajar a bajo nivel con las etiquetas y nodos HTML de un documento HTML desde Javascript. Fuente: Lenguaje Javascript por Manz \u00b6","title":"DOM"},{"location":"desarrollo/javascript/04-DOM/#dom","text":"","title":"DOM"},{"location":"desarrollo/javascript/04-DOM/#que-es-el-dom","text":"Cuando comenzamos en el mundo del desarrollo web , normalmente comenzamos por aprender a escribir etiquetado o marcado HTML y adem\u00e1s, a\u00f1adir estilos CSS para darle color, forma y algo de interacci\u00f3n. Sin embargo, a medida que avanzamos, nos damos cuenta que en cierta forma podemos estar bastante limitados. Si \u00fanicamente utilizamos HTML/CSS, s\u00f3lo podremos crear p\u00e1ginas \u00abest\u00e1ticas\u00bb ( sin demasiada personalizaci\u00f3n por parte del usuario ), pero si a\u00f1adimos Javascript, podremos crear p\u00e1ginas \u00abdin\u00e1micas\u00bb . Cuando hablamos de p\u00e1ginas din\u00e1micas, nos referimos a que podemos dotar de la potencia y flexibilidad que nos da un lenguaje de programaci\u00f3n para crear documentos y p\u00e1ginas mucho m\u00e1s ricas, que brinden una experiencia m\u00e1s completa y con el que se puedan automatizar un gran abanico de tareas y acciones.","title":"\u00bfQu\u00e9 es el DOM?"},{"location":"desarrollo/javascript/04-DOM/#que-es-el-dom_1","text":"Las siglas DOM significan Document Object Model , o lo que es lo mismo, la estructura del documento HTML. Una p\u00e1gina HTML est\u00e1 formada por m\u00faltiples etiquetas HTML, anidadas una dentro de otra, formando un \u00e1rbol de etiquetas relacionadas entre s\u00ed, que se denomina \u00e1rbol DOM ( o simplemente DOM ). En Javascript, cuando nos referimos al DOM nos referimos a esta estructura, que podemos modificar de forma din\u00e1mica desde Javascript, a\u00f1adiendo nuevas etiquetas, modificando o eliminando otras, cambiando sus atributos HTML, a\u00f1adiendo clases, cambiando el contenido de texto, etc... Al estar \"amparado\" por un lenguaje de programaci\u00f3n , todas estas tareas se pueden automatizar, incluso indicando que se realicen cuando el usuario haga acciones determinadas, como por ejemplo: pulsar un bot\u00f3n, mover el rat\u00f3n, hacer click en una parte del documento, escribir un texto, etc...","title":"\u00bfQu\u00e9 es el DOM?"},{"location":"desarrollo/javascript/04-DOM/#el-objeto-document","text":"En Javascript, la forma de acceder al DOM es a trav\u00e9s de un objeto llamado document , que representa el \u00e1rbol DOM de la p\u00e1gina o pesta\u00f1a del navegador donde nos encontramos. En su interior pueden existir varios tipos de elementos, pero principalmente ser\u00e1n o : no es m\u00e1s que la representaci\u00f3n gen\u00e9rica de una etiqueta: HTMLElement . es una unidad m\u00e1s b\u00e1sica, la cu\u00e1l puede ser o un nodo de texto . Todos los elementos HTML , dependiendo del elemento que sean, tendr\u00e1n un tipo de dato espec\u00edfico. Algunos ejemplos: Tipo de dato Tipo espec\u00edfico Etiqueta Descripci\u00f3n HTMLElement HTMLDivElement <div> Capa divisoria invisible (en bloque). HTMLElement HTMLSpanElement <span> Capa divisoria invisible (en l\u00ednea). HTMLElement HTMLImageElement <img> Imagen. HTMLElement HTMLAudioElement <audio> Contenedor de audio. Obviamente, existen muchos tipos de datos espec\u00edficos, uno por cada etiqueta HTML.","title":"El objeto document"},{"location":"desarrollo/javascript/04-DOM/#api-nativa-de-javascript","text":"En los siguientes cap\u00edtulos veremos que Javascript nos proporciona un conjunto de herramientas para trabajar de forma nativa con el DOM de la p\u00e1gina, entre las que se encuentran: Cap\u00edtulo del DOM Descripci\u00f3n \ud83d\udd0d Buscar etiquetas Familia de m\u00e9todos entre los que se encuentran funciones como .getElementById() , .querySelector() o .querySelectorAll() , entre otras. \ud83d\udd2e Crear etiquetas Una serie de m\u00e9todos y consejos para crear elementos en la p\u00e1gina y trabajar con ellos de forma din\u00e1mica. \ud83d\udd0c Insertar etiquetas Las mejores formas de a\u00f1adir elementos al DOM, ya sea utilizando propiedades como .innerHTML o m\u00e9todo como .appendChild() , .insertAdjacentHTML() , entre otros. \ud83c\udfad Gesti\u00f3n de clases CSS Consejos para la utilizaci\u00f3n de la API .classList de Javascript que nos permite manipular clases CSS desde JS, de modo que podamos a\u00f1adir, modificar, eliminar clases de CSS de un elemento de una forma pr\u00e1ctica y c\u00f3moda. \ud83d\udea2 Navegar entre elementos Utilizaci\u00f3n de una serie de m\u00e9todos y propiedades que nos permiten \u00abnavegar\u00bb a trav\u00e9s de la jerarqu\u00eda del DOM, ci\u00f1\u00e9ndonos a la estructura del documento y la posici\u00f3n de los elementos en la misma.","title":"API nativa de Javascript"},{"location":"desarrollo/javascript/04-DOM/#librerias-de-terceros","text":"En muchos casos, el rendimiento no es lo suficientemente importante como para justificar trabajar a bajo nivel, por lo que se prefiere utilizar algunas librer\u00edas de terceros que nos facilitan el trabajo a costa de reducir minimamente el rendimiento, pero permiti\u00e9ndonos programar m\u00e1s r\u00e1pidamente. Si es tu caso, puedes utilizar alguna de las siguientes librer\u00edas para abstraerte del DOM: Librer\u00eda Descripci\u00f3n GitHub RE:DOM Librer\u00eda para crear interfaces de usuario, basada en DOM. @redom/redom Voyeur.js Peque\u00f1a librer\u00eda para manipular el DOM @adriancooney/voyeur.js HtmlJs Motor de renderizaci\u00f3n de HTML y data binding (MVVM) @nhanfu/htmljs DOMtastic Librar\u00eda moderna y modular para DOM/Events @webpro/DOMtastic UmbrellaJS Librer\u00eda para manipular el DOM y eventos @franciscop/umbrella SuperDOM Manipulando DOM como si estuvieras en 2018 @szaranger/superdom Muchas veces, tambi\u00e9n se eligen frameworks de Javascript para trabajar, que en cierta forma tambi\u00e9n te abstraen de tener que gestionar el DOM a bajo nivel, y lo cambian por realizar otras tareas o estrategias relacionadas con el framework escogido.","title":"Librer\u00edas de terceros"},{"location":"desarrollo/javascript/04-DOM/#seleccionar-elementos-del-dom","text":"Si nos encontramos en nuestro c\u00f3digo Javascript y queremos hacer modificaciones en un elemento de la p\u00e1gina HTML, lo primero que debemos hacer es buscar dicho elemento. Para ello, se suele intentar identificar el elemento a trav\u00e9s de alguno de sus atributos m\u00e1s utilizados, generalmente el id o la clase .","title":"Seleccionar elementos del DOM"},{"location":"desarrollo/javascript/04-DOM/#metodos-tradicionales","text":"Existen varios m\u00e9todos, los m\u00e1s cl\u00e1sicos y tradicionales para realizar b\u00fasquedas de elementos en el documento. Observa que si lo que buscas es un elemento espec\u00edfico, lo mejor ser\u00eda utilizar getElementById() , en caso contrario, si utilizamos uno de los 3 siguientes m\u00e9todos, nos devolver\u00e1 un donde tendremos que elegir el elemento en cuesti\u00f3n posteriormente: M\u00e9todos de b\u00fasqueda Descripci\u00f3n .getElementById(id) Busca el elemento HTML con el id id . Si no, devuelve . .getElementsByClassName(class) Busca elementos con la clase class . Si no, devuelve [] . .getElementsByName(name) Busca elementos con atributo name name . Si no, devuelve [] . .getElementsByTagName(tag) Busca elementos tag . Si no encuentra ninguno, devuelve [] . Estos son los 4 m\u00e9todos tradicionales de Javascript para manipular el DOM. Se denominan tradicionales porque son los que existen en Javascript desde versiones m\u00e1s antiguas. Dichos m\u00e9todos te permiten buscar elementos en la p\u00e1gina dependiendo de los atributos id , class , name o de la propia etiqueta, respectivamente.","title":"M\u00e9todos tradicionales"},{"location":"desarrollo/javascript/04-DOM/#getelementbyid","text":"El primer m\u00e9todo, .getElementById(id) busca un elemento HTML con el id especificado en id por par\u00e1metro. En principio, un documento HTML bien constru\u00eddo no deber\u00eda tener m\u00e1s de un elemento con el mismo id , por lo tanto, este m\u00e9todo devolver\u00e1 siempre un solo elemento: const page = document.getElementById(\"page\"); // <div id=\"page\"></div> Recuerda que en el caso de no encontrar el elemento indicado, devolver\u00e1 .","title":"getElementById()"},{"location":"desarrollo/javascript/04-DOM/#getelementsbyclassname","text":"Por otro lado, el m\u00e9todo .getElementsByClassName(class) permite buscar los elementos con la clase especificada en class . Es importante darse cuenta del matiz de que el metodo tiene getElements en plural, y esto es porque al devolver clases ( al contrario que los id ) se pueden repetir, y por lo tanto, devolvernos varios elementos, no s\u00f3lo uno. const items = document.getElementsByClassName(\"item\"); // [div, div, div] console.log(items[0]); // Primer item encontrado: <div class=\"item\"></div> console.log(items.length); // 3 Estos m\u00e9todos devuelven siempre un con todos los elementos encontrados que encajen con el criterio. En el caso de no encontrar ninguno, devolver\u00e1n un vac\u00edo: [] . Exactamente igual funcionan los m\u00e9todos getElementsByName(name) y getElementsByTagName(tag) , salvo que se encargan de buscar elementos HTML por su atributo name o por su propia etiqueta de elemento HTML, respectivamente: // Obtiene todos los elementos con atributo name=\"nickname\" const nicknames = document.getElementsByName(\"nickname\"); // Obtiene todos los elementos <div> de la p\u00e1gina const divs = document.getElementsByTagName(\"div\"); OJO : Aunque en esta documentaci\u00f3n se hace referencia a , realmente los m\u00e9todos de b\u00fasqueda generalmente devuelven un tipo de dato HTMLCollection o NodeList , que aunque act\u00faan de forma muy similar a un , no son arrays, y por lo tanto pueden carecer de algunos m\u00e9todos, como por ejemplo .forEach() . Recuerda que el primer m\u00e9todo tiene getElement en singular y el resto getElements en plural. Ten en cuenta ese detalle para no olvidarte que uno devuelve un s\u00f3lo elemento y el resto una lista de ellos.","title":"getElementsByClassName()"},{"location":"desarrollo/javascript/04-DOM/#metodos-moderno","text":"Aunque podemos utilizar los m\u00e9todos tradicionales que acabamos de ver, actualmente tenemos a nuestra disposici\u00f3n dos nuevos m\u00e9todos de b\u00fasqueda de elementos que son mucho m\u00e1s c\u00f3modos y pr\u00e1cticos si conocemos y dominamos los selectores CSS . Es el caso de los m\u00e9todos .querySelector() y .querySelectorAll() : M\u00e9todo de b\u00fasqueda Descripci\u00f3n .querySelector(sel) Busca el primer elemento que coincide con el selector CSS sel . Si no, . .querySelectorAll(sel) Busca todos los elementos que coinciden con el selector CSS sel . Si no, [] . Con estos dos m\u00e9todos podemos realizar todo lo que hac\u00edamos con los m\u00e9todos tradicionales mencionados anteriormente e incluso muchas m\u00e1s cosas ( en menos c\u00f3digo ), ya que son muy flexibles y potentes gracias a los selectores CSS .","title":"M\u00e9todos moderno"},{"location":"desarrollo/javascript/04-DOM/#queryselector","text":"El primero, .querySelector(selector) devuelve el primer elemento que encuentra que encaja con el selector CSS suministrado en selector . Al igual que su \u00abequivalente\u00bb .getElementById() , devuelve un solo elemento y en caso de no coincidir con ninguno, devuelve : const page = document.querySelector(\"#page\"); // <div id=\"page\"></div> const info = document.querySelector(\".main .info\"); // <div class=\"info\"></div> Lo interesante de este m\u00e9todo, es que al permitir suministrarle un selector CSS b\u00e1sico o incluso un selector CSS avanzado , se vuelve un sistema mucho m\u00e1s potente. El primer ejemplo es equivalente a utilizar un .getElementById() , s\u00f3lo que en la versi\u00f3n de .querySelector() indicamos por par\u00e1metro un , y en el primero le pasamos un simple . Observa que estamos indicando un # porque se trata de un id . En el segundo ejemplo, estamos recuperando el primer elemento con clase info que se encuentre dentro de otro elemento con clase main . Eso podr\u00eda realizarse con los m\u00e9todos tradicionales, pero ser\u00eda menos directo ya que tendr\u00edamos que realizar varias llamadas, con .querySelector() se hace directamente con s\u00f3lo una.","title":"querySelector()"},{"location":"desarrollo/javascript/04-DOM/#queryselectorall","text":"Por otro lado, el m\u00e9todo .querySelectorAll() realiza una b\u00fasqueda de elementos como lo hace el anterior, s\u00f3lo que como podremos intuir por ese All() , devuelve un con todos los elementos que coinciden con el CSS: // Obtiene todos los elementos con clase \"info\" const infos = document.querySelectorAll(\".info\"); // Obtiene todos los elementos con atributo name=\"nickname\" const nicknames = document.querySelectorAll('[name=\"nickname\"]'); // Obtiene todos los elementos <div> de la p\u00e1gina HTML const divs = document.querySelectorAll(\"div\"); En este caso, recuerda que .querySelectorAll() siempre nos devolver\u00e1 un de elementos. Depende de los elementos que encuentre mediante el , nos devolver\u00e1 un de 0 elementos o de 1 , 2 o m\u00e1s elementos. Al realizar una b\u00fasqueda de elementos y guardarlos en una variable, podemos realizar la b\u00fasqueda posteriormente sobre esa variable en lugar de hacerla sobre document . Esto permite realizar b\u00fasquedas acotadas por zonas, en lugar de realizarlo siempre sobre document , que buscar\u00e1 en todo el documento HTML.","title":"querySelectorAll()"},{"location":"desarrollo/javascript/04-DOM/#crear-elementos-en-el-dom","text":"Sobre todo si te encuentras en fase de aprendizaje, lo normal suele ser crear c\u00f3digo HTML desde un fichero HTML. Sin embargo, y sobre todo con el auge de las p\u00e1ginas SPA ( Single Page Application *) y los frameworks Javascript, esto ha cambiado bastante y es bastante frecuente crear c\u00f3digo HTML desde Javascript de forma din\u00e1mica. Esto tiene sus ventajas y sus desventajas. Un fichero .html siempre ser\u00e1 m\u00e1s sencillo, m\u00e1s \u00abest\u00e1tico\u00bb y m\u00e1s directo, ya que lo primero que analiza un navegador web es un fichero de marcado HTML. Por otro lado, un fichero .js es m\u00e1s complejo y menos directo, pero mucho m\u00e1s potente, \u00abdin\u00e1mico\u00bb y flexible, con menos limitaciones. En este art\u00edculo vamos a ver como podemos crear elementos HTML desde Javascript y aprovecharnos de la potencia de Javascript para hacer cosas que desde HTML, sin ayuda de Javascript, no podr\u00edamos realizar o costar\u00eda mucho m\u00e1s.","title":"Crear elementos en el DOM"},{"location":"desarrollo/javascript/04-DOM/#crear-elementos-html","text":"Existen una serie de m\u00e9todos para crear de forma eficiente diferentes elementos HTML o nodos, y que nos pueden convertir en una tarea muy sencilla el crear estructuras din\u00e1micas, mediante bucles o estructuras definidas: M\u00e9todos Descripci\u00f3n .createElement(tag, options) Crea y devuelve el elemento HTML definido por el tag . .createComment(text) Crea y devuelve un nodo de comentarios HTML <!-- text --> . .createTextNode(text) Crea y devuelve un nodo HTML con el texto text . .cloneNode(deep) Clona el nodo HTML y devuelve una copia. deep es false por defecto. .isConnected Indica si el nodo HTML est\u00e1 insertado en el documento HTML. Para empezar, nos centraremos principalmente en la primera, que es la que utilizamos para crear elementos HTML en el DOM.","title":"Crear elementos HTML"},{"location":"desarrollo/javascript/04-DOM/#el-metodo-createelement","text":"Mediante el m\u00e9todo .createElement() podemos crear un HTML en memoria ( \u00a1no estar\u00e1 insertado a\u00fan en nuestro documento HTML! ). Con dicho elemento almacenado en una variable, podremos modificar sus caracter\u00edsticas o contenido, para posteriormente insertarlo en una posici\u00f3n determinada del DOM o documento HTML. Vamos a centrarnos en el proceso de creaci\u00f3n del elemento , y en el pr\u00f3ximo cap\u00edtulo veremos el apartado de insertarlo en el DOM. El funcionamiento de .createElement() es muy sencillo: se trata de pasarle el nombre de la etiqueta tag a utilizar. const div = document.createElement(\"div\"); // Creamos un <div></div> const span = document.createElement(\"span\"); // Creamos un <span></span> const img = document.createElement(\"img\"); // Creamos un <img> De la misma forma, podemos crear comentarios HTML con createComment() o nodos de texto sin etiqueta HTML con createTextNode() , pas\u00e1ndole a ambos un con el texto en cuesti\u00f3n. En ambos, se devuelve un que podremos utilizar luego para insertar en el documento HTML: const comment = document.createComment(\"Comentario\"); // <!--Comentario--> const text = document.createTextNode(\"Hola\"); // Nodo de texto: 'hola' El m\u00e9todo createElement() tiene un par\u00e1metro opcional denominado options . Si se indica, ser\u00e1 un objeto con una propiedad is para definir un elemento personalizado en una modalidad menos utilizada. Se ver\u00e1 m\u00e1s adelante en el apartado de Web Components . Ten presente que en los ejemplos que hemos visto estamos creando los elementos en una constante, pero de momento no est\u00e1n a\u00f1adi\u00e9ndose al documento HTML , por lo que no aparecer\u00edan visualmente. M\u00e1s adelante veremos como a\u00f1adirlos.","title":"El m\u00e9todo createElement()"},{"location":"desarrollo/javascript/04-DOM/#el-metodo-clonenode","text":"Hay que tener mucho cuidado al crear y duplicar elementos HTML. Un error muy com\u00fan es asignar un elemento que tenemos en otra variable, pensando que estamos creando una copia ( cuando no es as\u00ed ): const div = document.createElement(\"div\"); div.textContent = \"Elemento 1\"; const div2 = div; // NO se est\u00e1 haciendo una copia div2.textContent = \"Elemento 2\"; div.textContent; // 'Elemento 2' Con esto, quiz\u00e1s pueda parecer que estamos duplicando un elemento para crearlo a imagen y semejanza del original. Sin embargo, lo que se hace es una referencia al elemento original, de modo que si se modifica el div2 , tambi\u00e9n se modifica el elemento original. Para evitar esto, lo ideal es utilizar el m\u00e9todo cloneNode() : const div = document.createElement(\"div\"); div.textContent = \"Elemento 1\"; const div2 = div.cloneNode(); // Ahora S\u00cd estamos clonando div2.textContent = \"Elemento 2\"; div.textContent; // 'Elemento 1' El m\u00e9todo cloneNode(deep) acepta un par\u00e1metro deep opcional, a false por defecto, para indicar el tipo de clonaci\u00f3n que se realizar\u00e1: Si es true , clonar\u00e1 tambi\u00e9n sus hijos, conocido como una clonaci\u00f3n profunda ( Deep Clone ). Si es false , no clonar\u00e1 sus hijos, conocido como una clonaci\u00f3n superficial ( Shallow Clone ).","title":"El m\u00e9todo cloneNode()"},{"location":"desarrollo/javascript/04-DOM/#la-propiedad-isconnected","text":"Por \u00faltimo, la propiedad isConnected nos indica si el nodo en cuesti\u00f3n est\u00e1 conectado al DOM, es decir, si est\u00e1 insertado en el documento HTML: Si es true , significa que el elemento est\u00e1 conectado al DOM. Si es false , significa que el elemento no est\u00e1 conectado al DOM. Hasta ahora, hemos creado elementos que no lo est\u00e1n ( permanecen s\u00f3lo en memoria ). En el cap\u00edtulo Insertar elementos en el DOM veremos como insertarlos en el documento HTML para que aparezca visualmente en la p\u00e1gina.","title":"La propiedad isConnected"},{"location":"desarrollo/javascript/04-DOM/#atributos-html-de-un-elemento","text":"Hasta ahora, hemos visto como crear elementos HTML con Javascript, pero no hemos visto como modificar los atributos HTML de dichas etiquetas creadas. En general, una vez tenemos un elemento sobre el que vamos a crear algunos atributos, lo m\u00e1s sencillo es asignarle valores como propiedades de objetos: const div = document.createElement(\"div\"); // <div></div> div.id = \"page\"; // <div id=\"page\"></div> div.className = \"data\"; // <div id=\"page\" class=\"data\"></div> div.style = \"color: red\"; // <div id=\"page\" class=\"data\" style=\"color: red\"></div> Sin embargo, en algunos casos esto se puede complicar ( como se ve en uno de los casos del ejemplo anterior ). Por ejemplo, la palabra class ( para crear clases ) o la palabra for ( para bucles ) son palabras reservadas de Javascript y no se podr\u00edan utilizar para crear atributos. Por ejemplo, si queremos establecer una clase, se debe utilizar la propiedad className . Es posible asignar a la propiedad className varias clases en un separadas por espacio. De esta forma se asignar\u00e1n m\u00faltiples clases. A\u00fan as\u00ed, recomendamos utilizar la propiedad classList que explicaremos m\u00e1s adelante en el cap\u00edtulo manipulaci\u00f3n de clases CSS . Aunque la forma anterior es la m\u00e1s r\u00e1pida, tenemos algunos m\u00e9todos para utilizar en un elemento HTML y a\u00f1adir, modificar o eliminar sus atributos: M\u00e9todos Descripci\u00f3n hasAttributes() Indica si el elemento tiene atributos HTML. hasAttribute(attr) Indica si el elemento tiene el atributo HTML attr . getAttributeNames() Devuelve un con los atributos del elemento. getAttribute(attr) Devuelve el valor del atributo attr del elemento o si no existe. removeAttribute(attr) Elimina el atributo attr del elemento. setAttribute(attr, value) A\u00f1ade o cambia el atributo attr al valor value . getAttributeNode(attr) Idem a getAttribute() pero devuelve el atributo como nodo . removeAttributeNode(attr) Idem a removeAttribute() pero devuelve el atributo como nodo . setAttributeNode(attr, value) Idem a setAttribute() pero devuelve el atributo como nodo . Estos m\u00e9todos son bastante autoexplicativos y f\u00e1ciles de entender, a\u00fan as\u00ed, vamos a ver unos ejemplos de uso donde podemos ver como funcionan: // Obtenemos <div id=\"page\" class=\"info data dark\" data-number=\"5\"></div> const div = document.querySelector(\"#page\"); div.hasAttribute(\"data-number\"); // true (data-number existe) div.hasAttributes(); // true (tiene 3 atributos) div.getAttributeNames(); // [\"id\", \"data-number\", \"class\"] div.getAttribute(\"id\"); // \"page\" div.removeAttribute(\"id\"); // <div class=\"info data dark\" data-number=\"5\"></div> div.setAttribute(\"id\", \"page\"); // (Vuelve a a\u00f1adirlo) Los tres \u00faltimos m\u00e9todos mencionados: getAttributeNode() , removeAttributeNode() y setAttributeNode() son versiones id\u00e9nticas a sus hom\u00f3nimos, s\u00f3lo que devuelven el afectado, \u00fatil si queremos guardarlo en una variable y seguir trabajando con \u00e9l. Recuerda que hasta ahora hemos visto como crear elementos y cambiar sus atributos, pero no los hemos insertado en el DOM o documento HTML, por lo que no los veremos visualmente en la p\u00e1gina. En el siguiente cap\u00edtulo abordaremos ese tema.","title":"Atributos HTML de un elemento"},{"location":"desarrollo/javascript/04-DOM/#insertar-elementos-en-el-dom","text":"En el cap\u00edtulo anterior hemos visto como crear elementos en el DOM , pero dichos elementos se creaban en memoria y los almacen\u00e1bamos en una variable o constante. No se conectaban al DOM o documento HTML de forma autom\u00e1tica, sino que debemos hacerlo manualmente, que es justo lo que veremos en este art\u00edculo: como insertar elementos en el DOM, as\u00ed como eliminarlos. En este art\u00edculo vamos a centrarnos en tres categor\u00edas: Reemplazar contenido de elementos en el DOM Insertar elementos en el DOM Eliminar elementos del DOM","title":"Insertar elementos en el DOM"},{"location":"desarrollo/javascript/04-DOM/#reemplazar-contenido","text":"Comenzaremos por la familia de propiedades siguientes, que enmarcamos dentro de la categor\u00eda de reemplazar contenido de elementos HTML. Se trata de una v\u00eda r\u00e1pida con la cu\u00e1l podemos a\u00f1adir ( o m\u00e1s bien, reemplazar ) el contenido de una etiqueta HTML. Las propiedades son las siguientes: Propiedades Descripci\u00f3n .nodeName Devuelve el nombre del nodo (etiqueta si es un elemento HTML). S\u00f3lo lectura. .textContent Devuelve el contenido de texto del elemento. Se puede asignar para modificar. .innerHTML Devuelve el contenido HTML del elemento. Se puede usar asignar para modificar. .outerHTML Idem a .innerHTML pero incluyendo el HTML del propio elemento HTML. .innerText Versi\u00f3n no est\u00e1ndar de .textContent de Internet Explorer con diferencias. Evitar . .outerText Versi\u00f3n no est\u00e1ndar de .textContent / .outerHTML de Internet Explorer. Evitar . La propiedad nodeName nos devuelve el nombre del todo, que en elementos HTML es interesante puesto que nos devuelve el nombre de la etiqueta en may\u00fasculas . Se trata de una propiedad de s\u00f3lo lectura, por lo cu\u00e1l no podemos modificarla, s\u00f3lo acceder a ella.","title":"Reemplazar contenido"},{"location":"desarrollo/javascript/04-DOM/#la-propiedad-textcontent","text":"La propiedad .textContent nos devuelve el contenido de texto de un elemento HTML. Es \u00fatil para obtener ( o modificar ) s\u00f3lo el texto dentro de un elemento, obviando el etiquetado HTML: const div = document.querySelector(\"div\"); // <div></div> div.textContent = \"Hola a todos\"; // <div>Hola a todos</div> div.textContent; // \"Hola a todos\" Observa que tambi\u00e9n podemos utilizarlo para reemplazar el contenido de texto , asign\u00e1ndolo como si fuera una variable o constante. En el caso de que el elemento tenga anidadas varias etiquetas HTML una dentro de otra, la propiedad .textContent se quedar\u00e1 s\u00f3lo con el contenido textual completo, como se puede ver en el siguiente ejemplo: // Obtenemos <div class=\"info\">Hola <strong>amigos</strong></div> const div = document.querySelector(\".info\"); div.textContent; // \"Hola amigos\"","title":"La propiedad textContent"},{"location":"desarrollo/javascript/04-DOM/#la-propiedad-innerhtml","text":"Por otro lado, la propiedad .innerHTML nos permite hacer lo mismo, pero interpretando el c\u00f3digo HTML indicado y renderizando sus elementos: const div = document.querySelector(\".info\"); // <div class=\"info\"></div> div.innerHTML = \"<strong>Importante</strong>\"; // Interpreta el HTML div.innerHTML; // \"<strong>Importante</strong>\" div.textContent; // \"Importante\" div.textContent = \"<strong>Importante</strong>\"; // No interpreta el HTML Observa que la diferencia principal entre .innerHTML y .textContent es que el primero renderiza e interpreta el marcado HTML, mientras que el segundo lo inserta como contenido de texto literalmente. Ten en cuenta que la propiedad .innerHTML comprueba y parsea el marcado HTML escrito ( corrigiendo si hay errores ) antes de realizar la asignaci\u00f3n. Por ejemplo, si en el ejemplo anterior nos olvidamos de escribir el cierre </strong> de la etiqueta, .innerHTML autom\u00e1ticamente lo cerrar\u00e1. Esto puede provocar algunas incongruencias si el c\u00f3digo es incorrecto o una disminuci\u00f3n de rendimiento en textos muy grandes que hay que preprocesar. Por otro lado, la propiedad .outerHTML es muy similar a .innerHTML . Mientras que esta \u00faltima devuelve el c\u00f3digo HTML del interior de un elemento HTML, .outerHTML devuelve tambi\u00e9n el c\u00f3digo HTML del propio elemento en cuesti\u00f3n. Esto puede ser muy \u00fatil para reemplazar un elemento HTML combin\u00e1ndolo con .innerHTML : const data = document.querySelector(\".data\"); data.innerHTML = \"<h1>Tema 1</h1>\"; data.textContent; // \"Tema 1\" data.innerHTML; // \"<h1>Tema 1</h1>\" data.outerHTML; // \"<div class=\"data\"><h1>Tema 1</h1></div>\" En este ejemplo se pueden observar las diferencias entre las propiedades .textContent ( contenido de texto ), .innerHTML ( contenido HTML ) y .outerHTML ( contenido y contenedor HTML ). Las propiedades .innerText y .outerText son propiedades no est\u00e1ndar de Internet Explorer. Se recomienda s\u00f3lo utilizarlas con motivos de fallbacks o para dar soporte a versiones antiguas de Internet Explorer. En su lugar deber\u00eda utilizarse .textContent .","title":"La propiedad innerHTML"},{"location":"desarrollo/javascript/04-DOM/#insertar-elementos","text":"A pesar de que los m\u00e9todos anteriores son suficientes para crear elementos y estructuras HTML complejas, s\u00f3lo son aconsejables para peque\u00f1os fragmentos de c\u00f3digo o texto, ya que en estructuras muy complejas ( con muchos elementos HTML ) la legibilidad del c\u00f3digo ser\u00eda menor y adem\u00e1s, el rendimiento podr\u00eda resentirse. Hemos aprendido a crear elementos HTML y sus atributos , pero a\u00fan no hemos visto como a\u00f1adirlos al documento HTML actual ( conectarlos al DOM ), operaci\u00f3n que se puede realizar de diferentes formas mediante los siguientes m\u00e9todos disponibles: M\u00e9todos Descripci\u00f3n .appendChild(node) A\u00f1ade como hijo el nodo node . Devuelve el nodo insertado. .insertAdjacentElement(pos, elem) Inserta el elemento elem en la posici\u00f3n pos . Si falla, . .insertAdjacentHTML(pos, str) Inserta el c\u00f3digo HTML str en la posici\u00f3n pos . .insertAdjacentText(pos, text) Inserta el texto text en la posici\u00f3n pos . .insertBefore(new, node) Inserta el nodo new antes de node y como hijo del nodo actual. De ellos, probablemente el m\u00e1s extendido es .appendChild() , no obstante, la familia de m\u00e9todos .insertAdjacent*() tambi\u00e9n tiene buen soporte en navegadores y puede usarse de forma segura en la actualidad.","title":"Insertar elementos"},{"location":"desarrollo/javascript/04-DOM/#el-metodo-appendchild","text":"Uno de los m\u00e9todos m\u00e1s comunes para a\u00f1adir un elemento HTML creado con Javascript es appendChild() . Como su propio nombre indica, este m\u00e9todo realiza un \u00abappend\u00bb , es decir, inserta el elemento como un hijo al final de todos los elementos hijos que existan. Es importante tener clara esta particularidad, porque aunque es lo m\u00e1s com\u00fan, no siempre querremos insertar el elemento en esa posici\u00f3n: const img = document.createElement(\"img\"); img.src = \"https://lenguajejs.com/assets/logo.svg\"; img.alt = \"Logo Javascript\"; document.body.appendChild(img); En este ejemplo podemos ver como creamos un elemento <img> que a\u00fan no est\u00e1 conectado al DOM. Posteriormente, a\u00f1adimos los atributos src y alt , obligatorios en una etiqueta de imagen. Por \u00faltimo, conectamos al DOM el elemento, utilizando el m\u00e9todo .appendChild() sobre document.body que no es m\u00e1s que una referencia a la etiqueta <body> del documento HTML. Veamos otro ejemplo: const div = document.createElement(\"div\"); div.textContent = \"Esto es un div insertado con JS.\"; const app = document.createElement(\"div\"); // <div></div> app.id = \"app\"; // <div id=\"app\"></div> app.appendChild(div); // <div id=\"app\"><div>Esto es un div insertado con JS</div></div> En este ejemplo, estamos creando dos elementos, e insertando uno dentro de otro. Sin embargo, a diferencia del anterior, el elemento app no est\u00e1 conectado a\u00fan al DOM, sino que lo tenemos aislado en esa variable, sin insertar en el documento. Esto ocurre porque app lo acabamos de crear, y en el ejemplo anterior usabamos document.body que es una referencia a un elemento que ya existe en el documento.","title":"El m\u00e9todo appendChild()"},{"location":"desarrollo/javascript/04-DOM/#los-metodos-insertadjacent","text":"Los m\u00e9todos de la familia insertAdjacent son bastante m\u00e1s vers\u00e1tiles que .appendChild() , ya que permiten muchas m\u00e1s posibilidades. Tenemos tres versiones diferentes: .insertAdjacentElement() donde insertamos un objeto .insertAdjacentHTML() donde insertamos c\u00f3digo HTML directamente ( similar a innerHTML ) .insertAdjacentText() donde no insertamos elementos HTML, sino un con texto En las tres versiones, debemos indicar por par\u00e1metro un pos como primer par\u00e1metro para indicar en que posici\u00f3n vamos a insertar el contenido. Hay 4 opciones posibles: beforebegin : El elemento se inserta antes de la etiqueta HTML de apertura. afterbegin : El elemento se inserta dentro de la etiqueta HTML, antes de su primer hijo . beforeend : El elemento se inserta dentro de la etiqueta HTML, despu\u00e9s de su \u00faltimo hijo . Es el equivalente a usar el m\u00e9todo .appendChild() . afterend : El elemento se inserta despu\u00e9s de la etiqueta HTML de cierre. Veamos algunos ejemplo aplicando cada uno de ellos con el m\u00e9todo .insertAdjacentElement() : const div = document.createElement(\"div\"); // <div></div> div.textContent = \"Ejemplo\"; // <div>Ejemplo</div> const app = document.querySelector(\"#app\"); // <div id=\"app\">App</div> app.insertAdjacentElement(\"beforebegin\", div); // Opci\u00f3n 1: <div>Ejemplo</div> <div id=\"app\">App</div> app.insertAdjacentElement(\"afterbegin\", div); // Opci\u00f3n 2: <div id=\"app\"> <div>Ejemplo</div> App</div> app.insertAdjacentElement(\"beforeend\", div); // Opci\u00f3n 3: <div id=\"app\">App <div>Ejemplo</div> </div> app.insertAdjacentElement(\"afterend\", div); // Opci\u00f3n 4: <div id=\"app\">App</div> <div>Ejemplo</div> Ten en cuenta que en el ejemplo muestro varias opciones alternativas , no lo que ocurrir\u00eda tras ejecutar las cuatro opciones una detr\u00e1s de otra. Por otro lado, notar que tenemos tres versiones en esta familia de m\u00e9todos, una que actua sobre elementos HTML ( la que hemos visto ), pero otras dos que actuan sobre c\u00f3digo HTML y sobre nodos de texto. Veamos un ejemplo de cada una: app.insertAdjacentElement(\"beforebegin\", div); // Opci\u00f3n 1: <div>Ejemplo</div> <div id=\"app\">App</div> app.insertAdjacentHTML(\"beforebegin\", '<p>Hola</p>'); // Opci\u00f3n 2: <p>Hola</p> <div id=\"app\">App</div> app.insertAdjacentText(\"beforebegin\", \"Hola a todos\"); // Opci\u00f3n 3: Hola a todos <div id=\"app\">App</div>","title":"Los m\u00e9todos insertAdjacent*()"},{"location":"desarrollo/javascript/04-DOM/#el-metodo-insertbefore","text":"Por \u00faltimo, el m\u00e9todo insertBefore(newnode, node) es un m\u00e9todo m\u00e1s espec\u00edfico y menos utilizado en el que se puede especificar exactamente el lugar a insertar un nodo. El par\u00e1metro newnode es el nodo a insertar, mientras que node puede ser: ; insertando newnode despu\u00e9s del \u00faltimo nodo hijo. Equivalente a .appendChild() . o ; insertando newnode antes de dicho node de referencia.","title":"El m\u00e9todo insertBefore()"},{"location":"desarrollo/javascript/04-DOM/#eliminar-elementos","text":"Al igual que podemos insertar o reemplazar elementos, tambi\u00e9n podemos eliminarlos. Ten en cuenta que al \u00abeliminar\u00bb un nodo o elemento HTML, lo que hacemos realmente no es borrarlo, sino desconectarlo del DOM o documento HTML , de modo que no est\u00e1n conectados, pero siguen existiendo.","title":"Eliminar elementos"},{"location":"desarrollo/javascript/04-DOM/#el-metodo-remove","text":"Probablemente, la forma m\u00e1s sencilla de eliminar nodos o elementos HTML es utilizando el m\u00e9todo .remove() sobre el nodo o etiqueta a eliminar: const div = document.querySelector(\".deleteme\"); div.isConnected; // true div.remove(); div.isConnected; // false En este caso, lo que hemos hecho es buscar el elemento HTML <div class=\"deleteme\"> en el documento HTML y desconectarlo de su elemento padre, de forma que dicho elemento pasa a no pertenecer al documento HTML. Sin embargo, existen algunos m\u00e9todos m\u00e1s para eliminar o reemplazar elementos: M\u00e9todos Descripci\u00f3n .remove() Elimina el propio nodo de su elemento padre. .removeChild(node) Elimina y devuelve el nodo hijo node . .replaceChild(new, old) Reemplaza el nodo hijo old por new . Devuelve old . El m\u00e9todo .remove() se encarga de desconectarse del DOM a s\u00ed mismo, mientras que el segundo m\u00e9todo, .removeChild() , desconecta el nodo o elemento HTML proporcionado. Por \u00faltimo, con el m\u00e9todo .replaceChild() se nos permite cambiar un nodo por otro.","title":"El m\u00e9todo remove()"},{"location":"desarrollo/javascript/04-DOM/#el-metodo-removechild","text":"En algunos casos, nos puede interesar eliminar un nodo hijo de un elemento. Para esas situaciones, podemos utilizar el m\u00e9todo .removeChild(node) donde node es el nodo hijo que queremos eliminar: const div = document.querySelector(\".item:nth-child(2)\"); // <div class=\"item\">2</div> document.body.removeChild(div); // Desconecta el segundo .item","title":"El m\u00e9todo removeChild()"},{"location":"desarrollo/javascript/04-DOM/#el-metodo-replacechild","text":"De la misma forma, el m\u00e9todo replaceChild(new, old) nos permite cambiar un nodo hijo old por un nuevo nodo hijo new . En ambos casos, el m\u00e9todo nos devuelve el nodo reemplazado: const div = document.querySelector(\".item:nth-child(2)\"); const newnode = document.createElement(\"div\"); newnode.textContent = \"DOS\"; document.body.replaceChild(newnode, div);","title":"El m\u00e9todo replaceChild()"},{"location":"desarrollo/javascript/04-DOM/#manipular-clases-css-classlist","text":"En CSS es muy com\u00fan utilizar m\u00faltiples clases CSS para asignar estilos relacionados dependiendo de lo que queramos. Para ello, basta hacer cosas como la que veremos a continuaci\u00f3n: <div class=\"element shine dark-theme\"></div> La clase element ser\u00eda la clase general que representa el elemento, y que tiene estilos fijos. La clase shine podr\u00eda tener una animaci\u00f3n CSS para aplicar un efecto de brillo. La clase dark-theme podr\u00eda tener los estilos de un elemento en un tema oscuro. Todo esto se utiliza sin problema de forma est\u00e1tica, pero cuando comenzamos a programar en Javascript, buscamos una forma din\u00e1mica , pr\u00e1ctica y c\u00f3moda de hacerlo desde Javascript, y es de lo que tratar\u00e1 este art\u00edculo.","title":"Manipular clases CSS (classList)"},{"location":"desarrollo/javascript/04-DOM/#la-propiedad-classname","text":"Javascript tiene a nuestra disposici\u00f3n una propiedad .className en todos los elementos HTML. Dicha propiedad contiene el valor del atributo HTML class , y puede tanto leerse como reemplazarse: Propiedad Descripci\u00f3n .className Acceso directo al valor del atributo HTML class . Tambi\u00e9n se puede asignar. .classList Objeto especial para manejar clases CSS. Contiene m\u00e9todos y propiedades de ayuda. La propiedad .className viene a ser la modalidad directa y r\u00e1pida de utilizar el getter .getAttribute(\"class\") y el setter .setAttribute(\"class\", v) . Veamos un ejemplo utilizando estas propiedades y m\u00e9todos y su equivalencia: const div = document.querySelector(\".element\"); // Obtener clases CSS div.className; // \"element shine dark-theme\" div.getAttribute(\"class\"); // \"element shine dark-theme\" // Modificar clases CSS div.className = \"elemento brillo tema-oscuro\"; div.setAttribute(\"class\", \"elemento brillo tema-oscuro\"); Trabajar con .className tiene una limitaci\u00f3n cuando trabajamos con m\u00faltiples clases CSS , y es que puedes querer realizar una manipulaci\u00f3n s\u00f3lo en una clase CSS concreta, dejando las dem\u00e1s intactas. En ese caso, modificar clases CSS mediante una asignaci\u00f3n .className se vuelve poco pr\u00e1ctico. Probablemente, la forma m\u00e1s interesante de manipular clases desde Javascript es mediante el objeto .classList .","title":"La propiedad className"},{"location":"desarrollo/javascript/04-DOM/#el-objeto-classlist","text":"Para trabajar m\u00e1s c\u00f3modamente, existe un sistema muy interesante para trabajar con clases: el objeto classList . Se trata de un objeto especial ( lista de clases ) que contiene una serie de ayudantes que permiten trabajar con las clases de forma m\u00e1s intuitiva y l\u00f3gica. Si accedemos a .classList , nos devolver\u00e1 un ( lista ) de clases CSS de dicho elemento. Pero adem\u00e1s, incorpora una serie de m\u00e9todos ayudantes que nos har\u00e1n muy sencillo trabajar con clases CSS: M\u00e9todo Descripci\u00f3n .classList Devuelve la lista de clases del elemento HTML. .classList.item(n) Devuelve la clase n\u00famero n del elemento HTML. .classList.add(c1, c2, ...) A\u00f1ade las clases c1 , c2 ... al elemento HTML. .classList.remove(c1, c2, ...) Elimina las clases c1 , c2 ... del elemento HTML. .classList.contains(clase) Indica si la clase existe en el elemento HTML. .classList.toggle(clase) Si la clase no existe, la a\u00f1ade. Si no, la elimina. .classList.toggle(clase, expr) Si expr es true , a\u00f1ade clase . Si no, la elimina. .classList.replace(old, new) Reemplaza la clase old por la clase new . OJO : Recuerda que el objeto .classList aunque parece que devuelve un no es un array, sino un elemento que act\u00faa como un array, por lo que puede carecer de algunos m\u00e9todos o propiedades concretos. Si quieres convertirlo a un array real, utiliza Array.from() . Veamos un ejemplo de uso de cada m\u00e9todo de ayuda. Supongamos que tenemos el siguiente elemento HTML en nuestro documento. Vamos a acceder a el y a utilizar el objeto .classList con dicho elemento: <div id=\"page\" class=\"info data dark\" data-number=\"5\"></div> Observa que dicho elemento HTML tiene: Un atributo id Tres clases CSS: info , data y dark Un metadato HTML data-number","title":"El objeto classList"},{"location":"desarrollo/javascript/04-DOM/#anadir-y-eliminar-clases-css","text":"Los m\u00e9todos classList.add() y classList.remove() permiten indicar una o m\u00faltiples clases CSS a a\u00f1adir o eliminar. Observa el siguiente c\u00f3digo donde se ilustra un ejemplo: const div = document.querySelector(\"#page\"); div.classList; // [\"info\", \"data\", \"dark\"] div.classList.add(\"uno\", \"dos\"); // No devuelve nada. div.classList; // [\"info\", \"data\", \"dark\", \"uno\", \"dos\"] div.classList.remove(\"uno\", \"dos\"); // No devuelve nada. div.classList; // [\"info\", \"data\", \"dark\"] En el caso de que se a\u00f1ada una clase CSS que ya exist\u00eda previamente, o que se elimine una clase CSS que no exist\u00eda, simplemente no ocurrir\u00e1 nada.","title":"A\u00f1adir y eliminar clases CSS"},{"location":"desarrollo/javascript/04-DOM/#conmutar-o-alternar-clases-css","text":"Un ayudante muy interesante es el del m\u00e9todo classList.toggle() , que lo que hace es a\u00f1adir o eliminar la clase CSS dependiendo de si ya exist\u00eda previamente. Es decir, a\u00f1ade la clase si no exist\u00eda previamente o elimina la clase si exist\u00eda previamente: const div = document.querySelector(\"#page\"); div.classList; // [\"info\", \"data\", \"dark\"] div.classList.toggle(\"info\"); // Como \"info\" existe, lo elimina. Devuelve \"false\" div.classList; // [\"data\", \"dark\"] div.classList.toggle(\"info\"); // Como \"info\" no existe, lo a\u00f1ade. Devuelve \"true\" div.classList; // [\"info\", \"data\", \"dark\"] Observa que .toggle() devuelve un que ser\u00e1 true o false dependiendo de si, tras la operaci\u00f3n, la clase sigue existiendo o no. Ten en cuenta que en .toggle() , al contrario que .add() o .remove() , s\u00f3lo se puede indicar una clase CSS por par\u00e1metro.","title":"Conmutar o alternar clases CSS"},{"location":"desarrollo/javascript/04-DOM/#otros-metodos-de-clases-css","text":"Por otro lado, tenemos otros m\u00e9todos menos utilizados, pero tambi\u00e9n muy interesantes: El m\u00e9todo .classList.item(n) nos devuelve la clase CSS ubicada en la posici\u00f3n n . El m\u00e9todo .classList.contains(name) nos devuelve si la clase CSS name existe o no. El m\u00e9todo .classList.replace(old, current) cambia la clase old por la clase current . Veamos un ejemplo: const div = document.querySelector(\"#page\"); div.classList; // [\"info\", \"data\", \"dark\"] div.classList.item(1); // 'data' div.classList.contains(\"info\"); // Devuelve `true` (existe la clase) div.classList.replace(\"dark\", \"light\"); // Devuelve `true` (se hizo el cambio) Con todos estos m\u00e9todos de ayuda, nos resultar\u00e1 mucho m\u00e1s sencillo manipular clases CSS desde Javascript en nuestro c\u00f3digo.","title":"Otros m\u00e9todos de clases CSS"},{"location":"desarrollo/javascript/04-DOM/#navegar-por-elementos-del-dom","text":"En algunas ocasiones en las que conocemos y controlamos perfectamente la estructura del c\u00f3digo HTML de la p\u00e1gina, nos puede resultar m\u00e1s c\u00f3modo tener a nuestra disposici\u00f3n una serie de propiedades para navegar por la jerarqu\u00eda de elementos HTML relacionados.","title":"Navegar por elementos del DOM"},{"location":"desarrollo/javascript/04-DOM/#navegar-a-traves-de-elementos","text":"Las propiedades que veremos a continuaci\u00f3n devuelven informaci\u00f3n de otros elementos relacionados con el elemento en cuesti\u00f3n. Propiedades de elementos HTML Descripci\u00f3n children Devuelve una lista de elementos HTML hijos. parentElement Devuelve el padre del elemento o si no tiene. firstElementChild Devuelve el primer elemento hijo. lastElementChild Devuelve el \u00faltimo elemento hijo. previousElementSibling Devuelve el elemento hermano anterior o si no tiene. nextElementSibling Devuelve el elemento hermano siguiente o si no tiene. En primer lugar, tenemos la propiedad children que nos ofrece un con una lista de elementos HTML hijos. Podr\u00edamos acceder a cualquier hijo utilizando los corchetes de array y seguir utilizando otras propiedades en el hijo seleccionado. La propiedad firstElementChild ser\u00eda un acceso r\u00e1pido a children[0] La propiedad lastElementChild ser\u00eda un acceso r\u00e1pido al \u00faltimo elemento hijo. Por \u00faltimo, tenemos las propiedades previousElementSibling y nextElementSibling que nos devuelven los elementos hermanos anteriores o posteriores, respectivamente. La propiedad parentElement nos devolver\u00eda el padre del elemento en cuesti\u00f3n. En el caso de no existir alguno de estos elementos, nos devolver\u00eda . Consideremos el siguiente documento HTML: <html> <body> <div id=\"app\"> <div class=\"header\"> <h1>Titular</h1> </div> <p>P\u00e1rrafo de descripci\u00f3n</p> <a href=\"/\">Enlace</a> </div> </body> </html> Si trabajamos bajo este documento HTML, y utilizamos el siguiente c\u00f3digo Javascript, podremos \u00abnavegar\u00bb por la jerarqu\u00eda de elementos, movi\u00e9ndonos entre elementos padre, hijo o hermanos: document.body.children.length; // 1 document.body.children; // <div id=\"app\"> document.body.parentElement; // <html> const app = document.querySelector(\"#app\"); app.children; // [div.header, p, a] app.firstElementChild; // <div class=\"header\"> app.lastElementChild; // <a href=\"/\"> const a = app.querySelector(\"a\"); a.previousElementSibling; // <p> a.nextElementSibling; // null Estas son las propiedades m\u00e1s habituales para navegar entre elementos HTML, sin embargo, tenemos otra modalidad un poco m\u00e1s detallada.","title":"Navegar a trav\u00e9s de elementos"},{"location":"desarrollo/javascript/04-DOM/#navegar-a-traves-de-nodos","text":"La primera tabla que hemos visto nos muestra una serie de propiedades cuando trabajamos con . Sin embargo, si queremos hilar m\u00e1s fino y trabajar a nivel de , podemos utilizar las siguientes propiedades, que son equivalentes a las anteriores: Propiedades de nodos HTML Descripci\u00f3n childNodes Devuelve una lista de nodos hijos. Incluye nodos de texto y comentarios. parentNode Devuelve el nodo padre del nodo o si no tiene. firstChild Devuelve el primer nodo hijo. lastChild Devuelve el \u00faltimo nodo hijo. previousSibling Devuelve el nodo hermano anterior o si no tiene. nextSibling Devuelve el nodo hermano siguiente o si no tiene. Estas propiedades suelen ser m\u00e1s interesantes cuando queremos trabajar sobre nodos de texto, ya que incluso los espacios en blanco entre elementos HTML influyen. Volvamos a trabajar sobre el documento HTML anterior, pero ahora utilizando este grupo de propiedades basadas en : document.body.childNodes.length; // 3 document.body.childNodes; // [text, div#app, text] document.body.parentNode; // <html> const app = document.querySelector(\"#app\"); app.childNodes; // [text, div.header, text, p, text, a, text] app.firstChild.textContent; // \" \" app.lastChild.textContent; // \" \" const a = app.querySelector(\"a\"); a.previousSibling; // #text a.nextSibling; // #text Con todo esto, ya tenemos suficientes herramientas para trabajar a bajo nivel con las etiquetas y nodos HTML de un documento HTML desde Javascript. Fuente: Lenguaje Javascript por Manz","title":"Navegar a trav\u00e9s de nodos"},{"location":"desarrollo/javascript/04-DOM/#_1","text":"","title":""},{"location":"desarrollo/javascript/05-asincronia/","text":"Asincron\u00eda \u00b6 \u00bfQu\u00e9 es la asincron\u00eda? \u00b6 La asincron\u00eda es uno de los conceptos principales que rige el mundo de Javascript. Cuando comenzamos a programar, normalmente realizamos tareas de forma s\u00edncrona , llevando a cabo tareas secuenciales que se ejecutan una detr\u00e1s de otra, de modo que el orden o flujo del programa es sencillo y f\u00e1cil de observar en el c\u00f3digo: primera_funcion(); // Tarea 1: Se ejecuta primero segunda_funcion(); // Tarea 2: Se ejecuta cuando termina primera_funcion() tercera_funcion(); // Tarea 3: Se ejecuta cuando termina segunda_funcion() Sin embargo, en el mundo de la programaci\u00f3n, tarde o temprano necesitaremos realizar operaciones as\u00edncronas , especialmente en ciertos lenguajes como Javascript, donde tenemos que realizar tareas que tienen que esperar a que ocurra un determinado suceso que no depende de nosotros, y reaccionar realizando otra tarea s\u00f3lo cuando dicho suceso ocurra. Lenguaje no bloqueante \u00b6 Cuando hablamos de Javascript, habitualmente nos referimos a \u00e9l como un lenguaje no bloqueante . Con esto queremos decir que las tareas que realizamos no se quedan bloqueadas esperando ser finalizadas, y por consiguiente, evitando proseguir con el resto de tareas. Imaginemos que la segunda_funcion() del ejemplo anterior realiza una tarea que depende de otro factor, como por ejemplo un click de rat\u00f3n del usuario. Si hablasemos de un lenguaje bloqueante , hasta que el usuario no haga click, Javascript no seguir\u00eda ejecutando las dem\u00e1s funciones, sino que se quedar\u00eda bloqueado esperando a que se terminase esa segunda tarea: Pero como Javascript es un lenguaje no bloqueante , lo que har\u00e1 es mover esa tarea a una lista de tareas pendientes a las que ir\u00e1 \u00abprest\u00e1ndole atenci\u00f3n\u00bb a medida que lo necesite, pudiendo continuar y retomar el resto de tareas a continuaci\u00f3n de la segunda. \u00bfQu\u00e9 es la asincron\u00eda? \u00b6 Pero esto no es todo. Ten en cuenta que pueden existir m\u00faltiples tareas as\u00edncronas, dichas tareas puede que terminen realizandose correctamente ( o puede que no ) y ciertas tareas pueden depender de otras, por lo que deben respetar un cierto orden. Adem\u00e1s, es muy habitual que no sepamos previamente cuanto tiempo va a tardar en terminar una tarea, por lo que necesitamos un mecanismo para controlar todos estos factores: las promesas , las cuales veremos algunos cap\u00edtulos m\u00e1s adelante. Ejemplos de tareas as\u00edncronas \u00b6 En Javascript no todas las tareas son as\u00edncronas, pero hay ciertas tareas que si lo son, y probablemente se entiendan mejor con ejemplos reales: Un fetch() a una URL para obtener un archivo .json . Un new Audio() de una URL con un .mp3 al que se hace .play() para reproducirlo. Una tarea programada con setTimeout() que se ejecutar\u00e1 en el futuro. Una comunicaci\u00f3n desde Javascript a la API del sintetizador de voz del navegador. Una comunicaci\u00f3n desde Javascript a la API de un sensor del smartphone. Todos estos ejemplos se realizan mediante tareas as\u00edncronas , ya que realizan un procedimiento que podr\u00eda bloquear la ejecuci\u00f3n del resto del programa al tardar mucho: la descarga de un fichero grande desde un servidor lento, una conexi\u00f3n a internet muy lenta, un dispositivo saturado a la hora de comunicarse con el sensor del m\u00f3vil, etc... \u00bfC\u00f3mo gestionar la asincron\u00eda? \u00b6 Teniendo en cuenta el punto anterior, debemos aprender a buscar mecanismos para dejar claro en nuestro c\u00f3digo Javascript, que ciertas tareas tienen que procesarse de forma as\u00edncrona para quedarse a la espera, y otras deben ejecutarse de forma s\u00edncrona. En Javascript existen varias formas de gestionar la asincron\u00eda , donde quiz\u00e1s las m\u00e1s populares son las siguientes ( que iremos viendo y profundizando en cada art\u00edculo de este tema ): M\u00e9todo Descripci\u00f3n Mediante callbacks Probablemente, la forma m\u00e1s cl\u00e1sica de gestionar la asincron\u00eda en Javascript. Mediante promesas Una forma m\u00e1s moderna y actual de gestionar la asincron\u00eda. Mediante async / await Seguimos con promesas, pero con async / await a\u00f1adimos m\u00e1s az\u00facar sint\u00e1ctico. Mediante top-level await Una variaci\u00f3n de la anterior, donde no es necesario usar async . Iremos viendo la implementaci\u00f3n de cada una de ellas en cada cap\u00edtulo de este tema, utilizando de base un ejemplo sencillo donde lanzamos un dado un n\u00famero concreto de veces, que explicaremos a continuaci\u00f3n. Ejemplo base \u00b6 Tenemos un array numbers , en el cu\u00e1l insertaremos n\u00fameros. Insertaremos la cantidad de n\u00fameros que figura en iterations . En cada iteraci\u00f3n se insertar\u00e1 un number , que habr\u00e1 sido generado con una simulaci\u00f3n del lanzamiento de un dado ( un n\u00famero aleatorio del 1 al 6 ). En el caso de obtener un 6 , paramos y rompemos el bucle: const iterations = 10; const numbers = []; for (let i = 0; i < iterations; i++) { const number = 1 + Math.floor(Math.random() * 6); numbers.push(number); if (number === 6) { console.log(\"ERROR\"); break; } } console.log(numbers); Al terminar este fragmento de c\u00f3digo, tendremos un array numbers que contendr\u00e1 todos los n\u00fameros obtenidos en los lanzamientos de los dados, es decir, 10 n\u00fameros si no hemos obtenido ning\u00fan 6 . Si hemos obtenido un 6 puede que tengamos menos n\u00fameros, debido a que se rompe el bucle tras insertarlo. Ten en cuenta que este ejemplo es una tarea s\u00edncrona ( a\u00fan no existe asincron\u00eda ). Simplemente estamos explicando el ejemplo que usaremos de base en los siguientes cap\u00edtulos del tema para controlar asincron\u00eda. Quiz\u00e1s lo ideal ser\u00eda que cada lanzamiento del lado tardase un tiempo concreto en dar la respuesta, pero no se ha introducido ese retardo para simplificar los ejemplos de c\u00f3digo. Funciones callbacks \u00b6 Los callbacks ( a veces denominados funciones de retrollamada o funciones callback ) no son m\u00e1s que un tipo de funciones que se pasan por par\u00e1metro a otras funciones. El objetivo de esto es tener una forma m\u00e1s legible de escribir funciones, m\u00e1s c\u00f3moda y flexible para reutilizarlas, y adem\u00e1s entra bastante en consonancia con el concepto de asincron\u00eda de Javascript, como veremos m\u00e1s adelante. Ten en cuenta que actualmente, controlar la asincron\u00eda s\u00f3lo mediante callbacks puede ser una pr\u00e1ctica obsoleta. Es preferible utilizar promesas, que generalmente es m\u00e1s adecuado. \u00bfQu\u00e9 es un callback? \u00b6 Como hemos dicho, las funciones callback no son m\u00e1s que un tipo de funciones que se pasan por par\u00e1metro a otras funciones. Adem\u00e1s, los par\u00e1metros de dichas funciones toman un valor especial en el contexto del interior de la funci\u00f3n. Pero veamos un ejemplo. Imaginemos el siguiente bucle tradicional para recorrer un : const list = [\"A\", \"B\", \"C\"]; for (let i = 0; i < list.length; i++) { console.log(\"i=\", i, \" list=\", list[i]); } En i tenemos la posici\u00f3n del array que estamos recorriendo ( va de 0 a 2 ) y con list[i] accedemos a la posici\u00f3n del array para obtener el elemento, es decir, desde A hasta C . Ahora veamos, como podemos hacer este mismo bucle utilizando el m\u00e9todo forEach() del al cu\u00e1l le pasamos una funci\u00f3n callback: list.forEach(function(e,i) { console.log(\"i=\", i, \"list=\", e); }); Esto se puede reescribir como: [\"A\", \"B\", \"C\"].forEach((e,i) => console.log(\"i=\", i, \"list=\", e)); Lo importante de este ejemplo es que se vea que la funci\u00f3n callback que le hemos pasando a forEach() se va a ejecutar por cada uno de los elementos del array, y en cada iteraci\u00f3n de dicha funci\u00f3n callback , los par\u00e1metros e , i van a tener un valor especial: e es el elemento del array i es el \u00edndice ( posici\u00f3n ) del array Callbacks en Javascript \u00b6 Una vez entendido esto, vamos a profundizar un poco con las funciones callbacks utilizadas para realizar tareas as\u00edncronas. Probablemente, el caso m\u00e1s f\u00e1cil de entender es utilizar un temporizador mediante la funci\u00f3n setTimeout(``callback, time) . Dicha funci\u00f3n nos exige dos par\u00e1metros : La funci\u00f3n callback a ejecutar El tiempo time que esperar\u00e1 antes de ejecutarla As\u00ed pues, el ejemplo ser\u00eda el siguiente: setTimeout(function() { console.log(\"He ejecutado la funci\u00f3n\"); }, 2000); Simplemente, le decimos a setTimeout() que ejecute la funci\u00f3n callback que le hemos pasado por primer par\u00e1metro cuando transcurran 2000 milisegundos ( es decir, 2 segundos ). Utilizando arrow functions se puede simplificar el callback y hacer mucho m\u00e1s \u00abfancy\u00bb y legible: setTimeout(() => console.log(\"He ejecutado la funci\u00f3n\"), 2000); Si lo prefieres y lo ves m\u00e1s claro ( no suele ser habitual en c\u00f3digo Javascript, pero cuando se empieza suele resultar m\u00e1s f\u00e1cil entenderlo ) podemos guardar el callback en una constante: const action = () => console.log(\"He ejecutado la funci\u00f3n\"); setTimeout(action, 2000); En cualquiera de los casos, lo importante es darse cuenta que estamos usando una funci\u00f3n callback para pas\u00e1rsela a setTimeout() , que es otra funci\u00f3n. En este caso, se trata de \u00abprogramar\u00bb un suceso que ocurrir\u00e1 en un momento conocido del futuro, pero muchas veces desconoceremos cuando se producir\u00e1 ( o incluso si se llegar\u00e1 a producir ). Si probamos el c\u00f3digo que ver\u00e1s a continuaci\u00f3n, comprobar\u00e1s que el segundo console.log() se ejecutar\u00e1 antes que el primero, dentro del setTimeout() , mostrando primero C\u00f3digo s\u00edncrono y luego C\u00f3digo as\u00edncrono en la consola del navegador: setTimeout(() => console.log(\"C\u00f3digo as\u00edncrono.\"), 2000); console.log(\"C\u00f3digo s\u00edncrono.\"); El \u00faltimo console.log del c\u00f3digo se ejecuta primero ( forma parte del flujo principal de ejecuci\u00f3n del programa ). El setTimeout() que figura en una l\u00ednea anterior, aunque se ejecuta antes, pone en espera a la funci\u00f3n callback, que se ejecutar\u00e1 cuando se cumpla una cierta condici\u00f3n ( transcurran 2 segundos desde ese momento ). Esto puede llegar a sorprender a desarrolladores que llegan de otros lenguajes considerados bloqueantes ; Javascript sin embargo se considera un lenguaje as\u00edncrono y no bloqueante . \u00bfQu\u00e9 significa esto? Al ejecutar la l\u00ednea del setTimeout() , el programa no se queda bloqueado esperando a que terminen los 2 segundos y se ejecute la funci\u00f3n callback, sino que contin\u00faa con el flujo general del programa para volver m\u00e1s adelante cuando sea necesario a ejecutar el callback , aprovechando as\u00ed mejor el tiempo y realizando tareas de forma as\u00edncrona . Asincron\u00eda con callbacks \u00b6 Las funciones callback pueden utilizarse como un primer intento de manejar la asincron\u00eda en un programa. De hecho, eran muy utilizadas en la \u00e9poca dorada de jQuery , donde muchas funciones o librer\u00edas ten\u00edan una estructura similar a esta ( en jQuery se usaba algo similar ): function doTask(number, callback) { /* C\u00f3digo de la funci\u00f3n */ } doTask(42, function(err, result) { /* Trabajamos con err o result seg\u00fan nos interese */ }); Observa que doTask() es la funci\u00f3n que realiza la tarea en cuesti\u00f3n. Puede tener los par\u00e1metros que se consideren adecuados, como cualquier otra funci\u00f3n, la diferencia es que establecemos un callback que usaremos para controlar lo que se debe hacer. M\u00e1s adelante, llamamos a la funci\u00f3n doTask() y en su par\u00e1metro callback pasamos una funci\u00f3n con dos par\u00e1metros; err y result . El primero de ellos, err , utilizado para controlar un error y el segundo de ellos, result , utilizado para manejar los valores devueltos. Vamos a utilizar el ejemplo del lanzamiento de 10 dados que explicamos en el primer cap\u00edtulo de Asincron\u00eda, para adaptarlo a funciones callbacks. En primer lugar, veamos la implementaci\u00f3n de la funci\u00f3n doTask : /* Implementaci\u00f3n con callbacks */ const doTask = (iterations, callback) => { const numbers = []; for (let i = 0; i < iterations; i++) { const number = 1 + Math.floor(Math.random() * 6); numbers.push(number); if (number === 6) { /* Error, se ha sacado un 6 */ callback({ error: true, message: \"Se ha sacado un 6\" }); return; } } /* Termina bucle y no se ha sacado 6 */ return callback(null, { error: false, value: numbers }); } Como se puede ver, estamos utilizando arrow functions para definir la funci\u00f3n doTask() . Le pasamos un par\u00e1metro iterations que simplemente indica el n\u00famero de iteraciones que tendr\u00e1 el bucle ( n\u00famero de lanzamientos del dado ). Por otro lado, el segundo par\u00e1metro es nuestro callback , que recordemos que es una funci\u00f3n, por lo que podremos ejecutarla en momentos concretos de nuestro c\u00f3digo. Lo hacemos en dos ocasiones: En el if cuando number es 6 ( detectamos como error cuando obtenemos un 6 ). Le pasamos un objeto por par\u00e1metro que contiene un error y message , el mensaje de error. Tras el for , con dos par\u00e1metros. El primero , ya que en este caso no hay error. El segundo par\u00e1metro un objeto que contiene un campo value con el array de resultados. Teniendo claro esto, veamos la llamada a la funci\u00f3n doTask() , donde le pasamos esa funci\u00f3n callback e implementamos el funcionamiento, que en nuestro caso ser\u00e1n dos simples console.error() y console.log() : doTask(10, function(err, result) { if (err) { console.error(\"Se ha sacado un \", err.message); return; } console.log(\"Tiradas correctas: \", result.value); }); Esto es una forma cl\u00e1sica donde utilizamos una funci\u00f3n callback para gestionar la asincronia y facilitar la reutilizaci\u00f3n, pudiendo reutilizar la funci\u00f3n con la l\u00f3gica, aplicando diferentes funciones callback seg\u00fan nos interese. Observa que aunque en este ejemplo se ha utilizado un par\u00e1metro err y otro result en el callback para gestionar un objeto de error y un objeto de resultados, esto puede modificarse a gusto del desarrollador, aunque lo habitual suele ser este esquema. Desventajas de los callbacks \u00b6 A pesar de ser una forma flexible y potente de controlar la asincron\u00eda, que permite realizar m\u00faltiples posibilidades, las funciones callbacks tienen ciertas desventajas evidentes. En primer lugar, el c\u00f3digo creado con las funciones es algo ca\u00f3tico y ( quiz\u00e1s subjetivamente ) algo feo. Por ejemplo, el tener que pasar un por par\u00e1metros en algunas funciones, no es demasiado elegante. Pero sobre todo, uno de los problemas evidentes viene a la hora de tener que gestionar la asincron\u00eda varias veces en una misma funci\u00f3n, donde al introducir varias funciones con callbacks en su interior, conseguimos una estructura anidada similar a la siguiente: La forma triangular que produce es conocida como Callback Hell o Pyramid of Doom , debido a su forma, resultando un c\u00f3digo muy poco elegante que se puede complicar demasiado de cara a la legibilidad. Es cuando entran en juego las promesas , que veremos en el siguiente cap\u00edtulo. \u00bfQu\u00e9 son las promesas? \u00b6 Las promesas son un concepto para resolver el problema de asincron\u00eda de una forma mucho m\u00e1s elegante y pr\u00e1ctica que, por ejemplo, utilizando funciones callbacks directamente. Como su propio nombre indica, una promesa es algo que, en principio pensamos que se cumplir\u00e1, pero en el futuro pueden ocurrir varias cosas: La promesa se cumple ( promesa resuelta ) La promesa no se cumple ( promesa se rechaza ) La promesa se queda en un estado incierto indefinidamente ( promesa pendiente ) Con estas sencillas bases, podemos entender el funcionamiento de una promesa en Javascript. Antes de empezar, tambi\u00e9n debemos tener claro que existen dos partes importantes de las promesas: como consumirlas ( utilizar promesas ) y como crearlas ( preparar una funci\u00f3n para que use promesas y se puedan consumir ). Promesas en Javascript \u00b6 Las promesas en Javascript se representan a trav\u00e9s de un , y cada promesa estar\u00e1 en un estado concreto: pendiente , aceptada o rechazada . Adem\u00e1s, cada promesa tiene los siguientes m\u00e9todos, que podremos utilizar para utilizarla: M\u00e9todos Descripci\u00f3n .then(``resolve) Ejecuta la funci\u00f3n callback resolve cuando la promesa se cumple. .catch(``reject) Ejecuta la funci\u00f3n callback reject cuando la promesa se rechaza. .then(``resolve,``reject) M\u00e9todo equivalente a las dos anteriores en el mismo .then() . .finally(``end) Ejecuta la funci\u00f3n callback end tanto si se cumple como si se rechaza. M\u00e1s adelante veremos, que a diferencia del apartado anterior donde se utilizaban solamente funciones callback, en este enfoque se tiende a no anidar promesas , evitando as\u00ed el famoso Callback Hell , y haciendo el c\u00f3digo mucho m\u00e1s legible. Consumir una promesa \u00b6 La forma general de consumir una promesa es utilizando el .then() con un s\u00f3lo par\u00e1metro, puesto que muchas veces lo \u00fanico que nos interesa es realizar una acci\u00f3n cuando la promesa se cumpla: fetch(\"/robots.txt\").then(function(response) { /* C\u00f3digo a realizar cuando se cumpla la promesa */ }); Lo que vemos en el ejemplo anterior es el uso de la funci\u00f3n fetch() , la cu\u00e1l devuelve una promesa que se cumple cuando obtiene respuesta de la petici\u00f3n realizada. De esta forma, estar\u00edamos preparando ( de una forma legible ) la forma de actuar de nuestro c\u00f3digo a la respuesta de la petici\u00f3n realizada, todo ello de forma as\u00edncrona. Recuerda que podemos hacer uso del m\u00e9todo .catch() para actuar cuando se rechaza una promesa: fetch(\"/robots.txt\") .then(function(response) { /* C\u00f3digo a realizar cuando se cumpla la promesa */ }) .catch(function(error) { /* C\u00f3digo a realizar cuando se rechaza la promesa */ }); Observa como hemos indentado los m\u00e9todos .then() y .catch() , ya que se suele hacer as\u00ed para que sea mucho m\u00e1s legible para el. Adem\u00e1s, se pueden encadenar varios .then() si se siguen generando promesas y se devuelven con un return : fetch(\"/robots.txt\") .then(response => { return response.text(); // Devuelve una promesa }) .then(data => { console.log(data); }) .catch(error => { /* C\u00f3digo a realizar cuando se rechaza la promesa */ }); No olvides indicar el return para poder encadenar las siguientes promesas con .then() . Tras un .catch() tambi\u00e9n es posible encadenar .then() para continuar procesando promesas. De hecho, usando arrow functions se puede mejorar a\u00fan m\u00e1s la legibilidad de este c\u00f3digo, recordando que cuando s\u00f3lo tenemos una sentencia en el cuerpo de la arrow function hay un return impl\u00edcito: fetch(\"/robots.txt\") .then(response => response.text()) .then(data => console.log(data)) .finally(() => console.log(\"Terminado.\")) .catch(error => console.error(data)); Observese adem\u00e1s que hemos a\u00f1adido el m\u00e9todo .finally() para a\u00f1adir una funci\u00f3n callback que se ejecutar\u00e1 tanto si la promesa se cumple o se rechaza , lo que nos ahorrar\u00e1 tener que repetir la funci\u00f3n en el .then() como en el .catch() . En todo este apartado hemos visto como utilizar o consumir una promesa haciendo uso de .then() , que es lo que en la mayor\u00eda de los casos necesitaremos. Sin embargo, vamos a ver en el siguiente apartado como crear o implementar las promesas para su posterior consumo. Asincron\u00eda con promesas \u00b6 Vamos a implementar el ejercicio base que hemos comentado en el primer cap\u00edtulo de este tema utilizando promesas . Observa que lo primero que haremos es crear un nuevo objeto que \u00abenvuelve\u00bb toda la funci\u00f3n de la tarea doTask() . Al new Promise() se le pasa por par\u00e1metro una funci\u00f3n con dos callbacks, el primero resolve el que utilizaremos cuando se cumpla la promesa, y el segundo reject cuando se rechace: /* Implementaci\u00f3n con promesas */ const doTask = (iterations) => new Promise((resolve, reject) => { const numbers = []; for (let i = 0; i < iterations; i++) { const number = 1 + Math.floor(Math.random() * 6); numbers.push(number); if (number === 6) { reject({ error: true, message: \"Se ha sacado un 6\" }); } } resolve({ error: false, value: numbers }); }); Como ves, se trata de una implementaci\u00f3n muy similar a los callbacks que vimos en el apartado anterior, pero utilizan una nativa para poder luego consumirla c\u00f3modamente: doTask(10) .then(result => console.log(\"Tiradas correctas: \", result.value)) .catch(err => console.error(\"Se ha sacado un \", err.message)); Imagina el caso de que cada lanzamiento del dado ( la parte donde genera el n\u00famero aleatorio ) fuera un proceso m\u00e1s costoso que tardara un tiempo considerable , quiz\u00e1s de esa forma se vea m\u00e1s clara la necesidad de una tarea as\u00edncrona, controlada con promesas. En el siguiente cap\u00edtulo veremos como trabajar con m\u00faltiples promesas y hacer acciones compuestas con varias de ellas. Si el ejemplo anterior te resulta demasiado cr\u00edptico por las funciones resolve y reject , es muy probable que echar un vistazo al tema de las funciones callback te aclare muchos detalles. Promesas en grupo (Promise API) \u00b6 Ahora que sabemos \u00bfQu\u00e9 son las promesas? , para qu\u00e9 y como se usan, podemos profundizar y aprender m\u00e1s sobre la API Promise nativa de Javascript, mediante la cu\u00e1l podemos realizar operaciones con grupos de promesas, tanto independientes como dependientes entre s\u00ed. Por norma general, las tareas as\u00edncronas no sabemos cuanto tardar\u00e1n en responder y/o procesarse, por lo que muchas veces el orden en que se resuelvan no ser\u00e1 el mismo. Esto en algunos casos no nos importar\u00e1, pero en otros s\u00ed, por lo que hay que tenerlo en cuenta. API de las promesas \u00b6 El objeto Promise de Javascript tiene varios m\u00e9todos est\u00e1ticos que podemos utilizar en nuestro c\u00f3digo. Todos devuelven una promesa y son los que veremos en la siguiente tabla: M\u00e9todos Descripci\u00f3n Promise.all(``list) Acepta s\u00f3lo si todas las promesas del se cumplen. Promise.allSettled(``list) Acepta s\u00f3lo si todas las promesas del se cumplen o rechazan. Promise.any(``list) Acepta con el valor de la primera promesa del que se cumpla. Promise.race(``list) Acepta o rechaza dependiendo de la primera promesa que se procese. Promise.resolve(``value) Devuelve un valor envuelto en una promesa que se cumple directamente. Promise.reject(``value) Devuelve un valor envuelto en una promesa que se rechaza directamente. En los siguientes ejemplos, vamos a utilizar la funci\u00f3n fetch() para realizar varias peticiones y descargar varios archivos diferentes que necesitaremos para nuestras tareas. Promise.all() \u00b6 El m\u00e9todo Promises.all() funciona como un \u00ab todo o nada \u00bb: devuelve una promesa que se cumple cuando todas las promesas del se cumplen. Si alguna de ellas se rechaza, Promise.all() tambi\u00e9n lo hace. En nuestro ejemplo, cada uno de los fetch() tendr\u00e1 su propia promesa y s\u00f3lo cuando se hayan descargado los tres archivos de cada petici\u00f3n se cumplir\u00e1 la promesa del Promise.all() : const p1 = fetch(\"/robots.txt\"); const p2 = fetch(\"/index.css\"); const p3 = fetch(\"/index.js\"); Promise.all([p1, p2, p3]) .then(responses => { responses.forEach(response => { console.log(response.status, response.url); }) }); A Promise.all() le pasamos un con las promesas individuales. Cuando todas y cada una de esas promesas se cumplan favorablemente, entonces se ejecutar\u00e1 la funci\u00f3n callback de su .then() . En el caso de que alguna se rechace, no se llegar\u00e1 a ejecutar. Promise.allSettled() \u00b6 El m\u00e9todo Promises.allSettled() funciona como un \u00ab todas procesadas \u00bb: devuelve una promesa que se cumple cuando todas las promesas del se hayan procesado, independientemente de que se hayan cumplido o rechazado. const p1 = fetch(\"/robots.txt\"); const p2 = fetch(\"https://google.com/index.css\"); const p3 = fetch(\"/index.js\"); Promise.allSettled([p1, p2, p3]) .then(responses => { responses.forEach(response => { console.log(response.status, response); }) }); Esta promesa nos devuelve un campo status donde nos indica si cada promesa individual ha sido cumplida o rechazada, y un campo value con los valores devueltos por la promesa. En este caso, obtendremos que la primera y \u00faltima promesa se resuelven ( fulfilled ), mientras que la segunda nos da un error de CORS y se rechaza ( rejected ). Promise.any() \u00b6 El m\u00e9todo Promise.any() funciona como \u00ab la primera que se cumpla \u00bb: Devuelve una promesa con el valor de la primera promesa individual del que se cumpla. Si todas las promesas se rechazan, entonces devuelve una promesa rechazada. const p1 = fetch(\"/robots.txt\"); const p2 = fetch(\"/index.css\"); const p3 = fetch(\"/index.js\"); Promise.any([p1, p2, p3]) .then(response => console.log(response.status, response.url)); Como vemos, Promise.any() devolver\u00e1 una respuesta de la primera promesa cumplida. Promise.race() \u00b6 El m\u00e9todo Promise.race() funciona como una \u00ab la primera que se procese \u00bb: la primera promesa del que sea procesada, independientemente de que se haya cumplido o rechazado, determinar\u00e1 la devoluci\u00f3n de la promesa del Promise.race() . Si se cumple, devuelve una promesa cumplida, en caso negativo, devuelve una rechazada. const p1 = fetch(\"/robots.txt\"); const p2 = fetch(\"/index.css\"); const p3 = fetch(\"/index.js\"); Promise.race([p1, p2, p3]) .then(response => console.log(response.status, response.url)); De forma muy similar a la anterior, Promise.race() devolver\u00e1 la promesa que se resuelva primero, ya sea cumpli\u00e9ndose o rechaz\u00e1ndose. Promise.resolve() y Promise.reject() \u00b6 Mediante los m\u00e9todos est\u00e1ticos Promise.resolve() y Promise.reject() podemos devolver una promesa cumplida o rechazada respectivamente sin necesidad de crear una promesa con new Promise() . Esto puede ser interesante en algunos casos, aunque rara vez solemos utilizarlo hoy en d\u00eda. const doTask = () => { const number = 1 + Math.floor(Math.random() * 6); return (number % 2 === 0) ? Promise.resolve(number) : Promise.reject(number); } Observa que en este caso devolvemos una promesa que se cumple cuando el n\u00famero generado es par y se rechaza cuando es impar. Sin embargo, ten en cuenta que en problema en este caso es que la promesa no \u00abenvuelve\u00bb toda la funci\u00f3n, por lo que si la tarea tardase alg\u00fan tiempo en generar el n\u00famero, no podr\u00edamos utilizar el .then() para consumir la promesa. Estas funciones est\u00e1ticas se suelen utilizar en muy pocos casos, para mantener cierta compatibilidad en funciones que se espera que devuelvan una promesa. Async/Await \u00b6 En se introducen las palabras clave async / await , que no son m\u00e1s que una forma de az\u00facar sint\u00e1ctico para gestionar las promesas de una forma m\u00e1s sencilla. Con async / await seguimos utilizando promesas, pero abandonamos el modelo de encadenamiento de .then() para utilizar uno en el que trabajamos de forma m\u00e1s tradicional. La palabra clave async \u00b6 En primer lugar, tenemos la palabra clave async . Esta palabra clave se colocar\u00e1 previamente a function , para definirla as\u00ed como una funci\u00f3n as\u00edncrona , el resto de la funci\u00f3n no cambia: async function funcion_asincrona() { return 42; } En el caso de que utilicemos arrow function , se definir\u00eda como vemos a continuaci\u00f3n, colocando el async justo antes de los par\u00e1metros de la arrow function: const funcion_asincrona = async () => 42; Al ejecutar la funci\u00f3n veremos que ya nos devuelve una que ha sido cumplida, con el valor devuelto en la funci\u00f3n ( en este caso, 42 ). De hecho, podr\u00edamos utilizar un .then() para manejar la promesa: funcion_asincrona().then(value => { console.log(\"El resultado devuelto es: \", value); }); Sin embargo, veremos que lo que se suele hacer junto a async es utilizar la palabra clave await , que es donde reside lo interesante de utilizar este enfoque. La palabra clave await \u00b6 Cualquier funci\u00f3n definida con async , o lo que es lo mismo, cualquier puede utilizarse junto a la palabra clave await para manejarla. Lo que hace await es esperar a que se resuelva la promesa, mientras permite continuar ejecutando otras tareas que puedan realizarse: const funcion_asincrona = async () => 42; const value = funcion_asincrona(); // Promise { <fulfilled>: 42 } const asyncValue = await funcion_asincrona(); // 42 Observa que en el caso de value , que se ejecuta sin await , lo que obtenemos es el valor devuelto por la funci\u00f3n, pero \u00abenvuelto\u00bb en una promesa que deber\u00e1 utilizarse con .then() para manejarse. Sin embargo, en asyncValue estamos obteniendo un tipo de dato , guardando el valor directamente ya procesado, ya que await espera a que se resuelva la promesa de forma as\u00edncrona y guarda el valor. Esto hace que la forma de trabajar con async / await , aunque se sigue trabajando exactamente igual con promesas, sea mucho m\u00e1s f\u00e1cil y trivial para usuarios que no est\u00e9n acostumbrados a las promesas y a la asincron\u00eda en general, ya que el c\u00f3digo \u00abparece\u00bb s\u00edncrono. Asincron\u00eda con async/await \u00b6 Volvamos al ejemplo que hemos visto en los anteriores cap\u00edtulos. Recordemos que la funci\u00f3n doTask() realiza 10 lanzamientos de un dado y nos devuelve los resultados obtenidos o detiene la tarea si se obtiene un 6. La implementaci\u00f3n de la funci\u00f3n sufre algunos cambios, simplific\u00e1ndose considerablemente. En primer lugar, a\u00f1adimos la palabra clave async antes de los par\u00e1metros de la arrow function . En segundo lugar, desaparece cualquier menci\u00f3n a promesas, se devuelven directamente los objetos, ya que al ser una funci\u00f3n async se devolver\u00e1 todo envuelto en una : const doTask = async (iterations) => { const numbers = []; for (let i = 0; i < iterations; i++) { const number = 1 + Math.floor(Math.random() * 6); numbers.push(number); if (number === 6) { return { error: true, message: \"Se ha sacado un 6\" }; } } return { error: false, value: numbers }; } Pero donde se introducen cambios considerables es a la hora de consumir las promesas con async / await . No tendr\u00edamos que utilizar .then() , sino que podemos simplemente utilizar await para esperar la resoluci\u00f3n de la promesa, obteniendo el valor directamente: const resultado = await doTask(10); // Devuelve un objeto, no una promesa Recuerda que en el caso de querer controlar errores o promesas rechazadas, siempre podr\u00e1s utilizar bloques try / catch . Top-level await \u00b6 En principio, el comportamiento de await solo permite que se utilice en el interior de funciones declaradas como async . Por lo que, si el ejemplo anterior lo ejecutamos en una consola de Javascript, funcionar\u00e1 correctamente ( estamos escribiendo comandos de forma as\u00edncrona ), pero si lo escribimos en un fichero, probablemente nos aparecer\u00e1 el siguiente error: Uncaught SyntaxError: await is only valid in async function Esto ocurre porque, como bien dice el mensaje de error, estamos ejecutando await en el contexto global de la aplicaci\u00f3n, y debemos ejecutarlo en un contexto de funci\u00f3n as\u00edncrona. Para corregirlo, podemos a\u00f1adir un <button> en el HTML y modificar la linea anterior del await : document.querySelector(\"button\").addEventListener(\"click\", async () => { const resultado = await doTask(10); console.log(resultado); }); Una nueva propuesta denominada top-level await permite utilizar await fuera de funciones async , por lo que es muy probable que en poco tiempo comencemos a utilizarla sin tener que incluir el async en las funciones. Sin embargo, s\u00f3lo funcionar\u00e1 en determinados contextos. Fuente: Lenguaje Javascript por Manz \u00b6","title":"Asincron\u00eda"},{"location":"desarrollo/javascript/05-asincronia/#asincronia","text":"","title":"Asincron\u00eda"},{"location":"desarrollo/javascript/05-asincronia/#que-es-la-asincronia","text":"La asincron\u00eda es uno de los conceptos principales que rige el mundo de Javascript. Cuando comenzamos a programar, normalmente realizamos tareas de forma s\u00edncrona , llevando a cabo tareas secuenciales que se ejecutan una detr\u00e1s de otra, de modo que el orden o flujo del programa es sencillo y f\u00e1cil de observar en el c\u00f3digo: primera_funcion(); // Tarea 1: Se ejecuta primero segunda_funcion(); // Tarea 2: Se ejecuta cuando termina primera_funcion() tercera_funcion(); // Tarea 3: Se ejecuta cuando termina segunda_funcion() Sin embargo, en el mundo de la programaci\u00f3n, tarde o temprano necesitaremos realizar operaciones as\u00edncronas , especialmente en ciertos lenguajes como Javascript, donde tenemos que realizar tareas que tienen que esperar a que ocurra un determinado suceso que no depende de nosotros, y reaccionar realizando otra tarea s\u00f3lo cuando dicho suceso ocurra.","title":"\u00bfQu\u00e9 es la asincron\u00eda?"},{"location":"desarrollo/javascript/05-asincronia/#lenguaje-no-bloqueante","text":"Cuando hablamos de Javascript, habitualmente nos referimos a \u00e9l como un lenguaje no bloqueante . Con esto queremos decir que las tareas que realizamos no se quedan bloqueadas esperando ser finalizadas, y por consiguiente, evitando proseguir con el resto de tareas. Imaginemos que la segunda_funcion() del ejemplo anterior realiza una tarea que depende de otro factor, como por ejemplo un click de rat\u00f3n del usuario. Si hablasemos de un lenguaje bloqueante , hasta que el usuario no haga click, Javascript no seguir\u00eda ejecutando las dem\u00e1s funciones, sino que se quedar\u00eda bloqueado esperando a que se terminase esa segunda tarea: Pero como Javascript es un lenguaje no bloqueante , lo que har\u00e1 es mover esa tarea a una lista de tareas pendientes a las que ir\u00e1 \u00abprest\u00e1ndole atenci\u00f3n\u00bb a medida que lo necesite, pudiendo continuar y retomar el resto de tareas a continuaci\u00f3n de la segunda.","title":"Lenguaje no bloqueante"},{"location":"desarrollo/javascript/05-asincronia/#que-es-la-asincronia_1","text":"Pero esto no es todo. Ten en cuenta que pueden existir m\u00faltiples tareas as\u00edncronas, dichas tareas puede que terminen realizandose correctamente ( o puede que no ) y ciertas tareas pueden depender de otras, por lo que deben respetar un cierto orden. Adem\u00e1s, es muy habitual que no sepamos previamente cuanto tiempo va a tardar en terminar una tarea, por lo que necesitamos un mecanismo para controlar todos estos factores: las promesas , las cuales veremos algunos cap\u00edtulos m\u00e1s adelante.","title":"\u00bfQu\u00e9 es la asincron\u00eda?"},{"location":"desarrollo/javascript/05-asincronia/#ejemplos-de-tareas-asincronas","text":"En Javascript no todas las tareas son as\u00edncronas, pero hay ciertas tareas que si lo son, y probablemente se entiendan mejor con ejemplos reales: Un fetch() a una URL para obtener un archivo .json . Un new Audio() de una URL con un .mp3 al que se hace .play() para reproducirlo. Una tarea programada con setTimeout() que se ejecutar\u00e1 en el futuro. Una comunicaci\u00f3n desde Javascript a la API del sintetizador de voz del navegador. Una comunicaci\u00f3n desde Javascript a la API de un sensor del smartphone. Todos estos ejemplos se realizan mediante tareas as\u00edncronas , ya que realizan un procedimiento que podr\u00eda bloquear la ejecuci\u00f3n del resto del programa al tardar mucho: la descarga de un fichero grande desde un servidor lento, una conexi\u00f3n a internet muy lenta, un dispositivo saturado a la hora de comunicarse con el sensor del m\u00f3vil, etc...","title":"Ejemplos de tareas as\u00edncronas"},{"location":"desarrollo/javascript/05-asincronia/#como-gestionar-la-asincronia","text":"Teniendo en cuenta el punto anterior, debemos aprender a buscar mecanismos para dejar claro en nuestro c\u00f3digo Javascript, que ciertas tareas tienen que procesarse de forma as\u00edncrona para quedarse a la espera, y otras deben ejecutarse de forma s\u00edncrona. En Javascript existen varias formas de gestionar la asincron\u00eda , donde quiz\u00e1s las m\u00e1s populares son las siguientes ( que iremos viendo y profundizando en cada art\u00edculo de este tema ): M\u00e9todo Descripci\u00f3n Mediante callbacks Probablemente, la forma m\u00e1s cl\u00e1sica de gestionar la asincron\u00eda en Javascript. Mediante promesas Una forma m\u00e1s moderna y actual de gestionar la asincron\u00eda. Mediante async / await Seguimos con promesas, pero con async / await a\u00f1adimos m\u00e1s az\u00facar sint\u00e1ctico. Mediante top-level await Una variaci\u00f3n de la anterior, donde no es necesario usar async . Iremos viendo la implementaci\u00f3n de cada una de ellas en cada cap\u00edtulo de este tema, utilizando de base un ejemplo sencillo donde lanzamos un dado un n\u00famero concreto de veces, que explicaremos a continuaci\u00f3n.","title":"\u00bfC\u00f3mo gestionar la asincron\u00eda?"},{"location":"desarrollo/javascript/05-asincronia/#ejemplo-base","text":"Tenemos un array numbers , en el cu\u00e1l insertaremos n\u00fameros. Insertaremos la cantidad de n\u00fameros que figura en iterations . En cada iteraci\u00f3n se insertar\u00e1 un number , que habr\u00e1 sido generado con una simulaci\u00f3n del lanzamiento de un dado ( un n\u00famero aleatorio del 1 al 6 ). En el caso de obtener un 6 , paramos y rompemos el bucle: const iterations = 10; const numbers = []; for (let i = 0; i < iterations; i++) { const number = 1 + Math.floor(Math.random() * 6); numbers.push(number); if (number === 6) { console.log(\"ERROR\"); break; } } console.log(numbers); Al terminar este fragmento de c\u00f3digo, tendremos un array numbers que contendr\u00e1 todos los n\u00fameros obtenidos en los lanzamientos de los dados, es decir, 10 n\u00fameros si no hemos obtenido ning\u00fan 6 . Si hemos obtenido un 6 puede que tengamos menos n\u00fameros, debido a que se rompe el bucle tras insertarlo. Ten en cuenta que este ejemplo es una tarea s\u00edncrona ( a\u00fan no existe asincron\u00eda ). Simplemente estamos explicando el ejemplo que usaremos de base en los siguientes cap\u00edtulos del tema para controlar asincron\u00eda. Quiz\u00e1s lo ideal ser\u00eda que cada lanzamiento del lado tardase un tiempo concreto en dar la respuesta, pero no se ha introducido ese retardo para simplificar los ejemplos de c\u00f3digo.","title":"Ejemplo base"},{"location":"desarrollo/javascript/05-asincronia/#funciones-callbacks","text":"Los callbacks ( a veces denominados funciones de retrollamada o funciones callback ) no son m\u00e1s que un tipo de funciones que se pasan por par\u00e1metro a otras funciones. El objetivo de esto es tener una forma m\u00e1s legible de escribir funciones, m\u00e1s c\u00f3moda y flexible para reutilizarlas, y adem\u00e1s entra bastante en consonancia con el concepto de asincron\u00eda de Javascript, como veremos m\u00e1s adelante. Ten en cuenta que actualmente, controlar la asincron\u00eda s\u00f3lo mediante callbacks puede ser una pr\u00e1ctica obsoleta. Es preferible utilizar promesas, que generalmente es m\u00e1s adecuado.","title":"Funciones callbacks"},{"location":"desarrollo/javascript/05-asincronia/#que-es-un-callback","text":"Como hemos dicho, las funciones callback no son m\u00e1s que un tipo de funciones que se pasan por par\u00e1metro a otras funciones. Adem\u00e1s, los par\u00e1metros de dichas funciones toman un valor especial en el contexto del interior de la funci\u00f3n. Pero veamos un ejemplo. Imaginemos el siguiente bucle tradicional para recorrer un : const list = [\"A\", \"B\", \"C\"]; for (let i = 0; i < list.length; i++) { console.log(\"i=\", i, \" list=\", list[i]); } En i tenemos la posici\u00f3n del array que estamos recorriendo ( va de 0 a 2 ) y con list[i] accedemos a la posici\u00f3n del array para obtener el elemento, es decir, desde A hasta C . Ahora veamos, como podemos hacer este mismo bucle utilizando el m\u00e9todo forEach() del al cu\u00e1l le pasamos una funci\u00f3n callback: list.forEach(function(e,i) { console.log(\"i=\", i, \"list=\", e); }); Esto se puede reescribir como: [\"A\", \"B\", \"C\"].forEach((e,i) => console.log(\"i=\", i, \"list=\", e)); Lo importante de este ejemplo es que se vea que la funci\u00f3n callback que le hemos pasando a forEach() se va a ejecutar por cada uno de los elementos del array, y en cada iteraci\u00f3n de dicha funci\u00f3n callback , los par\u00e1metros e , i van a tener un valor especial: e es el elemento del array i es el \u00edndice ( posici\u00f3n ) del array","title":"\u00bfQu\u00e9 es un callback?"},{"location":"desarrollo/javascript/05-asincronia/#callbacks-en-javascript","text":"Una vez entendido esto, vamos a profundizar un poco con las funciones callbacks utilizadas para realizar tareas as\u00edncronas. Probablemente, el caso m\u00e1s f\u00e1cil de entender es utilizar un temporizador mediante la funci\u00f3n setTimeout(``callback, time) . Dicha funci\u00f3n nos exige dos par\u00e1metros : La funci\u00f3n callback a ejecutar El tiempo time que esperar\u00e1 antes de ejecutarla As\u00ed pues, el ejemplo ser\u00eda el siguiente: setTimeout(function() { console.log(\"He ejecutado la funci\u00f3n\"); }, 2000); Simplemente, le decimos a setTimeout() que ejecute la funci\u00f3n callback que le hemos pasado por primer par\u00e1metro cuando transcurran 2000 milisegundos ( es decir, 2 segundos ). Utilizando arrow functions se puede simplificar el callback y hacer mucho m\u00e1s \u00abfancy\u00bb y legible: setTimeout(() => console.log(\"He ejecutado la funci\u00f3n\"), 2000); Si lo prefieres y lo ves m\u00e1s claro ( no suele ser habitual en c\u00f3digo Javascript, pero cuando se empieza suele resultar m\u00e1s f\u00e1cil entenderlo ) podemos guardar el callback en una constante: const action = () => console.log(\"He ejecutado la funci\u00f3n\"); setTimeout(action, 2000); En cualquiera de los casos, lo importante es darse cuenta que estamos usando una funci\u00f3n callback para pas\u00e1rsela a setTimeout() , que es otra funci\u00f3n. En este caso, se trata de \u00abprogramar\u00bb un suceso que ocurrir\u00e1 en un momento conocido del futuro, pero muchas veces desconoceremos cuando se producir\u00e1 ( o incluso si se llegar\u00e1 a producir ). Si probamos el c\u00f3digo que ver\u00e1s a continuaci\u00f3n, comprobar\u00e1s que el segundo console.log() se ejecutar\u00e1 antes que el primero, dentro del setTimeout() , mostrando primero C\u00f3digo s\u00edncrono y luego C\u00f3digo as\u00edncrono en la consola del navegador: setTimeout(() => console.log(\"C\u00f3digo as\u00edncrono.\"), 2000); console.log(\"C\u00f3digo s\u00edncrono.\"); El \u00faltimo console.log del c\u00f3digo se ejecuta primero ( forma parte del flujo principal de ejecuci\u00f3n del programa ). El setTimeout() que figura en una l\u00ednea anterior, aunque se ejecuta antes, pone en espera a la funci\u00f3n callback, que se ejecutar\u00e1 cuando se cumpla una cierta condici\u00f3n ( transcurran 2 segundos desde ese momento ). Esto puede llegar a sorprender a desarrolladores que llegan de otros lenguajes considerados bloqueantes ; Javascript sin embargo se considera un lenguaje as\u00edncrono y no bloqueante . \u00bfQu\u00e9 significa esto? Al ejecutar la l\u00ednea del setTimeout() , el programa no se queda bloqueado esperando a que terminen los 2 segundos y se ejecute la funci\u00f3n callback, sino que contin\u00faa con el flujo general del programa para volver m\u00e1s adelante cuando sea necesario a ejecutar el callback , aprovechando as\u00ed mejor el tiempo y realizando tareas de forma as\u00edncrona .","title":"Callbacks en Javascript"},{"location":"desarrollo/javascript/05-asincronia/#asincronia-con-callbacks","text":"Las funciones callback pueden utilizarse como un primer intento de manejar la asincron\u00eda en un programa. De hecho, eran muy utilizadas en la \u00e9poca dorada de jQuery , donde muchas funciones o librer\u00edas ten\u00edan una estructura similar a esta ( en jQuery se usaba algo similar ): function doTask(number, callback) { /* C\u00f3digo de la funci\u00f3n */ } doTask(42, function(err, result) { /* Trabajamos con err o result seg\u00fan nos interese */ }); Observa que doTask() es la funci\u00f3n que realiza la tarea en cuesti\u00f3n. Puede tener los par\u00e1metros que se consideren adecuados, como cualquier otra funci\u00f3n, la diferencia es que establecemos un callback que usaremos para controlar lo que se debe hacer. M\u00e1s adelante, llamamos a la funci\u00f3n doTask() y en su par\u00e1metro callback pasamos una funci\u00f3n con dos par\u00e1metros; err y result . El primero de ellos, err , utilizado para controlar un error y el segundo de ellos, result , utilizado para manejar los valores devueltos. Vamos a utilizar el ejemplo del lanzamiento de 10 dados que explicamos en el primer cap\u00edtulo de Asincron\u00eda, para adaptarlo a funciones callbacks. En primer lugar, veamos la implementaci\u00f3n de la funci\u00f3n doTask : /* Implementaci\u00f3n con callbacks */ const doTask = (iterations, callback) => { const numbers = []; for (let i = 0; i < iterations; i++) { const number = 1 + Math.floor(Math.random() * 6); numbers.push(number); if (number === 6) { /* Error, se ha sacado un 6 */ callback({ error: true, message: \"Se ha sacado un 6\" }); return; } } /* Termina bucle y no se ha sacado 6 */ return callback(null, { error: false, value: numbers }); } Como se puede ver, estamos utilizando arrow functions para definir la funci\u00f3n doTask() . Le pasamos un par\u00e1metro iterations que simplemente indica el n\u00famero de iteraciones que tendr\u00e1 el bucle ( n\u00famero de lanzamientos del dado ). Por otro lado, el segundo par\u00e1metro es nuestro callback , que recordemos que es una funci\u00f3n, por lo que podremos ejecutarla en momentos concretos de nuestro c\u00f3digo. Lo hacemos en dos ocasiones: En el if cuando number es 6 ( detectamos como error cuando obtenemos un 6 ). Le pasamos un objeto por par\u00e1metro que contiene un error y message , el mensaje de error. Tras el for , con dos par\u00e1metros. El primero , ya que en este caso no hay error. El segundo par\u00e1metro un objeto que contiene un campo value con el array de resultados. Teniendo claro esto, veamos la llamada a la funci\u00f3n doTask() , donde le pasamos esa funci\u00f3n callback e implementamos el funcionamiento, que en nuestro caso ser\u00e1n dos simples console.error() y console.log() : doTask(10, function(err, result) { if (err) { console.error(\"Se ha sacado un \", err.message); return; } console.log(\"Tiradas correctas: \", result.value); }); Esto es una forma cl\u00e1sica donde utilizamos una funci\u00f3n callback para gestionar la asincronia y facilitar la reutilizaci\u00f3n, pudiendo reutilizar la funci\u00f3n con la l\u00f3gica, aplicando diferentes funciones callback seg\u00fan nos interese. Observa que aunque en este ejemplo se ha utilizado un par\u00e1metro err y otro result en el callback para gestionar un objeto de error y un objeto de resultados, esto puede modificarse a gusto del desarrollador, aunque lo habitual suele ser este esquema.","title":"Asincron\u00eda con callbacks"},{"location":"desarrollo/javascript/05-asincronia/#desventajas-de-los-callbacks","text":"A pesar de ser una forma flexible y potente de controlar la asincron\u00eda, que permite realizar m\u00faltiples posibilidades, las funciones callbacks tienen ciertas desventajas evidentes. En primer lugar, el c\u00f3digo creado con las funciones es algo ca\u00f3tico y ( quiz\u00e1s subjetivamente ) algo feo. Por ejemplo, el tener que pasar un por par\u00e1metros en algunas funciones, no es demasiado elegante. Pero sobre todo, uno de los problemas evidentes viene a la hora de tener que gestionar la asincron\u00eda varias veces en una misma funci\u00f3n, donde al introducir varias funciones con callbacks en su interior, conseguimos una estructura anidada similar a la siguiente: La forma triangular que produce es conocida como Callback Hell o Pyramid of Doom , debido a su forma, resultando un c\u00f3digo muy poco elegante que se puede complicar demasiado de cara a la legibilidad. Es cuando entran en juego las promesas , que veremos en el siguiente cap\u00edtulo.","title":"Desventajas de los callbacks"},{"location":"desarrollo/javascript/05-asincronia/#que-son-las-promesas","text":"Las promesas son un concepto para resolver el problema de asincron\u00eda de una forma mucho m\u00e1s elegante y pr\u00e1ctica que, por ejemplo, utilizando funciones callbacks directamente. Como su propio nombre indica, una promesa es algo que, en principio pensamos que se cumplir\u00e1, pero en el futuro pueden ocurrir varias cosas: La promesa se cumple ( promesa resuelta ) La promesa no se cumple ( promesa se rechaza ) La promesa se queda en un estado incierto indefinidamente ( promesa pendiente ) Con estas sencillas bases, podemos entender el funcionamiento de una promesa en Javascript. Antes de empezar, tambi\u00e9n debemos tener claro que existen dos partes importantes de las promesas: como consumirlas ( utilizar promesas ) y como crearlas ( preparar una funci\u00f3n para que use promesas y se puedan consumir ).","title":"\u00bfQu\u00e9 son las promesas?"},{"location":"desarrollo/javascript/05-asincronia/#promesas-en-javascript","text":"Las promesas en Javascript se representan a trav\u00e9s de un , y cada promesa estar\u00e1 en un estado concreto: pendiente , aceptada o rechazada . Adem\u00e1s, cada promesa tiene los siguientes m\u00e9todos, que podremos utilizar para utilizarla: M\u00e9todos Descripci\u00f3n .then(``resolve) Ejecuta la funci\u00f3n callback resolve cuando la promesa se cumple. .catch(``reject) Ejecuta la funci\u00f3n callback reject cuando la promesa se rechaza. .then(``resolve,``reject) M\u00e9todo equivalente a las dos anteriores en el mismo .then() . .finally(``end) Ejecuta la funci\u00f3n callback end tanto si se cumple como si se rechaza. M\u00e1s adelante veremos, que a diferencia del apartado anterior donde se utilizaban solamente funciones callback, en este enfoque se tiende a no anidar promesas , evitando as\u00ed el famoso Callback Hell , y haciendo el c\u00f3digo mucho m\u00e1s legible.","title":"Promesas en Javascript"},{"location":"desarrollo/javascript/05-asincronia/#consumir-una-promesa","text":"La forma general de consumir una promesa es utilizando el .then() con un s\u00f3lo par\u00e1metro, puesto que muchas veces lo \u00fanico que nos interesa es realizar una acci\u00f3n cuando la promesa se cumpla: fetch(\"/robots.txt\").then(function(response) { /* C\u00f3digo a realizar cuando se cumpla la promesa */ }); Lo que vemos en el ejemplo anterior es el uso de la funci\u00f3n fetch() , la cu\u00e1l devuelve una promesa que se cumple cuando obtiene respuesta de la petici\u00f3n realizada. De esta forma, estar\u00edamos preparando ( de una forma legible ) la forma de actuar de nuestro c\u00f3digo a la respuesta de la petici\u00f3n realizada, todo ello de forma as\u00edncrona. Recuerda que podemos hacer uso del m\u00e9todo .catch() para actuar cuando se rechaza una promesa: fetch(\"/robots.txt\") .then(function(response) { /* C\u00f3digo a realizar cuando se cumpla la promesa */ }) .catch(function(error) { /* C\u00f3digo a realizar cuando se rechaza la promesa */ }); Observa como hemos indentado los m\u00e9todos .then() y .catch() , ya que se suele hacer as\u00ed para que sea mucho m\u00e1s legible para el. Adem\u00e1s, se pueden encadenar varios .then() si se siguen generando promesas y se devuelven con un return : fetch(\"/robots.txt\") .then(response => { return response.text(); // Devuelve una promesa }) .then(data => { console.log(data); }) .catch(error => { /* C\u00f3digo a realizar cuando se rechaza la promesa */ }); No olvides indicar el return para poder encadenar las siguientes promesas con .then() . Tras un .catch() tambi\u00e9n es posible encadenar .then() para continuar procesando promesas. De hecho, usando arrow functions se puede mejorar a\u00fan m\u00e1s la legibilidad de este c\u00f3digo, recordando que cuando s\u00f3lo tenemos una sentencia en el cuerpo de la arrow function hay un return impl\u00edcito: fetch(\"/robots.txt\") .then(response => response.text()) .then(data => console.log(data)) .finally(() => console.log(\"Terminado.\")) .catch(error => console.error(data)); Observese adem\u00e1s que hemos a\u00f1adido el m\u00e9todo .finally() para a\u00f1adir una funci\u00f3n callback que se ejecutar\u00e1 tanto si la promesa se cumple o se rechaza , lo que nos ahorrar\u00e1 tener que repetir la funci\u00f3n en el .then() como en el .catch() . En todo este apartado hemos visto como utilizar o consumir una promesa haciendo uso de .then() , que es lo que en la mayor\u00eda de los casos necesitaremos. Sin embargo, vamos a ver en el siguiente apartado como crear o implementar las promesas para su posterior consumo.","title":"Consumir una promesa"},{"location":"desarrollo/javascript/05-asincronia/#asincronia-con-promesas","text":"Vamos a implementar el ejercicio base que hemos comentado en el primer cap\u00edtulo de este tema utilizando promesas . Observa que lo primero que haremos es crear un nuevo objeto que \u00abenvuelve\u00bb toda la funci\u00f3n de la tarea doTask() . Al new Promise() se le pasa por par\u00e1metro una funci\u00f3n con dos callbacks, el primero resolve el que utilizaremos cuando se cumpla la promesa, y el segundo reject cuando se rechace: /* Implementaci\u00f3n con promesas */ const doTask = (iterations) => new Promise((resolve, reject) => { const numbers = []; for (let i = 0; i < iterations; i++) { const number = 1 + Math.floor(Math.random() * 6); numbers.push(number); if (number === 6) { reject({ error: true, message: \"Se ha sacado un 6\" }); } } resolve({ error: false, value: numbers }); }); Como ves, se trata de una implementaci\u00f3n muy similar a los callbacks que vimos en el apartado anterior, pero utilizan una nativa para poder luego consumirla c\u00f3modamente: doTask(10) .then(result => console.log(\"Tiradas correctas: \", result.value)) .catch(err => console.error(\"Se ha sacado un \", err.message)); Imagina el caso de que cada lanzamiento del dado ( la parte donde genera el n\u00famero aleatorio ) fuera un proceso m\u00e1s costoso que tardara un tiempo considerable , quiz\u00e1s de esa forma se vea m\u00e1s clara la necesidad de una tarea as\u00edncrona, controlada con promesas. En el siguiente cap\u00edtulo veremos como trabajar con m\u00faltiples promesas y hacer acciones compuestas con varias de ellas. Si el ejemplo anterior te resulta demasiado cr\u00edptico por las funciones resolve y reject , es muy probable que echar un vistazo al tema de las funciones callback te aclare muchos detalles.","title":"Asincron\u00eda con promesas"},{"location":"desarrollo/javascript/05-asincronia/#promesas-en-grupo-promise-api","text":"Ahora que sabemos \u00bfQu\u00e9 son las promesas? , para qu\u00e9 y como se usan, podemos profundizar y aprender m\u00e1s sobre la API Promise nativa de Javascript, mediante la cu\u00e1l podemos realizar operaciones con grupos de promesas, tanto independientes como dependientes entre s\u00ed. Por norma general, las tareas as\u00edncronas no sabemos cuanto tardar\u00e1n en responder y/o procesarse, por lo que muchas veces el orden en que se resuelvan no ser\u00e1 el mismo. Esto en algunos casos no nos importar\u00e1, pero en otros s\u00ed, por lo que hay que tenerlo en cuenta.","title":"Promesas en grupo (Promise API)"},{"location":"desarrollo/javascript/05-asincronia/#api-de-las-promesas","text":"El objeto Promise de Javascript tiene varios m\u00e9todos est\u00e1ticos que podemos utilizar en nuestro c\u00f3digo. Todos devuelven una promesa y son los que veremos en la siguiente tabla: M\u00e9todos Descripci\u00f3n Promise.all(``list) Acepta s\u00f3lo si todas las promesas del se cumplen. Promise.allSettled(``list) Acepta s\u00f3lo si todas las promesas del se cumplen o rechazan. Promise.any(``list) Acepta con el valor de la primera promesa del que se cumpla. Promise.race(``list) Acepta o rechaza dependiendo de la primera promesa que se procese. Promise.resolve(``value) Devuelve un valor envuelto en una promesa que se cumple directamente. Promise.reject(``value) Devuelve un valor envuelto en una promesa que se rechaza directamente. En los siguientes ejemplos, vamos a utilizar la funci\u00f3n fetch() para realizar varias peticiones y descargar varios archivos diferentes que necesitaremos para nuestras tareas.","title":"API de las promesas"},{"location":"desarrollo/javascript/05-asincronia/#promiseall","text":"El m\u00e9todo Promises.all() funciona como un \u00ab todo o nada \u00bb: devuelve una promesa que se cumple cuando todas las promesas del se cumplen. Si alguna de ellas se rechaza, Promise.all() tambi\u00e9n lo hace. En nuestro ejemplo, cada uno de los fetch() tendr\u00e1 su propia promesa y s\u00f3lo cuando se hayan descargado los tres archivos de cada petici\u00f3n se cumplir\u00e1 la promesa del Promise.all() : const p1 = fetch(\"/robots.txt\"); const p2 = fetch(\"/index.css\"); const p3 = fetch(\"/index.js\"); Promise.all([p1, p2, p3]) .then(responses => { responses.forEach(response => { console.log(response.status, response.url); }) }); A Promise.all() le pasamos un con las promesas individuales. Cuando todas y cada una de esas promesas se cumplan favorablemente, entonces se ejecutar\u00e1 la funci\u00f3n callback de su .then() . En el caso de que alguna se rechace, no se llegar\u00e1 a ejecutar.","title":"Promise.all()"},{"location":"desarrollo/javascript/05-asincronia/#promiseallsettled","text":"El m\u00e9todo Promises.allSettled() funciona como un \u00ab todas procesadas \u00bb: devuelve una promesa que se cumple cuando todas las promesas del se hayan procesado, independientemente de que se hayan cumplido o rechazado. const p1 = fetch(\"/robots.txt\"); const p2 = fetch(\"https://google.com/index.css\"); const p3 = fetch(\"/index.js\"); Promise.allSettled([p1, p2, p3]) .then(responses => { responses.forEach(response => { console.log(response.status, response); }) }); Esta promesa nos devuelve un campo status donde nos indica si cada promesa individual ha sido cumplida o rechazada, y un campo value con los valores devueltos por la promesa. En este caso, obtendremos que la primera y \u00faltima promesa se resuelven ( fulfilled ), mientras que la segunda nos da un error de CORS y se rechaza ( rejected ).","title":"Promise.allSettled()"},{"location":"desarrollo/javascript/05-asincronia/#promiseany","text":"El m\u00e9todo Promise.any() funciona como \u00ab la primera que se cumpla \u00bb: Devuelve una promesa con el valor de la primera promesa individual del que se cumpla. Si todas las promesas se rechazan, entonces devuelve una promesa rechazada. const p1 = fetch(\"/robots.txt\"); const p2 = fetch(\"/index.css\"); const p3 = fetch(\"/index.js\"); Promise.any([p1, p2, p3]) .then(response => console.log(response.status, response.url)); Como vemos, Promise.any() devolver\u00e1 una respuesta de la primera promesa cumplida.","title":"Promise.any()"},{"location":"desarrollo/javascript/05-asincronia/#promiserace","text":"El m\u00e9todo Promise.race() funciona como una \u00ab la primera que se procese \u00bb: la primera promesa del que sea procesada, independientemente de que se haya cumplido o rechazado, determinar\u00e1 la devoluci\u00f3n de la promesa del Promise.race() . Si se cumple, devuelve una promesa cumplida, en caso negativo, devuelve una rechazada. const p1 = fetch(\"/robots.txt\"); const p2 = fetch(\"/index.css\"); const p3 = fetch(\"/index.js\"); Promise.race([p1, p2, p3]) .then(response => console.log(response.status, response.url)); De forma muy similar a la anterior, Promise.race() devolver\u00e1 la promesa que se resuelva primero, ya sea cumpli\u00e9ndose o rechaz\u00e1ndose.","title":"Promise.race()"},{"location":"desarrollo/javascript/05-asincronia/#promiseresolve-y-promisereject","text":"Mediante los m\u00e9todos est\u00e1ticos Promise.resolve() y Promise.reject() podemos devolver una promesa cumplida o rechazada respectivamente sin necesidad de crear una promesa con new Promise() . Esto puede ser interesante en algunos casos, aunque rara vez solemos utilizarlo hoy en d\u00eda. const doTask = () => { const number = 1 + Math.floor(Math.random() * 6); return (number % 2 === 0) ? Promise.resolve(number) : Promise.reject(number); } Observa que en este caso devolvemos una promesa que se cumple cuando el n\u00famero generado es par y se rechaza cuando es impar. Sin embargo, ten en cuenta que en problema en este caso es que la promesa no \u00abenvuelve\u00bb toda la funci\u00f3n, por lo que si la tarea tardase alg\u00fan tiempo en generar el n\u00famero, no podr\u00edamos utilizar el .then() para consumir la promesa. Estas funciones est\u00e1ticas se suelen utilizar en muy pocos casos, para mantener cierta compatibilidad en funciones que se espera que devuelvan una promesa.","title":"Promise.resolve() y Promise.reject()"},{"location":"desarrollo/javascript/05-asincronia/#asyncawait","text":"En se introducen las palabras clave async / await , que no son m\u00e1s que una forma de az\u00facar sint\u00e1ctico para gestionar las promesas de una forma m\u00e1s sencilla. Con async / await seguimos utilizando promesas, pero abandonamos el modelo de encadenamiento de .then() para utilizar uno en el que trabajamos de forma m\u00e1s tradicional.","title":"Async/Await"},{"location":"desarrollo/javascript/05-asincronia/#la-palabra-clave-async","text":"En primer lugar, tenemos la palabra clave async . Esta palabra clave se colocar\u00e1 previamente a function , para definirla as\u00ed como una funci\u00f3n as\u00edncrona , el resto de la funci\u00f3n no cambia: async function funcion_asincrona() { return 42; } En el caso de que utilicemos arrow function , se definir\u00eda como vemos a continuaci\u00f3n, colocando el async justo antes de los par\u00e1metros de la arrow function: const funcion_asincrona = async () => 42; Al ejecutar la funci\u00f3n veremos que ya nos devuelve una que ha sido cumplida, con el valor devuelto en la funci\u00f3n ( en este caso, 42 ). De hecho, podr\u00edamos utilizar un .then() para manejar la promesa: funcion_asincrona().then(value => { console.log(\"El resultado devuelto es: \", value); }); Sin embargo, veremos que lo que se suele hacer junto a async es utilizar la palabra clave await , que es donde reside lo interesante de utilizar este enfoque.","title":"La palabra clave async"},{"location":"desarrollo/javascript/05-asincronia/#la-palabra-clave-await","text":"Cualquier funci\u00f3n definida con async , o lo que es lo mismo, cualquier puede utilizarse junto a la palabra clave await para manejarla. Lo que hace await es esperar a que se resuelva la promesa, mientras permite continuar ejecutando otras tareas que puedan realizarse: const funcion_asincrona = async () => 42; const value = funcion_asincrona(); // Promise { <fulfilled>: 42 } const asyncValue = await funcion_asincrona(); // 42 Observa que en el caso de value , que se ejecuta sin await , lo que obtenemos es el valor devuelto por la funci\u00f3n, pero \u00abenvuelto\u00bb en una promesa que deber\u00e1 utilizarse con .then() para manejarse. Sin embargo, en asyncValue estamos obteniendo un tipo de dato , guardando el valor directamente ya procesado, ya que await espera a que se resuelva la promesa de forma as\u00edncrona y guarda el valor. Esto hace que la forma de trabajar con async / await , aunque se sigue trabajando exactamente igual con promesas, sea mucho m\u00e1s f\u00e1cil y trivial para usuarios que no est\u00e9n acostumbrados a las promesas y a la asincron\u00eda en general, ya que el c\u00f3digo \u00abparece\u00bb s\u00edncrono.","title":"La palabra clave await"},{"location":"desarrollo/javascript/05-asincronia/#asincronia-con-asyncawait","text":"Volvamos al ejemplo que hemos visto en los anteriores cap\u00edtulos. Recordemos que la funci\u00f3n doTask() realiza 10 lanzamientos de un dado y nos devuelve los resultados obtenidos o detiene la tarea si se obtiene un 6. La implementaci\u00f3n de la funci\u00f3n sufre algunos cambios, simplific\u00e1ndose considerablemente. En primer lugar, a\u00f1adimos la palabra clave async antes de los par\u00e1metros de la arrow function . En segundo lugar, desaparece cualquier menci\u00f3n a promesas, se devuelven directamente los objetos, ya que al ser una funci\u00f3n async se devolver\u00e1 todo envuelto en una : const doTask = async (iterations) => { const numbers = []; for (let i = 0; i < iterations; i++) { const number = 1 + Math.floor(Math.random() * 6); numbers.push(number); if (number === 6) { return { error: true, message: \"Se ha sacado un 6\" }; } } return { error: false, value: numbers }; } Pero donde se introducen cambios considerables es a la hora de consumir las promesas con async / await . No tendr\u00edamos que utilizar .then() , sino que podemos simplemente utilizar await para esperar la resoluci\u00f3n de la promesa, obteniendo el valor directamente: const resultado = await doTask(10); // Devuelve un objeto, no una promesa Recuerda que en el caso de querer controlar errores o promesas rechazadas, siempre podr\u00e1s utilizar bloques try / catch .","title":"Asincron\u00eda con async/await"},{"location":"desarrollo/javascript/05-asincronia/#top-level-await","text":"En principio, el comportamiento de await solo permite que se utilice en el interior de funciones declaradas como async . Por lo que, si el ejemplo anterior lo ejecutamos en una consola de Javascript, funcionar\u00e1 correctamente ( estamos escribiendo comandos de forma as\u00edncrona ), pero si lo escribimos en un fichero, probablemente nos aparecer\u00e1 el siguiente error: Uncaught SyntaxError: await is only valid in async function Esto ocurre porque, como bien dice el mensaje de error, estamos ejecutando await en el contexto global de la aplicaci\u00f3n, y debemos ejecutarlo en un contexto de funci\u00f3n as\u00edncrona. Para corregirlo, podemos a\u00f1adir un <button> en el HTML y modificar la linea anterior del await : document.querySelector(\"button\").addEventListener(\"click\", async () => { const resultado = await doTask(10); console.log(resultado); }); Una nueva propuesta denominada top-level await permite utilizar await fuera de funciones async , por lo que es muy probable que en poco tiempo comencemos a utilizarla sin tener que incluir el async en las funciones. Sin embargo, s\u00f3lo funcionar\u00e1 en determinados contextos. Fuente: Lenguaje Javascript por Manz","title":"Top-level await"},{"location":"desarrollo/javascript/05-asincronia/#_1","text":"","title":""},{"location":"desarrollo/javascript/06-peticiones_HTTP/","text":"Peticiones HTTP \u00b6 AJAX: Peticiones HTTP \u00b6 Un navegador , durante la carga de una p\u00e1gina, suele realizar m\u00faltiples peticiones HTTP a un servidor para solicitar los archivos que necesita renderizar en la p\u00e1gina. Es el caso de, en primer lugar, el documento .html de la p\u00e1gina ( donde se hace referencia a m\u00faltiples archivos ) y luego todos esos archivos relacionados: los ficheros de estilos .css , las im\u00e1genes .jpg , .png , .webp u otras, los scripts .js , las tipograf\u00edas .ttf , .woff o .woff2 , etc. \u00bfQu\u00e9 es una petici\u00f3n HTTP? \u00b6 Una petici\u00f3n HTTP es como suele denominarse a la acci\u00f3n por parte del navegador de solicitar a un servidor web un documento o archivo, ya sea un fichero .html , una imagen, una tipograf\u00eda, un archivo .js , etc. Gracias a dicha petici\u00f3n, el navegador puede descargar ese archivo, almacenarlo en un cach\u00e9 temporal de archivos del navegador y, finalmente, mostrarlo en la p\u00e1gina actual que lo ha solicitado. Peticiones HTTP mediante AJAX \u00b6 Con el tiempo, aparece una nueva modalidad de realizar peticiones, denominada AJAX ( Asynchronous Javascript and XML ). Esta modalidad se basa en que la petici\u00f3n HTTP se realiza desde Javascript, de forma transparente al usuario, descargando la informaci\u00f3n y pudiendo tratarla sin necesidad de mostrarla directamente en la p\u00e1gina . Esto produce un interesante cambio en el panorama que hab\u00eda entonces, puesto que podemos hacer actualizaciones de contenidos de forma parcial , de modo que se actualice una p\u00e1gina \u00ab en vivo \u00bb, sin necesidad de recargar toda la p\u00e1gina, sino solamente actualizado una peque\u00f1a parte de ella, pudiendo utilizar Javascript para crear todo tipo de l\u00f3gica de apoyo. Originalmente, a este sistema de realizaci\u00f3n de peticiones HTTP se le llam\u00f3 AJAX , donde la X significa XML , el formato ligero de datos que m\u00e1s se utilizaba en aquel entonces. Actualmente, sobre todo en el mundo Javascript, se utiliza m\u00e1s el formato JSON , aunque por razones fon\u00e9ticas evidentes ( y evitar confundirlo con una risa ) se sigue manteniendo el t\u00e9rmino AJAX . Posteriormente, y debido a una evoluci\u00f3n a mayor escala relacionada con este tema, se ha pasado de crear p\u00e1ginas de tipo MPA por defecto, a crear p\u00e1ginas de tipo SPA , mucho m\u00e1s frecuentes en entornos empresariales hoy en d\u00eda. M\u00e9todos de petici\u00f3n AJAX \u00b6 Existen varias formas de realizar peticiones HTTP mediante AJAX , pero las principales suelen ser XMLHttpRequest y fetch ( nativas, incluidas en el navegador por defecto ), adem\u00e1s de liber\u00edas como axios o superagent : M\u00e9todo Descripci\u00f3n XMLHttpRequest Se suele abreviar como XHR . El m\u00e1s antiguo, y tambi\u00e9n el m\u00e1s verbose. Nativo. fetch Nuevo sistema nativo de peticiones basado en promesas. Sin soporte en IE. Axios Librer\u00eda basada en promesas para realizar peticiones en Node o navegadores. superagent Librer\u00eda para realizar peticiones HTTP tanto en Node como en navegadores. frisbee Librer\u00eda basada en fetch. Suele usarse junto a React Native. En los siguientes cap\u00edtulos iremos viendo como funcionan. MPA: Multiple Page Application \u00b6 Tradicionalmente, el sistema que se segu\u00eda para crear p\u00e1ginas o aplicaciones web se enmarcaba dentro de la categor\u00eda de p\u00e1ginas MPA ( Multiple Page Application ). Bajo este sistema, el navegador se descarga el fichero .html , lo lee y luego realiza las peticiones de los restantes archivos relacionados que encuentra en el documento HTML. Si el usuario pulsa en alg\u00fan enlace, se descarga el .html de dicho enlace ( recargando la p\u00e1gina completa ) y se repite el proceso. Este sistema es el que se observa en p\u00e1ginas en las que vamos navegando mediante enlaces, y al hacer click en ellos, se recarga la p\u00e1gina completa. Generalmente, es el que se utiliza frecuentemente en sitios web m\u00e1s tradicionales, los que usan mayoritariamente backend . SPA: Single Page Application \u00b6 En el lado opuesto se encuentran las p\u00e1ginas de tipo SPA ( Single Page Application ). Se trata de un enfoque m\u00e1s moderno, donde el navegador se descarga una versi\u00f3n m\u00ednima de .html junto a un .js que se encargar\u00e1 de controlar toda la web. Realizar\u00e1 peticiones de los archivos relacionados junto a peticiones a archivos .json o .js con m\u00e1s informaci\u00f3n o nuevos contenidos, que mostrar\u00e1 en el navegador parcial o completamente, pero sin la necesidad obligatoria de recargar la p\u00e1gina completamente. Este sistema se utiliza mayoritariamente para construir aplicaciones web como dashboards o sitios de gesti\u00f3n en los que no necesitamos \u00abnavegar\u00bb a trav\u00e9s de una serie de p\u00e1ginas. Por ejemplo, p\u00e1ginas como WhatsApp Web, Twitter o Google Drive podr\u00edan ser ejemplos de SPA . Las p\u00e1ginas de tipo SPA son las que utilizan en la mayor\u00eda de los frameworks de Javascript, como por ejemplo, React , Vue o Angular . XHR: XMLHttpRequest \u00b6 XMLHttpRequest (XHR) es un objeto especial de Javascript que permite realizar peticiones HTTP as\u00edncronas (AJAX) de forma nativa desde Javascript. Se trata de la primera implementaci\u00f3n que existi\u00f3 en ECMAScript antes de surgir fetch , el est\u00e1ndar actual. Actualmente es m\u00e1s frecuente utilizar fetch , puesto que es una API m\u00e1s actual y moderna que utiliza promesas y nos permite hacer lo mismo ( o m\u00e1s ) y escribir menos c\u00f3digo. \u00bfQu\u00e9 es XMLHttpRequest? \u00b6 El objeto XMLHttpRequest se cre\u00f3 originalmente para realizar peticiones HTTP a ficheros .xml externos desde Javascript. Actualmente, se realizan las mismas operaciones pero con ficheros JSON , ya que son mucho m\u00e1s habituales en el ecosistema Javascript como almacenamiento ligero de datos . El mecanismo principal de peticiones HTTP mediante XMLHttpRequest es muy sencillo, aunque se vuelve un poco m\u00e1s complejo a medida que vamos realizando comprobaciones y detalles relacionados, ya que se realiza todo m\u00e1s a bajo nivel que su equivalente moderno fetch . El primer paso es crear un objeto XMLHttpRequest ( XHR ): // Creamos la instancia del objeto XHR const client = new XMLHttpRequest(); Mediante esta instancia que acabamos de crear, podremos definir el tipo de petici\u00f3n utilizando el m\u00e9todo open(method, url) , indicando el m\u00e9todo HTTP y la URL a la que queremos hacer la petici\u00f3n: // Preparamos la petici\u00f3n y la enviamos client.open(\"GET\", \"/robots.txt\"); client.send(); Con el m\u00e9todo .open() solo preparamos la petici\u00f3n, pero la haremos finalmente efectiva con el m\u00e9todo .send() , el cu\u00e1l lanzar\u00e1 la petici\u00f3n al servidor. Poco despu\u00e9s, si consultamos el contenido de la propiedad .responseText ( texto de respuesta ) de nuestra instancia, comprobaremos que deber\u00eda estar el contenido del fichero que hemos pedido: // Consultamos la propiedad que almacena el contenido console.log(client.responseText); Este ser\u00eda el funcionamiento base de las peticiones XHR , que como puedes ver, es muy sencillo. Sin embargo, esto es s\u00f3lo la teor\u00eda. A la hora de la pr\u00e1ctica hay m\u00e1s detalles que hay que tener en cuenta. Por ejemplo, si has ejecutado l\u00ednea por l\u00ednea en una consola del navegador, habr\u00e1s comprobado que este c\u00f3digo funciona perfectamente. Sin embargo, si intentamos ejecutar todo el c\u00f3digo de golpe , no funcionar\u00e1; el valor de client.responseText nos aparecer\u00e1 vac\u00edo. Esto ocurre debido a que no estamos dando tiempo suficiente al navegador para realizar la petici\u00f3n del fichero /robots.txt al servidor, y por lo tanto, consultamos el resultado antes de tenerlo. Para solucionar esto, hay que esperar un tiempo para comprobar el valor, o mejor a\u00fan, hacerlo de forma as\u00edncrona , como veremos m\u00e1s adelante. El fichero /robots.txt es un fichero de texto que suele existir en pr\u00e1cticamente todas las p\u00e1ginas webs. Se trata de un fichero de texto plano que indica las URL a las que los robots o crawlers ( como el de Google ) no deben acceder. Pol\u00edtica CORS \u00b6 Habr\u00e1s observado que estamos realizando peticiones relativas , es decir, al mismo dominio . Por defecto, en Javascript, las peticiones al mismo dominio de la web donde nos encontramos se pueden realizar sin ninguna restricci\u00f3n. Sin embargo, si intentamos realizarlas a otro dominio diferente, probablemente nos aparezca un error de CORS ( Cross-Origin Resource Sharing ) similar al siguiente: Access to XMLHttpRequest at ' https://domain.com/robots.txt ' from origin ' https://currentdomain.com/ ' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource. M\u00e1s adelante, en el cap\u00edtulo CORS , abordaremos este tema y comentaremos los detalles que hay que cumplir para poder hacer peticiones a dominios externos, pero de momento nos limitaremos a realizarlos al propio dominio donde nos encontramos. El objeto XMLHttpRequest \u00b6 Al crear un objeto XMLHttpRequest tenemos acceso a una serie de propiedades que forman parte de nuestra instancia. Entre ellas, se encuentran las siguientes: Propiedad Descripci\u00f3n .responseType Define el tipo de respuesta de .response : json , Blob , etc. Por defecto, text . .response Contenido parseado autom\u00e1ticamente basado en .responseType . .responseText Respuesta de la petici\u00f3n como texto plano o si no se ha recibido. .responseURL URL de la petici\u00f3n HTTP a realizar. .readyState N\u00famero que indica en que estado se encuentra la petici\u00f3n (ver m\u00e1s adelante). .timeout Milisegundos permitidos para realizar la petici\u00f3n HTTP. Por defecto, 0 (sin l\u00edmite). .status C\u00f3digo de error HTTP de respuesta de la petici\u00f3n. .statusText Texto con el c\u00f3digo de error de respuesta, legible para humanos. .withCredentials Indica si la petici\u00f3n HTTP se est\u00e1 realizando con credenciales. En primer lugar, las propiedades .responseType y .response se usan conjuntamente, debido a que si establecemos un valor en .responseType antes de hacer la petici\u00f3n, se procesar\u00e1 autom\u00e1ticamente la respuesta en .response . Por ejemplo, si establecemos el valor json en la propiedad .responseType , en .response obtendremos el objeto JSON ya parseado. Por otro lado, en la propiedad .responseText siempre obtendremos el valor de texto puro , por si ese proceso de parseo queremos hacerlo manualmente. En la propiedad .responseURL tendremos la ruta completa de la petici\u00f3n HTTP. Por otro lado, tenemos la propiedad .readyState , en la cu\u00e1l profundizaremos m\u00e1s adelante. B\u00e1sicamente nos devuelve un valor que determina en que punto se encuentra la petici\u00f3n ( iniciada, enviada, proces\u00e1ndose, finalizada ). Es muy \u00fatil para saber cuando realizar ciertas acciones. La propiedad .timeout indica el n\u00famero de milisegundos m\u00e1ximo que permitiremos para realizar la petici\u00f3n. De ser superior a este tiempo, la petici\u00f3n se descartar\u00e1. Por defecto viene establecido a 0 , que significa que no hay l\u00edmite de tiempo para la petici\u00f3n. Las propiedades .status y .statusText nos muestran el c\u00f3digo de error HTTP devuelto por la petici\u00f3n. La propiedad .status de vuelve el n\u00famero en cuesti\u00f3n ( 200 = OK, 404 = Not Found, etc... ) y la propiedad .statusText nos devuelve un texto un poco m\u00e1s legible donde nos da algo m\u00e1s de informaci\u00f3n. Por \u00faltimo, el booleano .withCredentials nos indica si la petici\u00f3n se ha realizado enviando un usuario y contrase\u00f1a o simplemente se trata de una petici\u00f3n sin indicar credenciales. M\u00e9todos de XMLHttpRequest \u00b6 Lo que vemos a continuaci\u00f3n es una lista de los m\u00e9todos que podemos utilizar en nuestra instancia de XMLHttpRequest , donde tenemos algunos otros m\u00e9todos a parte de .open() y .send() : M\u00e9todo Descripci\u00f3n .setRequestHeader(``n, v) Permite a\u00f1adir la cabecera n con el valor v a la petici\u00f3n HTTP. .getAllResponseHeaders() Obtiene todas las cabeceras HTTP de la respuesta de la petici\u00f3n. .getResponseHeader(``name) Obtiene una cabecera HTTP concreta de la respuesta de la petici\u00f3n. .overrideMimeType(``mimetype) Permite modificar el MIME (tipo de fichero) de la petici\u00f3n. .open(``method, url) Permite preparar una petici\u00f3n HTTP. .send() Env\u00eda la petici\u00f3n previamente preparada con .open() . .send(``body) Idem a la anterior, enviando datos en la petici\u00f3n. .abort() Cancela la petici\u00f3n enviada. Los tres primeros se utilizan para temas relacionados con las cabeceras de la petici\u00f3n HTTP . El primero para la petici\u00f3n que enviamos ( permite a\u00f1adir cabeceras ) y los dos siguientes para la petici\u00f3n de respuesta que recibimos, tanto obtener todas las cabeceras con .getAllResponseHeaders() , como obtener una espec\u00edfica .getResponseHeader(name) . El m\u00e9todo .overrideMimeType() nos permite modificar ( sobreescribir ) el MIME de la petici\u00f3n recibido desde el servidor, muy \u00fatil cuando queremos forzarlo a uno diferente. Por \u00faltimo, tenemos los m\u00e9todos .open() , .send() y .abort() utilizados para iniciar, enviar y cancelar la petici\u00f3n respectivamente. En el caso de .send() es posible indicar un par\u00e1metro opcional que sea un objeto para enviar junto a la petici\u00f3n. Eventos de XMLHttpRequest \u00b6 El objeto XMLHttpRequest tiene varios eventos disponibles que podemos utilizar: Evento Descripci\u00f3n .onabort Se dispara cuando una petici\u00f3n es cancelada. .onload Se dispara cuando una petici\u00f3n se ha completado correctamente. .onloadstart Se dispara cuando una petici\u00f3n comienza a cargar datos. .onloadend Se dispara cuando una petici\u00f3n termina (con error o sin ellos). .onerror Se dispara cuando una petici\u00f3n sufre un error. .ontimeout Se dispara cuando una petici\u00f3n agota el tiempo m\u00e1ximo. .onprogress Se dispara (varias veces) cuando una petici\u00f3n recibe datos. .onreadystatechange Se dispara cuando el valor .readyState cambia. Los eventos del objeto XMLHttpRequest son bastante autodescriptivos. Quiz\u00e1s, el m\u00e1s complejo sea el evento readystatechange , el cu\u00e1l tiene relaci\u00f3n directa con la propiedad .readyState y explicaremos detalladamente en el siguiente apartado. El ciclo readyState \u00b6 La propiedad .readyState de nuestra instancia client es un valor num\u00e9rico ( representado por una constante ) que indica en el punto de progreso en que se encuentra la petici\u00f3n HTTP. Esto es muy f\u00e1cil de entender si pensamos en los cl\u00e1sicos spinners que se suelen utilizar para indicar que se est\u00e1 procediendo a obtener y descargar informaci\u00f3n. Habitualmente, estos spinners aparecen si la propiedad .readyState se encuentra entre 1 y 3 : Valor Constante|Descripci\u00f3n :---|:---|:--- 0 | XMLHttpRequest.UNSENT |Estado inicial. No se ha ejecutado a\u00fan .open() . 1 | XMLHttpRequest.OPENED |Se ha ejecutado open() , pero no se ha ejecutado a\u00fan .send() . 2 | XMLHttpRequest.HEADERS_RECEIVED |Se ha ejecutado send() . Cabeceras recibidas. 3 | XMLHttpRequest.LOADING |Descarga de informaci\u00f3n en proceso. 4 | XMLHttpRequest.DONE |Descarga finalizada. Para verlo m\u00e1s claramente, podemos observar el siguiente c\u00f3digo, donde a trav\u00e9s de la escucha del evento readystatechange de la instancia en cuesti\u00f3n, podemos estar pendientes de cuando obtenemos la informaci\u00f3n ( readyState igual a 4 y status 200 OK ): const client = new XMLHttpRequest(); client.addEventListener(\"readystatechange\", () => { if (client.readyState === 4 && client.status === 200) console.log(client.responseText); }); client.open(\"GET\", \"/robots.txt\"); client.send(); Una vez hemos entendido todos estos apartados, estamos preparados para realizar peticiones HTTP utilizando XHR . Sin embargo, es altamente recomendable echar un vistazo a los siguientes cap\u00edtulos, donde abordamos sistemas m\u00e1s modernos como fetch , que permiten realizar peticiones de una forma mucho m\u00e1s c\u00f3moda, utilizando promesas. Fetch: Peticiones As\u00edncronas \u00b6 Una vez aprendemos a realizar peticiones HTTP mediante XHR nos damos cuenta que es un mecanismo muy interesante y \u00fatil, y que nos abre un mundo de posibilidades trabajando con Javascript. Sin embargo, con el tiempo nos vamos dando cuenta tambi\u00e9n, que la forma de trabajar con objetos XMLHttpRequest , aunque es muy potente requiere mucho trabajo que hace que el c\u00f3digo no sea tan legible y pr\u00e1ctico como quiz\u00e1s deber\u00eda. Entonces es cuando surge fetch , un sistema m\u00e1s moderno, basado en promesas de Javascript, para realizar peticiones HTTP as\u00edncronas de una forma m\u00e1s legible y c\u00f3moda. Peticiones HTTP con fetch \u00b6 Fetch es el nombre de una nueva API para Javascript con la cu\u00e1l podemos realizar peticiones HTTP as\u00edncronas utilizando promesas y de forma que el c\u00f3digo sea un poco m\u00e1s sencillo y menos verbose. La forma de realizar una petici\u00f3n es muy sencilla, b\u00e1sicamente se trata de llamar a fetch y pasarle por par\u00e1metro la URL de la petici\u00f3n a realizar: // Realizamos la petici\u00f3n y guardamos la promesa const request = fetch(\"/robots.txt\"); // Si es resuelta, entonces... request.then(function(response) { ... }); El fetch() devolver\u00e1 una que ser\u00e1 aceptada cuando reciba una respuesta y s\u00f3lo ser\u00e1 rechazada si hay un fallo de red o si por alguna raz\u00f3n no se pudo completar la petici\u00f3n. El modo m\u00e1s habitual de manejar las promesas es utilizando .then() . Esto se suele reescribir de la siguiente forma, que queda mucho m\u00e1s simple: fetch(\"/robots.txt\") .then(function(response) { /** C\u00f3digo que procesa la respuesta **/ }); Al m\u00e9todo .then() se le pasa una funci\u00f3n callback donde su par\u00e1metro response es el objeto de respuesta de la petici\u00f3n que hemos realizado. En su interior realizaremos la l\u00f3gica que queramos hacer con la respuesta a nuestra petici\u00f3n. A la funci\u00f3n fetch(url, options) se le pasa por par\u00e1metro la url de la petici\u00f3n y, de forma opcional, un objeto options con opciones de la petici\u00f3n HTTP. Vamos a examinar un c\u00f3digo donde veamos un poco mejor como hacer la petici\u00f3n con fetch : // Opciones de la petici\u00f3n (valores por defecto) const options = { method: \"GET\" }; // Petici\u00f3n HTTP fetch(\"/robots.txt\", options) .then(response => response.text()) .then(data => { /** Procesar los datos **/ }); Un poco m\u00e1s adelante, veremos como trabajar con la respuesta response , pero vamos a centrarnos ahora en el par\u00e1metro opcional options de la petici\u00f3n HTTP. En este objeto podemos definir varios detalles: Campo Descripci\u00f3n method M\u00e9todo HTTP de la petici\u00f3n. Por defecto, GET . Otras opciones: HEAD , POST , etc... body Cuerpo de la petici\u00f3n HTTP. Puede ser de varios tipos: String , FormData , Blob , etc... headers Cabeceras HTTP. Por defecto, {} . credentials Modo de credenciales. Por defecto, omit . Otras opciones: same-origin e include . Lo primero, y m\u00e1s habitual, suele ser indicar el m\u00e9todo HTTP a realizar en la petici\u00f3n. Por defecto, se realizar\u00e1 un GET , pero podemos cambiarlos a HEAD , POST , PUT o cualquier otro tipo de m\u00e9todo. En segundo lugar, podemos indicar objetos para enviar en el body de la petici\u00f3n, as\u00ed como modificar las cabeceras en el campo headers : const options = { method: \"POST\", headers: { \"Content-Type\": \"application/json\" }, body: JSON.stringify(jsonData) }; Por \u00faltimo, el campo credentials permite modificar el modo en el que se realiza la petici\u00f3n. Por defecto, el valor omit hace que no se incluyan credenciales en la petici\u00f3n, pero es posible indicar los valores same-origin , que incluye las credenciales si estamos sobre el mismo dominio, o include que incluye las credenciales incluso en peticiones a otros dominios. Recuerda que estamos realizando peticiones relativas al mismo dominio . En el caso de realizar peticiones a dominios diferentes obtendr\u00edamos un problema de CORS ( Cross-Origin Resource Sharing ) similar al siguiente: Access to fetch at ' https://otherdomain.com/file.json ' from origin ' https://domain.com/ ' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled. M\u00e1s adelante hablaremos de CORS y de como solucionar estos problemas si necesitamos realizar peticiones a otros dominios. Cabeceras (Headers) \u00b6 Aunque en el ejemplo anterior hemos creado las cabeceras como un gen\u00e9rico de Javascript, es posible crear un objeto Headers con el que trabajar: const headers = new Headers(); headers.set(\"Content-Type\", \"application/json\"); headers.set(\"Content-Encoding\", \"br\"); Para ello, a parte del m\u00e9todo .set() podemos utilizar varios otros para trabajar con cabeceras, comprobar su existencia, obtener o cambiar los valores o incluso eliminarlos: M\u00e9todo Descripci\u00f3n .has(``name) Comprueba si la cabecera name est\u00e1 definida. .get(``name) Obtiene el valor de la cabecera name . .set(``name, value) Establece o modifica el valor value a la cabecera name . .append(``name, value) A\u00f1ade un nuevo valor value a la cabecera name . .delete(``name) Elimina la cabecera name . Como muchos otros objetos iterables, podemos utilizar los m\u00e9todos .entries() , .keys() y/o .values() para recorrerlos: for ([key, value] of headers.entries()) { console.log(\"Clave: \", key, \"valor: \", value); } Para peticiones con pocas cabeceras no es mayor problema, pero en peticiones m\u00e1s complejas utilizar Headers es una buena pr\u00e1ctica. Respuesta de la petici\u00f3n HTTP \u00b6 Si volvemos a nuestro ejemplo de la petici\u00f3n con fetch , observaremos que en el primer .then() tenemos un objeto response . Se trata de la respuesta que nos llega del servidor web al momento de recibir nuestra petici\u00f3n: // Petici\u00f3n HTTP fetch(\"/robots.txt\", options) .then(response => response.text()) .then(data => { /** Procesar los datos **/ }); Aunque en este ejemplo, simplemente estamos utilizando una arrow function que hace un return impl\u00edcito de la promesa que devuelve el m\u00e9todo .text() , dicho objeto response tiene una serie de propiedades y m\u00e9todos que pueden resultarnos \u00fatiles al implementar nuestro c\u00f3digo. Por el lado de las propiedades , tenemos las siguientes: Propiedad Descripci\u00f3n .status C\u00f3digo de error HTTP de la respuesta (100-599). .statusText Texto representativo del c\u00f3digo de error HTTP anterior. .ok Devuelve true si el c\u00f3digo HTTP es 200 (o empieza por 2 ). .headers Cabeceras de la respuesta. .url URL de la petici\u00f3n HTTP. Si venimos de XMLHttpRequest , esto no nos resultar\u00e1 nada extra\u00f1o. Las propiedades .status y statusText nos devuelven el c\u00f3digo de error HTTP de la respuesta en formato num\u00e9rico y cadena de texto respectivamente. Sin embargo, existe una novedad respecto a XHR, y es que tenemos una propiedad .ok que nos devuelve true si el c\u00f3digo de error de la respuesta es un valor del rango 2xx , es decir, que todo ha ido correctamente. As\u00ed pues, tenemos una forma pr\u00e1ctica y sencilla de comprobar si todo ha ido bien al realizar la petici\u00f3n: fetch(\"/robots.txt\") .then(response => { if (response.ok) return response.text() }) Por \u00faltimo, tenemos la propiedad .headers que nos devuelve las cabeceras de la respuesta y la propiedad .url que nos devuelve la URL completa de la petici\u00f3n que hemos realizado. M\u00e9todos de procesamiento \u00b6 Por otra parte, la instancia response tambi\u00e9n tiene algunos m\u00e9todos interesantes, la mayor\u00eda de ellos para procesar mediante una promesa los datos recibidos y facilitar el trabajo con ellos: M\u00e9todo Descripci\u00f3n .text() Devuelve una promesa con el texto plano de la respuesta. .json() Idem, pero con un objeto json . Equivalente a usar JSON.parse() . .blob() Idem, pero con un objeto Blob (binary large object). .arrayBuffer() Idem, pero con un objeto ArrayBuffer (buffer binario puro). .formData() Idem, pero con un objeto FormData (datos de formulario). .clone() Crea y devuelve un clon de la instancia en cuesti\u00f3n. Response.error() Devuelve un nuevo objeto Response con un error de red asociado. Response.redirect(url, code) Redirige a una url , opcionalmente con un code de error. Observa que en los ejemplos anteriores hemos utilizado response.text() . Este m\u00e9todo indica que queremos procesar la respuesta como datos textuales, por lo que dicho m\u00e9todo devolver\u00e1 una con los datos en texto plano, facilitando trabajar con ellos de forma manual: fetch(\"/robots.txt\") .then(response => response.text()) .then(data => console.log(data)); Observa que en este fragmento de c\u00f3digo, tras procesar la respuesta con response.text() , devolvemos una con el contenido en texto plano. Esta se procesa en el segundo .then() , donde gestionamos dicho contenido almacenado en data . Ten en cuenta que tenemos varios m\u00e9todos similares para procesar las respuestas. Por ejemplo, el caso anterior utilizando el m\u00e9todo response.json() en lugar de response.text() ser\u00eda equivalente al siguiente fragmento: fetch(\"/contents.json\") .then(response => response.text()) .then(data => { const json = JSON.parse(data); console.log(json); }); Como se puede ver, con response.json() nos ahorrar\u00edamos tener que hacer el JSON.parse() de forma manual, por lo que el c\u00f3digo es algo m\u00e1s directo. Ejemplo utilizando promesas \u00b6 Lo que vemos a continuaci\u00f3n ser\u00eda un ejemplo un poco m\u00e1s completo de todo lo que hemos visto hasta ahora: Comprobamos que la petici\u00f3n es correcta con response.ok Utilizamos response.text() para procesarla En el caso de producirse alg\u00fan error, lanzamos excepci\u00f3n con el c\u00f3digo de error Procesamos los datos y los mostramos en la consola En el caso de que la sea rechazada, capturamos el error con el catch // Petici\u00f3n HTTP fetch(\"/robots.txt\") .then(response => { if (response.ok) return response.text() else throw new Error(response.status); }) .then(data => { console.log(\"Datos: \" + data); }) .catch(err => { console.error(\"ERROR: \", err.message) }); De hecho, podemos refactorizar un poco este ejemplo para hacerlo m\u00e1s legible. Creamos la funci\u00f3n isResponseOk() para procesar la respuesta ( invirtiendo el condicional para hacerlo m\u00e1s directo ). Luego, los .then() y .catch() los utilizamos con una arrow function para simplificarlos: const isResponseOk = (response) => { if (!response.ok) throw new Error(response.status); return response.text() } fetch(\"/robots.txt\") .then(response => isResponseOk(response)) .then(data => console.log(\"Datos: \", data)) .catch(err => console.error(\"ERROR: \", err.message)); Sin embargo, aunque es bastante com\u00fan trabajar con promesas utilizando .then() , tambi\u00e9n podemos hacer uso de async/await para manejar promesas, de una forma un poco m\u00e1s directa. Ejemplo utilizando Async/await \u00b6 Utilizar async/await no es m\u00e1s que lo que se denomina az\u00facar sint\u00e1ctico , es decir, utilizar algo visualmente m\u00e1s agradable, pero que por debajo realiza la misma tarea. Para ello, lo que debemos tener siempre presente es que un await s\u00f3lo se puede ejecutar si esta dentro de una funci\u00f3n definida como async . En este caso, lo que hacemos es lo siguiente: Creamos una funci\u00f3n request(url) que definimos con async Llamamos a fetch utilizando await para esperar y resolver la promesa Comprobamos si todo ha ido bien usando response.ok Llamamos a response.text() utilizando await y devolvemos el resultado const request = async (url) => { const response = await fetch(url); if (!response.ok) throw new Error(\"WARN\", response.status); const data = await response.text(); return data; } const resultOk = await request(\"/robots.txt\"); const resultError = await request(\"/nonExistentFile.txt\"); Una vez hecho esto, podemos llamar a nuestra funci\u00f3n request y almacenar el resultado, usando nuevamente await . Al final, utilizar .then() o async/await es una cuesti\u00f3n de gustos y puedes utilizar el que m\u00e1s te guste. Pol\u00edtica CORS \u00b6 Cross Origin ( origen cruzado ) es la palabra que se utiliza para denominar el tipo de peticiones que se realizan a un dominio diferente del dominio de origen desde donde se realiza la petici\u00f3n. De esta forma, por una parte tenemos las peticiones de origen cruzado ( cross-origin ) y las peticiones del mismo origen ( same-origin ). \u00bfQu\u00e9 es CORS? \u00b6 CORS ( Cross-Origin Resource Sharing ) es un mecanismo o pol\u00edtica de seguridad que permite controlar las peticiones HTTP as\u00edncronas que se pueden realizar desde un navegador a un servidor con un dominio diferente de la p\u00e1gina cargada originalmente. Este tipo de peticiones se llaman peticiones de origen cruzado ( cross-origin ). Por defecto, los navegadores permiten enlazar hacia documentos situados en todo tipo de dominios si lo hacemos desde el HTML o desde Javascript utilizando la API DOM ( que a su vez est\u00e1 construyendo un HTML ). Sin embargo, no ocurre lo mismo cuando se trata de peticiones HTTP as\u00edncronas mediante Javascript ( AJAX ), sea a trav\u00e9s de XMLHttpRequest , de fetch o de librer\u00edas similares para el mismo prop\u00f3sito. Utilizando este tipo de peticiones as\u00edncronas, los recursos situados en dominios diferentes al de la p\u00e1gina actual no est\u00e1n permitidos por defecto. Es lo que se suele denominar protecci\u00f3n de CORS . Su finalidad es dificultar la posibilidad de a\u00f1adir recursos ajenos en un sitio determinado. Si intentamos realizar una petici\u00f3n as\u00edncrona hacia otro dominio diferente, probablemente obtendremos un error de CORS similar al siguiente: Access to fetch at ' https://otherdomain.com/file.json ' from origin ' https://domain.com/ ' has been blocked by CORS policy : No 'Access-Control-Allow-Origin' header is present on the requested resource. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled. Access-Control-Allow-Origin \u00b6 Como hemos comentado, las peticiones HTTP as\u00edncronas de origen cruzado no est\u00e1n permitidas, pero existen formas de permitirlas. La m\u00e1s b\u00e1sica, probablemente, sea la de incluir una cabecera Access-Control-Allow-Origin en la respuesta de la petici\u00f3n, donde debe indicarse el dominio al que se le quiere dar permiso: Access-Control-Allow-Origin: https://domain.com/ De esta forma, el navegador comprobar\u00e1 dichas cabeceras y si coinciden con el dominio de origen que realiz\u00f3 la petici\u00f3n, esta se permitir\u00e1. En el ejemplo anterior, la cabecera tiene el valor https://domain.com/ , pero en algunos casos puede interesar indicar el valor * . El asterisco * indica que se permiten peticiones de origen cruzado a cualquier dominio , algo que puede ser interesante cuando se tienen API p\u00fablicas a las que quieres permitir el acceso al p\u00fablico en general, casos como los de Google Fonts o JSDelivr , por citar un ejemplo. Estas cabeceras puedes verlas facilmente accediendo a la pesta\u00f1a Network del Developer Tools del navegador. En esta secci\u00f3n te aparecer\u00e1 una lista de peticiones realizadas por el navegador en la p\u00e1gina actual. Si seleccionamos una petici\u00f3n y accedemos al apartado de cabeceras ( Headers ), podremos examinar si existe la cabecera Access-Control-Allow-Origin : CORS en entornos de desarrollo \u00b6 Otra opci\u00f3n sencilla y r\u00e1pida para no tener que lidiar con CORS temporalmente es la de instalar la extensi\u00f3n Allow CORS , disponible tanto Allow CORS para Chrome como Allow CORS para Firefox . Esta extensi\u00f3n deshabilita la pol\u00edtica CORS mientras est\u00e1 instalada y activada. Esta elecci\u00f3n es equivalente a que todas las respuestas a las peticiones as\u00edncronas realizadas tengan la mencionada cabecera con el valor * . Obviamente, es importante recalcar que es una opci\u00f3n que s\u00f3lo nos funcionar\u00e1 en nuestro equipo y navegador , pero puede ser muy pr\u00e1ctica para simplificar el trabajo en desarrollo. Fuente: Lenguaje Javascript por Manz \u00b6","title":"Peticiones HTTP"},{"location":"desarrollo/javascript/06-peticiones_HTTP/#peticiones-http","text":"","title":"Peticiones HTTP"},{"location":"desarrollo/javascript/06-peticiones_HTTP/#ajax-peticiones-http","text":"Un navegador , durante la carga de una p\u00e1gina, suele realizar m\u00faltiples peticiones HTTP a un servidor para solicitar los archivos que necesita renderizar en la p\u00e1gina. Es el caso de, en primer lugar, el documento .html de la p\u00e1gina ( donde se hace referencia a m\u00faltiples archivos ) y luego todos esos archivos relacionados: los ficheros de estilos .css , las im\u00e1genes .jpg , .png , .webp u otras, los scripts .js , las tipograf\u00edas .ttf , .woff o .woff2 , etc.","title":"AJAX: Peticiones HTTP"},{"location":"desarrollo/javascript/06-peticiones_HTTP/#que-es-una-peticion-http","text":"Una petici\u00f3n HTTP es como suele denominarse a la acci\u00f3n por parte del navegador de solicitar a un servidor web un documento o archivo, ya sea un fichero .html , una imagen, una tipograf\u00eda, un archivo .js , etc. Gracias a dicha petici\u00f3n, el navegador puede descargar ese archivo, almacenarlo en un cach\u00e9 temporal de archivos del navegador y, finalmente, mostrarlo en la p\u00e1gina actual que lo ha solicitado.","title":"\u00bfQu\u00e9 es una petici\u00f3n HTTP?"},{"location":"desarrollo/javascript/06-peticiones_HTTP/#peticiones-http-mediante-ajax","text":"Con el tiempo, aparece una nueva modalidad de realizar peticiones, denominada AJAX ( Asynchronous Javascript and XML ). Esta modalidad se basa en que la petici\u00f3n HTTP se realiza desde Javascript, de forma transparente al usuario, descargando la informaci\u00f3n y pudiendo tratarla sin necesidad de mostrarla directamente en la p\u00e1gina . Esto produce un interesante cambio en el panorama que hab\u00eda entonces, puesto que podemos hacer actualizaciones de contenidos de forma parcial , de modo que se actualice una p\u00e1gina \u00ab en vivo \u00bb, sin necesidad de recargar toda la p\u00e1gina, sino solamente actualizado una peque\u00f1a parte de ella, pudiendo utilizar Javascript para crear todo tipo de l\u00f3gica de apoyo. Originalmente, a este sistema de realizaci\u00f3n de peticiones HTTP se le llam\u00f3 AJAX , donde la X significa XML , el formato ligero de datos que m\u00e1s se utilizaba en aquel entonces. Actualmente, sobre todo en el mundo Javascript, se utiliza m\u00e1s el formato JSON , aunque por razones fon\u00e9ticas evidentes ( y evitar confundirlo con una risa ) se sigue manteniendo el t\u00e9rmino AJAX . Posteriormente, y debido a una evoluci\u00f3n a mayor escala relacionada con este tema, se ha pasado de crear p\u00e1ginas de tipo MPA por defecto, a crear p\u00e1ginas de tipo SPA , mucho m\u00e1s frecuentes en entornos empresariales hoy en d\u00eda.","title":"Peticiones HTTP mediante AJAX"},{"location":"desarrollo/javascript/06-peticiones_HTTP/#metodos-de-peticion-ajax","text":"Existen varias formas de realizar peticiones HTTP mediante AJAX , pero las principales suelen ser XMLHttpRequest y fetch ( nativas, incluidas en el navegador por defecto ), adem\u00e1s de liber\u00edas como axios o superagent : M\u00e9todo Descripci\u00f3n XMLHttpRequest Se suele abreviar como XHR . El m\u00e1s antiguo, y tambi\u00e9n el m\u00e1s verbose. Nativo. fetch Nuevo sistema nativo de peticiones basado en promesas. Sin soporte en IE. Axios Librer\u00eda basada en promesas para realizar peticiones en Node o navegadores. superagent Librer\u00eda para realizar peticiones HTTP tanto en Node como en navegadores. frisbee Librer\u00eda basada en fetch. Suele usarse junto a React Native. En los siguientes cap\u00edtulos iremos viendo como funcionan.","title":"M\u00e9todos de petici\u00f3n AJAX"},{"location":"desarrollo/javascript/06-peticiones_HTTP/#mpa-multiple-page-application","text":"Tradicionalmente, el sistema que se segu\u00eda para crear p\u00e1ginas o aplicaciones web se enmarcaba dentro de la categor\u00eda de p\u00e1ginas MPA ( Multiple Page Application ). Bajo este sistema, el navegador se descarga el fichero .html , lo lee y luego realiza las peticiones de los restantes archivos relacionados que encuentra en el documento HTML. Si el usuario pulsa en alg\u00fan enlace, se descarga el .html de dicho enlace ( recargando la p\u00e1gina completa ) y se repite el proceso. Este sistema es el que se observa en p\u00e1ginas en las que vamos navegando mediante enlaces, y al hacer click en ellos, se recarga la p\u00e1gina completa. Generalmente, es el que se utiliza frecuentemente en sitios web m\u00e1s tradicionales, los que usan mayoritariamente backend .","title":"MPA: Multiple Page Application"},{"location":"desarrollo/javascript/06-peticiones_HTTP/#spa-single-page-application","text":"En el lado opuesto se encuentran las p\u00e1ginas de tipo SPA ( Single Page Application ). Se trata de un enfoque m\u00e1s moderno, donde el navegador se descarga una versi\u00f3n m\u00ednima de .html junto a un .js que se encargar\u00e1 de controlar toda la web. Realizar\u00e1 peticiones de los archivos relacionados junto a peticiones a archivos .json o .js con m\u00e1s informaci\u00f3n o nuevos contenidos, que mostrar\u00e1 en el navegador parcial o completamente, pero sin la necesidad obligatoria de recargar la p\u00e1gina completamente. Este sistema se utiliza mayoritariamente para construir aplicaciones web como dashboards o sitios de gesti\u00f3n en los que no necesitamos \u00abnavegar\u00bb a trav\u00e9s de una serie de p\u00e1ginas. Por ejemplo, p\u00e1ginas como WhatsApp Web, Twitter o Google Drive podr\u00edan ser ejemplos de SPA . Las p\u00e1ginas de tipo SPA son las que utilizan en la mayor\u00eda de los frameworks de Javascript, como por ejemplo, React , Vue o Angular .","title":"SPA: Single Page Application"},{"location":"desarrollo/javascript/06-peticiones_HTTP/#xhr-xmlhttprequest","text":"XMLHttpRequest (XHR) es un objeto especial de Javascript que permite realizar peticiones HTTP as\u00edncronas (AJAX) de forma nativa desde Javascript. Se trata de la primera implementaci\u00f3n que existi\u00f3 en ECMAScript antes de surgir fetch , el est\u00e1ndar actual. Actualmente es m\u00e1s frecuente utilizar fetch , puesto que es una API m\u00e1s actual y moderna que utiliza promesas y nos permite hacer lo mismo ( o m\u00e1s ) y escribir menos c\u00f3digo.","title":"XHR: XMLHttpRequest"},{"location":"desarrollo/javascript/06-peticiones_HTTP/#que-es-xmlhttprequest","text":"El objeto XMLHttpRequest se cre\u00f3 originalmente para realizar peticiones HTTP a ficheros .xml externos desde Javascript. Actualmente, se realizan las mismas operaciones pero con ficheros JSON , ya que son mucho m\u00e1s habituales en el ecosistema Javascript como almacenamiento ligero de datos . El mecanismo principal de peticiones HTTP mediante XMLHttpRequest es muy sencillo, aunque se vuelve un poco m\u00e1s complejo a medida que vamos realizando comprobaciones y detalles relacionados, ya que se realiza todo m\u00e1s a bajo nivel que su equivalente moderno fetch . El primer paso es crear un objeto XMLHttpRequest ( XHR ): // Creamos la instancia del objeto XHR const client = new XMLHttpRequest(); Mediante esta instancia que acabamos de crear, podremos definir el tipo de petici\u00f3n utilizando el m\u00e9todo open(method, url) , indicando el m\u00e9todo HTTP y la URL a la que queremos hacer la petici\u00f3n: // Preparamos la petici\u00f3n y la enviamos client.open(\"GET\", \"/robots.txt\"); client.send(); Con el m\u00e9todo .open() solo preparamos la petici\u00f3n, pero la haremos finalmente efectiva con el m\u00e9todo .send() , el cu\u00e1l lanzar\u00e1 la petici\u00f3n al servidor. Poco despu\u00e9s, si consultamos el contenido de la propiedad .responseText ( texto de respuesta ) de nuestra instancia, comprobaremos que deber\u00eda estar el contenido del fichero que hemos pedido: // Consultamos la propiedad que almacena el contenido console.log(client.responseText); Este ser\u00eda el funcionamiento base de las peticiones XHR , que como puedes ver, es muy sencillo. Sin embargo, esto es s\u00f3lo la teor\u00eda. A la hora de la pr\u00e1ctica hay m\u00e1s detalles que hay que tener en cuenta. Por ejemplo, si has ejecutado l\u00ednea por l\u00ednea en una consola del navegador, habr\u00e1s comprobado que este c\u00f3digo funciona perfectamente. Sin embargo, si intentamos ejecutar todo el c\u00f3digo de golpe , no funcionar\u00e1; el valor de client.responseText nos aparecer\u00e1 vac\u00edo. Esto ocurre debido a que no estamos dando tiempo suficiente al navegador para realizar la petici\u00f3n del fichero /robots.txt al servidor, y por lo tanto, consultamos el resultado antes de tenerlo. Para solucionar esto, hay que esperar un tiempo para comprobar el valor, o mejor a\u00fan, hacerlo de forma as\u00edncrona , como veremos m\u00e1s adelante. El fichero /robots.txt es un fichero de texto que suele existir en pr\u00e1cticamente todas las p\u00e1ginas webs. Se trata de un fichero de texto plano que indica las URL a las que los robots o crawlers ( como el de Google ) no deben acceder.","title":"\u00bfQu\u00e9 es XMLHttpRequest?"},{"location":"desarrollo/javascript/06-peticiones_HTTP/#politica-cors","text":"Habr\u00e1s observado que estamos realizando peticiones relativas , es decir, al mismo dominio . Por defecto, en Javascript, las peticiones al mismo dominio de la web donde nos encontramos se pueden realizar sin ninguna restricci\u00f3n. Sin embargo, si intentamos realizarlas a otro dominio diferente, probablemente nos aparezca un error de CORS ( Cross-Origin Resource Sharing ) similar al siguiente: Access to XMLHttpRequest at ' https://domain.com/robots.txt ' from origin ' https://currentdomain.com/ ' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource. M\u00e1s adelante, en el cap\u00edtulo CORS , abordaremos este tema y comentaremos los detalles que hay que cumplir para poder hacer peticiones a dominios externos, pero de momento nos limitaremos a realizarlos al propio dominio donde nos encontramos.","title":"Pol\u00edtica CORS"},{"location":"desarrollo/javascript/06-peticiones_HTTP/#el-objeto-xmlhttprequest","text":"Al crear un objeto XMLHttpRequest tenemos acceso a una serie de propiedades que forman parte de nuestra instancia. Entre ellas, se encuentran las siguientes: Propiedad Descripci\u00f3n .responseType Define el tipo de respuesta de .response : json , Blob , etc. Por defecto, text . .response Contenido parseado autom\u00e1ticamente basado en .responseType . .responseText Respuesta de la petici\u00f3n como texto plano o si no se ha recibido. .responseURL URL de la petici\u00f3n HTTP a realizar. .readyState N\u00famero que indica en que estado se encuentra la petici\u00f3n (ver m\u00e1s adelante). .timeout Milisegundos permitidos para realizar la petici\u00f3n HTTP. Por defecto, 0 (sin l\u00edmite). .status C\u00f3digo de error HTTP de respuesta de la petici\u00f3n. .statusText Texto con el c\u00f3digo de error de respuesta, legible para humanos. .withCredentials Indica si la petici\u00f3n HTTP se est\u00e1 realizando con credenciales. En primer lugar, las propiedades .responseType y .response se usan conjuntamente, debido a que si establecemos un valor en .responseType antes de hacer la petici\u00f3n, se procesar\u00e1 autom\u00e1ticamente la respuesta en .response . Por ejemplo, si establecemos el valor json en la propiedad .responseType , en .response obtendremos el objeto JSON ya parseado. Por otro lado, en la propiedad .responseText siempre obtendremos el valor de texto puro , por si ese proceso de parseo queremos hacerlo manualmente. En la propiedad .responseURL tendremos la ruta completa de la petici\u00f3n HTTP. Por otro lado, tenemos la propiedad .readyState , en la cu\u00e1l profundizaremos m\u00e1s adelante. B\u00e1sicamente nos devuelve un valor que determina en que punto se encuentra la petici\u00f3n ( iniciada, enviada, proces\u00e1ndose, finalizada ). Es muy \u00fatil para saber cuando realizar ciertas acciones. La propiedad .timeout indica el n\u00famero de milisegundos m\u00e1ximo que permitiremos para realizar la petici\u00f3n. De ser superior a este tiempo, la petici\u00f3n se descartar\u00e1. Por defecto viene establecido a 0 , que significa que no hay l\u00edmite de tiempo para la petici\u00f3n. Las propiedades .status y .statusText nos muestran el c\u00f3digo de error HTTP devuelto por la petici\u00f3n. La propiedad .status de vuelve el n\u00famero en cuesti\u00f3n ( 200 = OK, 404 = Not Found, etc... ) y la propiedad .statusText nos devuelve un texto un poco m\u00e1s legible donde nos da algo m\u00e1s de informaci\u00f3n. Por \u00faltimo, el booleano .withCredentials nos indica si la petici\u00f3n se ha realizado enviando un usuario y contrase\u00f1a o simplemente se trata de una petici\u00f3n sin indicar credenciales.","title":"El objeto XMLHttpRequest"},{"location":"desarrollo/javascript/06-peticiones_HTTP/#metodos-de-xmlhttprequest","text":"Lo que vemos a continuaci\u00f3n es una lista de los m\u00e9todos que podemos utilizar en nuestra instancia de XMLHttpRequest , donde tenemos algunos otros m\u00e9todos a parte de .open() y .send() : M\u00e9todo Descripci\u00f3n .setRequestHeader(``n, v) Permite a\u00f1adir la cabecera n con el valor v a la petici\u00f3n HTTP. .getAllResponseHeaders() Obtiene todas las cabeceras HTTP de la respuesta de la petici\u00f3n. .getResponseHeader(``name) Obtiene una cabecera HTTP concreta de la respuesta de la petici\u00f3n. .overrideMimeType(``mimetype) Permite modificar el MIME (tipo de fichero) de la petici\u00f3n. .open(``method, url) Permite preparar una petici\u00f3n HTTP. .send() Env\u00eda la petici\u00f3n previamente preparada con .open() . .send(``body) Idem a la anterior, enviando datos en la petici\u00f3n. .abort() Cancela la petici\u00f3n enviada. Los tres primeros se utilizan para temas relacionados con las cabeceras de la petici\u00f3n HTTP . El primero para la petici\u00f3n que enviamos ( permite a\u00f1adir cabeceras ) y los dos siguientes para la petici\u00f3n de respuesta que recibimos, tanto obtener todas las cabeceras con .getAllResponseHeaders() , como obtener una espec\u00edfica .getResponseHeader(name) . El m\u00e9todo .overrideMimeType() nos permite modificar ( sobreescribir ) el MIME de la petici\u00f3n recibido desde el servidor, muy \u00fatil cuando queremos forzarlo a uno diferente. Por \u00faltimo, tenemos los m\u00e9todos .open() , .send() y .abort() utilizados para iniciar, enviar y cancelar la petici\u00f3n respectivamente. En el caso de .send() es posible indicar un par\u00e1metro opcional que sea un objeto para enviar junto a la petici\u00f3n.","title":"M\u00e9todos de XMLHttpRequest"},{"location":"desarrollo/javascript/06-peticiones_HTTP/#eventos-de-xmlhttprequest","text":"El objeto XMLHttpRequest tiene varios eventos disponibles que podemos utilizar: Evento Descripci\u00f3n .onabort Se dispara cuando una petici\u00f3n es cancelada. .onload Se dispara cuando una petici\u00f3n se ha completado correctamente. .onloadstart Se dispara cuando una petici\u00f3n comienza a cargar datos. .onloadend Se dispara cuando una petici\u00f3n termina (con error o sin ellos). .onerror Se dispara cuando una petici\u00f3n sufre un error. .ontimeout Se dispara cuando una petici\u00f3n agota el tiempo m\u00e1ximo. .onprogress Se dispara (varias veces) cuando una petici\u00f3n recibe datos. .onreadystatechange Se dispara cuando el valor .readyState cambia. Los eventos del objeto XMLHttpRequest son bastante autodescriptivos. Quiz\u00e1s, el m\u00e1s complejo sea el evento readystatechange , el cu\u00e1l tiene relaci\u00f3n directa con la propiedad .readyState y explicaremos detalladamente en el siguiente apartado.","title":"Eventos de XMLHttpRequest"},{"location":"desarrollo/javascript/06-peticiones_HTTP/#el-ciclo-readystate","text":"La propiedad .readyState de nuestra instancia client es un valor num\u00e9rico ( representado por una constante ) que indica en el punto de progreso en que se encuentra la petici\u00f3n HTTP. Esto es muy f\u00e1cil de entender si pensamos en los cl\u00e1sicos spinners que se suelen utilizar para indicar que se est\u00e1 procediendo a obtener y descargar informaci\u00f3n. Habitualmente, estos spinners aparecen si la propiedad .readyState se encuentra entre 1 y 3 : Valor Constante|Descripci\u00f3n :---|:---|:--- 0 | XMLHttpRequest.UNSENT |Estado inicial. No se ha ejecutado a\u00fan .open() . 1 | XMLHttpRequest.OPENED |Se ha ejecutado open() , pero no se ha ejecutado a\u00fan .send() . 2 | XMLHttpRequest.HEADERS_RECEIVED |Se ha ejecutado send() . Cabeceras recibidas. 3 | XMLHttpRequest.LOADING |Descarga de informaci\u00f3n en proceso. 4 | XMLHttpRequest.DONE |Descarga finalizada. Para verlo m\u00e1s claramente, podemos observar el siguiente c\u00f3digo, donde a trav\u00e9s de la escucha del evento readystatechange de la instancia en cuesti\u00f3n, podemos estar pendientes de cuando obtenemos la informaci\u00f3n ( readyState igual a 4 y status 200 OK ): const client = new XMLHttpRequest(); client.addEventListener(\"readystatechange\", () => { if (client.readyState === 4 && client.status === 200) console.log(client.responseText); }); client.open(\"GET\", \"/robots.txt\"); client.send(); Una vez hemos entendido todos estos apartados, estamos preparados para realizar peticiones HTTP utilizando XHR . Sin embargo, es altamente recomendable echar un vistazo a los siguientes cap\u00edtulos, donde abordamos sistemas m\u00e1s modernos como fetch , que permiten realizar peticiones de una forma mucho m\u00e1s c\u00f3moda, utilizando promesas.","title":"El ciclo readyState"},{"location":"desarrollo/javascript/06-peticiones_HTTP/#fetch-peticiones-asincronas","text":"Una vez aprendemos a realizar peticiones HTTP mediante XHR nos damos cuenta que es un mecanismo muy interesante y \u00fatil, y que nos abre un mundo de posibilidades trabajando con Javascript. Sin embargo, con el tiempo nos vamos dando cuenta tambi\u00e9n, que la forma de trabajar con objetos XMLHttpRequest , aunque es muy potente requiere mucho trabajo que hace que el c\u00f3digo no sea tan legible y pr\u00e1ctico como quiz\u00e1s deber\u00eda. Entonces es cuando surge fetch , un sistema m\u00e1s moderno, basado en promesas de Javascript, para realizar peticiones HTTP as\u00edncronas de una forma m\u00e1s legible y c\u00f3moda.","title":"Fetch: Peticiones As\u00edncronas"},{"location":"desarrollo/javascript/06-peticiones_HTTP/#peticiones-http-con-fetch","text":"Fetch es el nombre de una nueva API para Javascript con la cu\u00e1l podemos realizar peticiones HTTP as\u00edncronas utilizando promesas y de forma que el c\u00f3digo sea un poco m\u00e1s sencillo y menos verbose. La forma de realizar una petici\u00f3n es muy sencilla, b\u00e1sicamente se trata de llamar a fetch y pasarle por par\u00e1metro la URL de la petici\u00f3n a realizar: // Realizamos la petici\u00f3n y guardamos la promesa const request = fetch(\"/robots.txt\"); // Si es resuelta, entonces... request.then(function(response) { ... }); El fetch() devolver\u00e1 una que ser\u00e1 aceptada cuando reciba una respuesta y s\u00f3lo ser\u00e1 rechazada si hay un fallo de red o si por alguna raz\u00f3n no se pudo completar la petici\u00f3n. El modo m\u00e1s habitual de manejar las promesas es utilizando .then() . Esto se suele reescribir de la siguiente forma, que queda mucho m\u00e1s simple: fetch(\"/robots.txt\") .then(function(response) { /** C\u00f3digo que procesa la respuesta **/ }); Al m\u00e9todo .then() se le pasa una funci\u00f3n callback donde su par\u00e1metro response es el objeto de respuesta de la petici\u00f3n que hemos realizado. En su interior realizaremos la l\u00f3gica que queramos hacer con la respuesta a nuestra petici\u00f3n. A la funci\u00f3n fetch(url, options) se le pasa por par\u00e1metro la url de la petici\u00f3n y, de forma opcional, un objeto options con opciones de la petici\u00f3n HTTP. Vamos a examinar un c\u00f3digo donde veamos un poco mejor como hacer la petici\u00f3n con fetch : // Opciones de la petici\u00f3n (valores por defecto) const options = { method: \"GET\" }; // Petici\u00f3n HTTP fetch(\"/robots.txt\", options) .then(response => response.text()) .then(data => { /** Procesar los datos **/ }); Un poco m\u00e1s adelante, veremos como trabajar con la respuesta response , pero vamos a centrarnos ahora en el par\u00e1metro opcional options de la petici\u00f3n HTTP. En este objeto podemos definir varios detalles: Campo Descripci\u00f3n method M\u00e9todo HTTP de la petici\u00f3n. Por defecto, GET . Otras opciones: HEAD , POST , etc... body Cuerpo de la petici\u00f3n HTTP. Puede ser de varios tipos: String , FormData , Blob , etc... headers Cabeceras HTTP. Por defecto, {} . credentials Modo de credenciales. Por defecto, omit . Otras opciones: same-origin e include . Lo primero, y m\u00e1s habitual, suele ser indicar el m\u00e9todo HTTP a realizar en la petici\u00f3n. Por defecto, se realizar\u00e1 un GET , pero podemos cambiarlos a HEAD , POST , PUT o cualquier otro tipo de m\u00e9todo. En segundo lugar, podemos indicar objetos para enviar en el body de la petici\u00f3n, as\u00ed como modificar las cabeceras en el campo headers : const options = { method: \"POST\", headers: { \"Content-Type\": \"application/json\" }, body: JSON.stringify(jsonData) }; Por \u00faltimo, el campo credentials permite modificar el modo en el que se realiza la petici\u00f3n. Por defecto, el valor omit hace que no se incluyan credenciales en la petici\u00f3n, pero es posible indicar los valores same-origin , que incluye las credenciales si estamos sobre el mismo dominio, o include que incluye las credenciales incluso en peticiones a otros dominios. Recuerda que estamos realizando peticiones relativas al mismo dominio . En el caso de realizar peticiones a dominios diferentes obtendr\u00edamos un problema de CORS ( Cross-Origin Resource Sharing ) similar al siguiente: Access to fetch at ' https://otherdomain.com/file.json ' from origin ' https://domain.com/ ' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled. M\u00e1s adelante hablaremos de CORS y de como solucionar estos problemas si necesitamos realizar peticiones a otros dominios.","title":"Peticiones HTTP con fetch"},{"location":"desarrollo/javascript/06-peticiones_HTTP/#cabeceras-headers","text":"Aunque en el ejemplo anterior hemos creado las cabeceras como un gen\u00e9rico de Javascript, es posible crear un objeto Headers con el que trabajar: const headers = new Headers(); headers.set(\"Content-Type\", \"application/json\"); headers.set(\"Content-Encoding\", \"br\"); Para ello, a parte del m\u00e9todo .set() podemos utilizar varios otros para trabajar con cabeceras, comprobar su existencia, obtener o cambiar los valores o incluso eliminarlos: M\u00e9todo Descripci\u00f3n .has(``name) Comprueba si la cabecera name est\u00e1 definida. .get(``name) Obtiene el valor de la cabecera name . .set(``name, value) Establece o modifica el valor value a la cabecera name . .append(``name, value) A\u00f1ade un nuevo valor value a la cabecera name . .delete(``name) Elimina la cabecera name . Como muchos otros objetos iterables, podemos utilizar los m\u00e9todos .entries() , .keys() y/o .values() para recorrerlos: for ([key, value] of headers.entries()) { console.log(\"Clave: \", key, \"valor: \", value); } Para peticiones con pocas cabeceras no es mayor problema, pero en peticiones m\u00e1s complejas utilizar Headers es una buena pr\u00e1ctica.","title":"Cabeceras (Headers)"},{"location":"desarrollo/javascript/06-peticiones_HTTP/#respuesta-de-la-peticion-http","text":"Si volvemos a nuestro ejemplo de la petici\u00f3n con fetch , observaremos que en el primer .then() tenemos un objeto response . Se trata de la respuesta que nos llega del servidor web al momento de recibir nuestra petici\u00f3n: // Petici\u00f3n HTTP fetch(\"/robots.txt\", options) .then(response => response.text()) .then(data => { /** Procesar los datos **/ }); Aunque en este ejemplo, simplemente estamos utilizando una arrow function que hace un return impl\u00edcito de la promesa que devuelve el m\u00e9todo .text() , dicho objeto response tiene una serie de propiedades y m\u00e9todos que pueden resultarnos \u00fatiles al implementar nuestro c\u00f3digo. Por el lado de las propiedades , tenemos las siguientes: Propiedad Descripci\u00f3n .status C\u00f3digo de error HTTP de la respuesta (100-599). .statusText Texto representativo del c\u00f3digo de error HTTP anterior. .ok Devuelve true si el c\u00f3digo HTTP es 200 (o empieza por 2 ). .headers Cabeceras de la respuesta. .url URL de la petici\u00f3n HTTP. Si venimos de XMLHttpRequest , esto no nos resultar\u00e1 nada extra\u00f1o. Las propiedades .status y statusText nos devuelven el c\u00f3digo de error HTTP de la respuesta en formato num\u00e9rico y cadena de texto respectivamente. Sin embargo, existe una novedad respecto a XHR, y es que tenemos una propiedad .ok que nos devuelve true si el c\u00f3digo de error de la respuesta es un valor del rango 2xx , es decir, que todo ha ido correctamente. As\u00ed pues, tenemos una forma pr\u00e1ctica y sencilla de comprobar si todo ha ido bien al realizar la petici\u00f3n: fetch(\"/robots.txt\") .then(response => { if (response.ok) return response.text() }) Por \u00faltimo, tenemos la propiedad .headers que nos devuelve las cabeceras de la respuesta y la propiedad .url que nos devuelve la URL completa de la petici\u00f3n que hemos realizado.","title":"Respuesta de la petici\u00f3n HTTP"},{"location":"desarrollo/javascript/06-peticiones_HTTP/#metodos-de-procesamiento","text":"Por otra parte, la instancia response tambi\u00e9n tiene algunos m\u00e9todos interesantes, la mayor\u00eda de ellos para procesar mediante una promesa los datos recibidos y facilitar el trabajo con ellos: M\u00e9todo Descripci\u00f3n .text() Devuelve una promesa con el texto plano de la respuesta. .json() Idem, pero con un objeto json . Equivalente a usar JSON.parse() . .blob() Idem, pero con un objeto Blob (binary large object). .arrayBuffer() Idem, pero con un objeto ArrayBuffer (buffer binario puro). .formData() Idem, pero con un objeto FormData (datos de formulario). .clone() Crea y devuelve un clon de la instancia en cuesti\u00f3n. Response.error() Devuelve un nuevo objeto Response con un error de red asociado. Response.redirect(url, code) Redirige a una url , opcionalmente con un code de error. Observa que en los ejemplos anteriores hemos utilizado response.text() . Este m\u00e9todo indica que queremos procesar la respuesta como datos textuales, por lo que dicho m\u00e9todo devolver\u00e1 una con los datos en texto plano, facilitando trabajar con ellos de forma manual: fetch(\"/robots.txt\") .then(response => response.text()) .then(data => console.log(data)); Observa que en este fragmento de c\u00f3digo, tras procesar la respuesta con response.text() , devolvemos una con el contenido en texto plano. Esta se procesa en el segundo .then() , donde gestionamos dicho contenido almacenado en data . Ten en cuenta que tenemos varios m\u00e9todos similares para procesar las respuestas. Por ejemplo, el caso anterior utilizando el m\u00e9todo response.json() en lugar de response.text() ser\u00eda equivalente al siguiente fragmento: fetch(\"/contents.json\") .then(response => response.text()) .then(data => { const json = JSON.parse(data); console.log(json); }); Como se puede ver, con response.json() nos ahorrar\u00edamos tener que hacer el JSON.parse() de forma manual, por lo que el c\u00f3digo es algo m\u00e1s directo.","title":"M\u00e9todos de procesamiento"},{"location":"desarrollo/javascript/06-peticiones_HTTP/#ejemplo-utilizando-promesas","text":"Lo que vemos a continuaci\u00f3n ser\u00eda un ejemplo un poco m\u00e1s completo de todo lo que hemos visto hasta ahora: Comprobamos que la petici\u00f3n es correcta con response.ok Utilizamos response.text() para procesarla En el caso de producirse alg\u00fan error, lanzamos excepci\u00f3n con el c\u00f3digo de error Procesamos los datos y los mostramos en la consola En el caso de que la sea rechazada, capturamos el error con el catch // Petici\u00f3n HTTP fetch(\"/robots.txt\") .then(response => { if (response.ok) return response.text() else throw new Error(response.status); }) .then(data => { console.log(\"Datos: \" + data); }) .catch(err => { console.error(\"ERROR: \", err.message) }); De hecho, podemos refactorizar un poco este ejemplo para hacerlo m\u00e1s legible. Creamos la funci\u00f3n isResponseOk() para procesar la respuesta ( invirtiendo el condicional para hacerlo m\u00e1s directo ). Luego, los .then() y .catch() los utilizamos con una arrow function para simplificarlos: const isResponseOk = (response) => { if (!response.ok) throw new Error(response.status); return response.text() } fetch(\"/robots.txt\") .then(response => isResponseOk(response)) .then(data => console.log(\"Datos: \", data)) .catch(err => console.error(\"ERROR: \", err.message)); Sin embargo, aunque es bastante com\u00fan trabajar con promesas utilizando .then() , tambi\u00e9n podemos hacer uso de async/await para manejar promesas, de una forma un poco m\u00e1s directa.","title":"Ejemplo utilizando promesas"},{"location":"desarrollo/javascript/06-peticiones_HTTP/#ejemplo-utilizando-asyncawait","text":"Utilizar async/await no es m\u00e1s que lo que se denomina az\u00facar sint\u00e1ctico , es decir, utilizar algo visualmente m\u00e1s agradable, pero que por debajo realiza la misma tarea. Para ello, lo que debemos tener siempre presente es que un await s\u00f3lo se puede ejecutar si esta dentro de una funci\u00f3n definida como async . En este caso, lo que hacemos es lo siguiente: Creamos una funci\u00f3n request(url) que definimos con async Llamamos a fetch utilizando await para esperar y resolver la promesa Comprobamos si todo ha ido bien usando response.ok Llamamos a response.text() utilizando await y devolvemos el resultado const request = async (url) => { const response = await fetch(url); if (!response.ok) throw new Error(\"WARN\", response.status); const data = await response.text(); return data; } const resultOk = await request(\"/robots.txt\"); const resultError = await request(\"/nonExistentFile.txt\"); Una vez hecho esto, podemos llamar a nuestra funci\u00f3n request y almacenar el resultado, usando nuevamente await . Al final, utilizar .then() o async/await es una cuesti\u00f3n de gustos y puedes utilizar el que m\u00e1s te guste.","title":"Ejemplo utilizando Async/await"},{"location":"desarrollo/javascript/06-peticiones_HTTP/#politica-cors_1","text":"Cross Origin ( origen cruzado ) es la palabra que se utiliza para denominar el tipo de peticiones que se realizan a un dominio diferente del dominio de origen desde donde se realiza la petici\u00f3n. De esta forma, por una parte tenemos las peticiones de origen cruzado ( cross-origin ) y las peticiones del mismo origen ( same-origin ).","title":"Pol\u00edtica CORS"},{"location":"desarrollo/javascript/06-peticiones_HTTP/#que-es-cors","text":"CORS ( Cross-Origin Resource Sharing ) es un mecanismo o pol\u00edtica de seguridad que permite controlar las peticiones HTTP as\u00edncronas que se pueden realizar desde un navegador a un servidor con un dominio diferente de la p\u00e1gina cargada originalmente. Este tipo de peticiones se llaman peticiones de origen cruzado ( cross-origin ). Por defecto, los navegadores permiten enlazar hacia documentos situados en todo tipo de dominios si lo hacemos desde el HTML o desde Javascript utilizando la API DOM ( que a su vez est\u00e1 construyendo un HTML ). Sin embargo, no ocurre lo mismo cuando se trata de peticiones HTTP as\u00edncronas mediante Javascript ( AJAX ), sea a trav\u00e9s de XMLHttpRequest , de fetch o de librer\u00edas similares para el mismo prop\u00f3sito. Utilizando este tipo de peticiones as\u00edncronas, los recursos situados en dominios diferentes al de la p\u00e1gina actual no est\u00e1n permitidos por defecto. Es lo que se suele denominar protecci\u00f3n de CORS . Su finalidad es dificultar la posibilidad de a\u00f1adir recursos ajenos en un sitio determinado. Si intentamos realizar una petici\u00f3n as\u00edncrona hacia otro dominio diferente, probablemente obtendremos un error de CORS similar al siguiente: Access to fetch at ' https://otherdomain.com/file.json ' from origin ' https://domain.com/ ' has been blocked by CORS policy : No 'Access-Control-Allow-Origin' header is present on the requested resource. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.","title":"\u00bfQu\u00e9 es CORS?"},{"location":"desarrollo/javascript/06-peticiones_HTTP/#access-control-allow-origin","text":"Como hemos comentado, las peticiones HTTP as\u00edncronas de origen cruzado no est\u00e1n permitidas, pero existen formas de permitirlas. La m\u00e1s b\u00e1sica, probablemente, sea la de incluir una cabecera Access-Control-Allow-Origin en la respuesta de la petici\u00f3n, donde debe indicarse el dominio al que se le quiere dar permiso: Access-Control-Allow-Origin: https://domain.com/ De esta forma, el navegador comprobar\u00e1 dichas cabeceras y si coinciden con el dominio de origen que realiz\u00f3 la petici\u00f3n, esta se permitir\u00e1. En el ejemplo anterior, la cabecera tiene el valor https://domain.com/ , pero en algunos casos puede interesar indicar el valor * . El asterisco * indica que se permiten peticiones de origen cruzado a cualquier dominio , algo que puede ser interesante cuando se tienen API p\u00fablicas a las que quieres permitir el acceso al p\u00fablico en general, casos como los de Google Fonts o JSDelivr , por citar un ejemplo. Estas cabeceras puedes verlas facilmente accediendo a la pesta\u00f1a Network del Developer Tools del navegador. En esta secci\u00f3n te aparecer\u00e1 una lista de peticiones realizadas por el navegador en la p\u00e1gina actual. Si seleccionamos una petici\u00f3n y accedemos al apartado de cabeceras ( Headers ), podremos examinar si existe la cabecera Access-Control-Allow-Origin :","title":"Access-Control-Allow-Origin"},{"location":"desarrollo/javascript/06-peticiones_HTTP/#cors-en-entornos-de-desarrollo","text":"Otra opci\u00f3n sencilla y r\u00e1pida para no tener que lidiar con CORS temporalmente es la de instalar la extensi\u00f3n Allow CORS , disponible tanto Allow CORS para Chrome como Allow CORS para Firefox . Esta extensi\u00f3n deshabilita la pol\u00edtica CORS mientras est\u00e1 instalada y activada. Esta elecci\u00f3n es equivalente a que todas las respuestas a las peticiones as\u00edncronas realizadas tengan la mencionada cabecera con el valor * . Obviamente, es importante recalcar que es una opci\u00f3n que s\u00f3lo nos funcionar\u00e1 en nuestro equipo y navegador , pero puede ser muy pr\u00e1ctica para simplificar el trabajo en desarrollo. Fuente: Lenguaje Javascript por Manz","title":"CORS en entornos de desarrollo"},{"location":"desarrollo/javascript/06-peticiones_HTTP/#_1","text":"","title":""},{"location":"herramientas-it/markdown/markdown/","text":"Markdown \u00b6 Qu\u00e9 es markdown \u00b6 Markdown es un lenguaje de marcado ligero creado por John Gruber que trata de conseguir la m\u00e1xima legibilidad y facilidad de publicaci\u00f3n tanto en su forma de entrada como de salida, inspir\u00e1ndose en muchas convenciones existentes para marcar mensajes de correo electr\u00f3nico usando texto plano. Encabezados \u00b6 Para crear encabezados simplemente se ha de preceder el t\u00edtulo un n\u00famero de almohadillas seg\u00fan el nivel de t\u00edtulo de que se trate. Tecleas # H1 ## H2 ### H3 #### H4 ##### H5 ###### H6 \u00c9nfasis \u00b6 Podemos a\u00f1adir \u00e9nfasis al texto con el uso de las negritas, cursivas o el tachado. Tecleas *cursiva con asteriscos* o _cursiva con guiones_. **negrita con asteriscos** o __negrita con guiones__. **negrita y _cursiva_**. ~~Tachado~~ Obtienes cursiva con asteriscos o cursiva con guiones . negrita con asteriscos o negrita con guiones . negrita y cursiva . Tachado Listas \u00b6 Podemos crear tanto listas ordenadas como listas sin orden. Para ello disponemos de diferentes m\u00e9todos. Tecleas 1. Primer item 2. Segundo item * Subelemento 1. No importa el n\u00famero 1. Subelemento ordenado 4. Otro item. Obtienes Primer item Segundo item Subelemento No importa el n\u00famero Subelemento ordenado Otro item. Para las listas sin orden se pueden usar asteriscos, signo menos o signo mas. Tecleas * asteriscos - signo menos + signo mas Obtienes asteriscos signo menos signo mas Enlaces \u00b6 Tenemos varias formas para a\u00f1adir enlaces. Tecleas [Enlace sin t\u00edtulo](https://www.google.com) [Enlace con t\u00edtulo](https://www.google.com \"Google's Homepage\") [Enlace como referencia][Texto arbitrario de referencia] [Referencia como art\u00edculo cient\u00edfico][1] [Referencia simple] [Texto arbitrario de referencia]: https://github.com/ [1]: https://es.python.org/ [Referencia simple]: http://www.reddit.com Obtienes Enlace sin t\u00edtulo Enlace con t\u00edtulo Enlace como referencia Referencia como art\u00edculo cient\u00edfico Referencia simple Im\u00e1genes \u00b6 Las im\u00e1genes se a\u00f1aden, como los enlaces, de manera directa o como referencia. Tecleas ![imagen directa](https://upload.wikimedia.org/wikipedia/commons/thumb/4/48/Markdown-mark.svg/250px-Markdown-mark.svg.png \"Pop\") ![imagen referencia][logo] [logo]: https://upload.wikimedia.org/wikipedia/commons/thumb/4/48/Markdown-mark.svg/250px-Markdown-mark.svg.png \"Pop en referencia\" Obtienes Video \u00b6 No es posible incrustar videos directamente, pero se puede poner una imagen que se vincule a un video de YouTube: Tecleas [![ScreenShot](http://i.imgur.com/Ot5DWAW.png)](https://youtu.be/StTqXEQ2l-Y?t=35s \"Everything Is AWESOME\") Obtienes C\u00f3digo \u00b6 Los bloques de c\u00f3digo forman parte de Markdown, pero el resaltado de sintaxis no. Sin embargo, muchos renderizadores, como Github, admiten el resaltado de numerosos lenguajes de programaci\u00f3n. ``` As\u00ed se a\u00f1ade un bloque de c\u00f3digo ``` As\u00ed se a\u00f1ade un bloque de c\u00f3digo Si queremos que se muestre el resaltado de la sintaxis debemos a\u00f1adir el nombre del lenguaje de programaci\u00f3n. ```python s = \"Python syntax highlighting\" print(s) ``` python s = \"Python syntax highlighting\" print(s) Tablas \u00b6 Las tablas tampoco forman parte de Markdown, pero variantes y algunos servicios nos permiten visualizarlas correctamente. Tecleas | Las | Tablas | Molan | | ------------- |:-------------:| -----:| | col 3 esta | alineada a dcha | $1600 | | col 2 esta | centrada | $12 | | col 1 | alinea a izq | $1 | Obtienes Las Tablas Molan col 3 esta alineada a dcha $1600 col 2 esta centrada $12 col 1 alinea a izq $1 Citas \u00b6 Tecleas > Se pueden a\u00f1adir citas > con m\u00e1s **Markdown** dentro. Obtienes Se pueden a\u00f1adir citas con m\u00e1s Markdown dentro. Lineas horizontales \u00b6 Se pueden a\u00f1adir al poner tres o m\u00e1s de los siguientes elementos: Tecleas --- *** ___ Tareas \u00b6 Tecleas - [ ] una tarea - [ ] una subtarea - [x] tarea finalizada Obtienes una tarea una subtarea tarea finalizada Variables \u00b6 Si utilizas enlaces de forma repetitiva en tu publicaci\u00f3n, puedes asignarlas a variables o espacios temporales de memoria as\u00ed: Tecleas Buscar por palabras pulsa [aqu\u00ed][url1] Buscar por imagenes pulsa [aqu\u00ed][url2] . [url1]: https://www.google.com [url2]: https://www.google.com/imghp?hl=es Obtienes Buscar por palabras pulsa aqu\u00ed Buscar por imagenes pulsa aqu\u00ed . Botones \u00b6 Una forma sencilla y llamativa de navegar entre tus documentos con Placeholder.com Tecleas [![url--1](https://via.placeholder.com/336x35/4a5053/fff?text=Uno)](https://google.com/1) [![url--2](https://via.placeholder.com/336x35/7d9b2b/fff?text=Dos)](https://google.com/2) [![url--3](https://via.placeholder.com/336x35/298e2e/fff?text=Tres)](https://google.com/3) [![url--4](https://via.placeholder.com/336x35/563365/fff?text=Cuatro)](https://google.com/4) [![url--5](https://via.placeholder.com/336x35/1387ae/fff?text=Cinco)](https://google.com/5) [![url--6](https://via.placeholder.com/336x35/a17709/fff?text=Seis)](https://google.com/6) [![url--7](https://via.placeholder.com/336x35/c86000/fff?text=Siete)](https://google.com/7) [![url--8](https://via.placeholder.com/336x35/a21217/fff?text=Ocho)](https://google.com/8) Obtienes Emojis \u00b6 Tecleas Obtienes :blush: Lista de emojis: People \u00b6 :bowtie: :bowtie: :smile: :laughing: :blush: :smiley: :relaxed: :smirk: :heart_eyes: :kissing_heart: :kissing_closed_eyes: :flushed: :relieved: :satisfied: :grin: :wink: :stuck_out_tongue_winking_eye: :stuck_out_tongue_closed_eyes: :grinning: :kissing: :kissing_smiling_eyes: :stuck_out_tongue: :sleeping: :worried: :frowning: :anguished: :open_mouth: :grimacing: :confused: :hushed: :expressionless: :unamused: :sweat_smile: :sweat: :disappointed_relieved: :weary: :pensive: :disappointed: :confounded: :fearful: :cold_sweat: :persevere: :cry: :sob: :joy: :astonished: :scream: :neckbeard: :neckbeard: :tired_face: :angry: :rage: :triumph: :sleepy: :yum: :mask: :sunglasses: :dizzy_face: :imp: :smiling_imp: :neutral_face: :no_mouth: :innocent: :alien: :yellow_heart: :blue_heart: :purple_heart: :heart: :green_heart: :broken_heart: :heartbeat: :heartpulse: :two_hearts: :revolving_hearts: :cupid: :sparkling_heart: :sparkles: :star: :star2: :dizzy: :boom: :collision: :collision: :anger: :exclamation: :question: :grey_exclamation: :grey_question: :zzz: :dash: :sweat_drops: :notes: :musical_note: :fire: :hankey: :poop: :shit: :+1: :thumbsup: :-1: :thumbsdown: :ok_hand: :punch: :facepunch: :facepunch: :fist: :v: :wave: :hand: :hand: :raised_hand: :open_hands: :point_up: :point_down: :point_left: :point_right: :raised_hands: :pray: :point_up_2: :clap: :muscle: :metal: :fu: :fu: :walking: :runner: :running: :running: :couple: :family: :two_men_holding_hands: :two_women_holding_hands: :dancer: :dancers: :ok_woman: :no_good: :information_desk_person: :raising_hand: :bride_with_veil: :person_with_pouting_face: :person_frowning: :bow: :couplekiss: :couple_with_heart: :massage: :haircut: :nail_care: :boy: :girl: :woman: :man: :baby: :older_woman: :older_man: :person_with_blond_hair: :man_with_gua_pi_mao: :man_with_turban: :construction_worker: :cop: :angel: :princess: :smiley_cat: :smile_cat: :heart_eyes_cat: :kissing_cat: :smirk_cat: :scream_cat: :crying_cat_face: :joy_cat: :pouting_cat: :japanese_ogre: :japanese_goblin: :see_no_evil: :hear_no_evil: :speak_no_evil: :guardsman: :skull: :feet: :lips: :kiss: :droplet: :ear: :eyes: :nose: :tongue: :love_letter: :bust_in_silhouette: :busts_in_silhouette: :speech_balloon: :thought_balloon: :feelsgood: :feelsgood: :finnadie: :finnadie: :goberserk: :goberserk: :godmode: :godmode: :hurtrealbad: :hurtrealbad: :rage1: :rage1: :rage2: :rage2: :rage3: :rage3: :rage4: :rage4: :suspect: :suspect: :trollface: :trollface: Nature \u00b6 :sunny: :umbrella: :cloud: :snowflake: :snowman: :zap: :cyclone: :foggy: :ocean: :cat: :dog: :mouse: :hamster: :rabbit: :wolf: :frog: :tiger: :koala: :bear: :pig: :pig_nose: :cow: :boar: :monkey_face: :monkey: :horse: :racehorse: :camel: :sheep: :elephant: :panda_face: :snake: :bird: :baby_chick: :hatched_chick: :hatching_chick: :chicken: :penguin: :turtle: :bug: :honeybee: :honeybee: :ant: :beetle: :snail: :octopus: :tropical_fish: :fish: :whale: :whale2: :dolphin: :cow2: :ram: :rat: :water_buffalo: :tiger2: :rabbit2: :dragon: :goat: :rooster: :dog2: :pig2: :mouse2: :ox: :dragon_face: :blowfish: :crocodile: :dromedary_camel: :leopard: :cat2: :poodle: :paw_prints: :bouquet: :cherry_blossom: :tulip: :four_leaf_clover: :rose: :sunflower: :hibiscus: :maple_leaf: :leaves: :fallen_leaf: :herb: :mushroom: :cactus: :palm_tree: :evergreen_tree: :deciduous_tree: :chestnut: :seedling: :blossom: :ear_of_rice: :shell: :globe_with_meridians: :sun_with_face: :full_moon_with_face: :new_moon_with_face: :new_moon: :waxing_crescent_moon: :first_quarter_moon: :waxing_gibbous_moon: :full_moon: :waning_gibbous_moon: :last_quarter_moon: :waning_crescent_moon: :last_quarter_moon_with_face: :first_quarter_moon_with_face: :moon: :moon: :earth_africa: :earth_americas: :earth_asia: :volcano: :milky_way: :partly_sunny: :octocat: :octocat: :squirrel: :squirrel: Objects \u00b6 :bamboo: :gift_heart: :dolls: :school_satchel: :mortar_board: :flags: :fireworks: :sparkler: :wind_chime: :rice_scene: :jack_o_lantern: :ghost: :santa: :christmas_tree: :gift: :bell: :no_bell: :tanabata_tree: :tada: :confetti_ball: :balloon: :crystal_ball: :cd: :dvd: :floppy_disk: :camera: :video_camera: :movie_camera: :computer: :tv: :iphone: :iphone: :phone: :phone: :telephone: :telephone_receiver: :pager: :fax: :minidisc: :vhs: :sound: :speaker: :mute: :loudspeaker: :mega: :hourglass: :hourglass_flowing_sand: :alarm_clock: :watch: :radio: :satellite: :loop: :mag: :mag_right: :unlock: :lock: :lock_with_ink_pen: :closed_lock_with_key: :key: :bulb: :flashlight: :high_brightness: :low_brightness: :electric_plug: :battery: :calling: :email: :mailbox: :postbox: :bath: :bathtub: :shower: :toilet: :wrench: :nut_and_bolt: :hammer: :seat: :moneybag: :yen: :dollar: :pound: :euro: :credit_card: :money_with_wings: :e-mail: :inbox_tray: :outbox_tray: :envelope: :incoming_envelope: :postal_horn: :mailbox_closed: :mailbox_with_mail: :mailbox_with_no_mail: :door: :smoking: :bomb: :gun: :hocho: :hocho: :pill: :syringe: :page_facing_up: :page_with_curl: :bookmark_tabs: :bar_chart: :chart_with_upwards_trend: :chart_with_downwards_trend: :scroll: :clipboard: :calendar: :date: :card_index: :file_folder: :open_file_folder: :scissors: :pushpin: :paperclip: :black_nib: :pencil2: :straight_ruler: :triangular_ruler: :closed_book: :green_book: :blue_book: :orange_book: :notebook: :notebook_with_decorative_cover: :ledger: :books: :bookmark: :name_badge: :microscope: :telescope: :newspaper: :football: :basketball: :soccer: :baseball: :tennis: :8ball: :rugby_football: :bowling: :golf: :mountain_bicyclist: :bicyclist: :horse_racing: :snowboarder: :swimmer: :surfer: :ski: :spades: :hearts: :clubs: :diamonds: :gem: :ring: :trophy: :musical_score: :musical_keyboard: :violin: :space_invader: :video_game: :black_joker: :flower_playing_cards: :game_die: :dart: :mahjong: :clapper: :memo: :pencil: :book: :art: :microphone: :headphones: :trumpet: :saxophone: :guitar: :shoe: :shoe: :sandal: :high_heel: :lipstick: :boot: :shirt: :tshirt: :tshirt: :necktie: :womans_clothes: :dress: :running_shirt_with_sash: :jeans: :kimono: :bikini: :ribbon: :tophat: :crown: :womans_hat: :mans_shoe: :closed_umbrella: :briefcase: :handbag: :pouch: :purse: :eyeglasses: :fishing_pole_and_fish: :coffee: :tea: :sake: :baby_bottle: :beer: :beers: :cocktail: :tropical_drink: :wine_glass: :fork_and_knife: :pizza: :hamburger: :fries: :poultry_leg: :meat_on_bone: :spaghetti: :curry: :fried_shrimp: :bento: :sushi: :fish_cake: :rice_ball: :rice_cracker: :rice: :ramen: :stew: :oden: :dango: :egg: :bread: :doughnut: :custard: :icecream: :ice_cream: :shaved_ice: :birthday: :cake: :cookie: :chocolate_bar: :candy: :lollipop: :honey_pot: :apple: :green_apple: :tangerine: :lemon: :cherries: :grapes: :watermelon: :strawberry: :peach: :melon: :banana: :pear: :pineapple: :sweet_potato: :eggplant: :tomato: :corn: Places \u00b6 :house: :house_with_garden: :school: :office: :post_office: :hospital: :bank: :convenience_store: :love_hotel: :hotel: :wedding: :church: :department_store: :european_post_office: :city_sunrise: :city_sunset: :japanese_castle: :european_castle: :tent: :factory: :tokyo_tower: :japan: :mount_fuji: :sunrise_over_mountains: :sunrise: :stars: :statue_of_liberty: :bridge_at_night: :carousel_horse: :rainbow: :ferris_wheel: :fountain: :roller_coaster: :ship: :speedboat: :boat: :boat: :sailboat: :rowboat: :anchor: :rocket: :airplane: :helicopter: :steam_locomotive: :tram: :mountain_railway: :bike: :aerial_tramway: :suspension_railway: :mountain_cableway: :tractor: :blue_car: :oncoming_automobile: :car: :car: :red_car: :taxi: :oncoming_taxi: :articulated_lorry: :bus: :oncoming_bus: :rotating_light: :police_car: :oncoming_police_car: :fire_engine: :ambulance: :minibus: :truck: :train: :station: :train2: :bullettrain_front: :bullettrain_side: :light_rail: :monorail: :railway_car: :trolleybus: :ticket: :fuelpump: :vertical_traffic_light: :traffic_light: :warning: :construction: :beginner: :atm: :slot_machine: :busstop: :barber: :hotsprings: :checkered_flag: :crossed_flags: :izakaya_lantern: :moyai: :circus_tent: :performing_arts: :round_pushpin: :triangular_flag_on_post: :jp: :kr: :cn: :us: :fr: :es: :it: :ru: :gb: :uk: :uk: :de: Symbols \u00b6 :one: :two: :three: :four: :five: :six: :seven: :eight: :nine: :keycap_ten: :1234: :zero: :hash: :symbols: :arrow_backward: :arrow_down: :arrow_forward: :arrow_left: :capital_abcd: :abcd: :abc: :arrow_lower_left: :arrow_lower_right: :arrow_right: :arrow_up: :arrow_upper_left: :arrow_upper_right: :arrow_double_down: :arrow_double_up: :arrow_down_small: :arrow_heading_down: :arrow_heading_up: :leftwards_arrow_with_hook: :arrow_right_hook: :left_right_arrow: :arrow_up_down: :arrow_up_small: :arrows_clockwise: :arrows_counterclockwise: :rewind: :fast_forward: :information_source: :ok: :twisted_rightwards_arrows: :repeat: :repeat_one: :new: :top: :up: :cool: :free: :ng: :cinema: :koko: :signal_strength: :u5272: :u5408: :u55b6: :u6307: :u6708: :u6709: :u6e80: :u7121: :u7533: :u7a7a: :u7981: :sa: :restroom: :mens: :womens: :baby_symbol: :no_smoking: :parking: :wheelchair: :metro: :baggage_claim: :accept: :wc: :potable_water: :put_litter_in_its_place: :secret: :congratulations: :m: :passport_control: :left_luggage: :customs: :ideograph_advantage: :cl: :sos: :id: :no_entry_sign: :underage: :no_mobile_phones: :do_not_litter: :non-potable_water: :no_bicycles: :no_pedestrians: :children_crossing: :no_entry: :eight_spoked_asterisk: :eight_pointed_black_star: :heart_decoration: :vs: :vibration_mode: :mobile_phone_off: :chart: :currency_exchange: :aries: :taurus: :gemini: :cancer: :leo: :virgo: :libra: :scorpius: :sagittarius: :capricorn: :aquarius: :pisces: :ophiuchus: :six_pointed_star: :negative_squared_cross_mark: :a: :b: :ab: :o2: :diamond_shape_with_a_dot_inside: :recycle: :end: :on: :soon: :clock1: :clock130: :clock10: :clock1030: :clock11: :clock1130: :clock12: :clock1230: :clock2: :clock230: :clock3: :clock330: :clock4: :clock430: :clock5: :clock530: :clock6: :clock630: :clock7: :clock730: :clock8: :clock830: :clock9: :clock930: :heavy_dollar_sign: :copyright: :registered: :tm: :x: :heavy_exclamation_mark: :heavy_exclamation_mark: :bangbang: :interrobang: :o: :heavy_multiplication_x: :heavy_plus_sign: :heavy_minus_sign: :heavy_division_sign: :white_flower: :100: :heavy_check_mark: :ballot_box_with_check: :radio_button: :link: :curly_loop: :wavy_dash: :part_alternation_mark: :trident: :black_square: :black_square: :white_square: :white_square: :white_check_mark: :black_square_button: :white_square_button: :black_circle: :white_circle: :red_circle: :large_blue_circle: :large_blue_circle: :large_blue_diamond: :large_orange_diamond: :small_blue_diamond: :small_orange_diamond: :small_red_triangle: :small_red_triangle_down: :shipit: :shipit: Formulas matematicas \u00b6 Al igual con lo que ocurre al querer incrustar video, markdown no permite incrustar formulas matematicas, pero se puede poner una imagen que represente la ecuaci\u00f3n, en Codecogs.com . Tecleas [![ScreenShot](https://i.imgur.com/P4PL4vb.gif)](https://youtu.be/StTqXEQ2l-Y?t=35s \"Formula\") Obtienes Referencias \u00b6 Guia Markdown Pdf markdown Convertidor de Html a Markdown","title":"Markdown"},{"location":"herramientas-it/markdown/markdown/#markdown","text":"","title":"Markdown"},{"location":"herramientas-it/markdown/markdown/#que-es-markdown","text":"Markdown es un lenguaje de marcado ligero creado por John Gruber que trata de conseguir la m\u00e1xima legibilidad y facilidad de publicaci\u00f3n tanto en su forma de entrada como de salida, inspir\u00e1ndose en muchas convenciones existentes para marcar mensajes de correo electr\u00f3nico usando texto plano.","title":"Qu\u00e9 es markdown"},{"location":"herramientas-it/markdown/markdown/#encabezados","text":"Para crear encabezados simplemente se ha de preceder el t\u00edtulo un n\u00famero de almohadillas seg\u00fan el nivel de t\u00edtulo de que se trate. Tecleas # H1 ## H2 ### H3 #### H4 ##### H5 ###### H6","title":"Encabezados"},{"location":"herramientas-it/markdown/markdown/#enfasis","text":"Podemos a\u00f1adir \u00e9nfasis al texto con el uso de las negritas, cursivas o el tachado. Tecleas *cursiva con asteriscos* o _cursiva con guiones_. **negrita con asteriscos** o __negrita con guiones__. **negrita y _cursiva_**. ~~Tachado~~ Obtienes cursiva con asteriscos o cursiva con guiones . negrita con asteriscos o negrita con guiones . negrita y cursiva . Tachado","title":"\u00c9nfasis"},{"location":"herramientas-it/markdown/markdown/#listas","text":"Podemos crear tanto listas ordenadas como listas sin orden. Para ello disponemos de diferentes m\u00e9todos. Tecleas 1. Primer item 2. Segundo item * Subelemento 1. No importa el n\u00famero 1. Subelemento ordenado 4. Otro item. Obtienes Primer item Segundo item Subelemento No importa el n\u00famero Subelemento ordenado Otro item. Para las listas sin orden se pueden usar asteriscos, signo menos o signo mas. Tecleas * asteriscos - signo menos + signo mas Obtienes asteriscos signo menos signo mas","title":"Listas"},{"location":"herramientas-it/markdown/markdown/#enlaces","text":"Tenemos varias formas para a\u00f1adir enlaces. Tecleas [Enlace sin t\u00edtulo](https://www.google.com) [Enlace con t\u00edtulo](https://www.google.com \"Google's Homepage\") [Enlace como referencia][Texto arbitrario de referencia] [Referencia como art\u00edculo cient\u00edfico][1] [Referencia simple] [Texto arbitrario de referencia]: https://github.com/ [1]: https://es.python.org/ [Referencia simple]: http://www.reddit.com Obtienes Enlace sin t\u00edtulo Enlace con t\u00edtulo Enlace como referencia Referencia como art\u00edculo cient\u00edfico Referencia simple","title":"Enlaces"},{"location":"herramientas-it/markdown/markdown/#imagenes","text":"Las im\u00e1genes se a\u00f1aden, como los enlaces, de manera directa o como referencia. Tecleas ![imagen directa](https://upload.wikimedia.org/wikipedia/commons/thumb/4/48/Markdown-mark.svg/250px-Markdown-mark.svg.png \"Pop\") ![imagen referencia][logo] [logo]: https://upload.wikimedia.org/wikipedia/commons/thumb/4/48/Markdown-mark.svg/250px-Markdown-mark.svg.png \"Pop en referencia\" Obtienes","title":"Im\u00e1genes"},{"location":"herramientas-it/markdown/markdown/#video","text":"No es posible incrustar videos directamente, pero se puede poner una imagen que se vincule a un video de YouTube: Tecleas [![ScreenShot](http://i.imgur.com/Ot5DWAW.png)](https://youtu.be/StTqXEQ2l-Y?t=35s \"Everything Is AWESOME\") Obtienes","title":"Video"},{"location":"herramientas-it/markdown/markdown/#codigo","text":"Los bloques de c\u00f3digo forman parte de Markdown, pero el resaltado de sintaxis no. Sin embargo, muchos renderizadores, como Github, admiten el resaltado de numerosos lenguajes de programaci\u00f3n. ``` As\u00ed se a\u00f1ade un bloque de c\u00f3digo ``` As\u00ed se a\u00f1ade un bloque de c\u00f3digo Si queremos que se muestre el resaltado de la sintaxis debemos a\u00f1adir el nombre del lenguaje de programaci\u00f3n. ```python s = \"Python syntax highlighting\" print(s) ``` python s = \"Python syntax highlighting\" print(s)","title":"C\u00f3digo"},{"location":"herramientas-it/markdown/markdown/#tablas","text":"Las tablas tampoco forman parte de Markdown, pero variantes y algunos servicios nos permiten visualizarlas correctamente. Tecleas | Las | Tablas | Molan | | ------------- |:-------------:| -----:| | col 3 esta | alineada a dcha | $1600 | | col 2 esta | centrada | $12 | | col 1 | alinea a izq | $1 | Obtienes Las Tablas Molan col 3 esta alineada a dcha $1600 col 2 esta centrada $12 col 1 alinea a izq $1","title":"Tablas"},{"location":"herramientas-it/markdown/markdown/#citas","text":"Tecleas > Se pueden a\u00f1adir citas > con m\u00e1s **Markdown** dentro. Obtienes Se pueden a\u00f1adir citas con m\u00e1s Markdown dentro.","title":"Citas"},{"location":"herramientas-it/markdown/markdown/#lineas-horizontales","text":"Se pueden a\u00f1adir al poner tres o m\u00e1s de los siguientes elementos: Tecleas --- *** ___","title":"Lineas horizontales"},{"location":"herramientas-it/markdown/markdown/#tareas","text":"Tecleas - [ ] una tarea - [ ] una subtarea - [x] tarea finalizada Obtienes una tarea una subtarea tarea finalizada","title":"Tareas"},{"location":"herramientas-it/markdown/markdown/#variables","text":"Si utilizas enlaces de forma repetitiva en tu publicaci\u00f3n, puedes asignarlas a variables o espacios temporales de memoria as\u00ed: Tecleas Buscar por palabras pulsa [aqu\u00ed][url1] Buscar por imagenes pulsa [aqu\u00ed][url2] . [url1]: https://www.google.com [url2]: https://www.google.com/imghp?hl=es Obtienes Buscar por palabras pulsa aqu\u00ed Buscar por imagenes pulsa aqu\u00ed .","title":"Variables"},{"location":"herramientas-it/markdown/markdown/#botones","text":"Una forma sencilla y llamativa de navegar entre tus documentos con Placeholder.com Tecleas [![url--1](https://via.placeholder.com/336x35/4a5053/fff?text=Uno)](https://google.com/1) [![url--2](https://via.placeholder.com/336x35/7d9b2b/fff?text=Dos)](https://google.com/2) [![url--3](https://via.placeholder.com/336x35/298e2e/fff?text=Tres)](https://google.com/3) [![url--4](https://via.placeholder.com/336x35/563365/fff?text=Cuatro)](https://google.com/4) [![url--5](https://via.placeholder.com/336x35/1387ae/fff?text=Cinco)](https://google.com/5) [![url--6](https://via.placeholder.com/336x35/a17709/fff?text=Seis)](https://google.com/6) [![url--7](https://via.placeholder.com/336x35/c86000/fff?text=Siete)](https://google.com/7) [![url--8](https://via.placeholder.com/336x35/a21217/fff?text=Ocho)](https://google.com/8) Obtienes","title":"Botones"},{"location":"herramientas-it/markdown/markdown/#emojis","text":"Tecleas Obtienes :blush: Lista de emojis:","title":"Emojis"},{"location":"herramientas-it/markdown/markdown/#people","text":":bowtie: :bowtie: :smile: :laughing: :blush: :smiley: :relaxed: :smirk: :heart_eyes: :kissing_heart: :kissing_closed_eyes: :flushed: :relieved: :satisfied: :grin: :wink: :stuck_out_tongue_winking_eye: :stuck_out_tongue_closed_eyes: :grinning: :kissing: :kissing_smiling_eyes: :stuck_out_tongue: :sleeping: :worried: :frowning: :anguished: :open_mouth: :grimacing: :confused: :hushed: :expressionless: :unamused: :sweat_smile: :sweat: :disappointed_relieved: :weary: :pensive: :disappointed: :confounded: :fearful: :cold_sweat: :persevere: :cry: :sob: :joy: :astonished: :scream: :neckbeard: :neckbeard: :tired_face: :angry: :rage: :triumph: :sleepy: :yum: :mask: :sunglasses: :dizzy_face: :imp: :smiling_imp: :neutral_face: :no_mouth: :innocent: :alien: :yellow_heart: :blue_heart: :purple_heart: :heart: :green_heart: :broken_heart: :heartbeat: :heartpulse: :two_hearts: :revolving_hearts: :cupid: :sparkling_heart: :sparkles: :star: :star2: :dizzy: :boom: :collision: :collision: :anger: :exclamation: :question: :grey_exclamation: :grey_question: :zzz: :dash: :sweat_drops: :notes: :musical_note: :fire: :hankey: :poop: :shit: :+1: :thumbsup: :-1: :thumbsdown: :ok_hand: :punch: :facepunch: :facepunch: :fist: :v: :wave: :hand: :hand: :raised_hand: :open_hands: :point_up: :point_down: :point_left: :point_right: :raised_hands: :pray: :point_up_2: :clap: :muscle: :metal: :fu: :fu: :walking: :runner: :running: :running: :couple: :family: :two_men_holding_hands: :two_women_holding_hands: :dancer: :dancers: :ok_woman: :no_good: :information_desk_person: :raising_hand: :bride_with_veil: :person_with_pouting_face: :person_frowning: :bow: :couplekiss: :couple_with_heart: :massage: :haircut: :nail_care: :boy: :girl: :woman: :man: :baby: :older_woman: :older_man: :person_with_blond_hair: :man_with_gua_pi_mao: :man_with_turban: :construction_worker: :cop: :angel: :princess: :smiley_cat: :smile_cat: :heart_eyes_cat: :kissing_cat: :smirk_cat: :scream_cat: :crying_cat_face: :joy_cat: :pouting_cat: :japanese_ogre: :japanese_goblin: :see_no_evil: :hear_no_evil: :speak_no_evil: :guardsman: :skull: :feet: :lips: :kiss: :droplet: :ear: :eyes: :nose: :tongue: :love_letter: :bust_in_silhouette: :busts_in_silhouette: :speech_balloon: :thought_balloon: :feelsgood: :feelsgood: :finnadie: :finnadie: :goberserk: :goberserk: :godmode: :godmode: :hurtrealbad: :hurtrealbad: :rage1: :rage1: :rage2: :rage2: :rage3: :rage3: :rage4: :rage4: :suspect: :suspect: :trollface: :trollface:","title":"People"},{"location":"herramientas-it/markdown/markdown/#nature","text":":sunny: :umbrella: :cloud: :snowflake: :snowman: :zap: :cyclone: :foggy: :ocean: :cat: :dog: :mouse: :hamster: :rabbit: :wolf: :frog: :tiger: :koala: :bear: :pig: :pig_nose: :cow: :boar: :monkey_face: :monkey: :horse: :racehorse: :camel: :sheep: :elephant: :panda_face: :snake: :bird: :baby_chick: :hatched_chick: :hatching_chick: :chicken: :penguin: :turtle: :bug: :honeybee: :honeybee: :ant: :beetle: :snail: :octopus: :tropical_fish: :fish: :whale: :whale2: :dolphin: :cow2: :ram: :rat: :water_buffalo: :tiger2: :rabbit2: :dragon: :goat: :rooster: :dog2: :pig2: :mouse2: :ox: :dragon_face: :blowfish: :crocodile: :dromedary_camel: :leopard: :cat2: :poodle: :paw_prints: :bouquet: :cherry_blossom: :tulip: :four_leaf_clover: :rose: :sunflower: :hibiscus: :maple_leaf: :leaves: :fallen_leaf: :herb: :mushroom: :cactus: :palm_tree: :evergreen_tree: :deciduous_tree: :chestnut: :seedling: :blossom: :ear_of_rice: :shell: :globe_with_meridians: :sun_with_face: :full_moon_with_face: :new_moon_with_face: :new_moon: :waxing_crescent_moon: :first_quarter_moon: :waxing_gibbous_moon: :full_moon: :waning_gibbous_moon: :last_quarter_moon: :waning_crescent_moon: :last_quarter_moon_with_face: :first_quarter_moon_with_face: :moon: :moon: :earth_africa: :earth_americas: :earth_asia: :volcano: :milky_way: :partly_sunny: :octocat: :octocat: :squirrel: :squirrel:","title":"Nature"},{"location":"herramientas-it/markdown/markdown/#objects","text":":bamboo: :gift_heart: :dolls: :school_satchel: :mortar_board: :flags: :fireworks: :sparkler: :wind_chime: :rice_scene: :jack_o_lantern: :ghost: :santa: :christmas_tree: :gift: :bell: :no_bell: :tanabata_tree: :tada: :confetti_ball: :balloon: :crystal_ball: :cd: :dvd: :floppy_disk: :camera: :video_camera: :movie_camera: :computer: :tv: :iphone: :iphone: :phone: :phone: :telephone: :telephone_receiver: :pager: :fax: :minidisc: :vhs: :sound: :speaker: :mute: :loudspeaker: :mega: :hourglass: :hourglass_flowing_sand: :alarm_clock: :watch: :radio: :satellite: :loop: :mag: :mag_right: :unlock: :lock: :lock_with_ink_pen: :closed_lock_with_key: :key: :bulb: :flashlight: :high_brightness: :low_brightness: :electric_plug: :battery: :calling: :email: :mailbox: :postbox: :bath: :bathtub: :shower: :toilet: :wrench: :nut_and_bolt: :hammer: :seat: :moneybag: :yen: :dollar: :pound: :euro: :credit_card: :money_with_wings: :e-mail: :inbox_tray: :outbox_tray: :envelope: :incoming_envelope: :postal_horn: :mailbox_closed: :mailbox_with_mail: :mailbox_with_no_mail: :door: :smoking: :bomb: :gun: :hocho: :hocho: :pill: :syringe: :page_facing_up: :page_with_curl: :bookmark_tabs: :bar_chart: :chart_with_upwards_trend: :chart_with_downwards_trend: :scroll: :clipboard: :calendar: :date: :card_index: :file_folder: :open_file_folder: :scissors: :pushpin: :paperclip: :black_nib: :pencil2: :straight_ruler: :triangular_ruler: :closed_book: :green_book: :blue_book: :orange_book: :notebook: :notebook_with_decorative_cover: :ledger: :books: :bookmark: :name_badge: :microscope: :telescope: :newspaper: :football: :basketball: :soccer: :baseball: :tennis: :8ball: :rugby_football: :bowling: :golf: :mountain_bicyclist: :bicyclist: :horse_racing: :snowboarder: :swimmer: :surfer: :ski: :spades: :hearts: :clubs: :diamonds: :gem: :ring: :trophy: :musical_score: :musical_keyboard: :violin: :space_invader: :video_game: :black_joker: :flower_playing_cards: :game_die: :dart: :mahjong: :clapper: :memo: :pencil: :book: :art: :microphone: :headphones: :trumpet: :saxophone: :guitar: :shoe: :shoe: :sandal: :high_heel: :lipstick: :boot: :shirt: :tshirt: :tshirt: :necktie: :womans_clothes: :dress: :running_shirt_with_sash: :jeans: :kimono: :bikini: :ribbon: :tophat: :crown: :womans_hat: :mans_shoe: :closed_umbrella: :briefcase: :handbag: :pouch: :purse: :eyeglasses: :fishing_pole_and_fish: :coffee: :tea: :sake: :baby_bottle: :beer: :beers: :cocktail: :tropical_drink: :wine_glass: :fork_and_knife: :pizza: :hamburger: :fries: :poultry_leg: :meat_on_bone: :spaghetti: :curry: :fried_shrimp: :bento: :sushi: :fish_cake: :rice_ball: :rice_cracker: :rice: :ramen: :stew: :oden: :dango: :egg: :bread: :doughnut: :custard: :icecream: :ice_cream: :shaved_ice: :birthday: :cake: :cookie: :chocolate_bar: :candy: :lollipop: :honey_pot: :apple: :green_apple: :tangerine: :lemon: :cherries: :grapes: :watermelon: :strawberry: :peach: :melon: :banana: :pear: :pineapple: :sweet_potato: :eggplant: :tomato: :corn:","title":"Objects"},{"location":"herramientas-it/markdown/markdown/#places","text":":house: :house_with_garden: :school: :office: :post_office: :hospital: :bank: :convenience_store: :love_hotel: :hotel: :wedding: :church: :department_store: :european_post_office: :city_sunrise: :city_sunset: :japanese_castle: :european_castle: :tent: :factory: :tokyo_tower: :japan: :mount_fuji: :sunrise_over_mountains: :sunrise: :stars: :statue_of_liberty: :bridge_at_night: :carousel_horse: :rainbow: :ferris_wheel: :fountain: :roller_coaster: :ship: :speedboat: :boat: :boat: :sailboat: :rowboat: :anchor: :rocket: :airplane: :helicopter: :steam_locomotive: :tram: :mountain_railway: :bike: :aerial_tramway: :suspension_railway: :mountain_cableway: :tractor: :blue_car: :oncoming_automobile: :car: :car: :red_car: :taxi: :oncoming_taxi: :articulated_lorry: :bus: :oncoming_bus: :rotating_light: :police_car: :oncoming_police_car: :fire_engine: :ambulance: :minibus: :truck: :train: :station: :train2: :bullettrain_front: :bullettrain_side: :light_rail: :monorail: :railway_car: :trolleybus: :ticket: :fuelpump: :vertical_traffic_light: :traffic_light: :warning: :construction: :beginner: :atm: :slot_machine: :busstop: :barber: :hotsprings: :checkered_flag: :crossed_flags: :izakaya_lantern: :moyai: :circus_tent: :performing_arts: :round_pushpin: :triangular_flag_on_post: :jp: :kr: :cn: :us: :fr: :es: :it: :ru: :gb: :uk: :uk: :de:","title":"Places"},{"location":"herramientas-it/markdown/markdown/#symbols","text":":one: :two: :three: :four: :five: :six: :seven: :eight: :nine: :keycap_ten: :1234: :zero: :hash: :symbols: :arrow_backward: :arrow_down: :arrow_forward: :arrow_left: :capital_abcd: :abcd: :abc: :arrow_lower_left: :arrow_lower_right: :arrow_right: :arrow_up: :arrow_upper_left: :arrow_upper_right: :arrow_double_down: :arrow_double_up: :arrow_down_small: :arrow_heading_down: :arrow_heading_up: :leftwards_arrow_with_hook: :arrow_right_hook: :left_right_arrow: :arrow_up_down: :arrow_up_small: :arrows_clockwise: :arrows_counterclockwise: :rewind: :fast_forward: :information_source: :ok: :twisted_rightwards_arrows: :repeat: :repeat_one: :new: :top: :up: :cool: :free: :ng: :cinema: :koko: :signal_strength: :u5272: :u5408: :u55b6: :u6307: :u6708: :u6709: :u6e80: :u7121: :u7533: :u7a7a: :u7981: :sa: :restroom: :mens: :womens: :baby_symbol: :no_smoking: :parking: :wheelchair: :metro: :baggage_claim: :accept: :wc: :potable_water: :put_litter_in_its_place: :secret: :congratulations: :m: :passport_control: :left_luggage: :customs: :ideograph_advantage: :cl: :sos: :id: :no_entry_sign: :underage: :no_mobile_phones: :do_not_litter: :non-potable_water: :no_bicycles: :no_pedestrians: :children_crossing: :no_entry: :eight_spoked_asterisk: :eight_pointed_black_star: :heart_decoration: :vs: :vibration_mode: :mobile_phone_off: :chart: :currency_exchange: :aries: :taurus: :gemini: :cancer: :leo: :virgo: :libra: :scorpius: :sagittarius: :capricorn: :aquarius: :pisces: :ophiuchus: :six_pointed_star: :negative_squared_cross_mark: :a: :b: :ab: :o2: :diamond_shape_with_a_dot_inside: :recycle: :end: :on: :soon: :clock1: :clock130: :clock10: :clock1030: :clock11: :clock1130: :clock12: :clock1230: :clock2: :clock230: :clock3: :clock330: :clock4: :clock430: :clock5: :clock530: :clock6: :clock630: :clock7: :clock730: :clock8: :clock830: :clock9: :clock930: :heavy_dollar_sign: :copyright: :registered: :tm: :x: :heavy_exclamation_mark: :heavy_exclamation_mark: :bangbang: :interrobang: :o: :heavy_multiplication_x: :heavy_plus_sign: :heavy_minus_sign: :heavy_division_sign: :white_flower: :100: :heavy_check_mark: :ballot_box_with_check: :radio_button: :link: :curly_loop: :wavy_dash: :part_alternation_mark: :trident: :black_square: :black_square: :white_square: :white_square: :white_check_mark: :black_square_button: :white_square_button: :black_circle: :white_circle: :red_circle: :large_blue_circle: :large_blue_circle: :large_blue_diamond: :large_orange_diamond: :small_blue_diamond: :small_orange_diamond: :small_red_triangle: :small_red_triangle_down: :shipit: :shipit:","title":"Symbols"},{"location":"herramientas-it/markdown/markdown/#formulas-matematicas","text":"Al igual con lo que ocurre al querer incrustar video, markdown no permite incrustar formulas matematicas, pero se puede poner una imagen que represente la ecuaci\u00f3n, en Codecogs.com . Tecleas [![ScreenShot](https://i.imgur.com/P4PL4vb.gif)](https://youtu.be/StTqXEQ2l-Y?t=35s \"Formula\") Obtienes","title":"Formulas matematicas"},{"location":"herramientas-it/markdown/markdown/#referencias","text":"Guia Markdown Pdf markdown Convertidor de Html a Markdown","title":"Referencias"},{"location":"herramientas-it/pip/pip/","text":"C\u00f3mo instalar PIP para Python en Windows, Mac y Linux \u00b6 Al igual que con cualquier lenguaje de programaci\u00f3n serio, Python admite bibliotecas y marcos de terceros que puede instalar para evitar tener que reinventar la rueda con cada nuevo proyecto. Puede encontrarlos en un repositorio central llamado \"PyPI\" (Python Package Index). Pero descargar, instalar y administrar estos paquetes a mano puede ser frustrante y llevar mucho tiempo, por lo que muchos desarrolladores de Python conf\u00edan en una herramienta especial llamada PIP para que Python haga todo mucho m\u00e1s f\u00e1cil y r\u00e1pido. \u00bfQu\u00e9 es PIP para Python? \u00b6 PIP es un acr\u00f3nimo que significa \"Paquetes de instalaci\u00f3n PIP\" o \"Programa de instalaci\u00f3n preferida\". Es una utilidad de l\u00ednea de comandos que le permite instalar, reinstalar o desinstalar paquetes PyPI con un comando simple y directo: \"pip\". Si alguna vez ha realizado alg\u00fan trabajo de l\u00ednea de comandos en Windows (con el s\u00edmbolo del sistema) o Mac o Linux (con el Terminal y Bash), entonces te sentir\u00e1s como en casa y puedes ir directamente a las instrucciones de instalaci\u00f3n para su particular sistema operativo. \u00bfSe instala PIP con Python? \u00b6 Si est\u00e1 utilizando Python 2.7.9 (o superior) o Python 3.4 (o superior), entonces PIP viene instalado con Python por defecto. Si est\u00e1 utilizando una versi\u00f3n anterior de Python, deber\u00e1 seguir los pasos de instalaci\u00f3n que se detallan a continuaci\u00f3n. De lo contrario, salte a la parte inferior para aprender c\u00f3mo comenzar a usar PIP. Si est\u00e1 ejecutando Python en un entorno virtual creado con virtualenv o pyvenv, entonces PIP estar\u00e1 disponible para ese entorno independientemente de la versi\u00f3n de Python. Antes de instalar PIP para Python \u00b6 Debe asegurarse de que Python est\u00e9 instalado correctamente en su sistema. En Windows, abra el s\u00edmbolo del sistema con la tecla de Windows + X y seleccione S\u00edmbolo del sistema. En Mac, abre la Terminal usando Comando + Espacio y busca la terminal. En Linux, abra la Terminal usando Ctrl + Alt + T o como sea que haya sido hecho en su distribuci\u00f3n particular. Luego escribe: python --version En Linux, los usuarios de Python 3.x pueden necesitar usar el siguiente comando: python3 --version Si obtiene un n\u00famero de versi\u00f3n (por ejemplo, \"Python 2.7.5\"), significa que Python est\u00e1 listo para funcionar. Si aparece el mensaje \"Python is not defined\", primero deber\u00e1 instalar Python correctamente. C\u00f3mo instalar PIP en Windows \u00b6 Las siguientes instrucciones deber\u00edan funcionar en Windows 7, Windows 8.1 y Windows 10: Descargue el script del instalador get-pip.py . Si est\u00e1s en Python 3.2, necesitar\u00e1s esta versi\u00f3n de get-pip.py . En caso de tener Python 3.3 o 3.4 usar estas versiones de PiP correspondientemente Python 3.3 get-pip.py o Python 3.4 get-pip.py . De cualquier manera, haga clic derecho en el enlace y seleccione Guardar como y gu\u00e1rdelo en cualquier carpeta del pc, como su carpeta de Descargas. Abra el s\u00edmbolo del sistema y navegue hasta el archivo get-pip.py. Ejecute el siguiente comando: python get-pip.py \ud83d\udcdd Nota : Ejecutar la terminal (CMD o Powershell) con privilegios de administrador C\u00f3mo instalar PIP en Mac \u00b6 Los sistemas Mac modernos vienen con Python y PIP ya instalados. Sin embargo, esta versi\u00f3n de Python tiende a ser obsoleta y no es la mejor opci\u00f3n para el desarrollo serio de Python, por lo que es muy recomendable que instale una versi\u00f3n m\u00e1s actual de Python y PIP. Si desea utilizar la instalaci\u00f3n de Python del sistema nativo pero no tiene PIP disponible, puede instalar PIP con el siguiente comando en Terminal: sudo easy_install pip Si prefiere instalar una versi\u00f3n m\u00e1s actualizada de Python, puede usar Homebrew. \u00bfNo sabes lo que es eso? Obtenga m\u00e1s informaci\u00f3n sobre la instalaci\u00f3n de software con Homebrew en Mac. Las siguientes instrucciones asumen que ya tiene instalado Homebrew y listo para funcionar. Intalar Homebrew: https://brew.sh/ Instalar Python con Homebrew solo implica usar un solo comando: brew instalar python Esto instalar\u00e1 la \u00faltima versi\u00f3n de Python, que deber\u00eda venir empaquetada con PIP. Si la instalaci\u00f3n es exitosa pero PIP no est\u00e1 disponible, puede necesitar volver a vincular Python usando el siguiente comando de Terminal: brew unlink python && brew enlace python C\u00f3mo instalar PIP en Linux \u00b6 Si su distribuci\u00f3n de Linux vino con Python ya instalado, deber\u00eda poder instalar PIP usando el administrador de paquetes de su sistema. Esto es preferible ya que las versiones de Python instaladas en el sistema no funcionan muy bien con el script get-pip.py utilizado en Windows y Mac. Herramienta de paquete avanzado (Python 2.x): sudo apt-get install python-pip Herramienta de paquete avanzado (Python 3.x): sudo apt-get install python3-pip Administrador de paquetes pacman (Python 2.x): sudo pacman -S python2-pip Administrador de paquetes pacman (Python 3.x): sudo pacman -S python-pip Administrador de paquetes Yum (Python 2.x): sudo yum upgrade python-setuptools sudo yum instalar python-pip python-wheel Administrador de paquetes Yum (Python 3.x): sudo yum install python3 python3-wheel Dandified Yum (Python 2.x): sudo dnf upgrade python-setuptools sudo dnf instalar python-pip python-wheel Dandified Yum (Python 3.x): sudo dnf install python3 python3-wheel Administrador de paquetes Zypper (Python 2.x): sudo zypper install python-pip python-setuptools python-wheel Administrador de paquetes Zypper (Python 3.x): sudo zypper install python3-pip python3-setuptools python3-wheel C\u00f3mo instalar PIP en la Raspberry Pi \u00b6 Como usuario de Raspberry Pi, probablemente est\u00e9 ejecutando Raspbian, ya que es el sistema operativo oficial designado y proporcionado por la Fundaci\u00f3n Raspberry Pi. Puede instalar otro sistema operativo, como Ubuntu, pero en ese caso debe consultar las instrucciones de Linux. Comenzando con Raspbian Jessie, PIP viene instalado por defecto. Es una de las razones principales para actualizar a Raspbian Jessie en lugar de seguir con Raspbian Wheezy o Raspbian Jessie Lite. Sin embargo, si est\u00e1 en una versi\u00f3n anterior de Raspbian, a\u00fan puede instalar PIP. En Python 2.x: sudo apt-get install python-pip En Python 3.x: sudo apt-get install python3-pip Con Raspbian, los usuarios de Python 2.x deber\u00edan usar pip, mientras que los usuarios de Python 3.x deber\u00edan usar pip3 al mandar comandos PIP. C\u00f3mo actualizar PIP para Python \u00b6 Si bien el PIP en s\u00ed mismo no se actualiza con mucha frecuencia, es importante mantenerse al tanto de las nuevas versiones, ya que puede haber soluciones importantes a errores, compatibilidad y problemas de seguridad. Afortunadamente, actualizar PIP es muy r\u00e1pido y simple. En Windows: python -m pip install -U pip En Mac, Linux o Raspberry Pi: pip install -U pip En ciertas versiones de Linux y Raspberry Pi, puede que necesite usar pip3 en su lugar. C\u00f3mo administrar paquetes de Python con PIP \u00b6 Una vez que PIP est\u00e9 listo, puede comenzar a instalar paquetes de PyPI: pip install nombre-paquete Para instalar una versi\u00f3n espec\u00edfica de un paquete en lugar de la \u00faltima versi\u00f3n: pip install nombre-paquete == 1.0.0 Para buscar PyPI para un paquete particular: pip search \"query\" Para ver detalles sobre un paquete instalado: pip show nombre-paquete Para enumerar todos los paquetes instalados: pip list Para enumerar todos los paquetes desactualizados: pip list --outdated Para actualizar un paquete desactualizado: pip install nombre-paquete --upgrade Tenga en cuenta que las versiones anteriores de un paquete se eliminan autom\u00e1ticamente por PIP cuando se actualiza a una versi\u00f3n m\u00e1s nueva de ese paquete. Para reinstalar completamente un paquete: pip install nombre-paquete -upgrade --force-reinstall Para deshacerse completamente de un paquete: pip uninstall nombre-paquete fuente: https://tecnonucleous.com/2018/01/28/como-instalar-pip-para-python-en-windows-mac-y-linux/","title":"Pip"},{"location":"herramientas-it/pip/pip/#como-instalar-pip-para-python-en-windows-mac-y-linux","text":"Al igual que con cualquier lenguaje de programaci\u00f3n serio, Python admite bibliotecas y marcos de terceros que puede instalar para evitar tener que reinventar la rueda con cada nuevo proyecto. Puede encontrarlos en un repositorio central llamado \"PyPI\" (Python Package Index). Pero descargar, instalar y administrar estos paquetes a mano puede ser frustrante y llevar mucho tiempo, por lo que muchos desarrolladores de Python conf\u00edan en una herramienta especial llamada PIP para que Python haga todo mucho m\u00e1s f\u00e1cil y r\u00e1pido.","title":"C\u00f3mo instalar PIP para Python en Windows, Mac y Linux"},{"location":"herramientas-it/pip/pip/#que-es-pip-para-python","text":"PIP es un acr\u00f3nimo que significa \"Paquetes de instalaci\u00f3n PIP\" o \"Programa de instalaci\u00f3n preferida\". Es una utilidad de l\u00ednea de comandos que le permite instalar, reinstalar o desinstalar paquetes PyPI con un comando simple y directo: \"pip\". Si alguna vez ha realizado alg\u00fan trabajo de l\u00ednea de comandos en Windows (con el s\u00edmbolo del sistema) o Mac o Linux (con el Terminal y Bash), entonces te sentir\u00e1s como en casa y puedes ir directamente a las instrucciones de instalaci\u00f3n para su particular sistema operativo.","title":"\u00bfQu\u00e9 es PIP para Python?"},{"location":"herramientas-it/pip/pip/#se-instala-pip-con-python","text":"Si est\u00e1 utilizando Python 2.7.9 (o superior) o Python 3.4 (o superior), entonces PIP viene instalado con Python por defecto. Si est\u00e1 utilizando una versi\u00f3n anterior de Python, deber\u00e1 seguir los pasos de instalaci\u00f3n que se detallan a continuaci\u00f3n. De lo contrario, salte a la parte inferior para aprender c\u00f3mo comenzar a usar PIP. Si est\u00e1 ejecutando Python en un entorno virtual creado con virtualenv o pyvenv, entonces PIP estar\u00e1 disponible para ese entorno independientemente de la versi\u00f3n de Python.","title":"\u00bfSe instala PIP con Python?"},{"location":"herramientas-it/pip/pip/#antes-de-instalar-pip-para-python","text":"Debe asegurarse de que Python est\u00e9 instalado correctamente en su sistema. En Windows, abra el s\u00edmbolo del sistema con la tecla de Windows + X y seleccione S\u00edmbolo del sistema. En Mac, abre la Terminal usando Comando + Espacio y busca la terminal. En Linux, abra la Terminal usando Ctrl + Alt + T o como sea que haya sido hecho en su distribuci\u00f3n particular. Luego escribe: python --version En Linux, los usuarios de Python 3.x pueden necesitar usar el siguiente comando: python3 --version Si obtiene un n\u00famero de versi\u00f3n (por ejemplo, \"Python 2.7.5\"), significa que Python est\u00e1 listo para funcionar. Si aparece el mensaje \"Python is not defined\", primero deber\u00e1 instalar Python correctamente.","title":"Antes de instalar PIP para Python"},{"location":"herramientas-it/pip/pip/#como-instalar-pip-en-windows","text":"Las siguientes instrucciones deber\u00edan funcionar en Windows 7, Windows 8.1 y Windows 10: Descargue el script del instalador get-pip.py . Si est\u00e1s en Python 3.2, necesitar\u00e1s esta versi\u00f3n de get-pip.py . En caso de tener Python 3.3 o 3.4 usar estas versiones de PiP correspondientemente Python 3.3 get-pip.py o Python 3.4 get-pip.py . De cualquier manera, haga clic derecho en el enlace y seleccione Guardar como y gu\u00e1rdelo en cualquier carpeta del pc, como su carpeta de Descargas. Abra el s\u00edmbolo del sistema y navegue hasta el archivo get-pip.py. Ejecute el siguiente comando: python get-pip.py \ud83d\udcdd Nota : Ejecutar la terminal (CMD o Powershell) con privilegios de administrador","title":"C\u00f3mo instalar PIP en Windows"},{"location":"herramientas-it/pip/pip/#como-instalar-pip-en-mac","text":"Los sistemas Mac modernos vienen con Python y PIP ya instalados. Sin embargo, esta versi\u00f3n de Python tiende a ser obsoleta y no es la mejor opci\u00f3n para el desarrollo serio de Python, por lo que es muy recomendable que instale una versi\u00f3n m\u00e1s actual de Python y PIP. Si desea utilizar la instalaci\u00f3n de Python del sistema nativo pero no tiene PIP disponible, puede instalar PIP con el siguiente comando en Terminal: sudo easy_install pip Si prefiere instalar una versi\u00f3n m\u00e1s actualizada de Python, puede usar Homebrew. \u00bfNo sabes lo que es eso? Obtenga m\u00e1s informaci\u00f3n sobre la instalaci\u00f3n de software con Homebrew en Mac. Las siguientes instrucciones asumen que ya tiene instalado Homebrew y listo para funcionar. Intalar Homebrew: https://brew.sh/ Instalar Python con Homebrew solo implica usar un solo comando: brew instalar python Esto instalar\u00e1 la \u00faltima versi\u00f3n de Python, que deber\u00eda venir empaquetada con PIP. Si la instalaci\u00f3n es exitosa pero PIP no est\u00e1 disponible, puede necesitar volver a vincular Python usando el siguiente comando de Terminal: brew unlink python && brew enlace python","title":"C\u00f3mo instalar PIP en Mac"},{"location":"herramientas-it/pip/pip/#como-instalar-pip-en-linux","text":"Si su distribuci\u00f3n de Linux vino con Python ya instalado, deber\u00eda poder instalar PIP usando el administrador de paquetes de su sistema. Esto es preferible ya que las versiones de Python instaladas en el sistema no funcionan muy bien con el script get-pip.py utilizado en Windows y Mac. Herramienta de paquete avanzado (Python 2.x): sudo apt-get install python-pip Herramienta de paquete avanzado (Python 3.x): sudo apt-get install python3-pip Administrador de paquetes pacman (Python 2.x): sudo pacman -S python2-pip Administrador de paquetes pacman (Python 3.x): sudo pacman -S python-pip Administrador de paquetes Yum (Python 2.x): sudo yum upgrade python-setuptools sudo yum instalar python-pip python-wheel Administrador de paquetes Yum (Python 3.x): sudo yum install python3 python3-wheel Dandified Yum (Python 2.x): sudo dnf upgrade python-setuptools sudo dnf instalar python-pip python-wheel Dandified Yum (Python 3.x): sudo dnf install python3 python3-wheel Administrador de paquetes Zypper (Python 2.x): sudo zypper install python-pip python-setuptools python-wheel Administrador de paquetes Zypper (Python 3.x): sudo zypper install python3-pip python3-setuptools python3-wheel","title":"C\u00f3mo instalar PIP en Linux"},{"location":"herramientas-it/pip/pip/#como-instalar-pip-en-la-raspberry-pi","text":"Como usuario de Raspberry Pi, probablemente est\u00e9 ejecutando Raspbian, ya que es el sistema operativo oficial designado y proporcionado por la Fundaci\u00f3n Raspberry Pi. Puede instalar otro sistema operativo, como Ubuntu, pero en ese caso debe consultar las instrucciones de Linux. Comenzando con Raspbian Jessie, PIP viene instalado por defecto. Es una de las razones principales para actualizar a Raspbian Jessie en lugar de seguir con Raspbian Wheezy o Raspbian Jessie Lite. Sin embargo, si est\u00e1 en una versi\u00f3n anterior de Raspbian, a\u00fan puede instalar PIP. En Python 2.x: sudo apt-get install python-pip En Python 3.x: sudo apt-get install python3-pip Con Raspbian, los usuarios de Python 2.x deber\u00edan usar pip, mientras que los usuarios de Python 3.x deber\u00edan usar pip3 al mandar comandos PIP.","title":"C\u00f3mo instalar PIP en la Raspberry Pi"},{"location":"herramientas-it/pip/pip/#como-actualizar-pip-para-python","text":"Si bien el PIP en s\u00ed mismo no se actualiza con mucha frecuencia, es importante mantenerse al tanto de las nuevas versiones, ya que puede haber soluciones importantes a errores, compatibilidad y problemas de seguridad. Afortunadamente, actualizar PIP es muy r\u00e1pido y simple. En Windows: python -m pip install -U pip En Mac, Linux o Raspberry Pi: pip install -U pip En ciertas versiones de Linux y Raspberry Pi, puede que necesite usar pip3 en su lugar.","title":"C\u00f3mo actualizar PIP para Python"},{"location":"herramientas-it/pip/pip/#como-administrar-paquetes-de-python-con-pip","text":"Una vez que PIP est\u00e9 listo, puede comenzar a instalar paquetes de PyPI: pip install nombre-paquete Para instalar una versi\u00f3n espec\u00edfica de un paquete en lugar de la \u00faltima versi\u00f3n: pip install nombre-paquete == 1.0.0 Para buscar PyPI para un paquete particular: pip search \"query\" Para ver detalles sobre un paquete instalado: pip show nombre-paquete Para enumerar todos los paquetes instalados: pip list Para enumerar todos los paquetes desactualizados: pip list --outdated Para actualizar un paquete desactualizado: pip install nombre-paquete --upgrade Tenga en cuenta que las versiones anteriores de un paquete se eliminan autom\u00e1ticamente por PIP cuando se actualiza a una versi\u00f3n m\u00e1s nueva de ese paquete. Para reinstalar completamente un paquete: pip install nombre-paquete -upgrade --force-reinstall Para deshacerse completamente de un paquete: pip uninstall nombre-paquete fuente: https://tecnonucleous.com/2018/01/28/como-instalar-pip-para-python-en-windows-mac-y-linux/","title":"C\u00f3mo administrar paquetes de Python con PIP"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/","text":"Introducci\u00f3n a la terminal \u00b6 \u00bfQue es una terminal? \u00b6 La terminal o consola es una forma generalizada de llamar a la interfaz de usuario de l\u00ednea de comandos: una pantalla ( generalmente, de color de fondo negro sobre letras blancas ) donde escribiendo comandos ( secuencias de palabras especiales ) ordenamos al sistema realizar acciones concretas. Estas interfaces de usuario fueron muy populares en la d\u00e9cada de los 70 y 80, ya que los sistemas de la \u00e9poca carec\u00edan de interfaces gr\u00e1ficas y era el sistema habitual para comunicarse con un dispositivo. Con el tiempo, las interfaces gr\u00e1ficas de usuario ganaron popularidad y relegaron a las interfaces de l\u00ednea de comandos a un segundo plano, aunque nunca terminaron de perder la popularidad que las caracterizaba, sobre todo entre los usuarios m\u00e1s t\u00e9cnicos. Aunque una interfaz gr\u00e1fica de usuario ( GUI ) puede ser m\u00e1s c\u00f3moda y agradable para el usuario, las razones para preferir una interfaz de l\u00ednea de comandos son muchas: Es m\u00e1s r\u00e1pido crear un programa para l\u00ednea de comandos. Suele ser m\u00e1s potente en cuanto a personalizaci\u00f3n de opciones. Permite creaci\u00f3n de scripts para automatizar tareas repetitivas. Suele ser una opci\u00f3n m\u00e1s universal entre sistemas. Suele ser instant\u00e1neo, al no tener que cargar pantallas gr\u00e1ficas. Es por ello que en el mundo de la inform\u00e1tica, y del desarrollo en particular, es una vertiente muy utilizada a\u00fan en nuestros d\u00edas, que no suele ser comprendida por personas externas al sector, que lo consideran un \u00abatraso\u00bb al no conocer sus ventajas y s\u00f3lo conocer sus desventajas. No obstante, el panorama de l\u00ednea de comandos ha mejorado much\u00edsimo desde estas primeras d\u00e9cadas y hoy en d\u00eda existen multitud de opciones para convertir una terminal en una herramienta de trabajo muy productiva, que ser\u00e1 nada menos que nuestro objetivo. Conceptos b\u00e1sicos \u00b6 Hasta ahora, para simplificar, hemos utilizado una gran cantidad de t\u00e9rminos que no son exactamente lo que parecen, por lo que antes de continuar, vamos a dedicar unos minutos a explicarlos, ya que los utilizaremos bastante: T\u00e9rmino Significado Interfaz de usuario Medio (gen\u00e9rico) por el cu\u00e1l se comunica un usuario y una m\u00e1quina. Abreviada UI . Interfaz de l\u00ednea de comandos Interfaz de usuario (UI) basado en texto. Abreviada como CLI . Interfaz gr\u00e1fica de usuario Interfaz de usuario (UI) basado en paneles gr\u00e1ficos o t\u00e1ctiles. Abreviada como GUI . Interprete de comandos Software encargado de gestionar los comandos del usuario y sus respuestas. Se suele abreviar como Shell . Terminal o Consola Dispositivo utilizado antiguamente para comunicarse con un sistema. Emulador de terminal Software que simula ser una terminal, generalmente una ventana donde hay una interfaz CLI. Comando Es cada una de las instrucciones que escribimos en una interfaz CLI para comunicarnos. Par\u00e1metro Son las diferentes opciones que puede tomar un comando para alterar su funcionamiento. Script Es un grupo de comandos, creado con la intenci\u00f3n de automatizar tareas. Una interfaz de usuario ( UI ) es como se denomina al medio que utiliza un usuario para comunicarse con una m\u00e1quina. En nuestro caso nos vamos a referir a interfaces de l\u00ednea de comandos ( CLI ) cuando son basadas en texto, donde los usuarios escriben \u00f3rdenes o comandos y el sistema las lee y realiza, o devuelve resultados e informaci\u00f3n. Por otra parte, las interfaces gr\u00e1ficas de usuario ( GUI ) son la evoluci\u00f3n natural de estas, utilizando pantallas gr\u00e1ficas o sistemas t\u00e1ctiles, mucho m\u00e1s sencillos y agradables de utilizar para la mayor\u00eda de los usuarios, sin embargo, habitualmente menos apropiadas y flexibles en contextos inform\u00e1ticos de desarrollo o sistemas. Adem\u00e1s, tambi\u00e9n hay que aclarar el concepto de int\u00e9rprete de comandos ( shell ). Se trata del software que tiene instalado el sistema y que utilizamos en la interfaz de l\u00ednea de comandos. Por ejemplo, una interfaz de l\u00ednea de comandos puede utilizar varios int\u00e9rpretes diferentes, como por ejemplo, suele ocurrir con Bash o Zsh en GNU/Linux. Es tambi\u00e9n muy frecuente utilizar la palabra terminal ( en esta misma p\u00e1gina lo hago frecuentemente ) en lugar de emulador de terminal . Se hace para acortar, porque en realidad una terminal es un aparato que antiguamente se utilizaba para comunicarse con otro sistema, mientras que un emulador de terminal , que es lo que realmente utilizamos en nuestros dispositivos, es un software que simula ser una de esas terminales, habitualmente con apariencia de ventana de l\u00ednea de comandos, aunque se puede encontrar de todo, como EDEX-UI . Solemos utilizar la palabra comando para referirnos a la instrucci\u00f3n que escribimos en el emulador de terminal para comunicarnos con el sistema, mientras que opciones o par\u00e1metros son los detalles que se suelen escribir a continuaci\u00f3n para personalizar la forma de trabajar del comando o alterar su funcionamiento. Por \u00faltimo, tambi\u00e9n es muy com\u00fan crear scripts , que no son m\u00e1s que ficheros de texto donde se escriben una colecci\u00f3n de comandos para realizar una tarea concreta, con la intenci\u00f3n de automatizarla y sea mucho m\u00e1s f\u00e1cil para nosotros realizarla, ya que en lugar de escribir todos esos comandos por separado, s\u00f3lo tenemos que llamar a ese script. Por ejemplo, en el ejemplo anterior, tenemos lo siguiente: El comando (verde). Muestra todos los ficheros que tenemos en la carpeta actual. El primer par\u00e1metro (amarillo). Muestra ese listado en formato ancho. El segundo par\u00e1metro (azul). Muestra s\u00f3lo el contenido de la carpeta folder . Ayuda a terminal (Man pages) \u00b6 Quiz\u00e1s uno de los primeros consejos que nos pueden dar en la terminal de GNU/Linux es el de aprender a consultar la ayuda . Continuamente, nos estaremos enfrentando a nuevos comandos, par\u00e1metros adicionales o intentando buscar detalles sobre un comando que desconocemos o que, quiz\u00e1s, no recordamos. Para lidiar con ello, Linux tiene varias formas de consultar ayuda breve o amplios manuales de ayuda, por lo que es conveniente conocer cada una de las formas m\u00e1s interesantes de obtener m\u00e1s informaci\u00f3n sobre alg\u00fan detalle. Ayuda r\u00e1pida (--help) \u00b6 Quiz\u00e1s, la forma m\u00e1s r\u00e1pida de consultar la ayuda , es utilizar el par\u00e1metro --help despu\u00e9s del comando que desconocemos y queremos m\u00e1s ayuda. Esto nos mostrar\u00e1 una, generalmente, breve pantalla de ayuda, con los par\u00e1metros u opciones m\u00e1s comunes. \u00datil para consultar r\u00e1pidamente detalles frecuentes o, aparentemente, muy populares. Por ejemplo, si queremos consultar la ayuda del comando uptime , simplemente escribimos: $ uptime --help Usage: uptime [options] Options: -p, --pretty show uptime in pretty format -h, --help display this help and exit -s, --since system up since -V, --version output version information and exit For more details see uptime(1). Nota No todos los comandos tienen ayuda r\u00e1pida , pero si la mayor\u00eda, por lo que es una primera opci\u00f3n bastante interesante. \u00bfPara qu\u00e9 sirve este comando? \u00b6 En el caso de que simplemente queramos saber para que sirve un comando espec\u00edfico, podemos utilizar el comando whatis ( qu\u00e9 es ) seguido del nombre del comando: $ whatis cat cat (1) - concatenate files and print on the standard output Otro comando muy similar es apropos ( a prop\u00f3sito de... ), el cu\u00e1l nos muestra comandos relacionados al que escribimos a continuaci\u00f3n, algo muy \u00fatil para aprender nuevos comandos: $ apropos bzip2 bzcmp (1) - compare bzip2 compressed files bzdiff (1) - compare bzip2 compressed files bzegrep (1) - search possibly bzip2 compressed files for a regular expression bzfgrep (1) - search possibly bzip2 compressed files for a regular expression bzgrep (1) - search possibly bzip2 compressed files for a regular expression bzip2 (1) - a block-sorting file compressor, v1.0.6 bzip2recover (1) - recovers data from damaged bzip2 files bzless (1) - file perusal filter for crt viewing of bzip2 compressed text bzmore (1) - file perusal filter for crt viewing of bzip2 compressed text Nota Ten en cuenta que el n\u00famero que aparece a continuaci\u00f3n ( entre par\u00e9ntesis ), denota en que p\u00e1gina del manual se encuentra ( ver siguiente apartado ). Si lo que buscamos son comandos, el n\u00famero debe ser 1 . Tambi\u00e9n podemos escribir apropos 1 seguido del comando, para obligar a apropos a s\u00f3lo mostrarnos resultados de esa p\u00e1gina. P\u00e1ginas de manual (man pages) \u00b6 Si existe un comando de ayuda por excelencia en Linux, son las \u00abp\u00e1ginas man \u00bb, o lo que es lo mismo, las p\u00e1ginas de manual. En ellas puedes encontrar extensa informaci\u00f3n sobre comandos, par\u00e1metros, opciones y otros detalles sobre comandos, programaci\u00f3n, ficheros del sistema u otros detalles. La forma de consultar estas p\u00e1ginas de manual es muy sencilla: escribimos man seguido del nombre del comando ( o la palabra a investigar ), por ejemplo: man ls . Esto nos mostrar\u00e1 una p\u00e1gina de ayuda sobre el mismo, donde podemos aprender a utilizarlo, ver que opciones o par\u00e1metros tiene, el autor del mismo, etc. Ten en cuenta que muchas veces no vienen instaladas en el sistema, y hay que instalarlas con un sudo apt install man . Esta es la opci\u00f3n preferida cuando queremos buscar informaci\u00f3n detallada sobre alguna funcionalidad espec\u00edfica de alg\u00fan comando. Si estamos utilizando la shell zsh , una forma de mejorar las p\u00e1ginas man es incluyendo el plugin colored-man-pages en la l\u00ednea de plugins del fichero ~/.zshrc . Esto a\u00f1adir\u00e1 un resaltado de color a las p\u00e1ginas man, que har\u00e1n la experiencia de leer estas p\u00e1ginas un poco m\u00e1s agradable. Nota Si quieres poner las p\u00e1ginas man en espa\u00f1ol , lo recomendable ser\u00eda instalar los paquetes en espa\u00f1ol en el sistema con sudo apt install manpages-es manpages-es-extra y establecer el idioma del sistema en espa\u00f1ol. P\u00e1ginas man simplificadas (tldr) \u00b6 La abreviatura TL;DR ( Too long, didn't read ) es un acr\u00f3nimo utilizado para referirse a que algo no se ha le\u00eddo porque es demasiado largo . Las p\u00e1ginas man, aunque muy \u00fatiles, tienen esa caracter\u00edstica: muchas veces no se consultan porque debes leer gran cantidad de informaci\u00f3n, tardando as\u00ed bastante en encontrar lo que buscas. Si esta es tu opini\u00f3n, probablemente te interese el proyecto tldr pages , un sustituto de las p\u00e1ginas man, ideadas para simplificar la ayuda y mostrar directamente ejemplos pr\u00e1cticos de referencia que suelen resolver la mayor\u00eda de las dudas, sobre todo cuando s\u00f3lo consultas para recordar algo olvidado. Su forma de utilizarlo, es simplemente escribir tldr seguido del comando en cuesti\u00f3n: Navi, el hada del terminal \u00b6 Otro recurso bastante interesante de cara a mostrar ayuda al usuario, el uso de navi , un asistente interactivo desarrollado en Rust y que toma su nombre del hada del videojuego \u00ab The Legend of Zelda \u00bb, que tiene como finalidad mostrar unas cheatsheets interactivas con los comandos y par\u00e1metros m\u00e1s utilizados, al estilo de tldr . Para instalar navi , necesitaremos tener instalado Rust . Si lo tenemos instalado, podemos escribir cargo install navi . Con ello tendremos el asistente navi , pero tendremos que instalar las cheatsheets que queramos tener descargadas. Con navi repo browse se nos muestran varios repositorios con las cheatsheets m\u00e1s conocidas, de ah\u00ed podemos ir instalando las que m\u00e1s nos interese consultar para tenerlas instaladas en nuestro sistema. Si por otro lado, lo que queremos es instalar una cheatsheet concreta de un repositorio de GitHub, podemos hacerlo con el comando navi repo add <URL> . Una vez descargadas en nuestro sistema, podemos consultar r\u00e1pidamente con el comando navi query seguido de la palabra clave a consultar. Otros proyectos similares podr\u00edan ser cheat o manly . Nota: Recuerda que si lo que quieres es una cheatsheet f\u00edsica en formato PDF lista para imprimir, tienes nuestra cheatsheet de la terminal de Linux en esta misma p\u00e1gina. Instalaci\u00f3n de WSL \u00b6 Tradicionalmente, Windows ha proporcionado a sus usuarios una interfaz de l\u00ednea de comandos que funciona bajo su propio sistema, heredado de MS-DOS y diferente a GNU/Linux, el cu\u00e1l se basa en un sistema UNIX. Sin embargo, en Windows 10, con la irrupci\u00f3n de Windows Subsystem for Linux ( m\u00e1s comunmente denominado WSL ), esto ha cambiado radicalmente. Otros sistemas operativos como GNU/Linux o Mac, disponen de una interfaz de l\u00ednea de comandos basada en UNIX, por lo que hasta el momento era bastante complejo tener compatibilidad entre sistemas. Con la adopci\u00f3n de WSL en Windows, Microsoft introduce una capa intermedia que funciona con un n\u00facleo de Linux real ( kernel ) y en el que se pueden instalar distribuciones de GNU/Linux ( desde la tienda oficial de Microsoft o de forma manual ) como por ejemplo Ubuntu , Debian , Kali o incluso la distribuci\u00f3n minimalista Alpine . Requisitos previos \u00b6 Para poder disponer de una terminal de GNU/Linux en nuestro Windows, antes necesitamos asegurarnos que nuestro equipo cumple los siguientes requisitos: Necesitaremos soportar y tener activada la virtualizaci\u00f3n Hyper-V en la BIOS/UEFI. Necesitaremos tener Windows 10, en cualquiera de sus versiones ( salvo Windows S ). Debemos tener la caracter\u00edstica Windows Subsystem for Linux activada. Debemos tener la caracter\u00edstica Virtual machine plataform activada. Para usar WSL2 debemos actualizar Windows 10 al menos hasta Mayo de 2020. Activaci\u00f3n de caracter\u00edsticas \u00b6 En la BIOS/UEFI del equipo, debes tener activada la caracter\u00edstica Virtualizaci\u00f3n Hyper-V o Hyper-threading virtualization . Dicha caracter\u00edstica puede encontrarse en un men\u00fa diferente, dependiendo de la marca y modelo de la placa. Por otro lado, para activar las caracter\u00edsticas mencionadas anteriormente en Windows, accedemos a Inicio y buscamos Activar o desactivar caracter\u00edsticas de Windows , donde encontraremos un men\u00fa de selecci\u00f3n para activar las casillas Subsistema de Windows para Linux y Plataforma de m\u00e1quina virtual : La primera de ellas es absolutamente necesaria, puesto que es el propio WSL . La segunda de ellas es necesaria para utilizar WSL2 , y es posible que no aparezca si no tienes Windows 10 actualizado. Puedes comprobarlo, accediendo a Inicio y abriendo una terminal de Windows escribiendo CMD o S\u00edmbolo de sistema y escribiendo lo siguiente: > ver Microsoft Windows [Versi\u00f3n 10.0.19041.329] El comando ver nos mostrar\u00e1 la versi\u00f3n instalada de Windows 10. Si es igual o superior a 10.0.19041 , podremos utilizar WSL2 , en caso contrario, es posible que no podamos utilizar WSL o s\u00f3lo WSL1 . Para solucionarlo, revisa las actualizaciones de Windows e instala las que tengas pendientes. !!! Nota: Tambi\u00e9n es posible comprobar que versi\u00f3n tenemos instalada pulsando +R y escribiendo winver . Si tenemos la versi\u00f3n 2004 o superior, podremos utilizar WSL2 . \u00bfQu\u00e9 distros tengo en WSL? \u00b6 Windows Subsystem for Linux funciona de modo que podemos tener varias distribuciones instaladas en nuestro sistema y utilizar la que queramos. Para ver que distribuciones tenemos instaladas, abrimos una terminal de Windows ( CMD ) y escribimos wsl --list : > wsl --list El subsistema de Windows para Linux no tiene distribuciones instaladas. Para instalar las distribuciones, se puede visitar Microsoft Store: https://aka.ms/wslstore En el caso de tener alguna distribuci\u00f3n de Linux instalada, nos aparecer\u00edan en la lista, como veremos un poco m\u00e1s adelante. Si en lugar de aparecernos el mensaje anterior nos muestra un error por no encontrar el comando wsl , muy probablemente no tengamos instalada la caracter\u00edstica Windows Subsystem for Linux que mencionamos en el apartado anterior. Instalar Linux (WSL) \u00b6 El primer paso que deber\u00edamos realizar es instalar una distribuci\u00f3n de GNU/Linux en nuestro WSL . Existen muchas de ellas para elegir. Personalmente suelo elegir Debian , aunque tambi\u00e9n hay otras distribuciones: Distribuci\u00f3n P\u00e1gina oficial Enlace a tienda Microsoft Descarga manual (.appx) Debian Linux Debian Debian MS Store Debian .appx Ubuntu Linux Ubuntu Ubuntu MS Store Ubuntu 20.04 .appx Kali Linux Kali Kali MS Store Kali Linux .appx Open Suse Open Suse Open Suse MS Store Open Suse .appx Alpine Linux \u00b9 Alpine Alpine MS Store \u00b9 No oficial. Las distribuciones se pueden instalar autom\u00e1ticamente desde la tienda oficial de Microsoft , o manualmente, ejecutando un archivo .appx que contiene la distribuci\u00f3n de Linux a instalar. Si lo hacemos de la primera forma, se instalar\u00e1 de forma transparente, si lo hacemos de la segunda forma, nos mostrar\u00e1 una ventana similar a la siguiente: Una vez instalada la distribuci\u00f3n de Linux en nuestro sistema, tras esperar un corto espacio de tiempo, al iniciarla por primera vez nos aparecer\u00e1 una ventana parecida a esta: Installing, this may take a few minutes... Please create a default UNIX user account. The username does not need to match your Windows username. For more information visit: https://aka.ms/wslusers Enter new UNIX username: En ella, se nos preguntar\u00e1 el nombre de usuario y su correspondiente contrase\u00f1a para utilizar en nuestra distribuci\u00f3n de Linux de WSL. El nombre de usuario debe ser en min\u00fasculas y no es necesario que coincida con el nombre que tengamos en nuestra cuenta de Windows. Una vez hecho esto, escribimos exit ( o cerramos la ventana y volvemos a abrir un s\u00edmbolo del sistema ). Vamos a comprobar que todo ha ido bien y tenemos una distribuci\u00f3n instalada: > wsl --list Distribuciones del subsistema de Windows para Linux: Debian (predet.) Como se puede ver, en nuestro caso nos aparece una distribuci\u00f3n Debian ( marcada como predeterminada ). Si instalasemos varias distribuciones las ver\u00edamos en esta lista, y podr\u00edamos seleccionar una como predeterminada escribiendo wsl --set-default Debian o wsl -s Debian . Convertir distro WSL1 a WSL2 \u00b6 Por defecto, en nuestro Windows 10, actualmente las distribuciones se instalan como distros utilizando WSL1 . Sin embargo, WSL2 est\u00e1 disponible y proporciona m\u00faltiples mejoras, ya que incorpora un kernel de Linux real utilizando Hyper-V , ofreciendo as\u00ed un rendimiento m\u00e1s alto, a la vez que mejor soporte y compatibilidad. Para aprovechar las \u00faltimas ventajas de WSL , es necesario convertir las distribuciones a WSL2 , cosa que podemos hacer simplemente escribiendo wsl --set-version Debian 2 , lo que convertir\u00e1 nuestra distribuci\u00f3n \u00ab Debian \u00bb a WSL2: En el caso de que nos aparezca el error Habilita la caracter\u00edstica Plataforma de m\u00e1quina virtual de Windows y aseg\u00farate de que la virtualizaci\u00f3n est\u00e9 habilitada en el BIOS. revisa los puntos mencionados en el primer apartado de esta p\u00e1gina. Si todo ha ido bien, nos deber\u00eda aparecer una pantalla similar a esta: > wsl --set-version Debian 2 Conversi\u00f3n en curso, esto puede tardar unos minutos... Para informaci\u00f3n sobre las diferencias clave con WSL 2, visita https://aka.ms/wsl2 Conversi\u00f3n completada. En el caso de que nos aparezca el mensaje La distribuci\u00f3n ya es la versi\u00f3n solicitada. significa que no se requiere conversi\u00f3n, ya que la distribuci\u00f3n actual ya es WSL2 . Si estamos completamente seguros de querer que todas las distribuciones que utilicemos a partir de ahora sean WSL2 , no tenemos m\u00e1s que escribir el comando wsl --set-default-version 2 , que indicar\u00e1 a WSL que todas las distribuciones que utilicemos funcionen bajo WSL2 por defecto. De esta forma, el paso anterior no ser\u00e1 necesario a partir de ahora. Iniciar distro de Linux WSL \u00b6 Hay que tener bien claro que bajo Windows, la terminal que utilizamos es cmd.exe o S\u00edmbolo de sistema , lo que nos arranca una interfaz de l\u00ednea de comandos de Windows. Es en esta interfaz donde podemos ejecutar comandos de Windows como wsl u otros. Para arrancar una distribuci\u00f3n de Linux de las que hemos instalado, tendremos que acceder escribiendo wsl ( para entrar en la distribuci\u00f3n predeterminada ) o escribiendo wsl -d Debian para indicar la distribuci\u00f3n a la que queremos entrar, en el caso de tener varias. Sin embargo, ya te habr\u00e1s dado cuenta que la terminal de Windows ( CMD ) es bastante pobre y limitada, sobre todo en cuanto a caracter\u00edsticas de personalizaci\u00f3n. La mejor opci\u00f3n, ahora que tenemos WSL, es instalar un buen y moderno emulador de terminal, que nos de una buena experiencia al utilizar la terminal. Algunos de los mejores emuladores de terminal para Windows son los siguientes: Emulador GitHub Descripci\u00f3n Terminal GitHub Nueva terminal oficial de Microsoft. ConEmu GitHub ConEmu-Maximus5, potente emulador de terminal ultra-personalizable. Cmder GitHub Fork de ConEmu, orientado a usabilidad y aspecto visual. Hyper GitHub Emulador de terminal basado en Electron. wsl-terminal GitHub Emulador de terminal dise\u00f1ado especialmente para WSL. ConsoleZ GitHub Fork de Console2, orientado en una mejor experiencia visual. FluentTerminal GitHub Emulador de terminal constru\u00edda como aplicaci\u00f3n universal de Windows (UWP). Terminus GitHub Emulador de terminal moderno y visual. Personalmente, mi preferido es ConEmu , el cu\u00e1l tiene multitud de opciones de personalizaci\u00f3n y permite configurar pr\u00e1cticamente cualquier aspecto del mismo, como por ejemplo, crear una tarea llamada {Shells::WSL} que ejecute wsl.exe al abrir la terminal, y as\u00ed utilice directamente la distribuci\u00f3n de Linux por defecto de WSL. Convertir rutas Windows a WSL \u00b6 Si lo necesitas, WSL incorpora un comando llamado wslpath , que te permite hacer traducciones de rutas Windows a rutas Linux y viceversa. Para ello, solo tienes que escribir el comando wslpath RUTA_WINDOWS para obtener la misma ruta en formato Linux, o al contrario, escribir el comando wslpath -w RUTA_LINUX para obtener la ruta en formato Windows: Esto puede ser una forma interesante para intercomunicar ambos sistemas mediante scripts o tareas. Instalaci\u00f3n de zsh \u00b6 Como mencionamos en un apartado anterior, el int\u00e9rprete de comandos ( tambi\u00e9n llamado shell ) es el software o programa que gestiona los comandos que introduce el usuario, para intentar comprenderlos lo mejor posible y comunicarselos a la m\u00e1quina o sistema de la mejor forma posible. En GNU/Linux, tenemos multitud de int\u00e9rpretes de comandos, siendo quiz\u00e1s los m\u00e1s conocidos bash y zsh . Sin embargo, existen multitud de ellos: Nombre A\u00f1o Abreviatura Descripci\u00f3n Bourne Shell 1977 sh Int\u00e9rprete ligero y sencillo, considerado el est\u00e1ndar. C Shell 1978 csh Int\u00e9rprete basado en el lenguaje de programaci\u00f3n C. Korn Shell 1983 ksh Int\u00e9rprete de AT&T de Bourne Shell. Almquist Shell 1989 ash Int\u00e9rprete ligero y r\u00e1pido, popularizado en m\u00e1quinas de bajo coste. Bourne Again Shell 1989 bash Popular int\u00e9rprete de la mayor\u00eda de los GNU/Linux. Z Shell 1990 zsh Int\u00e9rprete shell mejorado, con a\u00f1adidos de otras shells. Fish Shell 2005 fish Int\u00e9rprete enfocado en la sencillez y una interfaz agradable. Ion Shell 2015 ion Shell del sistema operativo Redox En este art\u00edculo veremos como instalar y configurar zsh para tener una terminal moderna, atractiva y con funcionalidades interesantes como autocompletado de comandos basado en el historial, resaltado y detecci\u00f3n de comandos existentes o completado avanzado de comandos. Instalar Z Shell (zsh) \u00b6 El int\u00e9rprete Z Shell ( m\u00e1s conocido como zsh ) es uno de los shells m\u00e1s conocidos de GNU/Linux, adoptado hace poco por Apple como su int\u00e9rprete de terminal por defecto desde 2019. Hoy en d\u00eda, quiz\u00e1s el m\u00e1s extendido es bash , sin embargo, zsh gana cada d\u00eda m\u00e1s adeptos debido a su capacidad y potencia de personalizaci\u00f3n y su activa comunidad. Es una excelente alternativa a bash . Si tenemos un sistema reci\u00e9n instalado ( o por defecto ), lo m\u00e1s probable es que tengamos un bash o un sh ( m\u00e1s simple ). Lo primero que necesitamos tener instalado en nuestro sistema es el int\u00e9rprete de zsh . Para instalarlo utilizaremos apt , que se encargar\u00e1 de buscar los paquetes necesarios y sus dependencias: sudo apt update && sudo apt install zsh Con esto tendr\u00edamos el int\u00e9rprete instalado, pero se trata de un \u00abzsh pelado\u00bb, sin configuraci\u00f3n. De hecho, de momento ni siquiera se va a iniciar por si solo y seguiremos utilizando el interprete que ten\u00edamos antes. Si escribimos zsh podemos obligar al sistema a abrir zsh y ver si se ha instalado correctamente. Nos deber\u00eda aparece una pantalla similar a la siguiente: zsh.newuser-install. You are seeing this message because you have no zsh startup files (the files .zshenv, .zprofile, .zshrc, .zlogin in the directory ~). This function can help you with a few settings that should make your use of the shell easier. You can: (q) Quit and do nothing. The function will be run again next time. (0) Exit, creating the file ~/.zshrc containing just a comment. That will prevent this function being run again. (1) Continue to the main menu. (2) Populate your ~/.zshrc with the configuration recommended by the system administrator and exit (you will need to edit the file by hand, if so desired). --- Type one of the keys in parentheses --- Esta es la pantalla de bienvenida de zsh , que nos da varias opciones para configurarlo manualmente, dejar su configuraci\u00f3n vac\u00eda, entre otras. Marcamos la opci\u00f3n 0 , que simplemente crear\u00e1 nuestro fichero de configuraci\u00f3n ~/.zshrc para que no nos vuelva a salir este mensaje de bienvenida cada vez que arranquemos zsh . Si todo ha ido bien, deber\u00eda aparecernos algo parecido a esto ( con el nombre de nuestro sistema ): DESKTOP-OHQ7ANH% _ Escribimos exit para salir de esta sesi\u00f3n y volver a la anterior ( donde a\u00fan no usabamos zsh ). Utilizar zsh por defecto \u00b6 Habr\u00e1s comprobado que si cierras la terminal y la vuelves a abrir, parece no haber cambiado nada y no inicia zsh . Esto ocurre porque aunque est\u00e1 instalada en el sistema, a\u00fan est\u00e1s usando otro int\u00e9rprete de comandos ( probablemente, el anterior que ten\u00edas ). Para saber que int\u00e9rprete de comandos o shell estamos utilizando, puedes escribir echo $0 o echo $SHELL , el cu\u00e1l deber\u00eda mostrarte cu\u00e1l estas utilizando en el momento actual. Por otro lado, escribiendo cat /etc/shells podemos ver que int\u00e9rpretes tenemos instalados en nuestro sistema y podemos utilizar. Si queremos cambiar el shell con el que inicia un usuario ( por ejemplo, manz ), solo tenemos que utilizar el comando chsh ( change shell ): chsh manz -s /bin/zsh Perfecto. Ahora cuando volvamos a abrir una terminal, nos arrancar\u00e1 la shell zsh . Ahora que ya lo tenemos todo listo, toca configurarlo para que haga magia . Framework Oh-My-Zsh \u00b6 Uno de los frameworks m\u00e1s populares de zsh es Oh-My-Zsh! , el cu\u00e1l podremos instalar para dotar a nuestro sistema de funcionalidades muy interesantes que nos har\u00e1n m\u00e1s c\u00f3modo su uso. Para instalarlo necesitaremos curl y git , por lo que instalamos dichos requisitos previamente: $ sudo apt install git curl -y Una vez los tengamos instalados, escribimos el comando siguiente, el cu\u00e1l descargar\u00e1 el script oficial de instalaci\u00f3n de Oh-my-fish! : $ sh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\" Cloning Oh My Zsh... Cloning into '/home/manz/.oh-my-zsh'... Es posible que al finalizar la instalaci\u00f3n nos pregunte si queremos sobreescribir la configuraci\u00f3n de ~/.zshrc o si queremos establecer zsh como shell por defecto, si corresponde. Una vez terminado el proceso, deber\u00eda aparecernos algo como lo siguiente: Podemos ver que el prompt de la shell ya ha cambiado a algo m\u00e1s bonito y amigable, haciendo uso de colores. Sin embargo, puede resultarnos demasiado simple. Veamos como podemos cambiarlo por otro theme . Cambiar el tema de zsh \u00b6 Una de las caracter\u00edsticas m\u00e1s llamativas de zsh es la posibilidad de cambiar el theme de la terminal, a uno m\u00e1s vistoso y llamativo. La shell zsh incorpora de serie varios themes para la terminal que podemos utilizar seg\u00fan nuestros gustos. Por ejemplo, uno de mis preferidos es agnoster . Para seleccionar este tema, simplemente tenemos que editar el archivo de configuraci\u00f3n ~/.zshrc y buscar la l\u00ednea siguiente: ZSH_THEME=\"robbyrussell\" El tema robbyrussell es el que viene por defecto, pero podemos cambiarlo por agnoster o por cualquier otro de la lista de themes de zsh . De hecho, incluso podemos indicar random como tema, y descomentar una l\u00ednea que aparece m\u00e1s abajo, que nos activar un tema aleatorio de esa lista, de forma aleatoria cada vez que abramos una terminal: ZSH_THEME_RANDOM_CANDIDATES=( \"robbyrussell\" \"agnoster\" \"xiong-chiamiov\" ) Si todo ha ido bien al cambiar el tema por agnoster , al guardar el fichero de configuraci\u00f3n y abrir una nueva terminal ya deber\u00eda aparecernos la nueva interfaz del int\u00e9rprete de comandos: Autocompletado y sugerencias \u00b6 Existen una serie de plugins creados por la comunidad de zsh muy interesantes, que podemos instalar en nuestra terminal para ampliar sus capacidades y hacerla mucho m\u00e1s c\u00f3moda. Plugin Descripci\u00f3n zsh-syntax-highlighting Resaltado de sintaxis para comandos, basado en fish . zsh-autosuggestions Sugerencias basadas en el historial, basado en fish . zsh-completions Autocompletado mejorado para comandos. El primero de ellos, zsh-syntax-highlighting , es el resaltado de color de comandos , el cu\u00e1l viene de una caracter\u00edstica que incorporaba inicialmente el int\u00e9rprete de comandos fish . Al escribir un comando en la terminal nos aparecer\u00e1 en rojo si no est\u00e1 instalado en el sistema o en verde si est\u00e1 disponible para utilizar. De esta forma sabremos, a medida que vamos escribiendo los comandos, si los estamos escribiendo bien ( o por lo contrario, tenemos erratas ) o si no se encuentra instalado un comando, por ejemplo, incluso antes de pulsar la tecla ENTER. El segundo, zsh-autosuggestions , es un plugin que a medida que escribimos un comando, nos sugiere y recuerda comandos escritos anteriormente ( que residen en el historial de la terminal ) en color gris de fondo, para que sea m\u00e1s sencillo para nosotros identificarlos. Pulsando \u2192 le decimos a zsh que lo recupere \u00edntegro, lo que puede ser \u00fatil para comandos largos. Por \u00faltimo, el plugin zsh-completions nos permite activar ciertas caracter\u00edsticas interesantes de autocompletado en zsh , como por ejemplo atajos al pulsar TAB en git , composer de PHP, nano , el firewall ufw , node y muchos otros. Para instalar estos plugins, lo que tendremos que hacer es simplemente copiar y pegar los siguientes comandos. En ellos, lo que estamos haciendo es descargarnos ( clonar el repositorio del plugin de git ) y guard\u00e1ndolo en nuestra carpeta personal, en un apartado de plugins personalizados de oh-my-zsh. Podemos hacerlo todo con estos tres comandos: git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting git clone https://github.com/zsh-users/zsh-completions ${ZSH_CUSTOM:=~/.oh-my-zsh/custom}/plugins/zsh-completions Una vez hecho, editamos el fichero ~/.zshrc y bajamos hasta la linea donde se cargan los plugins, generalmente con esta configuraci\u00f3n plugins=(git) . Ampliamos esa lista de plugins, escribiendo lo siguiente: plugins=(git zsh-autosuggestions zsh-syntax-highlighting zsh-completions) autoload -U compinit && compinit Con esto, cargaremos esos 4 plugins y tendremos listo estas funcionalidades adicionales desde que volvamos a abrir una nueva terminal. Error 12: character not in range \u00b6 Es muy com\u00fan, que instalando los plugins, gestionando los themes y personalizando los apartados anteriores, te puedas encontrar de repente con que al iniciar la terminal, nos aparece un error similar al siguiente: (anon):12: character not in range Este problema ocurre por conflictos en la lectura de car\u00e1cteres Unicode, ya que es posible que est\u00e9 intentando leer alguno que no exista en el conjunto de car\u00e1cteres instalados. Para resolverlo, simplemente instala los paquetes de localizaci\u00f3n escribiendo sudo apt install locales-all y reinicia la terminal. Carpetas (directorios) en Linux \u00b6 GNU/Linux tiene su propia distribuci\u00f3n de ficheros y carpetas que, para usuarios que provengan de Windows, puede ser confusa, ya que es bastante diferente. En Linux hay una m\u00e1xima que se sigue como filosof\u00eda: todo son ficheros : los \u00abaccesos directos\u00bb, los dispositivos f\u00edsicos como el rat\u00f3n o el teclado, los discos duros, las carpetas, e incluso y obviamente, los ficheros. Mientras que en Windows, una ruta normal de carpetas podr\u00eda ser C:\\Users\\Manz , una ruta equivalente en un sistema operativo Linux ser\u00eda /home/manz : En Linux, los nombres de ficheros son sensibles a may\u00fasculas y min\u00fasculas , es decir, puede coexistir un fichero llamado gato y otro Gato en la misma carpeta, puesto que son ficheros diferentes. Sin embargo, en un sistema Windows, ser\u00edan el mismo fichero. \u00bfEn qu\u00e9 carpeta estoy? (pwd) \u00b6 En una terminal de Linux, normalmente a la izquierda se nos muestra la carpeta donde nos encontramos ( o parte de ella ). Sin embargo, dependiendo de la configuraci\u00f3n de nuestra shell , es posible que no aparezca. Si queremos saber en que carpeta nos encontramos, podemos utilizar el comando pwd ( print work directory ). Si no tenemos muy clara la estructura de carpetas donde estamos, podemos utilizar el comando tree , el cu\u00e1l nos muestra un \u00e1rbol de carpetas, esquematizado. Por ejemplo, escribiendo tree /var/log nos mostrar\u00e1 algo parecido a esto: $ tree /var/log /var/log |-- alternatives.log |-- apt | |-- eipp.log.xz | |-- history.log | `-- term.log |-- btmp |-- dpkg.log |-- faillog |-- lastlog `-- wtmp 1 directory, 9 files De esta forma podemos ver \u00abpseudo-gr\u00e1ficamente\u00bb la estructura de carpetas. Ten en cuenta que el comando tree no viene instalado en el sistema, y hay que instalarlo previamente con un sudo apt install tree . Listar ficheros (ls) \u00b6 Para ver los ficheros y carpetas del directorio actual, basta con utilizar el comando ls ( LiSt files ). Esto mostrar\u00e1 una lista en horizontal con todos los ficheros y carpetas encontradas. Tambi\u00e9n podemos especificar la ruta que queremos listar por par\u00e1metro, por ejemplo: ls /home . Por ejemplo: $ ls / bin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var En algunos casos, puede que el ls devuelva los ficheros sin resaltado de sintaxis de color . Puedes probar con ls --color para ver si muestra los ficheros con colores. Las distribuciones de Linux, suelen crear un alias en el fichero ~/.bashrc o ~/.zshrc para que cuando se escriba ls , realmente se haga un ls --color . Existen algunos par\u00e1metros interesantes para mostrar m\u00e1s informaci\u00f3n al listar ficheros y carpetas, como por ejemplo ls -lh , donde la l usa el formato ancho ( m\u00e1s informaci\u00f3n ) y la h muestra \u00aben humano\u00bb el tama\u00f1o de los ficheros ( usando unidades para que sea m\u00e1s f\u00e1cil ). Aqu\u00ed vemos algunos de los m\u00e1s interesantes: Par\u00e1metros Descripci\u00f3n -l (long) Usa el formato ancho para mostrar datos adicionales (tama\u00f1o, permisos, etc...) -a (all) Muestra tambi\u00e9n ficheros ocultos ( que empiezan por punto ) --color Activa colores al mostrar los ficheros. -h (human) Muestra el tama\u00f1o de los archivos con la unidad K , M o G . -S (size) Ordena ficheros por tama\u00f1o, el m\u00e1s pesado primero. -t (time) Ordena ficheros por fecha de modificaci\u00f3n, el m\u00e1s reciente primero. -r (reverse) Invierte el orden de los ficheros. Observa que para indicar varios par\u00e1metros, en lugar de escribir, por ejemplo, ls -l -h -S puedes contraer los par\u00e1metros y escribir ls -lhS . Mejora del ls (exa) \u00b6 Existe una alternativa al ls , bastante interesante, que utiliza resaltado de sintaxis para que sea m\u00e1s sencillo identificar los permisos r\u00e1pidamente. Se llama exa y est\u00e1 desarrollada en Rust. Podemos instalar esta herramienta f\u00e1cilmente si disponemos de Rust en nuestro sistema, utilizando su gestor de paquetes. Simplemente escribimos cargo install exa y lo instalaremos. La salida del formato largo de exa es el siguiente: Aunque no es un reemplazo 100% id\u00e9ntico en par\u00e1metros, puedes crear un alias de ls para que ejecute exa en su lugar. Como curiosidad y para una mejor identificaci\u00f3n de ficheros, con el par\u00e1metro exa --icons puede mostrar iconos de los tipos de ficheros a la izquierda. Existe otra alternativa a ls llamada lsd y muy parecida a exa . Puedes descargarla e instalarla haciendo lo siguiente: sudo apt install wget wget https://github.com/Peltoche/lsd/releases/download/0.17.0/lsd_0.17.0_amd64.deb sudo dpkg -i lsd_0.17.0_amd64.deb Tambi\u00e9n tiene resaltado de sintaxis con colores, soporte de iconos, junto a otras caracter\u00edsticas, por lo que tambi\u00e9n es una buena opci\u00f3n. Cambiar de carpetas (cd) \u00b6 Para movernos entre carpetas , utilizaremos el comando cd ( change directory ) seguido del nombre de la carpeta ( movimiento relativo ) o ruta completa ( movimiento absoluto ) a la que queremos acceder. Ten en cuenta que al escribir el nombre de la carpeta o ruta, puedes pulsar TAB y el sistema te sugiere las opciones que encajen con lo que has escrito ( o autocompleta si solo hay una opci\u00f3n ), de modo que no tendr\u00e1s que escribirlo por completo. Existen algunas palabras clave para referirnos a rutas espec\u00edficas: S\u00edmbolo Ejemplo Descripci\u00f3n .. cd .. \u00abSale\u00bb de la carpeta actual y se mueve a la carpeta padre. . Hace referencia a la carpeta actual. \u00datil como abreviatura. ~ cd ~ Accede a la carpeta personal del usuario. Igual que escribir cd sin par\u00e1metros. De la misma forma, se pueden hacer combinaciones como ls ~/.oh-my-fish/ , que es lo mismo que ls /home/manz/.oh-my-fish/ ( si soy el usuario manz ) o ls ../etc ser\u00eda equivalente a ls /etc si estoy en la carpeta /home . Pila de carpetas (pushd / popd) \u00b6 Otra forma de trabajar entre carpetas, es utilizando los comandos pushd ( push directory ) y popd ( pop directory ). Ambos funcionan trabajando con una estructura de pila donde podemos hacer push ( para meter una carpeta ) o pop ( para sacar una carpeta ). De esta forma, si sabemos que m\u00e1s adelante necesitaremos volver a acceder a una ruta compleja, podemos hacer lo siguiente: $ pushd /etc/nginx # Guarda la ruta /etc/nginx en la pila $ cd /home/manz # Cambiamos a otra ruta ... # Trabajamos en esa ruta $ popd # Vuelve a la ruta guardada previamente en la pila Podemos ejecutar varias veces el comando pushd e ir apilando varias rutas o carpetas diferentes. Tambi\u00e9n tener en cuenta que se puede utilizar . como par\u00e1metro de pushd para guardar la ruta actual en la que nos encontramos de forma r\u00e1pida. Mejora del cd (autojump) \u00b6 Si acostumbras a trabajar en una terminal, es muy com\u00fan perder bastante tiempo escribiendo los nombres de las carpetas o pensando cu\u00e1l era la ruta, en la que estabas, si no est\u00e1s muy familiarizado con ella. El comando autojump es una mejora interesante del cd , ya que se basa en saltar a la carpeta \u00abfreciente\u00bb que m\u00e1s se aproxime al par\u00e1metro escrito; esto es, la ruta o carpeta m\u00e1s frecuente y m\u00e1s reciente. Veamoslo con un ejemplo: $ cd /etc/nginx $ ls -lh $ cd /home/manz $ j nginx /etc/nginx En el ejemplo anterior, al escribir j nginx , el comando autojump accede a la ruta /etc/nginx , porque es la carpeta m\u00e1s reciente a la que hemos accedido frecuentemente que encaja con el texto escrito por par\u00e1metro: nginx . El comando nos muestra por pantalla la carpeta coincidente, y cambia a ella autom\u00e1ticamente. Nota El comando j es un alias de autojump y no viene instalado por defecto en el sistema. Para instalarlo en Debian, basta con hacer un sudo apt install autojump y a\u00f1adir la l\u00ednea source /usr/share/autojump/autojump.bash ( la extensi\u00f3n depende de la shell que usemos ). Existen otras mejoras similares como z , v o fasd . Carpetas del sistema \u00b6 Linux tiene una estructura de carpetas bien definida, donde cada carpeta tiene una finalidad muy concreta, y en ella se guardan los archivos correspondientes. Por otra parte, mientras que en Windows la ruta ra\u00edz ( la primera carpeta del sistema ) es C:\\ , en Linux es / , puesto que todo parte de esa ruta ra\u00edz . Desde esa ruta / nos podemos encontrar varias carpetas, cada una con una finalidad concreta: Carpeta Descripci\u00f3n / Carpeta ra\u00edz del sistema. Equivalente a C:\\ en Windows. /bin Binarios ( comandos ejecutables ) principales. /boot Archivos de arranque. Equivale a C:\\bootmgr en Windows. /dev Dispositivos f\u00edsicos de hardware. /etc Archivos de configuraci\u00f3n. Equivale al registro de Windows. /home Carpetas del usuario. Equivale a C:\\Users en Windows. /lib Bibliotecas del sistema. Equivale a C:\\Windows\\System32 . /lost+found Archivos corruptos o recuperados. /media Medios extra\u00edbles. Generalmente, carpetas de CD/DVD, usb, unidades extra\u00edbles... /mnt Montaje temporal reservado para el administrador de sistemas. /opt Aplicaciones o paquetes adicionales ( opcionales ). /proc Procesos internos del sistema. /root Carpeta personal del administrador. /run Informaci\u00f3n reciente. /sbin Archivos binarios reservados para root. S\u00f3lo accesible si tienes privilegios. /srv Datos espec\u00edficos para servicios. /sys Nueva versi\u00f3n o evoluci\u00f3n de /proc/ /tmp Archivos temporales. Muchas veces, eliminados al reiniciar el sistema. /usr Datos de paquetes instalados. Equivale a C:\\Archivos de Programa en Windows. /var Logs, cache, variables, etc... Manipular ficheros y carpetas \u00b6 Para trabajar desde una terminal, es muy necesario saber moverse entre carpetas y manipular ficheros y carpetas . Acciones como copiar, mover y borrar ficheros o crear carpetas forman parte del d\u00eda a d\u00eda en nuestras terminales de texto. Por esa raz\u00f3n es necesario conocer algunos de los comandos m\u00e1s habituales para estas y otras tareas relacionadas, as\u00ed como sus par\u00e1metros o curiosidades m\u00e1s importantes. Identificar ficheros (file) \u00b6 Existe un comando no demasiado conocido llamado file con el cu\u00e1l puedes saber con que tipo de fichero est\u00e1s trabajando. En principio, normalmente identificamos a los ficheros por sus extensiones, si es .txt es un fichero de texto y si es .mp3 se trata de un archivo de audio. Sin embargo, estas extensiones son una convenci\u00f3n. Nada me impide renombrar un fichero .txt como .mp3 . Simplemente, no funcionar\u00e1 si lo abro con un reproductor de audio. $ file /etc/hosts /etc/hosts: ASCII text $ file music.s3m /home/manz/music.s3m: ScreamTracker III Module sound data Sin embargo, file no se guiar\u00e1 por la extensi\u00f3n, sino que analizar\u00e1 su contenido, m\u00e1s concretamente su n\u00famero m\u00e1gico , para intentar reconocer que tipo de archivo es. Nota Si file no es lo suficientemente exhaustivo para ti, existe un proyecto llamado trID que tiene la misma filosof\u00eda que file pero analiza los ficheros en mayor profundidad. Copiar ficheros (cp) \u00b6 Una operaci\u00f3n b\u00e1sica a la hora de usar una terminal es la de copiar ficheros . Nos encontramos continuamente haciendo copias de ficheros o carpetas, ya sea de una ruta a otra o sobre la misma carpeta donde nos encontramos. Para ello, utilizamos el comando cp ( copy ), que suele utilizarse de la siguiente forma: $ pwd /home/manz $ cp origen.txt /home/tux/destino.txt En este sencillo ejemplo hemos copiado el fichero origen.txt desde la carpeta /home/manz a la carpeta /home/tux cambi\u00e1ndole el nombre a destino.txt . Asumamos que seguimos en la carpeta /home/manz : La forma en la que especificamos las rutas y copiamos ficheros, pueden simplificarse y hacerse m\u00e1s flexibles dependiendo de si utilizamos rutas absolutas o rutas relativas : Tipo Descripci\u00f3n Ruta absoluta Ruta completa de la carpeta o fichero desde el ra\u00edz. Ej: /home/tux Ruta actual Ruta donde nos encontramos actualmente. Ej: . Ruta padre Ruta a la carpeta anterior de donde nos encontramos actualmente. Ej: .. Ruta relativa Ruta completa, pero s\u00f3lo a partir de la carpeta donde nos encontramos. Ej: ../tux Ve\u00e1moslo con varios ejemplos: # Caso 1: Rutas absolutas $ cp /home/manz/origen.txt /home/tux/destino.txt # Caso 2: Rutas relativas $ cp origen.txt destino.txt # Caso 3: Rutas relativas $ cp origen.txt ../tux/destino.txt # Caso 4: Ruta absoluta y ruta relativa $ cp /etc/resolv.conf ./backup.conf El primer caso, equivalente al primer ejemplo, pero indicando rutas absolutas . El segundo caso, creamos una copia con nombre destino.txt en la misma ruta. El tercer caso, asumiendo que seguimos en la ruta /home/manz , copiamos el fichero origen.txt a la ruta relativa ../tux , es decir, a /home/tux , con nombre destino.txt . El cuarto caso, copiamos el fichero resolv.conf de la ruta /etc a . , o sea, la carpeta actual donde nos encontramos, pero con el nombre backup.conf . Por otro lado, es importante recalcar que el comando cp tiene algunos par\u00e1metros que pueden resultarnos \u00fatiles, como por ejemplo el par\u00e1metro -r que nos permite hacer copias recursivas , esto es, no s\u00f3lo copiar ficheros, sino carpetas y su contenido , ya que por defecto cp solo copia ficheros. Los par\u00e1metros m\u00e1s populares son los siguientes: Par\u00e1metro Significado -r ( recursive ) El comando cp s\u00f3lo copia ficheros. Usar -r si se quiere copiar carpetas y su contenido. -u ( update ) Copia s\u00f3lo cuando no hay fichero de destino. Si existe, s\u00f3lo cuando el origen es m\u00e1s nuevo. -n ( no clobber ) No sobreescribe en el destino un fichero que ya existe. -v ( verbose ) Por defecto, cp trabaja en silencio. Con este par\u00e1metro muestra lo que est\u00e1 haciendo. Mover o renombrar ficheros (mv) \u00b6 Al igual que hemos utilizado cp para copiar ficheros, podr\u00edamos utilizar mv ( move ) para mover archivos. La diferencia entre estos dos comandos es que, mv en lugar de mantener el fichero original como hace cp , lo elimina tras la copia: # Caso 1: Mueve un fichero $ mv /home/tux/info.txt /home/manz/ # Caso 2: Mueve y renombra un fichero $ mv /home/tux/info.txt /home/manz/tuxdata.txt # Caso 3: Renombra un fichero $ mv info.txt tuxdata.txt Obs\u00e9rvese que en el primer caso, se est\u00e1 moviendo un fichero a una ruta concreta, pero podemos utilizar mv para renombrar a la vez que movemos ( como en el caso 2 ) o simplemente renombrar sin mover de ruta ( caso 3 ). De la misma forma que cp , el comando mv tiene los mismos par\u00e1metros que mencionamos. Borrar ficheros (rm) \u00b6 Probablemente, otro de los comandos m\u00e1s utilizados en la terminal es rm ( remove ), que sirve para eliminar ficheros o carpetas de nuestro sistema. Hay que tener mucho cuidado con \u00e9l, ya que una vez un fichero es eliminado, aunque no es imposible, es complicado recuperarlo. Par\u00e1metro Significado -f ( force ) Fuerza a hacer el borrado, sin preguntar. -r ( recursive ) Elimina recursivamente carpetas y su contenido. -d ( dir ) Elimina carpetas vac\u00edas. -v ( verbose ) Por defecto, rm trabaja en silencio. Con este par\u00e1metro muestra lo que est\u00e1 haciendo. Como mencionamos anteriormente, el comando rm realmente no borra un fichero, sino que lo \u00abmarca\u00bb en el disco como reutilizable. Si la zona del disco donde resid\u00eda es sobreescrita con otro fichero, probablemente sea imposible recuperarlo, pero en caso contrario hay cierta posibilidad. Nota Si deseas eliminar por completo un fichero, sin posibilidad de recuperaci\u00f3n, es mejor utilizar el comando shred -u seguido del nombre del fichero a eliminar. Este comando sobreescribe con informaci\u00f3n aleatoria el fichero, y luego lo elimina ( par\u00e1metro -u ). Mejora del rm (rip) \u00b6 Si la filosof\u00eda por defecto del comando rm no te agrada, o eres una persona que suele eliminar ficheros por accidente, quiz\u00e1s te interese el comando rip ( rm improved ). Se trata de una alternativa a rm desarrollada en Rust, que establece que al eliminar un archivo con rip , pasa a estar \u00abmuerto\u00bb en una zona del disco denominada \u00abcementerio\u00bb ( por defecto, /tmp/graveyard-user , donde user es el nombre de usuario ), que hace las veces de papelera de reciclaje t\u00e9trica. Si hemos borrado accidentalmente el fichero, podemos \u00abresucitarlo\u00bb escribiendo rip -u ( undelete ) o simplemente acceder a los ficheros dentro de la estructura del cementerio. Si queremos vaciar el cementerio, basta con escribir rip -d ( decompose ) o eliminar la estructura de carpetas manualmente. Otra alternativa similar a rm podr\u00eda ser trash-cli . Crear carpetas o ficheros vac\u00edos \u00b6 Mediante el comando mkdir , seguido de un nombre de carpeta, podemos crear nuevas carpetas vac\u00edas. Si queremos crear una estructura de varias carpetas una dentro de otra, en vez de hacerlo una por una. El siguiente comando crea una carpeta parent , que dentro tiene una carpeta child y dentro de ella, una carpeta grandchild : $ mkdir -p parent/child/grandchild Por otro lado, el comando touch ser\u00eda la versi\u00f3n de mkdir orientada a ficheros en lugar de carpetas. Si necesitamos crear un archivo vac\u00edo, por ejemplo, para editar m\u00e1s tarde, podemos hacerlo r\u00e1pidamente con touch : touch file.txt El comando anterior crear\u00eda un fichero vac\u00edo con nombre file.txt . Si ya existiera el archivo, simplemente actualiza su fecha de modificaci\u00f3n. Crear enlaces (ln) \u00b6 El comando ln ( link names ) permite crear enlaces entre ficheros , una especie de referencias o accesos directos a ficheros, rutas o carpetas. Existen dos tipos de enlaces: Los enlaces duros . Son los ficheros que apuntan a otro fichero bas\u00e1ndose en su n\u00famero interno ( inodo ). Se crean utilizando el comando ln . De esta forma podemos tener varios archivos con el mismo contenido, pero sus copias no duplican el contenido del fichero original, sino que son una referencia al primero. Son poco utilizados. Los enlaces simb\u00f3licos ( tambi\u00e9n considerados enlaces blandos ). Son un tipo de referencia a otros ficheros, pero esta vez bas\u00e1ndose en su ubicaci\u00f3n. Se crean utilizando el comando y par\u00e1metro ln -s . De esta forma, cuando accedemos a un enlace simb\u00f3lico, realmente estamos accediendo al fichero que apunta. Si creamos un enlace simb\u00f3lico y borramos su archivo original, el enlace aparecer\u00e1 en rojo y se considerar\u00e1 un enlace simb\u00f3lico roto . Veamos un ejemplo: $ ln -s original.txt link $ ls -lh total 0 lrwxrwxrwx 1 manz manz 12 jul 1 19:37 link -> original.txt -rw-r--r-- 1 manz manz 0 jul 1 19:37 original.txt Como se puede ver, con el comando ln creamos un enlace, y con el par\u00e1metro -s indicamos que queremos que sea simb\u00f3lico. El primer fichero indicado ser\u00eda el archivo original al que queremos apuntar, mientras que el segundo fichero indicado ser\u00eda el enlace simb\u00f3lico que queremos crear. Al hacer un ls , observaremos que nos indica a donde apunta el enlace simb\u00f3lico ( puede ser un fichero, una carpeta, etc... ). En el caso de que el enlace se encuentre correcto, aparecer\u00e1 en azul cyan, pero si el fichero original a donde apunta no existiera, aparecer\u00eda en rojo. Estos enlaces pueden ser realmente \u00fatiles cuando necesitamos que en la carpeta actual exista el contenido de otra carpeta, pero no queramos duplicar la informaci\u00f3n ( son carpetas con mucho espacio ocupado ) o queremos mantenerlo actualizado y simplemente queremos una referencia de una carpeta a otra. Mostrar contenido de un fichero \u00b6 A medida que trabajamos con ficheros en una terminal, el nombre del fichero, su ubicaci\u00f3n o su extensi\u00f3n puede no ser informaci\u00f3n suficiente para saber si se trata del fichero que buscamos, e interesarnos mostrar el contenido de un fichero r\u00e1pidamente, para saber si es el que buscamos o simplemente porque queremos ver su contenido. Mostrar contenido (cat) \u00b6 Para ello, se suele utilizar el comando cat ( conCATenate files ), que t\u00e9cnicamente se considera un comando que concatena ( une ) la salida de uno o varios ficheros. Esto, dicho de otra forma, es que cat no se limita a mostrar el contenido de un solo fichero ( como suele usarse habitualmente ), sino que puede hacer cosas a\u00fan m\u00e1s potentes. Por ejemplo, el caso m\u00e1s b\u00e1sico ser\u00eda el siguiente: $ cat /etc/timezone Atlantic/Canary En este ejemplo, mostrar\u00edamos el contenido del fichero timezone ubicado en la ruta /etc . Se trata de un fichero que guarda la zona horaria del sistema. De esta forma, podr\u00edamos consultarla r\u00e1pidamente, sin tener que abrirla con un editor. Sin embargo, tambi\u00e9n podr\u00edamos hacer lo siguiente para mostrar el contenido de varios ficheros: $ ls /etc/deb* /etc/debconf.conf /etc/debian_version $ cat /etc/deb* Con el comando cat /etc/deb* indicamos que queremos que nos muestre el contenido de todos los fichero que comiencen por deb y est\u00e9n situados en /etc ( en este caso 2 ficheros ) y no tendr\u00edamos que hacerlo individualmente, uno por uno. El comando cat tiene algunos par\u00e1metros interesantes: Par\u00e1m. Descripci\u00f3n -s Suprime espacios consecutivos repetidos y los convierte en uno solo. -n Numera las l\u00edneas, a la izquierda. -b Numera solo las l\u00edneas no vac\u00edas. Mejora del cat (bat) \u00b6 Existe una alternativa muy interesante al comando cat , llamada bat y desarrollada en Rust. Dicho comando mejora sustancialmente al comando cat , utilizando caracter\u00edsticas como resaltado de sintaxis en color para lenguajes de programaci\u00f3n, soporte para cambios de git, paginaci\u00f3n ( ver m\u00e1s adelante ) autom\u00e1tica, etc... Para instalarla, necesitaremos tener en nuestro sistema Rust instalado, y utilizar su gestor de paquetes cargo . Con \u00e9l, podremos escribir cargo install bat y lo tendremos disponible. Las \u00faltimas versiones de Debian, ya lo incorporan para instalar con un simple sudo apt install bat . La salida del comando bat de un fichero Javascript ser\u00eda similar a la siguiente: El comando bat dispone de varios par\u00e1metros interesantes: Par\u00e1m. Descripci\u00f3n --list-languages Muestra los lenguajes soportado en el resaltado de sintaxis. -l <lang> Especifica el lenguaje a resaltar ( C++, javascript, css, rust, ... ) --list-themes Muestra los temas de resaltado de sintaxis disponibles en bat . --theme <theme> Especifica el tema de resaltado a utilizar. -p Muestra un formato plano, por si queremos desactivar temporalmente el resaltado. -n Numera las l\u00edneas, pero no utiliza otras decoraciones como los bordes. -A Muestra los car\u00e1cteres ocultos (espacios, tabuladores, nueva l\u00ednea, etc...) -r <ini>:<fin> Muestra las l\u00edneas ini a fin del fichero. Por ejemplo: bat -r 4:10 file.js Nota Ejecutando bat --list-themes veremos la lista de temas disponibles para el resaltado de sintaxis. Puedes usar uno de ellos escribiendo bat --theme base16 ( por ejemplo ). Tambi\u00e9n puedes aprovechar para incluirlo en un alias de la shell y que se ejecute al hacer un cat . Mostrar contenido al rev\u00e9s (tac) \u00b6 Si el comando cat nos muestra el contenido de un fichero de arriba a abajo, es decir, desde su primera l\u00ednea a su \u00faltima l\u00ednea, el comando tac ( cat al rev\u00e9s ) hace justo lo contrario, mostrar el contenido de un fichero de abajo a arriba, desde su \u00faltima l\u00ednea a la primera. $ tac textfile.txt Esta es la \u00faltima l\u00ednea. Esta es la segunda l\u00ednea. Esta es la primera l\u00ednea. Otra opci\u00f3n posible, aunque menos com\u00fan, es que si buscamos mostrar el contenido de un archivo al rev\u00e9s , pero en lugar de abajo a arriba, de derecha a izquierda, podemos utilizar el comando rev , que invierte el orden horizontal: $ cat textfile.txt | rev .aen\u00edl aremirp al se atsE .aen\u00edl adnuges al se atsE .aen\u00edl amitl\u00fa al se atsE Paginar contenido (more) \u00b6 Pero en algunos casos, nos encontraremos que el contenido de un archivo es demasiado extenso y no nos da tiempo de leer su contenido antes de que siga avanzando en el contenido. La mejor forma de solucionar ese problema es utilizar un paginador . Se trata de un comando que, una vez detecta que la pantalla est\u00e1 llena, hace una pausa, y no continua hasta que el usuario pulse una tecla. De esta forma, puede ir leyendo poco a poco los contenidos mostrados en pantalla. El paginador m\u00e1s conocido se llama more y se utiliza de la siguiente forma: $ cat largetextfile.txt | more En este caso estamos utilizando un pipe | que obtiene la salida por pantalla del primer comando y se lo env\u00eda al segundo, que es el paginador. De esta forma, el paginador hace una pausa cuando se llena la pantalla, mostrando una l\u00ednea more al final de la pantalla y esperando a que el usuario pulse una tecla. Dependiendo de la tecla que se pulse, el paginador more har\u00e1 una acci\u00f3n concreta: Tecla Descripci\u00f3n ENTER Avanza una sola l\u00ednea. SPACE Avanza una p\u00e1gina. = Muestra la l\u00ednea donde se encuentra el paginador. /word Busca la palabra word en el texto y va hasta ella. n Vuelve a buscar la \u00faltima palabra buscada. Q Sale del paginador y vuelve a la terminal. Sin embargo, el more es bastante limitado en cuanto a ciertas acciones. Mejora de paginaci\u00f3n (less) \u00b6 Muchas veces el paginador more se nos queda corto por varias razones. Por ejemplo, una vez pulsado enter para avanzar, no podemos volver hacia atr\u00e1s. Existen otros paginadores como less que son un poco m\u00e1s vers\u00e1tiles en este sentido, permitiendo utilizar los cursores \u2191 y \u2193 o las teclas ReP\u00e1g o AvP\u00e1g para subir o bajar en el texto m\u00e1s facilmente. El comando most es otro paginador que adem\u00e1s muestra una barra inferior y resaltado de colores para hacer la lectura un poco m\u00e1s sencilla. Estos paginadores se pueden instalar en el sistema utilizando sudo apt install less most . Nota Tanto more , como less como most pueden utilizarse directamente como alternativa de cat . Es decir, ejecutar less largetextfile.txt para mostrar el contenido paginado. Soporte de compresi\u00f3n \u00b6 En Linux, es muy habitual trabajar con ficheros de texto plano , aunque en el caso de registros o logs, cuando son muy extensos suelen terminar ocupando mucho espacio. Para evitarlo, se suelen comprimir utilizando formatos muy comunes en Linux como .gz , .bz2 o .xz , de modo que podr\u00edamos tener los ficheros de texto originales access.log o los ficheros comprimidos, por ejemplo access.log.gz . Los comandos cat y less tienen unas versiones alternativas que permiten realizar su finalidad ( mostrar contenido o paginar ) sobre archivos de texto comprimidos. De esta forma, nos ahorramos tener que descomprimir el fichero, visualizar su contenido y volverlo a comprimir, ya que estos comandos lo hacen todo sobre el archivo comprimido, sin alterarlo. Los comandos son los siguientes: Comando Compresor Finalidad zcat gzip Muestra el contenido de un fichero de texto comprimido .gz . zless gzip Pagina el contenido de un fichero de texto comprimido .gz . bzcat bzip2 Muestra el contenido de un fichero de texto comprimido .bz2 . bzless bzip2 Pagina el contenido de un fichero de texto comprimido .bz2 . xzcat xz Muestra el contenido de un fichero de texto comprimido .xz . xzless xz Pagina el contenido de un fichero de texto comprimido .xz . Cambiar idioma de la terminal \u00b6 Pueden ocurrir situaciones donde el idioma de la terminal est\u00e1 establecido a otro diferente del que queremos. Esto, en algunos casos, puede chocar con nuestro objetivo. Aunque es muy habitual trabajar en terminales con el idioma ingl\u00e9s ( ya que los comandos siempre van a mantener el mismo nombre ), es posible que queramos traducir las respuestas de los comandos, los mensajes de error o incluso los mensajes de ayuda o manuales, as\u00ed como gestionar ciertos detalles interesantes relacionados con el idioma. Cambiar idioma a espa\u00f1ol \u00b6 El primer paso es asegurarnos cu\u00e1l est\u00e1 tomando como idioma por defecto el sistema. Por ejemplo, si realizamos un sudo apt update podremos observar en que idioma nos muestra los procesos de actualizaci\u00f3n de los repositorios de apt. Es muy probable que nos aparezcan en ingl\u00e9s, lo que significar\u00eda que tenemos ese idioma por defecto. Vamos a comprobar que idioma o configuraci\u00f3n regional tenemos en el sistema. Para ello, utilizaremos el comando locale : $ locale LANG= LANGUAGE= LC_CTYPE=\"POSIX\" LC_NUMERIC=\"POSIX\" LC_TIME=\"POSIX\" LC_COLLATE=\"POSIX\" LC_MONETARY=\"POSIX\" LC_MESSAGES=\"POSIX\" LC_PAPER=\"POSIX\" LC_NAME=\"POSIX\" LC_ADDRESS=\"POSIX\" LC_TELEPHONE=\"POSIX\" LC_MEASUREMENT=\"POSIX\" LC_IDENTIFICATION=\"POSIX\" LC_ALL= Vemos que la mayor\u00eda de variables de localizaci\u00f3n nos aparecen con la palabra clave POSIX , la cu\u00e1l tambi\u00e9n podr\u00eda aparecer con otros valores, como por ejemplo en_US.UTF-8 , que significar\u00eda que tiene establecido el idioma Ingl\u00e9s (Americano) . Cada una de esas variables que aparece, tiene como objetivo definir el idioma de una caracter\u00edstica concreta: Variable Significado LANG Idioma general del sistema. LANGUAGE Fallback de idioma de traducci\u00f3n de mensajes ( herramientas GNU ). LC_CTYPE Clasificaci\u00f3n de car\u00e1cteres y conversiones de may\u00fasculas y min\u00fasculas. LC_NUMERIC Formato num\u00e9rico, decimales... LC_TIME Formato de fechas y horas, seg\u00fan regi\u00f3n. LC_COLLATE Orden de clasificaci\u00f3n ( collation ). LC_MONETARY Formato monetario, seg\u00fan regi\u00f3n. LC_MESSAGES Formato de palabras y respuestas interactivas. LC_PAPER Tama\u00f1o y formato de p\u00e1gina, seg\u00fan regi\u00f3n. LC_NAME Formato de nombres. LC_ADDRESS Convenciones de formateo de direcciones f\u00edsicas o postales. LC_TELEPHONE Convenciones usadas para la representaci\u00f3n de n\u00fameros telef\u00f3nicos. LC_MEASUREMENT Sistema de medida por defecto, seg\u00fan regi\u00f3n. LC_IDENTIFICATION Metadatos sobre la informaci\u00f3n de regi\u00f3n. LC_ALL Localizaci\u00f3n aplicada a todas las variables anteriores. Ojo Ten cuidado en el caso de establecer un valor a LC_ALL , el cu\u00e1l se desaconseja utilizar si quieres establecer excepciones particulares en alguna de las variables anteriores, ya que sobreescribe las dem\u00e1s. Nuestro sistema puede estar preparado para soportar diferentes idiomas. Con el par\u00e1metro locale -a podemos ver cuales son los que tenemos a nuestra disposici\u00f3n. En el caso de que no tengamos el idioma que queremos establecer, lo que podemos hacer es instalar el paquete de generaci\u00f3n de localizaciones con sudo apt install locales y editar el fichero /etc/locale.gen , donde descomentaremos los idiomas que queremos activar: sudo vim /etc/locale.gen en_US.UTF-8 UTF-8 es_ES ISO-8859-1 es_ES.UTF-8 UTF-8 es_ES@euro ISO-8859-15 En el ejemplo anterior, he descomentado el idioma ingl\u00e9s ( en_US ) y las diferentes variaciones del espa\u00f1ol ( es_ES ). Una vez hecho esto, guardamos los cambios y ejecutamos el comando locale-gen , que generar\u00e1 los idiomas descomentados, poni\u00e9ndolos a nuestra disposici\u00f3n: $ locale-gen Generating locales (this might take a while)... en_US.UTF-8... done es_ES.ISO-8859-1... done es_ES.UTF-8... done es_ES.ISO-8859-15@euro... done Generation complete. Si tuvieramos alg\u00fan tipo de problema al generarlos, tambi\u00e9n podemos instalar el paquete locales-all de APT, donde generalmente se incluyen todos los datos regionales precompilados. Nota En algunos casos, esta operaci\u00f3n puede realizarse de forma mucho m\u00e1s guiada y autom\u00e1tica con un dpkg-reconfigure locales , eligiendo posteriormente los idiomas que nos interesan de la lista que nos muestran. Una vez terminados todos estos pasos, s\u00f3lo nos quedar\u00eda a\u00f1adir la siguiente l\u00ednea a nuestro fichero de arranque, como por ejemplo, en la \u00faltima linea de ~/.bashrc si usamos Bash , o ~/.zshrc si usamos Zsh : export LANG=es_ES.UTF-8 Con ello a\u00f1adimos la variable LANG para indicar que nuestro idioma por defecto ser\u00e1 el aplicado. Esto se puede escribir en la l\u00ednea de comandos directamente ( s\u00f3lo se usar\u00e1 ese idioma en la sesi\u00f3n actual ) o se puede a\u00f1adir al fichero que comentabamos anteriormente, para que los cambios se guarden de forma permanente. Nota Ten cuidado a la hora de establecer el idioma en las variables de sistema. En este ejemplo he puesto es_ES.UTF-8 , pero en algunos casos puede ser es_ES.utf8 o tener un nombre ligeramente diferente. Es aconsejable mirar con el comando locale -a cu\u00e1l es el que nos interesa y como se escribe concretamente. Man pages en espa\u00f1ol \u00b6 Es posible que a\u00fan realizando los pasos anteriores, las p\u00e1ginas man no muestren la ayuda en espa\u00f1ol y s\u00f3lo lo haga la salida de ciertos comandos, por ejemplo. Normalmente esto se suele solucionar instalando los paquetes manpages-es ( en el caso del idioma espa\u00f1ol ): apt install man manpages-es manpages-es-extra Con dichos paquetes instalaremos las p\u00e1ginas man en espa\u00f1ol ( ojo, siguen haciendo falta los pasos del primer apartado ). Eliminar idiomas innecesarios] \u00b6 Si acostumbramos a instalar muchos paquetes, comandos o aplicaciones, debemos saber que las \u00abp\u00e1ginas man\u00bb suelen venir junto a cada paquete, de modo que si instalamos un comando concreto, tambi\u00e9n se instala su ayuda en formato \u00abman pages\u00bb. De la misma forma, algunos paquetes solo incorporan la ayuda en un idioma ( ingl\u00e9s ), pero en otras ocasiones, incorporan ayuda en muchos otros idiomas diferentes , cosa que puede llegar a ocupar bastante espacio en disco, y que probablemente, nunca consultemos en alg\u00fan idioma diferente a los que establecemos en el primer apartado. Justo en esta direcci\u00f3n va el objetivo del comando localepurge , el cu\u00e1l se encarga de eliminar todas las p\u00e1ginas de ayuda en idiomas que no tenemos predefinidos como preferidos. De esta forma, cada vez que instalamos algo con apt , el sistema se tomar\u00e1 un peque\u00f1o fragmento de tiempo en eliminar las p\u00e1ginas man en otros idiomas, para dejar s\u00f3lo las que tengamos marcadas, ahorrando as\u00ed espacio en disco ( en algunas situaciones es esencial, por ejemplo, docker ). Para configurarlo todo correctamente, editaremos el fichero /etc/locale.nopurge . En \u00e9l podemos establecer algunas configuraciones, pero sobre todo, los idiomas permitidos que no deben ser eliminados . Un ejemplo de las \u00faltimas l\u00edneas de este fichero: en en_US.UTF-8 es es_ES.UTF-8 As\u00ed pues, localepurge mantendr\u00e1 toda la ayuda y p\u00e1ginas del manual que se encuentren en ingl\u00e9s o en espa\u00f1ol. Cambiar la zona horaria \u00b6 Otro problema bastante frecuente es el de querer cambiar la zona horaria del sistema. Para consultar la zona horaria que tenemos establecida, se puede hacer simplemente haciendo un cat al fichero /etc/timezone . De esta forma nos dir\u00e1 que zona horaria tenemos configurada: $ cat /etc/timezone Etc/UTC Para cambiarla nos basta con editar ese fichero y establecer la zona horaria que queremos utilizar, o utilizar el comando tzselect , el cu\u00e1l nos permitir\u00e1 seleccionar la zona horaria de una lista. !!! Si queremos optar por un proceso interactivo m\u00e1s automatizado, podemos utilizar el comando dpkg-reconfigure tzdata y seleccionar las opci\u00f3nes 7 (Atl\u00e1ntico) de \u00c1rea geogr\u00e1fica y 3 (Canarias) de Zona horaria . $ cat /etc/timezone Atlantic/Canary Si volvemos a consultar, veremos que ahora ya tenemos otra zona horaria configurada. Fuente : https://terminaldelinux.com/","title":"Introducci\u00f3n a la terminal"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#introduccion-a-la-terminal","text":"","title":"Introducci\u00f3n a la terminal"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#que-es-una-terminal","text":"La terminal o consola es una forma generalizada de llamar a la interfaz de usuario de l\u00ednea de comandos: una pantalla ( generalmente, de color de fondo negro sobre letras blancas ) donde escribiendo comandos ( secuencias de palabras especiales ) ordenamos al sistema realizar acciones concretas. Estas interfaces de usuario fueron muy populares en la d\u00e9cada de los 70 y 80, ya que los sistemas de la \u00e9poca carec\u00edan de interfaces gr\u00e1ficas y era el sistema habitual para comunicarse con un dispositivo. Con el tiempo, las interfaces gr\u00e1ficas de usuario ganaron popularidad y relegaron a las interfaces de l\u00ednea de comandos a un segundo plano, aunque nunca terminaron de perder la popularidad que las caracterizaba, sobre todo entre los usuarios m\u00e1s t\u00e9cnicos. Aunque una interfaz gr\u00e1fica de usuario ( GUI ) puede ser m\u00e1s c\u00f3moda y agradable para el usuario, las razones para preferir una interfaz de l\u00ednea de comandos son muchas: Es m\u00e1s r\u00e1pido crear un programa para l\u00ednea de comandos. Suele ser m\u00e1s potente en cuanto a personalizaci\u00f3n de opciones. Permite creaci\u00f3n de scripts para automatizar tareas repetitivas. Suele ser una opci\u00f3n m\u00e1s universal entre sistemas. Suele ser instant\u00e1neo, al no tener que cargar pantallas gr\u00e1ficas. Es por ello que en el mundo de la inform\u00e1tica, y del desarrollo en particular, es una vertiente muy utilizada a\u00fan en nuestros d\u00edas, que no suele ser comprendida por personas externas al sector, que lo consideran un \u00abatraso\u00bb al no conocer sus ventajas y s\u00f3lo conocer sus desventajas. No obstante, el panorama de l\u00ednea de comandos ha mejorado much\u00edsimo desde estas primeras d\u00e9cadas y hoy en d\u00eda existen multitud de opciones para convertir una terminal en una herramienta de trabajo muy productiva, que ser\u00e1 nada menos que nuestro objetivo.","title":"\u00bfQue es una terminal?"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#conceptos-basicos","text":"Hasta ahora, para simplificar, hemos utilizado una gran cantidad de t\u00e9rminos que no son exactamente lo que parecen, por lo que antes de continuar, vamos a dedicar unos minutos a explicarlos, ya que los utilizaremos bastante: T\u00e9rmino Significado Interfaz de usuario Medio (gen\u00e9rico) por el cu\u00e1l se comunica un usuario y una m\u00e1quina. Abreviada UI . Interfaz de l\u00ednea de comandos Interfaz de usuario (UI) basado en texto. Abreviada como CLI . Interfaz gr\u00e1fica de usuario Interfaz de usuario (UI) basado en paneles gr\u00e1ficos o t\u00e1ctiles. Abreviada como GUI . Interprete de comandos Software encargado de gestionar los comandos del usuario y sus respuestas. Se suele abreviar como Shell . Terminal o Consola Dispositivo utilizado antiguamente para comunicarse con un sistema. Emulador de terminal Software que simula ser una terminal, generalmente una ventana donde hay una interfaz CLI. Comando Es cada una de las instrucciones que escribimos en una interfaz CLI para comunicarnos. Par\u00e1metro Son las diferentes opciones que puede tomar un comando para alterar su funcionamiento. Script Es un grupo de comandos, creado con la intenci\u00f3n de automatizar tareas. Una interfaz de usuario ( UI ) es como se denomina al medio que utiliza un usuario para comunicarse con una m\u00e1quina. En nuestro caso nos vamos a referir a interfaces de l\u00ednea de comandos ( CLI ) cuando son basadas en texto, donde los usuarios escriben \u00f3rdenes o comandos y el sistema las lee y realiza, o devuelve resultados e informaci\u00f3n. Por otra parte, las interfaces gr\u00e1ficas de usuario ( GUI ) son la evoluci\u00f3n natural de estas, utilizando pantallas gr\u00e1ficas o sistemas t\u00e1ctiles, mucho m\u00e1s sencillos y agradables de utilizar para la mayor\u00eda de los usuarios, sin embargo, habitualmente menos apropiadas y flexibles en contextos inform\u00e1ticos de desarrollo o sistemas. Adem\u00e1s, tambi\u00e9n hay que aclarar el concepto de int\u00e9rprete de comandos ( shell ). Se trata del software que tiene instalado el sistema y que utilizamos en la interfaz de l\u00ednea de comandos. Por ejemplo, una interfaz de l\u00ednea de comandos puede utilizar varios int\u00e9rpretes diferentes, como por ejemplo, suele ocurrir con Bash o Zsh en GNU/Linux. Es tambi\u00e9n muy frecuente utilizar la palabra terminal ( en esta misma p\u00e1gina lo hago frecuentemente ) en lugar de emulador de terminal . Se hace para acortar, porque en realidad una terminal es un aparato que antiguamente se utilizaba para comunicarse con otro sistema, mientras que un emulador de terminal , que es lo que realmente utilizamos en nuestros dispositivos, es un software que simula ser una de esas terminales, habitualmente con apariencia de ventana de l\u00ednea de comandos, aunque se puede encontrar de todo, como EDEX-UI . Solemos utilizar la palabra comando para referirnos a la instrucci\u00f3n que escribimos en el emulador de terminal para comunicarnos con el sistema, mientras que opciones o par\u00e1metros son los detalles que se suelen escribir a continuaci\u00f3n para personalizar la forma de trabajar del comando o alterar su funcionamiento. Por \u00faltimo, tambi\u00e9n es muy com\u00fan crear scripts , que no son m\u00e1s que ficheros de texto donde se escriben una colecci\u00f3n de comandos para realizar una tarea concreta, con la intenci\u00f3n de automatizarla y sea mucho m\u00e1s f\u00e1cil para nosotros realizarla, ya que en lugar de escribir todos esos comandos por separado, s\u00f3lo tenemos que llamar a ese script. Por ejemplo, en el ejemplo anterior, tenemos lo siguiente: El comando (verde). Muestra todos los ficheros que tenemos en la carpeta actual. El primer par\u00e1metro (amarillo). Muestra ese listado en formato ancho. El segundo par\u00e1metro (azul). Muestra s\u00f3lo el contenido de la carpeta folder .","title":"Conceptos b\u00e1sicos"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#ayuda-a-terminal-man-pages","text":"Quiz\u00e1s uno de los primeros consejos que nos pueden dar en la terminal de GNU/Linux es el de aprender a consultar la ayuda . Continuamente, nos estaremos enfrentando a nuevos comandos, par\u00e1metros adicionales o intentando buscar detalles sobre un comando que desconocemos o que, quiz\u00e1s, no recordamos. Para lidiar con ello, Linux tiene varias formas de consultar ayuda breve o amplios manuales de ayuda, por lo que es conveniente conocer cada una de las formas m\u00e1s interesantes de obtener m\u00e1s informaci\u00f3n sobre alg\u00fan detalle.","title":"Ayuda a terminal (Man pages)"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#ayuda-rapida-help","text":"Quiz\u00e1s, la forma m\u00e1s r\u00e1pida de consultar la ayuda , es utilizar el par\u00e1metro --help despu\u00e9s del comando que desconocemos y queremos m\u00e1s ayuda. Esto nos mostrar\u00e1 una, generalmente, breve pantalla de ayuda, con los par\u00e1metros u opciones m\u00e1s comunes. \u00datil para consultar r\u00e1pidamente detalles frecuentes o, aparentemente, muy populares. Por ejemplo, si queremos consultar la ayuda del comando uptime , simplemente escribimos: $ uptime --help Usage: uptime [options] Options: -p, --pretty show uptime in pretty format -h, --help display this help and exit -s, --since system up since -V, --version output version information and exit For more details see uptime(1). Nota No todos los comandos tienen ayuda r\u00e1pida , pero si la mayor\u00eda, por lo que es una primera opci\u00f3n bastante interesante.","title":"Ayuda r\u00e1pida (--help)"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#para-que-sirve-este-comando","text":"En el caso de que simplemente queramos saber para que sirve un comando espec\u00edfico, podemos utilizar el comando whatis ( qu\u00e9 es ) seguido del nombre del comando: $ whatis cat cat (1) - concatenate files and print on the standard output Otro comando muy similar es apropos ( a prop\u00f3sito de... ), el cu\u00e1l nos muestra comandos relacionados al que escribimos a continuaci\u00f3n, algo muy \u00fatil para aprender nuevos comandos: $ apropos bzip2 bzcmp (1) - compare bzip2 compressed files bzdiff (1) - compare bzip2 compressed files bzegrep (1) - search possibly bzip2 compressed files for a regular expression bzfgrep (1) - search possibly bzip2 compressed files for a regular expression bzgrep (1) - search possibly bzip2 compressed files for a regular expression bzip2 (1) - a block-sorting file compressor, v1.0.6 bzip2recover (1) - recovers data from damaged bzip2 files bzless (1) - file perusal filter for crt viewing of bzip2 compressed text bzmore (1) - file perusal filter for crt viewing of bzip2 compressed text Nota Ten en cuenta que el n\u00famero que aparece a continuaci\u00f3n ( entre par\u00e9ntesis ), denota en que p\u00e1gina del manual se encuentra ( ver siguiente apartado ). Si lo que buscamos son comandos, el n\u00famero debe ser 1 . Tambi\u00e9n podemos escribir apropos 1 seguido del comando, para obligar a apropos a s\u00f3lo mostrarnos resultados de esa p\u00e1gina.","title":"\u00bfPara qu\u00e9 sirve este comando?"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#paginas-de-manual-man-pages","text":"Si existe un comando de ayuda por excelencia en Linux, son las \u00abp\u00e1ginas man \u00bb, o lo que es lo mismo, las p\u00e1ginas de manual. En ellas puedes encontrar extensa informaci\u00f3n sobre comandos, par\u00e1metros, opciones y otros detalles sobre comandos, programaci\u00f3n, ficheros del sistema u otros detalles. La forma de consultar estas p\u00e1ginas de manual es muy sencilla: escribimos man seguido del nombre del comando ( o la palabra a investigar ), por ejemplo: man ls . Esto nos mostrar\u00e1 una p\u00e1gina de ayuda sobre el mismo, donde podemos aprender a utilizarlo, ver que opciones o par\u00e1metros tiene, el autor del mismo, etc. Ten en cuenta que muchas veces no vienen instaladas en el sistema, y hay que instalarlas con un sudo apt install man . Esta es la opci\u00f3n preferida cuando queremos buscar informaci\u00f3n detallada sobre alguna funcionalidad espec\u00edfica de alg\u00fan comando. Si estamos utilizando la shell zsh , una forma de mejorar las p\u00e1ginas man es incluyendo el plugin colored-man-pages en la l\u00ednea de plugins del fichero ~/.zshrc . Esto a\u00f1adir\u00e1 un resaltado de color a las p\u00e1ginas man, que har\u00e1n la experiencia de leer estas p\u00e1ginas un poco m\u00e1s agradable. Nota Si quieres poner las p\u00e1ginas man en espa\u00f1ol , lo recomendable ser\u00eda instalar los paquetes en espa\u00f1ol en el sistema con sudo apt install manpages-es manpages-es-extra y establecer el idioma del sistema en espa\u00f1ol.","title":"P\u00e1ginas de manual (man pages)"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#paginas-man-simplificadas-tldr","text":"La abreviatura TL;DR ( Too long, didn't read ) es un acr\u00f3nimo utilizado para referirse a que algo no se ha le\u00eddo porque es demasiado largo . Las p\u00e1ginas man, aunque muy \u00fatiles, tienen esa caracter\u00edstica: muchas veces no se consultan porque debes leer gran cantidad de informaci\u00f3n, tardando as\u00ed bastante en encontrar lo que buscas. Si esta es tu opini\u00f3n, probablemente te interese el proyecto tldr pages , un sustituto de las p\u00e1ginas man, ideadas para simplificar la ayuda y mostrar directamente ejemplos pr\u00e1cticos de referencia que suelen resolver la mayor\u00eda de las dudas, sobre todo cuando s\u00f3lo consultas para recordar algo olvidado. Su forma de utilizarlo, es simplemente escribir tldr seguido del comando en cuesti\u00f3n:","title":"P\u00e1ginas man simplificadas (tldr)"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#navi-el-hada-del-terminal","text":"Otro recurso bastante interesante de cara a mostrar ayuda al usuario, el uso de navi , un asistente interactivo desarrollado en Rust y que toma su nombre del hada del videojuego \u00ab The Legend of Zelda \u00bb, que tiene como finalidad mostrar unas cheatsheets interactivas con los comandos y par\u00e1metros m\u00e1s utilizados, al estilo de tldr . Para instalar navi , necesitaremos tener instalado Rust . Si lo tenemos instalado, podemos escribir cargo install navi . Con ello tendremos el asistente navi , pero tendremos que instalar las cheatsheets que queramos tener descargadas. Con navi repo browse se nos muestran varios repositorios con las cheatsheets m\u00e1s conocidas, de ah\u00ed podemos ir instalando las que m\u00e1s nos interese consultar para tenerlas instaladas en nuestro sistema. Si por otro lado, lo que queremos es instalar una cheatsheet concreta de un repositorio de GitHub, podemos hacerlo con el comando navi repo add <URL> . Una vez descargadas en nuestro sistema, podemos consultar r\u00e1pidamente con el comando navi query seguido de la palabra clave a consultar. Otros proyectos similares podr\u00edan ser cheat o manly . Nota: Recuerda que si lo que quieres es una cheatsheet f\u00edsica en formato PDF lista para imprimir, tienes nuestra cheatsheet de la terminal de Linux en esta misma p\u00e1gina.","title":"Navi, el hada del terminal"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#instalacion-de-wsl","text":"Tradicionalmente, Windows ha proporcionado a sus usuarios una interfaz de l\u00ednea de comandos que funciona bajo su propio sistema, heredado de MS-DOS y diferente a GNU/Linux, el cu\u00e1l se basa en un sistema UNIX. Sin embargo, en Windows 10, con la irrupci\u00f3n de Windows Subsystem for Linux ( m\u00e1s comunmente denominado WSL ), esto ha cambiado radicalmente. Otros sistemas operativos como GNU/Linux o Mac, disponen de una interfaz de l\u00ednea de comandos basada en UNIX, por lo que hasta el momento era bastante complejo tener compatibilidad entre sistemas. Con la adopci\u00f3n de WSL en Windows, Microsoft introduce una capa intermedia que funciona con un n\u00facleo de Linux real ( kernel ) y en el que se pueden instalar distribuciones de GNU/Linux ( desde la tienda oficial de Microsoft o de forma manual ) como por ejemplo Ubuntu , Debian , Kali o incluso la distribuci\u00f3n minimalista Alpine .","title":"Instalaci\u00f3n de WSL"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#requisitos-previos","text":"Para poder disponer de una terminal de GNU/Linux en nuestro Windows, antes necesitamos asegurarnos que nuestro equipo cumple los siguientes requisitos: Necesitaremos soportar y tener activada la virtualizaci\u00f3n Hyper-V en la BIOS/UEFI. Necesitaremos tener Windows 10, en cualquiera de sus versiones ( salvo Windows S ). Debemos tener la caracter\u00edstica Windows Subsystem for Linux activada. Debemos tener la caracter\u00edstica Virtual machine plataform activada. Para usar WSL2 debemos actualizar Windows 10 al menos hasta Mayo de 2020.","title":"Requisitos previos"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#activacion-de-caracteristicas","text":"En la BIOS/UEFI del equipo, debes tener activada la caracter\u00edstica Virtualizaci\u00f3n Hyper-V o Hyper-threading virtualization . Dicha caracter\u00edstica puede encontrarse en un men\u00fa diferente, dependiendo de la marca y modelo de la placa. Por otro lado, para activar las caracter\u00edsticas mencionadas anteriormente en Windows, accedemos a Inicio y buscamos Activar o desactivar caracter\u00edsticas de Windows , donde encontraremos un men\u00fa de selecci\u00f3n para activar las casillas Subsistema de Windows para Linux y Plataforma de m\u00e1quina virtual : La primera de ellas es absolutamente necesaria, puesto que es el propio WSL . La segunda de ellas es necesaria para utilizar WSL2 , y es posible que no aparezca si no tienes Windows 10 actualizado. Puedes comprobarlo, accediendo a Inicio y abriendo una terminal de Windows escribiendo CMD o S\u00edmbolo de sistema y escribiendo lo siguiente: > ver Microsoft Windows [Versi\u00f3n 10.0.19041.329] El comando ver nos mostrar\u00e1 la versi\u00f3n instalada de Windows 10. Si es igual o superior a 10.0.19041 , podremos utilizar WSL2 , en caso contrario, es posible que no podamos utilizar WSL o s\u00f3lo WSL1 . Para solucionarlo, revisa las actualizaciones de Windows e instala las que tengas pendientes. !!! Nota: Tambi\u00e9n es posible comprobar que versi\u00f3n tenemos instalada pulsando +R y escribiendo winver . Si tenemos la versi\u00f3n 2004 o superior, podremos utilizar WSL2 .","title":"Activaci\u00f3n de caracter\u00edsticas"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#que-distros-tengo-en-wsl","text":"Windows Subsystem for Linux funciona de modo que podemos tener varias distribuciones instaladas en nuestro sistema y utilizar la que queramos. Para ver que distribuciones tenemos instaladas, abrimos una terminal de Windows ( CMD ) y escribimos wsl --list : > wsl --list El subsistema de Windows para Linux no tiene distribuciones instaladas. Para instalar las distribuciones, se puede visitar Microsoft Store: https://aka.ms/wslstore En el caso de tener alguna distribuci\u00f3n de Linux instalada, nos aparecer\u00edan en la lista, como veremos un poco m\u00e1s adelante. Si en lugar de aparecernos el mensaje anterior nos muestra un error por no encontrar el comando wsl , muy probablemente no tengamos instalada la caracter\u00edstica Windows Subsystem for Linux que mencionamos en el apartado anterior.","title":"\u00bfQu\u00e9 distros tengo en WSL?"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#instalar-linux-wsl","text":"El primer paso que deber\u00edamos realizar es instalar una distribuci\u00f3n de GNU/Linux en nuestro WSL . Existen muchas de ellas para elegir. Personalmente suelo elegir Debian , aunque tambi\u00e9n hay otras distribuciones: Distribuci\u00f3n P\u00e1gina oficial Enlace a tienda Microsoft Descarga manual (.appx) Debian Linux Debian Debian MS Store Debian .appx Ubuntu Linux Ubuntu Ubuntu MS Store Ubuntu 20.04 .appx Kali Linux Kali Kali MS Store Kali Linux .appx Open Suse Open Suse Open Suse MS Store Open Suse .appx Alpine Linux \u00b9 Alpine Alpine MS Store \u00b9 No oficial. Las distribuciones se pueden instalar autom\u00e1ticamente desde la tienda oficial de Microsoft , o manualmente, ejecutando un archivo .appx que contiene la distribuci\u00f3n de Linux a instalar. Si lo hacemos de la primera forma, se instalar\u00e1 de forma transparente, si lo hacemos de la segunda forma, nos mostrar\u00e1 una ventana similar a la siguiente: Una vez instalada la distribuci\u00f3n de Linux en nuestro sistema, tras esperar un corto espacio de tiempo, al iniciarla por primera vez nos aparecer\u00e1 una ventana parecida a esta: Installing, this may take a few minutes... Please create a default UNIX user account. The username does not need to match your Windows username. For more information visit: https://aka.ms/wslusers Enter new UNIX username: En ella, se nos preguntar\u00e1 el nombre de usuario y su correspondiente contrase\u00f1a para utilizar en nuestra distribuci\u00f3n de Linux de WSL. El nombre de usuario debe ser en min\u00fasculas y no es necesario que coincida con el nombre que tengamos en nuestra cuenta de Windows. Una vez hecho esto, escribimos exit ( o cerramos la ventana y volvemos a abrir un s\u00edmbolo del sistema ). Vamos a comprobar que todo ha ido bien y tenemos una distribuci\u00f3n instalada: > wsl --list Distribuciones del subsistema de Windows para Linux: Debian (predet.) Como se puede ver, en nuestro caso nos aparece una distribuci\u00f3n Debian ( marcada como predeterminada ). Si instalasemos varias distribuciones las ver\u00edamos en esta lista, y podr\u00edamos seleccionar una como predeterminada escribiendo wsl --set-default Debian o wsl -s Debian .","title":"Instalar Linux (WSL)"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#convertir-distro-wsl1-a-wsl2","text":"Por defecto, en nuestro Windows 10, actualmente las distribuciones se instalan como distros utilizando WSL1 . Sin embargo, WSL2 est\u00e1 disponible y proporciona m\u00faltiples mejoras, ya que incorpora un kernel de Linux real utilizando Hyper-V , ofreciendo as\u00ed un rendimiento m\u00e1s alto, a la vez que mejor soporte y compatibilidad. Para aprovechar las \u00faltimas ventajas de WSL , es necesario convertir las distribuciones a WSL2 , cosa que podemos hacer simplemente escribiendo wsl --set-version Debian 2 , lo que convertir\u00e1 nuestra distribuci\u00f3n \u00ab Debian \u00bb a WSL2: En el caso de que nos aparezca el error Habilita la caracter\u00edstica Plataforma de m\u00e1quina virtual de Windows y aseg\u00farate de que la virtualizaci\u00f3n est\u00e9 habilitada en el BIOS. revisa los puntos mencionados en el primer apartado de esta p\u00e1gina. Si todo ha ido bien, nos deber\u00eda aparecer una pantalla similar a esta: > wsl --set-version Debian 2 Conversi\u00f3n en curso, esto puede tardar unos minutos... Para informaci\u00f3n sobre las diferencias clave con WSL 2, visita https://aka.ms/wsl2 Conversi\u00f3n completada. En el caso de que nos aparezca el mensaje La distribuci\u00f3n ya es la versi\u00f3n solicitada. significa que no se requiere conversi\u00f3n, ya que la distribuci\u00f3n actual ya es WSL2 . Si estamos completamente seguros de querer que todas las distribuciones que utilicemos a partir de ahora sean WSL2 , no tenemos m\u00e1s que escribir el comando wsl --set-default-version 2 , que indicar\u00e1 a WSL que todas las distribuciones que utilicemos funcionen bajo WSL2 por defecto. De esta forma, el paso anterior no ser\u00e1 necesario a partir de ahora.","title":"Convertir distro WSL1 a WSL2"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#iniciar-distro-de-linux-wsl","text":"Hay que tener bien claro que bajo Windows, la terminal que utilizamos es cmd.exe o S\u00edmbolo de sistema , lo que nos arranca una interfaz de l\u00ednea de comandos de Windows. Es en esta interfaz donde podemos ejecutar comandos de Windows como wsl u otros. Para arrancar una distribuci\u00f3n de Linux de las que hemos instalado, tendremos que acceder escribiendo wsl ( para entrar en la distribuci\u00f3n predeterminada ) o escribiendo wsl -d Debian para indicar la distribuci\u00f3n a la que queremos entrar, en el caso de tener varias. Sin embargo, ya te habr\u00e1s dado cuenta que la terminal de Windows ( CMD ) es bastante pobre y limitada, sobre todo en cuanto a caracter\u00edsticas de personalizaci\u00f3n. La mejor opci\u00f3n, ahora que tenemos WSL, es instalar un buen y moderno emulador de terminal, que nos de una buena experiencia al utilizar la terminal. Algunos de los mejores emuladores de terminal para Windows son los siguientes: Emulador GitHub Descripci\u00f3n Terminal GitHub Nueva terminal oficial de Microsoft. ConEmu GitHub ConEmu-Maximus5, potente emulador de terminal ultra-personalizable. Cmder GitHub Fork de ConEmu, orientado a usabilidad y aspecto visual. Hyper GitHub Emulador de terminal basado en Electron. wsl-terminal GitHub Emulador de terminal dise\u00f1ado especialmente para WSL. ConsoleZ GitHub Fork de Console2, orientado en una mejor experiencia visual. FluentTerminal GitHub Emulador de terminal constru\u00edda como aplicaci\u00f3n universal de Windows (UWP). Terminus GitHub Emulador de terminal moderno y visual. Personalmente, mi preferido es ConEmu , el cu\u00e1l tiene multitud de opciones de personalizaci\u00f3n y permite configurar pr\u00e1cticamente cualquier aspecto del mismo, como por ejemplo, crear una tarea llamada {Shells::WSL} que ejecute wsl.exe al abrir la terminal, y as\u00ed utilice directamente la distribuci\u00f3n de Linux por defecto de WSL.","title":"Iniciar distro de Linux WSL"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#convertir-rutas-windows-a-wsl","text":"Si lo necesitas, WSL incorpora un comando llamado wslpath , que te permite hacer traducciones de rutas Windows a rutas Linux y viceversa. Para ello, solo tienes que escribir el comando wslpath RUTA_WINDOWS para obtener la misma ruta en formato Linux, o al contrario, escribir el comando wslpath -w RUTA_LINUX para obtener la ruta en formato Windows: Esto puede ser una forma interesante para intercomunicar ambos sistemas mediante scripts o tareas.","title":"Convertir rutas Windows a WSL"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#instalacion-de-zsh","text":"Como mencionamos en un apartado anterior, el int\u00e9rprete de comandos ( tambi\u00e9n llamado shell ) es el software o programa que gestiona los comandos que introduce el usuario, para intentar comprenderlos lo mejor posible y comunicarselos a la m\u00e1quina o sistema de la mejor forma posible. En GNU/Linux, tenemos multitud de int\u00e9rpretes de comandos, siendo quiz\u00e1s los m\u00e1s conocidos bash y zsh . Sin embargo, existen multitud de ellos: Nombre A\u00f1o Abreviatura Descripci\u00f3n Bourne Shell 1977 sh Int\u00e9rprete ligero y sencillo, considerado el est\u00e1ndar. C Shell 1978 csh Int\u00e9rprete basado en el lenguaje de programaci\u00f3n C. Korn Shell 1983 ksh Int\u00e9rprete de AT&T de Bourne Shell. Almquist Shell 1989 ash Int\u00e9rprete ligero y r\u00e1pido, popularizado en m\u00e1quinas de bajo coste. Bourne Again Shell 1989 bash Popular int\u00e9rprete de la mayor\u00eda de los GNU/Linux. Z Shell 1990 zsh Int\u00e9rprete shell mejorado, con a\u00f1adidos de otras shells. Fish Shell 2005 fish Int\u00e9rprete enfocado en la sencillez y una interfaz agradable. Ion Shell 2015 ion Shell del sistema operativo Redox En este art\u00edculo veremos como instalar y configurar zsh para tener una terminal moderna, atractiva y con funcionalidades interesantes como autocompletado de comandos basado en el historial, resaltado y detecci\u00f3n de comandos existentes o completado avanzado de comandos.","title":"Instalaci\u00f3n de zsh"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#instalar-z-shell-zsh","text":"El int\u00e9rprete Z Shell ( m\u00e1s conocido como zsh ) es uno de los shells m\u00e1s conocidos de GNU/Linux, adoptado hace poco por Apple como su int\u00e9rprete de terminal por defecto desde 2019. Hoy en d\u00eda, quiz\u00e1s el m\u00e1s extendido es bash , sin embargo, zsh gana cada d\u00eda m\u00e1s adeptos debido a su capacidad y potencia de personalizaci\u00f3n y su activa comunidad. Es una excelente alternativa a bash . Si tenemos un sistema reci\u00e9n instalado ( o por defecto ), lo m\u00e1s probable es que tengamos un bash o un sh ( m\u00e1s simple ). Lo primero que necesitamos tener instalado en nuestro sistema es el int\u00e9rprete de zsh . Para instalarlo utilizaremos apt , que se encargar\u00e1 de buscar los paquetes necesarios y sus dependencias: sudo apt update && sudo apt install zsh Con esto tendr\u00edamos el int\u00e9rprete instalado, pero se trata de un \u00abzsh pelado\u00bb, sin configuraci\u00f3n. De hecho, de momento ni siquiera se va a iniciar por si solo y seguiremos utilizando el interprete que ten\u00edamos antes. Si escribimos zsh podemos obligar al sistema a abrir zsh y ver si se ha instalado correctamente. Nos deber\u00eda aparece una pantalla similar a la siguiente: zsh.newuser-install. You are seeing this message because you have no zsh startup files (the files .zshenv, .zprofile, .zshrc, .zlogin in the directory ~). This function can help you with a few settings that should make your use of the shell easier. You can: (q) Quit and do nothing. The function will be run again next time. (0) Exit, creating the file ~/.zshrc containing just a comment. That will prevent this function being run again. (1) Continue to the main menu. (2) Populate your ~/.zshrc with the configuration recommended by the system administrator and exit (you will need to edit the file by hand, if so desired). --- Type one of the keys in parentheses --- Esta es la pantalla de bienvenida de zsh , que nos da varias opciones para configurarlo manualmente, dejar su configuraci\u00f3n vac\u00eda, entre otras. Marcamos la opci\u00f3n 0 , que simplemente crear\u00e1 nuestro fichero de configuraci\u00f3n ~/.zshrc para que no nos vuelva a salir este mensaje de bienvenida cada vez que arranquemos zsh . Si todo ha ido bien, deber\u00eda aparecernos algo parecido a esto ( con el nombre de nuestro sistema ): DESKTOP-OHQ7ANH% _ Escribimos exit para salir de esta sesi\u00f3n y volver a la anterior ( donde a\u00fan no usabamos zsh ).","title":"Instalar Z Shell (zsh)"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#utilizar-zsh-por-defecto","text":"Habr\u00e1s comprobado que si cierras la terminal y la vuelves a abrir, parece no haber cambiado nada y no inicia zsh . Esto ocurre porque aunque est\u00e1 instalada en el sistema, a\u00fan est\u00e1s usando otro int\u00e9rprete de comandos ( probablemente, el anterior que ten\u00edas ). Para saber que int\u00e9rprete de comandos o shell estamos utilizando, puedes escribir echo $0 o echo $SHELL , el cu\u00e1l deber\u00eda mostrarte cu\u00e1l estas utilizando en el momento actual. Por otro lado, escribiendo cat /etc/shells podemos ver que int\u00e9rpretes tenemos instalados en nuestro sistema y podemos utilizar. Si queremos cambiar el shell con el que inicia un usuario ( por ejemplo, manz ), solo tenemos que utilizar el comando chsh ( change shell ): chsh manz -s /bin/zsh Perfecto. Ahora cuando volvamos a abrir una terminal, nos arrancar\u00e1 la shell zsh . Ahora que ya lo tenemos todo listo, toca configurarlo para que haga magia .","title":"Utilizar zsh por defecto"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#framework-oh-my-zsh","text":"Uno de los frameworks m\u00e1s populares de zsh es Oh-My-Zsh! , el cu\u00e1l podremos instalar para dotar a nuestro sistema de funcionalidades muy interesantes que nos har\u00e1n m\u00e1s c\u00f3modo su uso. Para instalarlo necesitaremos curl y git , por lo que instalamos dichos requisitos previamente: $ sudo apt install git curl -y Una vez los tengamos instalados, escribimos el comando siguiente, el cu\u00e1l descargar\u00e1 el script oficial de instalaci\u00f3n de Oh-my-fish! : $ sh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\" Cloning Oh My Zsh... Cloning into '/home/manz/.oh-my-zsh'... Es posible que al finalizar la instalaci\u00f3n nos pregunte si queremos sobreescribir la configuraci\u00f3n de ~/.zshrc o si queremos establecer zsh como shell por defecto, si corresponde. Una vez terminado el proceso, deber\u00eda aparecernos algo como lo siguiente: Podemos ver que el prompt de la shell ya ha cambiado a algo m\u00e1s bonito y amigable, haciendo uso de colores. Sin embargo, puede resultarnos demasiado simple. Veamos como podemos cambiarlo por otro theme .","title":"Framework Oh-My-Zsh"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#cambiar-el-tema-de-zsh","text":"Una de las caracter\u00edsticas m\u00e1s llamativas de zsh es la posibilidad de cambiar el theme de la terminal, a uno m\u00e1s vistoso y llamativo. La shell zsh incorpora de serie varios themes para la terminal que podemos utilizar seg\u00fan nuestros gustos. Por ejemplo, uno de mis preferidos es agnoster . Para seleccionar este tema, simplemente tenemos que editar el archivo de configuraci\u00f3n ~/.zshrc y buscar la l\u00ednea siguiente: ZSH_THEME=\"robbyrussell\" El tema robbyrussell es el que viene por defecto, pero podemos cambiarlo por agnoster o por cualquier otro de la lista de themes de zsh . De hecho, incluso podemos indicar random como tema, y descomentar una l\u00ednea que aparece m\u00e1s abajo, que nos activar un tema aleatorio de esa lista, de forma aleatoria cada vez que abramos una terminal: ZSH_THEME_RANDOM_CANDIDATES=( \"robbyrussell\" \"agnoster\" \"xiong-chiamiov\" ) Si todo ha ido bien al cambiar el tema por agnoster , al guardar el fichero de configuraci\u00f3n y abrir una nueva terminal ya deber\u00eda aparecernos la nueva interfaz del int\u00e9rprete de comandos:","title":"Cambiar el tema de zsh"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#autocompletado-y-sugerencias","text":"Existen una serie de plugins creados por la comunidad de zsh muy interesantes, que podemos instalar en nuestra terminal para ampliar sus capacidades y hacerla mucho m\u00e1s c\u00f3moda. Plugin Descripci\u00f3n zsh-syntax-highlighting Resaltado de sintaxis para comandos, basado en fish . zsh-autosuggestions Sugerencias basadas en el historial, basado en fish . zsh-completions Autocompletado mejorado para comandos. El primero de ellos, zsh-syntax-highlighting , es el resaltado de color de comandos , el cu\u00e1l viene de una caracter\u00edstica que incorporaba inicialmente el int\u00e9rprete de comandos fish . Al escribir un comando en la terminal nos aparecer\u00e1 en rojo si no est\u00e1 instalado en el sistema o en verde si est\u00e1 disponible para utilizar. De esta forma sabremos, a medida que vamos escribiendo los comandos, si los estamos escribiendo bien ( o por lo contrario, tenemos erratas ) o si no se encuentra instalado un comando, por ejemplo, incluso antes de pulsar la tecla ENTER. El segundo, zsh-autosuggestions , es un plugin que a medida que escribimos un comando, nos sugiere y recuerda comandos escritos anteriormente ( que residen en el historial de la terminal ) en color gris de fondo, para que sea m\u00e1s sencillo para nosotros identificarlos. Pulsando \u2192 le decimos a zsh que lo recupere \u00edntegro, lo que puede ser \u00fatil para comandos largos. Por \u00faltimo, el plugin zsh-completions nos permite activar ciertas caracter\u00edsticas interesantes de autocompletado en zsh , como por ejemplo atajos al pulsar TAB en git , composer de PHP, nano , el firewall ufw , node y muchos otros. Para instalar estos plugins, lo que tendremos que hacer es simplemente copiar y pegar los siguientes comandos. En ellos, lo que estamos haciendo es descargarnos ( clonar el repositorio del plugin de git ) y guard\u00e1ndolo en nuestra carpeta personal, en un apartado de plugins personalizados de oh-my-zsh. Podemos hacerlo todo con estos tres comandos: git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting git clone https://github.com/zsh-users/zsh-completions ${ZSH_CUSTOM:=~/.oh-my-zsh/custom}/plugins/zsh-completions Una vez hecho, editamos el fichero ~/.zshrc y bajamos hasta la linea donde se cargan los plugins, generalmente con esta configuraci\u00f3n plugins=(git) . Ampliamos esa lista de plugins, escribiendo lo siguiente: plugins=(git zsh-autosuggestions zsh-syntax-highlighting zsh-completions) autoload -U compinit && compinit Con esto, cargaremos esos 4 plugins y tendremos listo estas funcionalidades adicionales desde que volvamos a abrir una nueva terminal.","title":"Autocompletado y sugerencias"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#error-12-character-not-in-range","text":"Es muy com\u00fan, que instalando los plugins, gestionando los themes y personalizando los apartados anteriores, te puedas encontrar de repente con que al iniciar la terminal, nos aparece un error similar al siguiente: (anon):12: character not in range Este problema ocurre por conflictos en la lectura de car\u00e1cteres Unicode, ya que es posible que est\u00e9 intentando leer alguno que no exista en el conjunto de car\u00e1cteres instalados. Para resolverlo, simplemente instala los paquetes de localizaci\u00f3n escribiendo sudo apt install locales-all y reinicia la terminal.","title":"Error 12: character not in range"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#carpetas-directorios-en-linux","text":"GNU/Linux tiene su propia distribuci\u00f3n de ficheros y carpetas que, para usuarios que provengan de Windows, puede ser confusa, ya que es bastante diferente. En Linux hay una m\u00e1xima que se sigue como filosof\u00eda: todo son ficheros : los \u00abaccesos directos\u00bb, los dispositivos f\u00edsicos como el rat\u00f3n o el teclado, los discos duros, las carpetas, e incluso y obviamente, los ficheros. Mientras que en Windows, una ruta normal de carpetas podr\u00eda ser C:\\Users\\Manz , una ruta equivalente en un sistema operativo Linux ser\u00eda /home/manz : En Linux, los nombres de ficheros son sensibles a may\u00fasculas y min\u00fasculas , es decir, puede coexistir un fichero llamado gato y otro Gato en la misma carpeta, puesto que son ficheros diferentes. Sin embargo, en un sistema Windows, ser\u00edan el mismo fichero.","title":"Carpetas (directorios) en Linux"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#en-que-carpeta-estoy-pwd","text":"En una terminal de Linux, normalmente a la izquierda se nos muestra la carpeta donde nos encontramos ( o parte de ella ). Sin embargo, dependiendo de la configuraci\u00f3n de nuestra shell , es posible que no aparezca. Si queremos saber en que carpeta nos encontramos, podemos utilizar el comando pwd ( print work directory ). Si no tenemos muy clara la estructura de carpetas donde estamos, podemos utilizar el comando tree , el cu\u00e1l nos muestra un \u00e1rbol de carpetas, esquematizado. Por ejemplo, escribiendo tree /var/log nos mostrar\u00e1 algo parecido a esto: $ tree /var/log /var/log |-- alternatives.log |-- apt | |-- eipp.log.xz | |-- history.log | `-- term.log |-- btmp |-- dpkg.log |-- faillog |-- lastlog `-- wtmp 1 directory, 9 files De esta forma podemos ver \u00abpseudo-gr\u00e1ficamente\u00bb la estructura de carpetas. Ten en cuenta que el comando tree no viene instalado en el sistema, y hay que instalarlo previamente con un sudo apt install tree .","title":"\u00bfEn qu\u00e9 carpeta estoy? (pwd)"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#listar-ficheros-ls","text":"Para ver los ficheros y carpetas del directorio actual, basta con utilizar el comando ls ( LiSt files ). Esto mostrar\u00e1 una lista en horizontal con todos los ficheros y carpetas encontradas. Tambi\u00e9n podemos especificar la ruta que queremos listar por par\u00e1metro, por ejemplo: ls /home . Por ejemplo: $ ls / bin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var En algunos casos, puede que el ls devuelva los ficheros sin resaltado de sintaxis de color . Puedes probar con ls --color para ver si muestra los ficheros con colores. Las distribuciones de Linux, suelen crear un alias en el fichero ~/.bashrc o ~/.zshrc para que cuando se escriba ls , realmente se haga un ls --color . Existen algunos par\u00e1metros interesantes para mostrar m\u00e1s informaci\u00f3n al listar ficheros y carpetas, como por ejemplo ls -lh , donde la l usa el formato ancho ( m\u00e1s informaci\u00f3n ) y la h muestra \u00aben humano\u00bb el tama\u00f1o de los ficheros ( usando unidades para que sea m\u00e1s f\u00e1cil ). Aqu\u00ed vemos algunos de los m\u00e1s interesantes: Par\u00e1metros Descripci\u00f3n -l (long) Usa el formato ancho para mostrar datos adicionales (tama\u00f1o, permisos, etc...) -a (all) Muestra tambi\u00e9n ficheros ocultos ( que empiezan por punto ) --color Activa colores al mostrar los ficheros. -h (human) Muestra el tama\u00f1o de los archivos con la unidad K , M o G . -S (size) Ordena ficheros por tama\u00f1o, el m\u00e1s pesado primero. -t (time) Ordena ficheros por fecha de modificaci\u00f3n, el m\u00e1s reciente primero. -r (reverse) Invierte el orden de los ficheros. Observa que para indicar varios par\u00e1metros, en lugar de escribir, por ejemplo, ls -l -h -S puedes contraer los par\u00e1metros y escribir ls -lhS .","title":"Listar ficheros (ls)"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#mejora-del-ls-exa","text":"Existe una alternativa al ls , bastante interesante, que utiliza resaltado de sintaxis para que sea m\u00e1s sencillo identificar los permisos r\u00e1pidamente. Se llama exa y est\u00e1 desarrollada en Rust. Podemos instalar esta herramienta f\u00e1cilmente si disponemos de Rust en nuestro sistema, utilizando su gestor de paquetes. Simplemente escribimos cargo install exa y lo instalaremos. La salida del formato largo de exa es el siguiente: Aunque no es un reemplazo 100% id\u00e9ntico en par\u00e1metros, puedes crear un alias de ls para que ejecute exa en su lugar. Como curiosidad y para una mejor identificaci\u00f3n de ficheros, con el par\u00e1metro exa --icons puede mostrar iconos de los tipos de ficheros a la izquierda. Existe otra alternativa a ls llamada lsd y muy parecida a exa . Puedes descargarla e instalarla haciendo lo siguiente: sudo apt install wget wget https://github.com/Peltoche/lsd/releases/download/0.17.0/lsd_0.17.0_amd64.deb sudo dpkg -i lsd_0.17.0_amd64.deb Tambi\u00e9n tiene resaltado de sintaxis con colores, soporte de iconos, junto a otras caracter\u00edsticas, por lo que tambi\u00e9n es una buena opci\u00f3n.","title":"Mejora del ls (exa)"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#cambiar-de-carpetas-cd","text":"Para movernos entre carpetas , utilizaremos el comando cd ( change directory ) seguido del nombre de la carpeta ( movimiento relativo ) o ruta completa ( movimiento absoluto ) a la que queremos acceder. Ten en cuenta que al escribir el nombre de la carpeta o ruta, puedes pulsar TAB y el sistema te sugiere las opciones que encajen con lo que has escrito ( o autocompleta si solo hay una opci\u00f3n ), de modo que no tendr\u00e1s que escribirlo por completo. Existen algunas palabras clave para referirnos a rutas espec\u00edficas: S\u00edmbolo Ejemplo Descripci\u00f3n .. cd .. \u00abSale\u00bb de la carpeta actual y se mueve a la carpeta padre. . Hace referencia a la carpeta actual. \u00datil como abreviatura. ~ cd ~ Accede a la carpeta personal del usuario. Igual que escribir cd sin par\u00e1metros. De la misma forma, se pueden hacer combinaciones como ls ~/.oh-my-fish/ , que es lo mismo que ls /home/manz/.oh-my-fish/ ( si soy el usuario manz ) o ls ../etc ser\u00eda equivalente a ls /etc si estoy en la carpeta /home .","title":"Cambiar de carpetas (cd)"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#pila-de-carpetas-pushd-popd","text":"Otra forma de trabajar entre carpetas, es utilizando los comandos pushd ( push directory ) y popd ( pop directory ). Ambos funcionan trabajando con una estructura de pila donde podemos hacer push ( para meter una carpeta ) o pop ( para sacar una carpeta ). De esta forma, si sabemos que m\u00e1s adelante necesitaremos volver a acceder a una ruta compleja, podemos hacer lo siguiente: $ pushd /etc/nginx # Guarda la ruta /etc/nginx en la pila $ cd /home/manz # Cambiamos a otra ruta ... # Trabajamos en esa ruta $ popd # Vuelve a la ruta guardada previamente en la pila Podemos ejecutar varias veces el comando pushd e ir apilando varias rutas o carpetas diferentes. Tambi\u00e9n tener en cuenta que se puede utilizar . como par\u00e1metro de pushd para guardar la ruta actual en la que nos encontramos de forma r\u00e1pida.","title":"Pila de carpetas (pushd / popd)"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#mejora-del-cd-autojump","text":"Si acostumbras a trabajar en una terminal, es muy com\u00fan perder bastante tiempo escribiendo los nombres de las carpetas o pensando cu\u00e1l era la ruta, en la que estabas, si no est\u00e1s muy familiarizado con ella. El comando autojump es una mejora interesante del cd , ya que se basa en saltar a la carpeta \u00abfreciente\u00bb que m\u00e1s se aproxime al par\u00e1metro escrito; esto es, la ruta o carpeta m\u00e1s frecuente y m\u00e1s reciente. Veamoslo con un ejemplo: $ cd /etc/nginx $ ls -lh $ cd /home/manz $ j nginx /etc/nginx En el ejemplo anterior, al escribir j nginx , el comando autojump accede a la ruta /etc/nginx , porque es la carpeta m\u00e1s reciente a la que hemos accedido frecuentemente que encaja con el texto escrito por par\u00e1metro: nginx . El comando nos muestra por pantalla la carpeta coincidente, y cambia a ella autom\u00e1ticamente. Nota El comando j es un alias de autojump y no viene instalado por defecto en el sistema. Para instalarlo en Debian, basta con hacer un sudo apt install autojump y a\u00f1adir la l\u00ednea source /usr/share/autojump/autojump.bash ( la extensi\u00f3n depende de la shell que usemos ). Existen otras mejoras similares como z , v o fasd .","title":"Mejora del cd (autojump)"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#carpetas-del-sistema","text":"Linux tiene una estructura de carpetas bien definida, donde cada carpeta tiene una finalidad muy concreta, y en ella se guardan los archivos correspondientes. Por otra parte, mientras que en Windows la ruta ra\u00edz ( la primera carpeta del sistema ) es C:\\ , en Linux es / , puesto que todo parte de esa ruta ra\u00edz . Desde esa ruta / nos podemos encontrar varias carpetas, cada una con una finalidad concreta: Carpeta Descripci\u00f3n / Carpeta ra\u00edz del sistema. Equivalente a C:\\ en Windows. /bin Binarios ( comandos ejecutables ) principales. /boot Archivos de arranque. Equivale a C:\\bootmgr en Windows. /dev Dispositivos f\u00edsicos de hardware. /etc Archivos de configuraci\u00f3n. Equivale al registro de Windows. /home Carpetas del usuario. Equivale a C:\\Users en Windows. /lib Bibliotecas del sistema. Equivale a C:\\Windows\\System32 . /lost+found Archivos corruptos o recuperados. /media Medios extra\u00edbles. Generalmente, carpetas de CD/DVD, usb, unidades extra\u00edbles... /mnt Montaje temporal reservado para el administrador de sistemas. /opt Aplicaciones o paquetes adicionales ( opcionales ). /proc Procesos internos del sistema. /root Carpeta personal del administrador. /run Informaci\u00f3n reciente. /sbin Archivos binarios reservados para root. S\u00f3lo accesible si tienes privilegios. /srv Datos espec\u00edficos para servicios. /sys Nueva versi\u00f3n o evoluci\u00f3n de /proc/ /tmp Archivos temporales. Muchas veces, eliminados al reiniciar el sistema. /usr Datos de paquetes instalados. Equivale a C:\\Archivos de Programa en Windows. /var Logs, cache, variables, etc...","title":"Carpetas del sistema"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#manipular-ficheros-y-carpetas","text":"Para trabajar desde una terminal, es muy necesario saber moverse entre carpetas y manipular ficheros y carpetas . Acciones como copiar, mover y borrar ficheros o crear carpetas forman parte del d\u00eda a d\u00eda en nuestras terminales de texto. Por esa raz\u00f3n es necesario conocer algunos de los comandos m\u00e1s habituales para estas y otras tareas relacionadas, as\u00ed como sus par\u00e1metros o curiosidades m\u00e1s importantes.","title":"Manipular ficheros y carpetas"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#identificar-ficheros-file","text":"Existe un comando no demasiado conocido llamado file con el cu\u00e1l puedes saber con que tipo de fichero est\u00e1s trabajando. En principio, normalmente identificamos a los ficheros por sus extensiones, si es .txt es un fichero de texto y si es .mp3 se trata de un archivo de audio. Sin embargo, estas extensiones son una convenci\u00f3n. Nada me impide renombrar un fichero .txt como .mp3 . Simplemente, no funcionar\u00e1 si lo abro con un reproductor de audio. $ file /etc/hosts /etc/hosts: ASCII text $ file music.s3m /home/manz/music.s3m: ScreamTracker III Module sound data Sin embargo, file no se guiar\u00e1 por la extensi\u00f3n, sino que analizar\u00e1 su contenido, m\u00e1s concretamente su n\u00famero m\u00e1gico , para intentar reconocer que tipo de archivo es. Nota Si file no es lo suficientemente exhaustivo para ti, existe un proyecto llamado trID que tiene la misma filosof\u00eda que file pero analiza los ficheros en mayor profundidad.","title":"Identificar ficheros (file)"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#copiar-ficheros-cp","text":"Una operaci\u00f3n b\u00e1sica a la hora de usar una terminal es la de copiar ficheros . Nos encontramos continuamente haciendo copias de ficheros o carpetas, ya sea de una ruta a otra o sobre la misma carpeta donde nos encontramos. Para ello, utilizamos el comando cp ( copy ), que suele utilizarse de la siguiente forma: $ pwd /home/manz $ cp origen.txt /home/tux/destino.txt En este sencillo ejemplo hemos copiado el fichero origen.txt desde la carpeta /home/manz a la carpeta /home/tux cambi\u00e1ndole el nombre a destino.txt . Asumamos que seguimos en la carpeta /home/manz : La forma en la que especificamos las rutas y copiamos ficheros, pueden simplificarse y hacerse m\u00e1s flexibles dependiendo de si utilizamos rutas absolutas o rutas relativas : Tipo Descripci\u00f3n Ruta absoluta Ruta completa de la carpeta o fichero desde el ra\u00edz. Ej: /home/tux Ruta actual Ruta donde nos encontramos actualmente. Ej: . Ruta padre Ruta a la carpeta anterior de donde nos encontramos actualmente. Ej: .. Ruta relativa Ruta completa, pero s\u00f3lo a partir de la carpeta donde nos encontramos. Ej: ../tux Ve\u00e1moslo con varios ejemplos: # Caso 1: Rutas absolutas $ cp /home/manz/origen.txt /home/tux/destino.txt # Caso 2: Rutas relativas $ cp origen.txt destino.txt # Caso 3: Rutas relativas $ cp origen.txt ../tux/destino.txt # Caso 4: Ruta absoluta y ruta relativa $ cp /etc/resolv.conf ./backup.conf El primer caso, equivalente al primer ejemplo, pero indicando rutas absolutas . El segundo caso, creamos una copia con nombre destino.txt en la misma ruta. El tercer caso, asumiendo que seguimos en la ruta /home/manz , copiamos el fichero origen.txt a la ruta relativa ../tux , es decir, a /home/tux , con nombre destino.txt . El cuarto caso, copiamos el fichero resolv.conf de la ruta /etc a . , o sea, la carpeta actual donde nos encontramos, pero con el nombre backup.conf . Por otro lado, es importante recalcar que el comando cp tiene algunos par\u00e1metros que pueden resultarnos \u00fatiles, como por ejemplo el par\u00e1metro -r que nos permite hacer copias recursivas , esto es, no s\u00f3lo copiar ficheros, sino carpetas y su contenido , ya que por defecto cp solo copia ficheros. Los par\u00e1metros m\u00e1s populares son los siguientes: Par\u00e1metro Significado -r ( recursive ) El comando cp s\u00f3lo copia ficheros. Usar -r si se quiere copiar carpetas y su contenido. -u ( update ) Copia s\u00f3lo cuando no hay fichero de destino. Si existe, s\u00f3lo cuando el origen es m\u00e1s nuevo. -n ( no clobber ) No sobreescribe en el destino un fichero que ya existe. -v ( verbose ) Por defecto, cp trabaja en silencio. Con este par\u00e1metro muestra lo que est\u00e1 haciendo.","title":"Copiar ficheros (cp)"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#mover-o-renombrar-ficheros-mv","text":"Al igual que hemos utilizado cp para copiar ficheros, podr\u00edamos utilizar mv ( move ) para mover archivos. La diferencia entre estos dos comandos es que, mv en lugar de mantener el fichero original como hace cp , lo elimina tras la copia: # Caso 1: Mueve un fichero $ mv /home/tux/info.txt /home/manz/ # Caso 2: Mueve y renombra un fichero $ mv /home/tux/info.txt /home/manz/tuxdata.txt # Caso 3: Renombra un fichero $ mv info.txt tuxdata.txt Obs\u00e9rvese que en el primer caso, se est\u00e1 moviendo un fichero a una ruta concreta, pero podemos utilizar mv para renombrar a la vez que movemos ( como en el caso 2 ) o simplemente renombrar sin mover de ruta ( caso 3 ). De la misma forma que cp , el comando mv tiene los mismos par\u00e1metros que mencionamos.","title":"Mover o renombrar ficheros (mv)"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#borrar-ficheros-rm","text":"Probablemente, otro de los comandos m\u00e1s utilizados en la terminal es rm ( remove ), que sirve para eliminar ficheros o carpetas de nuestro sistema. Hay que tener mucho cuidado con \u00e9l, ya que una vez un fichero es eliminado, aunque no es imposible, es complicado recuperarlo. Par\u00e1metro Significado -f ( force ) Fuerza a hacer el borrado, sin preguntar. -r ( recursive ) Elimina recursivamente carpetas y su contenido. -d ( dir ) Elimina carpetas vac\u00edas. -v ( verbose ) Por defecto, rm trabaja en silencio. Con este par\u00e1metro muestra lo que est\u00e1 haciendo. Como mencionamos anteriormente, el comando rm realmente no borra un fichero, sino que lo \u00abmarca\u00bb en el disco como reutilizable. Si la zona del disco donde resid\u00eda es sobreescrita con otro fichero, probablemente sea imposible recuperarlo, pero en caso contrario hay cierta posibilidad. Nota Si deseas eliminar por completo un fichero, sin posibilidad de recuperaci\u00f3n, es mejor utilizar el comando shred -u seguido del nombre del fichero a eliminar. Este comando sobreescribe con informaci\u00f3n aleatoria el fichero, y luego lo elimina ( par\u00e1metro -u ).","title":"Borrar ficheros (rm)"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#mejora-del-rm-rip","text":"Si la filosof\u00eda por defecto del comando rm no te agrada, o eres una persona que suele eliminar ficheros por accidente, quiz\u00e1s te interese el comando rip ( rm improved ). Se trata de una alternativa a rm desarrollada en Rust, que establece que al eliminar un archivo con rip , pasa a estar \u00abmuerto\u00bb en una zona del disco denominada \u00abcementerio\u00bb ( por defecto, /tmp/graveyard-user , donde user es el nombre de usuario ), que hace las veces de papelera de reciclaje t\u00e9trica. Si hemos borrado accidentalmente el fichero, podemos \u00abresucitarlo\u00bb escribiendo rip -u ( undelete ) o simplemente acceder a los ficheros dentro de la estructura del cementerio. Si queremos vaciar el cementerio, basta con escribir rip -d ( decompose ) o eliminar la estructura de carpetas manualmente. Otra alternativa similar a rm podr\u00eda ser trash-cli .","title":"Mejora del rm (rip)"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#crear-carpetas-o-ficheros-vacios","text":"Mediante el comando mkdir , seguido de un nombre de carpeta, podemos crear nuevas carpetas vac\u00edas. Si queremos crear una estructura de varias carpetas una dentro de otra, en vez de hacerlo una por una. El siguiente comando crea una carpeta parent , que dentro tiene una carpeta child y dentro de ella, una carpeta grandchild : $ mkdir -p parent/child/grandchild Por otro lado, el comando touch ser\u00eda la versi\u00f3n de mkdir orientada a ficheros en lugar de carpetas. Si necesitamos crear un archivo vac\u00edo, por ejemplo, para editar m\u00e1s tarde, podemos hacerlo r\u00e1pidamente con touch : touch file.txt El comando anterior crear\u00eda un fichero vac\u00edo con nombre file.txt . Si ya existiera el archivo, simplemente actualiza su fecha de modificaci\u00f3n.","title":"Crear carpetas o ficheros vac\u00edos"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#crear-enlaces-ln","text":"El comando ln ( link names ) permite crear enlaces entre ficheros , una especie de referencias o accesos directos a ficheros, rutas o carpetas. Existen dos tipos de enlaces: Los enlaces duros . Son los ficheros que apuntan a otro fichero bas\u00e1ndose en su n\u00famero interno ( inodo ). Se crean utilizando el comando ln . De esta forma podemos tener varios archivos con el mismo contenido, pero sus copias no duplican el contenido del fichero original, sino que son una referencia al primero. Son poco utilizados. Los enlaces simb\u00f3licos ( tambi\u00e9n considerados enlaces blandos ). Son un tipo de referencia a otros ficheros, pero esta vez bas\u00e1ndose en su ubicaci\u00f3n. Se crean utilizando el comando y par\u00e1metro ln -s . De esta forma, cuando accedemos a un enlace simb\u00f3lico, realmente estamos accediendo al fichero que apunta. Si creamos un enlace simb\u00f3lico y borramos su archivo original, el enlace aparecer\u00e1 en rojo y se considerar\u00e1 un enlace simb\u00f3lico roto . Veamos un ejemplo: $ ln -s original.txt link $ ls -lh total 0 lrwxrwxrwx 1 manz manz 12 jul 1 19:37 link -> original.txt -rw-r--r-- 1 manz manz 0 jul 1 19:37 original.txt Como se puede ver, con el comando ln creamos un enlace, y con el par\u00e1metro -s indicamos que queremos que sea simb\u00f3lico. El primer fichero indicado ser\u00eda el archivo original al que queremos apuntar, mientras que el segundo fichero indicado ser\u00eda el enlace simb\u00f3lico que queremos crear. Al hacer un ls , observaremos que nos indica a donde apunta el enlace simb\u00f3lico ( puede ser un fichero, una carpeta, etc... ). En el caso de que el enlace se encuentre correcto, aparecer\u00e1 en azul cyan, pero si el fichero original a donde apunta no existiera, aparecer\u00eda en rojo. Estos enlaces pueden ser realmente \u00fatiles cuando necesitamos que en la carpeta actual exista el contenido de otra carpeta, pero no queramos duplicar la informaci\u00f3n ( son carpetas con mucho espacio ocupado ) o queremos mantenerlo actualizado y simplemente queremos una referencia de una carpeta a otra.","title":"Crear enlaces (ln)"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#mostrar-contenido-de-un-fichero","text":"A medida que trabajamos con ficheros en una terminal, el nombre del fichero, su ubicaci\u00f3n o su extensi\u00f3n puede no ser informaci\u00f3n suficiente para saber si se trata del fichero que buscamos, e interesarnos mostrar el contenido de un fichero r\u00e1pidamente, para saber si es el que buscamos o simplemente porque queremos ver su contenido.","title":"Mostrar contenido de un fichero"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#mostrar-contenido-cat","text":"Para ello, se suele utilizar el comando cat ( conCATenate files ), que t\u00e9cnicamente se considera un comando que concatena ( une ) la salida de uno o varios ficheros. Esto, dicho de otra forma, es que cat no se limita a mostrar el contenido de un solo fichero ( como suele usarse habitualmente ), sino que puede hacer cosas a\u00fan m\u00e1s potentes. Por ejemplo, el caso m\u00e1s b\u00e1sico ser\u00eda el siguiente: $ cat /etc/timezone Atlantic/Canary En este ejemplo, mostrar\u00edamos el contenido del fichero timezone ubicado en la ruta /etc . Se trata de un fichero que guarda la zona horaria del sistema. De esta forma, podr\u00edamos consultarla r\u00e1pidamente, sin tener que abrirla con un editor. Sin embargo, tambi\u00e9n podr\u00edamos hacer lo siguiente para mostrar el contenido de varios ficheros: $ ls /etc/deb* /etc/debconf.conf /etc/debian_version $ cat /etc/deb* Con el comando cat /etc/deb* indicamos que queremos que nos muestre el contenido de todos los fichero que comiencen por deb y est\u00e9n situados en /etc ( en este caso 2 ficheros ) y no tendr\u00edamos que hacerlo individualmente, uno por uno. El comando cat tiene algunos par\u00e1metros interesantes: Par\u00e1m. Descripci\u00f3n -s Suprime espacios consecutivos repetidos y los convierte en uno solo. -n Numera las l\u00edneas, a la izquierda. -b Numera solo las l\u00edneas no vac\u00edas.","title":"Mostrar contenido (cat)"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#mejora-del-cat-bat","text":"Existe una alternativa muy interesante al comando cat , llamada bat y desarrollada en Rust. Dicho comando mejora sustancialmente al comando cat , utilizando caracter\u00edsticas como resaltado de sintaxis en color para lenguajes de programaci\u00f3n, soporte para cambios de git, paginaci\u00f3n ( ver m\u00e1s adelante ) autom\u00e1tica, etc... Para instalarla, necesitaremos tener en nuestro sistema Rust instalado, y utilizar su gestor de paquetes cargo . Con \u00e9l, podremos escribir cargo install bat y lo tendremos disponible. Las \u00faltimas versiones de Debian, ya lo incorporan para instalar con un simple sudo apt install bat . La salida del comando bat de un fichero Javascript ser\u00eda similar a la siguiente: El comando bat dispone de varios par\u00e1metros interesantes: Par\u00e1m. Descripci\u00f3n --list-languages Muestra los lenguajes soportado en el resaltado de sintaxis. -l <lang> Especifica el lenguaje a resaltar ( C++, javascript, css, rust, ... ) --list-themes Muestra los temas de resaltado de sintaxis disponibles en bat . --theme <theme> Especifica el tema de resaltado a utilizar. -p Muestra un formato plano, por si queremos desactivar temporalmente el resaltado. -n Numera las l\u00edneas, pero no utiliza otras decoraciones como los bordes. -A Muestra los car\u00e1cteres ocultos (espacios, tabuladores, nueva l\u00ednea, etc...) -r <ini>:<fin> Muestra las l\u00edneas ini a fin del fichero. Por ejemplo: bat -r 4:10 file.js Nota Ejecutando bat --list-themes veremos la lista de temas disponibles para el resaltado de sintaxis. Puedes usar uno de ellos escribiendo bat --theme base16 ( por ejemplo ). Tambi\u00e9n puedes aprovechar para incluirlo en un alias de la shell y que se ejecute al hacer un cat .","title":"Mejora del cat (bat)"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#mostrar-contenido-al-reves-tac","text":"Si el comando cat nos muestra el contenido de un fichero de arriba a abajo, es decir, desde su primera l\u00ednea a su \u00faltima l\u00ednea, el comando tac ( cat al rev\u00e9s ) hace justo lo contrario, mostrar el contenido de un fichero de abajo a arriba, desde su \u00faltima l\u00ednea a la primera. $ tac textfile.txt Esta es la \u00faltima l\u00ednea. Esta es la segunda l\u00ednea. Esta es la primera l\u00ednea. Otra opci\u00f3n posible, aunque menos com\u00fan, es que si buscamos mostrar el contenido de un archivo al rev\u00e9s , pero en lugar de abajo a arriba, de derecha a izquierda, podemos utilizar el comando rev , que invierte el orden horizontal: $ cat textfile.txt | rev .aen\u00edl aremirp al se atsE .aen\u00edl adnuges al se atsE .aen\u00edl amitl\u00fa al se atsE","title":"Mostrar contenido al rev\u00e9s (tac)"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#paginar-contenido-more","text":"Pero en algunos casos, nos encontraremos que el contenido de un archivo es demasiado extenso y no nos da tiempo de leer su contenido antes de que siga avanzando en el contenido. La mejor forma de solucionar ese problema es utilizar un paginador . Se trata de un comando que, una vez detecta que la pantalla est\u00e1 llena, hace una pausa, y no continua hasta que el usuario pulse una tecla. De esta forma, puede ir leyendo poco a poco los contenidos mostrados en pantalla. El paginador m\u00e1s conocido se llama more y se utiliza de la siguiente forma: $ cat largetextfile.txt | more En este caso estamos utilizando un pipe | que obtiene la salida por pantalla del primer comando y se lo env\u00eda al segundo, que es el paginador. De esta forma, el paginador hace una pausa cuando se llena la pantalla, mostrando una l\u00ednea more al final de la pantalla y esperando a que el usuario pulse una tecla. Dependiendo de la tecla que se pulse, el paginador more har\u00e1 una acci\u00f3n concreta: Tecla Descripci\u00f3n ENTER Avanza una sola l\u00ednea. SPACE Avanza una p\u00e1gina. = Muestra la l\u00ednea donde se encuentra el paginador. /word Busca la palabra word en el texto y va hasta ella. n Vuelve a buscar la \u00faltima palabra buscada. Q Sale del paginador y vuelve a la terminal. Sin embargo, el more es bastante limitado en cuanto a ciertas acciones.","title":"Paginar contenido (more)"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#mejora-de-paginacion-less","text":"Muchas veces el paginador more se nos queda corto por varias razones. Por ejemplo, una vez pulsado enter para avanzar, no podemos volver hacia atr\u00e1s. Existen otros paginadores como less que son un poco m\u00e1s vers\u00e1tiles en este sentido, permitiendo utilizar los cursores \u2191 y \u2193 o las teclas ReP\u00e1g o AvP\u00e1g para subir o bajar en el texto m\u00e1s facilmente. El comando most es otro paginador que adem\u00e1s muestra una barra inferior y resaltado de colores para hacer la lectura un poco m\u00e1s sencilla. Estos paginadores se pueden instalar en el sistema utilizando sudo apt install less most . Nota Tanto more , como less como most pueden utilizarse directamente como alternativa de cat . Es decir, ejecutar less largetextfile.txt para mostrar el contenido paginado.","title":"Mejora de paginaci\u00f3n (less)"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#soporte-de-compresion","text":"En Linux, es muy habitual trabajar con ficheros de texto plano , aunque en el caso de registros o logs, cuando son muy extensos suelen terminar ocupando mucho espacio. Para evitarlo, se suelen comprimir utilizando formatos muy comunes en Linux como .gz , .bz2 o .xz , de modo que podr\u00edamos tener los ficheros de texto originales access.log o los ficheros comprimidos, por ejemplo access.log.gz . Los comandos cat y less tienen unas versiones alternativas que permiten realizar su finalidad ( mostrar contenido o paginar ) sobre archivos de texto comprimidos. De esta forma, nos ahorramos tener que descomprimir el fichero, visualizar su contenido y volverlo a comprimir, ya que estos comandos lo hacen todo sobre el archivo comprimido, sin alterarlo. Los comandos son los siguientes: Comando Compresor Finalidad zcat gzip Muestra el contenido de un fichero de texto comprimido .gz . zless gzip Pagina el contenido de un fichero de texto comprimido .gz . bzcat bzip2 Muestra el contenido de un fichero de texto comprimido .bz2 . bzless bzip2 Pagina el contenido de un fichero de texto comprimido .bz2 . xzcat xz Muestra el contenido de un fichero de texto comprimido .xz . xzless xz Pagina el contenido de un fichero de texto comprimido .xz .","title":"Soporte de compresi\u00f3n"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#cambiar-idioma-de-la-terminal","text":"Pueden ocurrir situaciones donde el idioma de la terminal est\u00e1 establecido a otro diferente del que queremos. Esto, en algunos casos, puede chocar con nuestro objetivo. Aunque es muy habitual trabajar en terminales con el idioma ingl\u00e9s ( ya que los comandos siempre van a mantener el mismo nombre ), es posible que queramos traducir las respuestas de los comandos, los mensajes de error o incluso los mensajes de ayuda o manuales, as\u00ed como gestionar ciertos detalles interesantes relacionados con el idioma.","title":"Cambiar idioma de la terminal"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#cambiar-idioma-a-espanol","text":"El primer paso es asegurarnos cu\u00e1l est\u00e1 tomando como idioma por defecto el sistema. Por ejemplo, si realizamos un sudo apt update podremos observar en que idioma nos muestra los procesos de actualizaci\u00f3n de los repositorios de apt. Es muy probable que nos aparezcan en ingl\u00e9s, lo que significar\u00eda que tenemos ese idioma por defecto. Vamos a comprobar que idioma o configuraci\u00f3n regional tenemos en el sistema. Para ello, utilizaremos el comando locale : $ locale LANG= LANGUAGE= LC_CTYPE=\"POSIX\" LC_NUMERIC=\"POSIX\" LC_TIME=\"POSIX\" LC_COLLATE=\"POSIX\" LC_MONETARY=\"POSIX\" LC_MESSAGES=\"POSIX\" LC_PAPER=\"POSIX\" LC_NAME=\"POSIX\" LC_ADDRESS=\"POSIX\" LC_TELEPHONE=\"POSIX\" LC_MEASUREMENT=\"POSIX\" LC_IDENTIFICATION=\"POSIX\" LC_ALL= Vemos que la mayor\u00eda de variables de localizaci\u00f3n nos aparecen con la palabra clave POSIX , la cu\u00e1l tambi\u00e9n podr\u00eda aparecer con otros valores, como por ejemplo en_US.UTF-8 , que significar\u00eda que tiene establecido el idioma Ingl\u00e9s (Americano) . Cada una de esas variables que aparece, tiene como objetivo definir el idioma de una caracter\u00edstica concreta: Variable Significado LANG Idioma general del sistema. LANGUAGE Fallback de idioma de traducci\u00f3n de mensajes ( herramientas GNU ). LC_CTYPE Clasificaci\u00f3n de car\u00e1cteres y conversiones de may\u00fasculas y min\u00fasculas. LC_NUMERIC Formato num\u00e9rico, decimales... LC_TIME Formato de fechas y horas, seg\u00fan regi\u00f3n. LC_COLLATE Orden de clasificaci\u00f3n ( collation ). LC_MONETARY Formato monetario, seg\u00fan regi\u00f3n. LC_MESSAGES Formato de palabras y respuestas interactivas. LC_PAPER Tama\u00f1o y formato de p\u00e1gina, seg\u00fan regi\u00f3n. LC_NAME Formato de nombres. LC_ADDRESS Convenciones de formateo de direcciones f\u00edsicas o postales. LC_TELEPHONE Convenciones usadas para la representaci\u00f3n de n\u00fameros telef\u00f3nicos. LC_MEASUREMENT Sistema de medida por defecto, seg\u00fan regi\u00f3n. LC_IDENTIFICATION Metadatos sobre la informaci\u00f3n de regi\u00f3n. LC_ALL Localizaci\u00f3n aplicada a todas las variables anteriores. Ojo Ten cuidado en el caso de establecer un valor a LC_ALL , el cu\u00e1l se desaconseja utilizar si quieres establecer excepciones particulares en alguna de las variables anteriores, ya que sobreescribe las dem\u00e1s. Nuestro sistema puede estar preparado para soportar diferentes idiomas. Con el par\u00e1metro locale -a podemos ver cuales son los que tenemos a nuestra disposici\u00f3n. En el caso de que no tengamos el idioma que queremos establecer, lo que podemos hacer es instalar el paquete de generaci\u00f3n de localizaciones con sudo apt install locales y editar el fichero /etc/locale.gen , donde descomentaremos los idiomas que queremos activar: sudo vim /etc/locale.gen en_US.UTF-8 UTF-8 es_ES ISO-8859-1 es_ES.UTF-8 UTF-8 es_ES@euro ISO-8859-15 En el ejemplo anterior, he descomentado el idioma ingl\u00e9s ( en_US ) y las diferentes variaciones del espa\u00f1ol ( es_ES ). Una vez hecho esto, guardamos los cambios y ejecutamos el comando locale-gen , que generar\u00e1 los idiomas descomentados, poni\u00e9ndolos a nuestra disposici\u00f3n: $ locale-gen Generating locales (this might take a while)... en_US.UTF-8... done es_ES.ISO-8859-1... done es_ES.UTF-8... done es_ES.ISO-8859-15@euro... done Generation complete. Si tuvieramos alg\u00fan tipo de problema al generarlos, tambi\u00e9n podemos instalar el paquete locales-all de APT, donde generalmente se incluyen todos los datos regionales precompilados. Nota En algunos casos, esta operaci\u00f3n puede realizarse de forma mucho m\u00e1s guiada y autom\u00e1tica con un dpkg-reconfigure locales , eligiendo posteriormente los idiomas que nos interesan de la lista que nos muestran. Una vez terminados todos estos pasos, s\u00f3lo nos quedar\u00eda a\u00f1adir la siguiente l\u00ednea a nuestro fichero de arranque, como por ejemplo, en la \u00faltima linea de ~/.bashrc si usamos Bash , o ~/.zshrc si usamos Zsh : export LANG=es_ES.UTF-8 Con ello a\u00f1adimos la variable LANG para indicar que nuestro idioma por defecto ser\u00e1 el aplicado. Esto se puede escribir en la l\u00ednea de comandos directamente ( s\u00f3lo se usar\u00e1 ese idioma en la sesi\u00f3n actual ) o se puede a\u00f1adir al fichero que comentabamos anteriormente, para que los cambios se guarden de forma permanente. Nota Ten cuidado a la hora de establecer el idioma en las variables de sistema. En este ejemplo he puesto es_ES.UTF-8 , pero en algunos casos puede ser es_ES.utf8 o tener un nombre ligeramente diferente. Es aconsejable mirar con el comando locale -a cu\u00e1l es el que nos interesa y como se escribe concretamente.","title":"Cambiar idioma a espa\u00f1ol"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#man-pages-en-espanol","text":"Es posible que a\u00fan realizando los pasos anteriores, las p\u00e1ginas man no muestren la ayuda en espa\u00f1ol y s\u00f3lo lo haga la salida de ciertos comandos, por ejemplo. Normalmente esto se suele solucionar instalando los paquetes manpages-es ( en el caso del idioma espa\u00f1ol ): apt install man manpages-es manpages-es-extra Con dichos paquetes instalaremos las p\u00e1ginas man en espa\u00f1ol ( ojo, siguen haciendo falta los pasos del primer apartado ).","title":"Man pages en espa\u00f1ol"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#eliminar-idiomas-innecesarios","text":"Si acostumbramos a instalar muchos paquetes, comandos o aplicaciones, debemos saber que las \u00abp\u00e1ginas man\u00bb suelen venir junto a cada paquete, de modo que si instalamos un comando concreto, tambi\u00e9n se instala su ayuda en formato \u00abman pages\u00bb. De la misma forma, algunos paquetes solo incorporan la ayuda en un idioma ( ingl\u00e9s ), pero en otras ocasiones, incorporan ayuda en muchos otros idiomas diferentes , cosa que puede llegar a ocupar bastante espacio en disco, y que probablemente, nunca consultemos en alg\u00fan idioma diferente a los que establecemos en el primer apartado. Justo en esta direcci\u00f3n va el objetivo del comando localepurge , el cu\u00e1l se encarga de eliminar todas las p\u00e1ginas de ayuda en idiomas que no tenemos predefinidos como preferidos. De esta forma, cada vez que instalamos algo con apt , el sistema se tomar\u00e1 un peque\u00f1o fragmento de tiempo en eliminar las p\u00e1ginas man en otros idiomas, para dejar s\u00f3lo las que tengamos marcadas, ahorrando as\u00ed espacio en disco ( en algunas situaciones es esencial, por ejemplo, docker ). Para configurarlo todo correctamente, editaremos el fichero /etc/locale.nopurge . En \u00e9l podemos establecer algunas configuraciones, pero sobre todo, los idiomas permitidos que no deben ser eliminados . Un ejemplo de las \u00faltimas l\u00edneas de este fichero: en en_US.UTF-8 es es_ES.UTF-8 As\u00ed pues, localepurge mantendr\u00e1 toda la ayuda y p\u00e1ginas del manual que se encuentren en ingl\u00e9s o en espa\u00f1ol.","title":"Eliminar idiomas innecesarios]"},{"location":"herramientas-it/terminal/01-introducci%C3%B3n_a_la_terminal/#cambiar-la-zona-horaria","text":"Otro problema bastante frecuente es el de querer cambiar la zona horaria del sistema. Para consultar la zona horaria que tenemos establecida, se puede hacer simplemente haciendo un cat al fichero /etc/timezone . De esta forma nos dir\u00e1 que zona horaria tenemos configurada: $ cat /etc/timezone Etc/UTC Para cambiarla nos basta con editar ese fichero y establecer la zona horaria que queremos utilizar, o utilizar el comando tzselect , el cu\u00e1l nos permitir\u00e1 seleccionar la zona horaria de una lista. !!! Si queremos optar por un proceso interactivo m\u00e1s automatizado, podemos utilizar el comando dpkg-reconfigure tzdata y seleccionar las opci\u00f3nes 7 (Atl\u00e1ntico) de \u00c1rea geogr\u00e1fica y 3 (Canarias) de Zona horaria . $ cat /etc/timezone Atlantic/Canary Si volvemos a consultar, veremos que ahora ya tenemos otra zona horaria configurada. Fuente : https://terminaldelinux.com/","title":"Cambiar la zona horaria"},{"location":"herramientas-it/terminal/02-operaciones_con_ficheros/","text":"Operaciones con ficheros \u00b6 Espacio libre/usado en disco \u00b6 Al trabajar con cualquier tipo de sistema ( sobre todo cuando lo hacemos en m\u00e1quinas virtuales, contenedores docker o similares ) tenemos un espacio de disco limitado , y es muy frecuente que nos quedemos sin espacio libre despu\u00e9s de instalar varios paquetes o generar ficheros grandes como contenido multimedia o logs y registros de gran tama\u00f1o. Por lo tanto, ser\u00eda interesante conocer algunos comandos para conocer cuanto espacio de disco estamos usando, cuanto espacio libre tenemos y que paquetes, carpetas o ficheros son los que m\u00e1s ocupan, facilit\u00e1ndonos la tarea de saber por donde atacar y eliminar datos para hacer espacio libre. Espacio en disco libre (df) \u00b6 El comando df ( disk free ) nos informa del espacio libre en cada partici\u00f3n del disco. As\u00ed pues, la salida del comando df en un sistema Linux sobre WSL, mostrar\u00eda algo similar a lo siguiente ( entre otras entradas ): $ df -h Filesystem Size Used Avail Use% Mounted on /dev/sdc 251G 19G 220G 8% / tmpfs 3,9G 0 3,9G 0% /wsl /dev/sdb 251G 12G 227G 5% /wsl/docker-desktop-data/isocache none 3,9G 12K 3,9G 1% /wsl/docker-desktop/shared-sockets/host-services /dev/sda 251G 117M 239G 1% /wsl/docker-desktop/docker-desktop-proxy /dev/loop0 246M 246M 0 100% /wsl/docker-desktop/cli-tools tools 111G 106G 5,3G 96% /init none 3,9G 0 3,9G 0% /dev tmpfs 3,9G 0 3,9G 0% /sys/fs/cgroup C:\\ 111G 106G 5,3G 96% /c Obs\u00e9rvese que en la columna Size se nos muestra el tama\u00f1o total de cada partici\u00f3n de disco, mientras que en la siguiente se nos muestra el tama\u00f1o del espacio ocupado y en la siguiente el tama\u00f1o del espacio libre . A modo de resumen, la siguiente columna nos muestra el porcentaje de espacio utilizado. Esto nos da una idea del espacio en disco que nos queda en cada partici\u00f3n. Nota Obviamente, debemos conocer un poco el sistema que estamos utilizando para saber que particiones son las que nos interesan. Generalmente, los dispositivos que comienzan por /dev/sd son los discos f\u00edsicos del sistema, como por ejemplo, en este caso ser\u00edan sda , sdb y sdc . Un cuarto disco conectado se etiquetar\u00eda como sdd . Los par\u00e1metros m\u00e1s interesantes del comando df podr\u00edan ser los siguientes: Opci\u00f3n Significado -h Formato humano. A\u00f1ade la letra de la unidad ( K = Kibibytes, M = Mebibytes, ... ). 1KiB= 1024 bytes . -H , --si Formato humano. A\u00f1ade la letra de la unidad ( K = Kilobytes, M = Megabytes, ... ). 1kB= 1000 bytes . -T Muestra el tipo de sistema de ficheros de la partici\u00f3n de disco. Espacio en disco usado (du) \u00b6 Sin embargo, podemos querer rizar el rizo y hacer justo la operaci\u00f3n opuesta. En lugar de ver el espacio libre en disco , querer ver el espacio ocupado en disco de una forma un poco m\u00e1s minuciosa. Esta aproximaci\u00f3n nos permite que podamos ver el tama\u00f1o ocupado por carpetas del sistema y tener una idea m\u00e1s aproximada de donde estamos invirtiendo m\u00e1s espacio en disco. Para ello, utilizaremos el comando du ( disk usage ), que recorrer\u00e1 el disco a partir de la ruta que le indiquemos ( o de la carpeta actual si no se indica ruta ), mostr\u00e1ndonos el tama\u00f1o que ocupa cada carpeta encontrada. $ du -h --max-depth 1 4.0K ./home 4.0K ./srv 1.4M ./etc 4.0K ./opt 32K ./root 12M ./lib 4.0K ./mnt 196M ./usr 4.0K ./media 4.0K ./lib64 0 ./sys 0 ./dev 5.2M ./sbin 4.0K ./boot 6.5M ./bin 8.0K ./run 0 ./proc 4.0K ./tmp 26M ./var 246M . En este ejemplo, nos hemos colocado en la ruta ra\u00edz de todo el sistema / y hemos utilizado el par\u00e1metro --max-depth establecido a 1, para que s\u00f3lo mire un nivel de profundidad de carpetas, y no siga mirando subcarpetas, ya que en caso de no establecerlo, lo har\u00eda de forma recursiva, entrando en cada subcarpeta sucesivamente. Al final, nos muestra el tama\u00f1o total ocupado , es decir, la suma de todas las carpetas anteriores. Nota Esto es una buena forma de analizar el espacio usado en disco por carpetas, y donde es m\u00e1s probable que tengamos m\u00e1s oportunidades para liberar espacio en disco. Algunos par\u00e1metros interesantes del comando du son los siguientes: Opci\u00f3n |Significado -a |Muestra tambi\u00e9n ficheros, no s\u00f3lo carpetas. -h |Formato humano. A\u00f1ade la letra de la unidad. 1KiB= 1024 bytes . -H , --si |Formato humano. A\u00f1ade la letra de la unidad. 1kB= 1000 bytes . -b , -k , -m |Muestra el tama\u00f1o en -b bytes, -k kilobytes o -m megabytes, sin letra. --max-depth [ n ]|S\u00f3lo avanza el nivel n de profundidad en subcarpetas. Alternativa a du (ncdu) \u00b6 Existe una versi\u00f3n mejorada del comando du llamada ncdu ( nCurses du ). Se trata de una versi\u00f3n que a\u00f1ade ciertos detalles y muestra la informaci\u00f3n en paneles de texto de forma un poco m\u00e1s agradable y visuales, permitiendo moverse de forma interactiva por las carpetas y realizando ciertas tareas: La primera columna nos muestra el tama\u00f1o total que ocupa dicha carpeta ( y todas sus subcarpetas ), la columna que le sigue a continuaci\u00f3n refleja el porcentaje sobre el resto de carpetas. Existe otra columna num\u00e9rica que nos indica el n\u00famero de \u00edtems ( ficheros y carpetas ) que incluye dicha carpeta. Opci\u00f3n |Significado --color [ tema ]|Muestra la interfaz con un tema concreto. Opciones posibles: off y dark . -o [ fichero ]|En lugar de mostrar por pantalla, guarda los resultados en un fichero JSON. -f [ fichero ]|Carga los datos del fichero JSON indicado (guardado por el m\u00e9todo anterior). --si |Usa potencias de 1000 (KB, MB...) en lugar de potencias de 1024 (KiB, MiB...). Recuerda que puedes manejar la interfaz interactiva de ncdu con los siguientes atajos r\u00e1pidos , movi\u00e9ndonos entre las carpetas y accediendo a ellas: Atajo Acci\u00f3n k / \u2191 Retroceder al fichero o carpeta anterior. j / \u2193 Avanzar al fichero o carpeta siguiente. ENTER Acceder a la carpeta seleccionada y ver su contenido. i Informaci\u00f3n sobre la carpeta o fichero n Ordena por nombre (orden alfab\u00e9tico). s Ordena por tama\u00f1o ocupado de la carpeta. C Ordena por n\u00famero de items que contiene. d Borrar carpeta o fichero. g Mostrar porcentaje en disco c Mostrar la cantidad de archivos y carpetas que contiene Alternativa a du (dutree) \u00b6 Otra alternativa que nos puede resultar interesantes es dutree . Est\u00e1 desarrollada en Rust, y puede instalarse con cargo install dutree . Tiene un enfoque m\u00e1s b\u00e1sico y menos interactivo que ncdu pero puede resultar m\u00e1s interesante o flexible en algunos casos. Por ejemplo, en la imagen anterior le pedimos a dutree que nos muestre solo las carpetas del primer nivel de profundidad con --depth=1 , mientras que le decimos que descarte y agrupe todas las carpetas que ocupen menos de 20 MiB con --aggr=20M . Otros par\u00e1metros interesantes podr\u00edan ser --no-hidden que excluye los ficheros ocultos ( los que empiezan por . ) o --files-only que excluye las carpetas y se centra en ficheros, por si lo que queremos es analizar el contenido de la carpeta actual y no centrarnos en subcarpetas. Otro comando muy similar es du-dust ( dust ), el cu\u00e1l tambi\u00e9n est\u00e1 desarrollado en Rust. Fuente: https://terminaldelinux.com/","title":"Operaciones con ficheros"},{"location":"herramientas-it/terminal/02-operaciones_con_ficheros/#operaciones-con-ficheros","text":"","title":"Operaciones con ficheros"},{"location":"herramientas-it/terminal/02-operaciones_con_ficheros/#espacio-libreusado-en-disco","text":"Al trabajar con cualquier tipo de sistema ( sobre todo cuando lo hacemos en m\u00e1quinas virtuales, contenedores docker o similares ) tenemos un espacio de disco limitado , y es muy frecuente que nos quedemos sin espacio libre despu\u00e9s de instalar varios paquetes o generar ficheros grandes como contenido multimedia o logs y registros de gran tama\u00f1o. Por lo tanto, ser\u00eda interesante conocer algunos comandos para conocer cuanto espacio de disco estamos usando, cuanto espacio libre tenemos y que paquetes, carpetas o ficheros son los que m\u00e1s ocupan, facilit\u00e1ndonos la tarea de saber por donde atacar y eliminar datos para hacer espacio libre.","title":"Espacio libre/usado en disco"},{"location":"herramientas-it/terminal/02-operaciones_con_ficheros/#espacio-en-disco-libre-df","text":"El comando df ( disk free ) nos informa del espacio libre en cada partici\u00f3n del disco. As\u00ed pues, la salida del comando df en un sistema Linux sobre WSL, mostrar\u00eda algo similar a lo siguiente ( entre otras entradas ): $ df -h Filesystem Size Used Avail Use% Mounted on /dev/sdc 251G 19G 220G 8% / tmpfs 3,9G 0 3,9G 0% /wsl /dev/sdb 251G 12G 227G 5% /wsl/docker-desktop-data/isocache none 3,9G 12K 3,9G 1% /wsl/docker-desktop/shared-sockets/host-services /dev/sda 251G 117M 239G 1% /wsl/docker-desktop/docker-desktop-proxy /dev/loop0 246M 246M 0 100% /wsl/docker-desktop/cli-tools tools 111G 106G 5,3G 96% /init none 3,9G 0 3,9G 0% /dev tmpfs 3,9G 0 3,9G 0% /sys/fs/cgroup C:\\ 111G 106G 5,3G 96% /c Obs\u00e9rvese que en la columna Size se nos muestra el tama\u00f1o total de cada partici\u00f3n de disco, mientras que en la siguiente se nos muestra el tama\u00f1o del espacio ocupado y en la siguiente el tama\u00f1o del espacio libre . A modo de resumen, la siguiente columna nos muestra el porcentaje de espacio utilizado. Esto nos da una idea del espacio en disco que nos queda en cada partici\u00f3n. Nota Obviamente, debemos conocer un poco el sistema que estamos utilizando para saber que particiones son las que nos interesan. Generalmente, los dispositivos que comienzan por /dev/sd son los discos f\u00edsicos del sistema, como por ejemplo, en este caso ser\u00edan sda , sdb y sdc . Un cuarto disco conectado se etiquetar\u00eda como sdd . Los par\u00e1metros m\u00e1s interesantes del comando df podr\u00edan ser los siguientes: Opci\u00f3n Significado -h Formato humano. A\u00f1ade la letra de la unidad ( K = Kibibytes, M = Mebibytes, ... ). 1KiB= 1024 bytes . -H , --si Formato humano. A\u00f1ade la letra de la unidad ( K = Kilobytes, M = Megabytes, ... ). 1kB= 1000 bytes . -T Muestra el tipo de sistema de ficheros de la partici\u00f3n de disco.","title":"Espacio en disco libre (df)"},{"location":"herramientas-it/terminal/02-operaciones_con_ficheros/#espacio-en-disco-usado-du","text":"Sin embargo, podemos querer rizar el rizo y hacer justo la operaci\u00f3n opuesta. En lugar de ver el espacio libre en disco , querer ver el espacio ocupado en disco de una forma un poco m\u00e1s minuciosa. Esta aproximaci\u00f3n nos permite que podamos ver el tama\u00f1o ocupado por carpetas del sistema y tener una idea m\u00e1s aproximada de donde estamos invirtiendo m\u00e1s espacio en disco. Para ello, utilizaremos el comando du ( disk usage ), que recorrer\u00e1 el disco a partir de la ruta que le indiquemos ( o de la carpeta actual si no se indica ruta ), mostr\u00e1ndonos el tama\u00f1o que ocupa cada carpeta encontrada. $ du -h --max-depth 1 4.0K ./home 4.0K ./srv 1.4M ./etc 4.0K ./opt 32K ./root 12M ./lib 4.0K ./mnt 196M ./usr 4.0K ./media 4.0K ./lib64 0 ./sys 0 ./dev 5.2M ./sbin 4.0K ./boot 6.5M ./bin 8.0K ./run 0 ./proc 4.0K ./tmp 26M ./var 246M . En este ejemplo, nos hemos colocado en la ruta ra\u00edz de todo el sistema / y hemos utilizado el par\u00e1metro --max-depth establecido a 1, para que s\u00f3lo mire un nivel de profundidad de carpetas, y no siga mirando subcarpetas, ya que en caso de no establecerlo, lo har\u00eda de forma recursiva, entrando en cada subcarpeta sucesivamente. Al final, nos muestra el tama\u00f1o total ocupado , es decir, la suma de todas las carpetas anteriores. Nota Esto es una buena forma de analizar el espacio usado en disco por carpetas, y donde es m\u00e1s probable que tengamos m\u00e1s oportunidades para liberar espacio en disco. Algunos par\u00e1metros interesantes del comando du son los siguientes: Opci\u00f3n |Significado -a |Muestra tambi\u00e9n ficheros, no s\u00f3lo carpetas. -h |Formato humano. A\u00f1ade la letra de la unidad. 1KiB= 1024 bytes . -H , --si |Formato humano. A\u00f1ade la letra de la unidad. 1kB= 1000 bytes . -b , -k , -m |Muestra el tama\u00f1o en -b bytes, -k kilobytes o -m megabytes, sin letra. --max-depth [ n ]|S\u00f3lo avanza el nivel n de profundidad en subcarpetas.","title":"Espacio en disco usado (du)"},{"location":"herramientas-it/terminal/02-operaciones_con_ficheros/#alternativa-a-du-ncdu","text":"Existe una versi\u00f3n mejorada del comando du llamada ncdu ( nCurses du ). Se trata de una versi\u00f3n que a\u00f1ade ciertos detalles y muestra la informaci\u00f3n en paneles de texto de forma un poco m\u00e1s agradable y visuales, permitiendo moverse de forma interactiva por las carpetas y realizando ciertas tareas: La primera columna nos muestra el tama\u00f1o total que ocupa dicha carpeta ( y todas sus subcarpetas ), la columna que le sigue a continuaci\u00f3n refleja el porcentaje sobre el resto de carpetas. Existe otra columna num\u00e9rica que nos indica el n\u00famero de \u00edtems ( ficheros y carpetas ) que incluye dicha carpeta. Opci\u00f3n |Significado --color [ tema ]|Muestra la interfaz con un tema concreto. Opciones posibles: off y dark . -o [ fichero ]|En lugar de mostrar por pantalla, guarda los resultados en un fichero JSON. -f [ fichero ]|Carga los datos del fichero JSON indicado (guardado por el m\u00e9todo anterior). --si |Usa potencias de 1000 (KB, MB...) en lugar de potencias de 1024 (KiB, MiB...). Recuerda que puedes manejar la interfaz interactiva de ncdu con los siguientes atajos r\u00e1pidos , movi\u00e9ndonos entre las carpetas y accediendo a ellas: Atajo Acci\u00f3n k / \u2191 Retroceder al fichero o carpeta anterior. j / \u2193 Avanzar al fichero o carpeta siguiente. ENTER Acceder a la carpeta seleccionada y ver su contenido. i Informaci\u00f3n sobre la carpeta o fichero n Ordena por nombre (orden alfab\u00e9tico). s Ordena por tama\u00f1o ocupado de la carpeta. C Ordena por n\u00famero de items que contiene. d Borrar carpeta o fichero. g Mostrar porcentaje en disco c Mostrar la cantidad de archivos y carpetas que contiene","title":"Alternativa a du (ncdu)"},{"location":"herramientas-it/terminal/02-operaciones_con_ficheros/#alternativa-a-du-dutree","text":"Otra alternativa que nos puede resultar interesantes es dutree . Est\u00e1 desarrollada en Rust, y puede instalarse con cargo install dutree . Tiene un enfoque m\u00e1s b\u00e1sico y menos interactivo que ncdu pero puede resultar m\u00e1s interesante o flexible en algunos casos. Por ejemplo, en la imagen anterior le pedimos a dutree que nos muestre solo las carpetas del primer nivel de profundidad con --depth=1 , mientras que le decimos que descarte y agrupe todas las carpetas que ocupen menos de 20 MiB con --aggr=20M . Otros par\u00e1metros interesantes podr\u00edan ser --no-hidden que excluye los ficheros ocultos ( los que empiezan por . ) o --files-only que excluye las carpetas y se centra en ficheros, por si lo que queremos es analizar el contenido de la carpeta actual y no centrarnos en subcarpetas. Otro comando muy similar es du-dust ( dust ), el cu\u00e1l tambi\u00e9n est\u00e1 desarrollado en Rust. Fuente: https://terminaldelinux.com/","title":"Alternativa a du (dutree)"},{"location":"herramientas-it/terminal/03-administraci%C3%B3n_del_sistema/","text":"Aministraci\u00f3n del sistema \u00b6 Instalar paquetes con apt-get \u00b6 Las distribuciones de GNU/Linux tienen un sistema denominado gestor o administrador de paquetes que permite instalar aplicaciones ( llamados paquetes en linux ) directamente desde la l\u00ednea de comandos, sin tener que acceder a una p\u00e1gina concreta, descargar archivos o ejecutarlos. Todo ello se hace de forma transparente y autom\u00e1tica mediante el mencionado gestor, que en distribuciones basadas en Debian se llama apt ( Advanced Packaging Tool ). Esta es la forma m\u00e1s c\u00f3moda y autom\u00e1tica de instalar paquetes desde una l\u00ednea de comandos. Tambi\u00e9n tenemos el comando dpkg , que sirve para instalar de forma manual los paquetes ( es lo que usa por debajo apt ) y, por \u00faltimo, tenemos la forma m\u00e1s manual que existe: compilar el programa de su c\u00f3digo fuente a un archivo ejecutable. Pero de eso hablaremos en otro momento. Volviendo a la instalaci\u00f3n autom\u00e1tica de paquetes , existen varios comandos relacionados: Comando Descripci\u00f3n dpkg Gestor de paquetes .deb para instalar aplicaciones Debian manualmente. apt-get Comando de bajo nivel para instalar paquetes y dependencias de forma autom\u00e1tica. apt-cache Comando de bajo nivel para consultar la cach\u00e9 de apt . apt Versi\u00f3n moderna y amigable del gestor de paquetes apt-get , destinada a usuarios finales. Existen algunos otros comando de gesti\u00f3n de instalaci\u00f3n de paquetes como aptitude , synaptic ( entorno gr\u00e1fico ) o wajig , pero no son el objeto de este art\u00edculo, ya que son menos populares o alternativas para otros contextos. Instalaci\u00f3n manual (dpkg) \u00b6 En Linux, m\u00e1s concretamente en Debian ( o distribuciones de Linux basadas en \u00e9l ), el formato de paqueter\u00eda que se utiliza para instalar aplicaciones es .deb ( Debian Packages ). Si quisieramos instalar un paquete de forma manual, tendr\u00edamos que descargar este archivo .deb y desde una l\u00ednea de comandos escribir: $ dpkg -i nombre_archivo.deb Al igual que instalamos un paquete con el par\u00e1metro -i ( install ), podemos desinstalarlo con el par\u00e1metro -r ( remove ) o ver su contenido con -l ( list ). En la instalaci\u00f3n, el comando dpkg ( Debian Package ) se encargar\u00eda de desempaquetar e instalar el paquete, despu\u00e9s de comprobar si tenemos todas las dependencias ( otros paquetes ) necesarias instaladas. Como todo este trabajo puede llegar a ser muy laborioso si hay muchas dependencias, se ide\u00f3 apt , un gestor de paquetes que har\u00eda todo esto de forma autom\u00e1tica por nosotros, b\u00fasqueda e instalaci\u00f3n de dependencias incluida. Instalaci\u00f3n autom\u00e1tica (apt) \u00b6 El gestor de paquetes apt nos permite instalar de forma muy sencilla aplicaciones y programas a trav\u00e9s del comando apt ( o apt-get si queremos usar el comando de bajo nivel ). Una vez dicho esto, veamos cuales son los par\u00e1metros m\u00e1s frecuentes de apt : Comando Descripci\u00f3n apt update Actualiza la lista de paquetes disponibles desde los repositorios oficiales. apt search <palabra> Busca una o varias palabras en la lista de paquetes disponibles. apt list Lista todos los paquetes disponibles para instalar o instalados en el sistema. apt install <paquete> Instala el paquete indicado en el sistema. apt remove <paquete> Desinstala el paquete indicado del sistema. apt purge <paquete> Desinstala el paquete indicado y elimina sus archivos de configuraci\u00f3n. En primer lugar, debemos diferenciar bien un paquete ( aplicaci\u00f3n o programa ), de la lista de paquetes disponibles , que es un \u00edndice donde se encuentran todos los paquetes instalables desde apt. Esta lista se suele actualizar ( para tener la \u00faltima disponible ) mediante apt update , como veremos a continuaci\u00f3n. Actualizar lista de paquetes \u00b6 Lo primero que se debe hacer es ejecutar la l\u00ednea de comandos apt update . Este comando lo que har\u00e1 es actualizar la lista de paquetes disponibles para instalar , que puede estar obsoleta si han pasado varios d\u00edas desde la \u00faltima vez que lo hicimos, o incluso puede estar vac\u00eda si no lo hemos hecho nunca. Consejo Por defecto ( sobre todo si usas Docker ), las distribuciones suelen venir con esta lista ( \u00edndice de paquetes ) vac\u00eda, por lo que si hacemos un apt install o apt search es probable que no nos encuentre nada. Hay que hacer un apt update antes. Si nos aparece un mensaje como el siguiente, es que no tenemos permisos para actualizar listas o instalar paquetes. Lo correcto ser\u00eda hacerlo con privilegios de root, utilizando sudo antes del comando apt update : $ apt update Reading package lists... Done E: Could not open lock file /var/lib/apt/lists/lock - open (13: Permission denied) E: Unable to lock directory /var/lib/apt/lists/ W: Problem unlinking the file /var/cache/apt/pkgcache.bin - RemoveCaches (13: Permission denied) W: Problem unlinking the file /var/cache/apt/srcpkgcache.bin - RemoveCaches (13: Permission denied) Buscar paquetes con apt \u00b6 Para buscar paquetes con apt , solo tenemos que usar el par\u00e1metro apt search seguido de la palabra ( o palabras ) que queramos buscar: $ apt search tint2 Sorting... Done Full Text Search... Done gsimplecal/stable 2.1-1+b1 amd64 lightweight GUI calendar application pnmixer/stable 0.7.2-1 amd64 Simple mixer application for system tray tint2/stable 16.6.1-1 amd64 lightweight taskbar Esto nos muestra una lista de paquetes que coinciden con los t\u00e9rminos que hemos buscado, ya sea porque es el paquete concreto, porque contiene la palabra en su nombre, o porque se cita en la descripci\u00f3n o en alguna palabra clave relacionada. Nota Si lo que queremos es m\u00e1s informaci\u00f3n sobre un paquete en particular, podemos utilizar el comando apt show <paquete> donde se nos mostrar\u00e1n detalles como la versi\u00f3n, el usuario que mantiene el paquete, tama\u00f1o de instalaci\u00f3n, dependencias, etc... Ver paquetes instalados \u00b6 Un poco m\u00e1s amplio es el objetivo de apt list , el cu\u00e1l nos muestra la lista de paquetes disponibles para instalar , en un formato m\u00e1s compacto, donde cada l\u00ednea es un paquete y no muestra descripci\u00f3n. Esto es \u00fatil si queremos filtrar haciendo un apt list | grep tint2 por ejemplo. En este caso, solo filtraremos por nombre del paquete. Si lo que queremos es ver un listado de los paquetes instalados en nuestro sistema, simplemente hay que escribir: apt list --installed . Por otro lado, apt list --upgradable nos muestra un listado de los paquetes que tienen actualizaci\u00f3n disponible. Instalar paquetes con apt \u00b6 Probablemente, lo que m\u00e1s nos interese es saber como instalar un paquete con apt . Es algo tan sencillo como escribir apt install seguido del nombre del paquete. En muchas ocasiones, apt nos preguntar\u00e1 si estamos seguros de querer continuar, teniendo que pulsar Y o N. Es posible omitir esta pregunta utilizando el flag -y : $ sudo apt install mp3blaster -y Nota En el caso de querer instalar varios paquetes, puedes establecer una lista de ellos separados por espacio y apt los descargar\u00e1 e instalar\u00e1 uno detr\u00e1s de otro. Desinstalar paquetes con apt \u00b6 En el caso de que queramos desinstalar un paquete de nuestro sistema, podremos utilizar apt remove seguido del nombre del paquete. Esto eliminar\u00e1 dicho paquete de nuestro sistema, exceptuando los ficheros de configuraci\u00f3n que pudieramos haber modificado. En el caso de que desinstalemos un programa sin querer, con volverlo a instalar recuperaremos su configuraci\u00f3n habitual. En el caso de que estemos seguros completamente y/o queramos eliminar por completo la aplicaci\u00f3n, incluyendo tambi\u00e9n los archivos de configuraci\u00f3n, podemos utilizar el comando apt purge seguido del nombre del paquete, en lugar de utilizar apt remove . Operaciones de mantenimiento \u00b6 Otra de las ventajas de apt , es que tambi\u00e9n permite realizar tareas de mantenimiento o actualizar nuestro sistema mediante algunos de sus comandos. Los m\u00e1s populares son los siguientes: Comando Descripci\u00f3n apt upgrade Actualiza todos los paquetes instalados que tengan versiones nuevas. apt full-upgrade Actualiza los paquetes importantes del sistema operativo. apt autoremove Elimina paquetes que ya no son necesarios y quedaron en alguna desinstalaci\u00f3n. apt edit-sources Edita los repositorios de donde se obtienen los paquetes (ver m\u00e1s adelante). Por ejemplo, apt upgrade ( no confundir con apt update ) permite actualizar todos los paquetes instalados que no se encuentren en su \u00faltima versi\u00f3n. Es una excelente forma de mantener el software de tu sistema actualizado sin demasiadas complicaciones. El comando apt full-upgrade nos permite realizar una actualizaci\u00f3n completa del sistema. En el caso de apt upgrade , s\u00f3lo nos actualizar\u00e1 paquetes que pasan a una nueva versi\u00f3n, pero en el caso de apt full-upgrade tambi\u00e9n eliminar\u00e1 paquetes instalados en el caso de que sea necesario, como suele serlo en las actualizaciones importantes del sistema. Por \u00faltimo, apt autoremove es un comando que permite eliminar paquetes que, tras una actualizaci\u00f3n, han pasado a ser paquetes hu\u00e9rfanos ( que ya no son utilizados ) y pueden eliminarse de forma segura para hacer espacio en el disco. Del nuevo comando apt edit-sources hablaremos un poco m\u00e1s adelante, en el apartado de Editar los repositorios . Equivalencias de apt y apt-get \u00b6 Si quieres saber la equivalencia de los comandos entre apt vs apt-get , puedes echar un vistazo a la siguiente tabla: Comando apt Equivalencia a comando apt-get o forma cl\u00e1sica apt update apt-get update apt install <paquete> apt-get install <paquete> apt search <paquete> apt-cache search <paquete> apt list apt-cache search ^ apt list --installed dpkg -l o dpkg --get-selections apt remove apt-get remove <paquete> apt reinstall <paquete> apt-get purge <paquete> && apt-get install <paquete> apt upgrade apt-get upgrade apt full-upgrade apt-get dist-upgrade apt edit-sources sudo vim /etc/apt/sources.list Recuerda que las instalaciones se pueden realizar tanto desde apt como desde el comando de bajo nivel apt-get . Ambos sirven para lo mismo, pero apt est\u00e1 destinado a ser una opci\u00f3n m\u00e1s sencilla y atractiva ( usa colores, barras de progreso, simplifica tareas, etc... ) que apt-get , el cu\u00e1l es un comando m\u00e1s a bajo nivel, que puede ser m\u00e1s interesante para crear scripts o realizar tareas automatizadas. Editar los repositorios \u00b6 Las listas de paquetes de Debian se actualizan desde los repositorios definidos en el fichero /etc/apt/sources.list . En \u00e9l, se suelen encontrar los repositorios que estamos utilizando, uno por l\u00ednea. Algo similar a lo siguiente: deb http://deb.debian.org/debian stretch main deb http://security.debian.org/debian-security stretch/updates main deb http://deb.debian.org/debian stretch-updates main Observa que donde aparece la palabra clave buster est\u00e1 indicando la versi\u00f3n del sistema operativo. En el caso de Debian, cada versi\u00f3n del sistema operativo es definida por una palabra clave que es un personaje de Toy Story : Debian 7: wheezy (2013) Debian 8: jessie (2015) Debian 9: stretch (2017) Debian 10: buster (2019) Debian 11: bullseye (pr\u00f3xima) Debian 12: bookworm (futuro) Actualizaci\u00f3n de Debian \u00b6 Sabiendo esto, es muy sencillo configurar los repositorios para actualizar nuestro sistema a las futuras versiones. Imaginemos que tenemos un sistema con Debian 9 ( stretch ) como el del ejemplo anterior. Para actualizarlo a Debian 10 ( buster ), podemos hacer lo siguiente: sed s/stretch/buster/g /etc/apt/sources.list >/tmp/sources.list sudo mv /tmp/sources.list /etc/apt/sources.list Con sed y una expresi\u00f3n regular, hemos reemplazado stretch por buster , por lo que nuestro fichero /etc/apt/sources.list deber\u00eda ser ahora el siguiente: deb http://deb.debian.org/debian buster main deb http://security.debian.org/debian-security buster/updates main deb http://deb.debian.org/debian buster-updates main Con un sudo apt update && sudo apt upgrade deber\u00edamos tener la distribuci\u00f3n y todos sus paquetes actualizados. Ampliaci\u00f3n de repositorios \u00b6 Comentar tambi\u00e9n que, por defecto, debian incorpora su repositorio principal ( debian ), su repositorio de actualizaciones de seguridad ( debian-security ) y su repositorio de actualizaciones por versi\u00f3n ( buster-updates en este caso ). Podemos ampliar estos repositorios para tener m\u00e1s paquetes a nuestra disposici\u00f3n. Veamos un fichero /etc/apt/sources.list ampliado: deb http://deb.debian.org/debian buster main contrib non-free deb http://deb.debian.org/debian buster-updates main contrib non-free deb http://security.debian.org/debian-security/ buster/updates main contrib non-free deb http://deb.debian.org/debian buster-backports main contrib non-free Si nos fijamos, cada repositorio ( cada l\u00ednea ) tiene las palabras clave contrib y non-free . Esto hace que dichos repositorios no s\u00f3lo muestren los paquetes generales, sino tambi\u00e9n los que son contribuciones de la comunidad ( contrib ) o los paquetes privativos ( non-free ). La \u00faltima l\u00ednea tiene un repositorio adicional buster-backports . Este es el llamado repositorio de retroimportaciones . Se trata de paquetes considerados inestables, pero mucho m\u00e1s actualizados que otros, por si se quisiera tener versiones m\u00e1s modernas, que las versiones estables consideradas por Debian. En muchos casos, encontrar\u00e1s una carpeta adicional /etc/apt/sources.list.d/ que contiene algunos archivos. Son repositorios adicionales particulares, divididos en archivos separados para ser m\u00e1s f\u00e1cil de gestionar por herramientas autom\u00e1ticas. Muchas aplicaciones como node , docker u otros, utilizan este sistema para a\u00f1adir sus propios repositorios de actualizaciones. Poderes de super vaca \u00b6 Si nos fijamos bien, al ejecutar apt nos aparece al final el mensaje This APT has Super Cow Powers ( Este APT tiene poderes de super vaca ). Se trata de un huevo de pascua donde podemos ver a una vaquita escribiendo apt moo , apt moo moo o apt moo moo moo : El mensaje Have you mooed today? es una referencia al eslogan de las campa\u00f1as de Microsoft de los a\u00f1os 90, \u00bfA d\u00f3nde quieres ir hoy? Where do you want to go today? . Fuente: https://terminaldelinux.com/","title":"Administraci\u00f3n del sistema"},{"location":"herramientas-it/terminal/03-administraci%C3%B3n_del_sistema/#aministracion-del-sistema","text":"","title":"Aministraci\u00f3n del sistema"},{"location":"herramientas-it/terminal/03-administraci%C3%B3n_del_sistema/#instalar-paquetes-con-apt-get","text":"Las distribuciones de GNU/Linux tienen un sistema denominado gestor o administrador de paquetes que permite instalar aplicaciones ( llamados paquetes en linux ) directamente desde la l\u00ednea de comandos, sin tener que acceder a una p\u00e1gina concreta, descargar archivos o ejecutarlos. Todo ello se hace de forma transparente y autom\u00e1tica mediante el mencionado gestor, que en distribuciones basadas en Debian se llama apt ( Advanced Packaging Tool ). Esta es la forma m\u00e1s c\u00f3moda y autom\u00e1tica de instalar paquetes desde una l\u00ednea de comandos. Tambi\u00e9n tenemos el comando dpkg , que sirve para instalar de forma manual los paquetes ( es lo que usa por debajo apt ) y, por \u00faltimo, tenemos la forma m\u00e1s manual que existe: compilar el programa de su c\u00f3digo fuente a un archivo ejecutable. Pero de eso hablaremos en otro momento. Volviendo a la instalaci\u00f3n autom\u00e1tica de paquetes , existen varios comandos relacionados: Comando Descripci\u00f3n dpkg Gestor de paquetes .deb para instalar aplicaciones Debian manualmente. apt-get Comando de bajo nivel para instalar paquetes y dependencias de forma autom\u00e1tica. apt-cache Comando de bajo nivel para consultar la cach\u00e9 de apt . apt Versi\u00f3n moderna y amigable del gestor de paquetes apt-get , destinada a usuarios finales. Existen algunos otros comando de gesti\u00f3n de instalaci\u00f3n de paquetes como aptitude , synaptic ( entorno gr\u00e1fico ) o wajig , pero no son el objeto de este art\u00edculo, ya que son menos populares o alternativas para otros contextos.","title":"Instalar paquetes con apt-get"},{"location":"herramientas-it/terminal/03-administraci%C3%B3n_del_sistema/#instalacion-manual-dpkg","text":"En Linux, m\u00e1s concretamente en Debian ( o distribuciones de Linux basadas en \u00e9l ), el formato de paqueter\u00eda que se utiliza para instalar aplicaciones es .deb ( Debian Packages ). Si quisieramos instalar un paquete de forma manual, tendr\u00edamos que descargar este archivo .deb y desde una l\u00ednea de comandos escribir: $ dpkg -i nombre_archivo.deb Al igual que instalamos un paquete con el par\u00e1metro -i ( install ), podemos desinstalarlo con el par\u00e1metro -r ( remove ) o ver su contenido con -l ( list ). En la instalaci\u00f3n, el comando dpkg ( Debian Package ) se encargar\u00eda de desempaquetar e instalar el paquete, despu\u00e9s de comprobar si tenemos todas las dependencias ( otros paquetes ) necesarias instaladas. Como todo este trabajo puede llegar a ser muy laborioso si hay muchas dependencias, se ide\u00f3 apt , un gestor de paquetes que har\u00eda todo esto de forma autom\u00e1tica por nosotros, b\u00fasqueda e instalaci\u00f3n de dependencias incluida.","title":"Instalaci\u00f3n manual (dpkg)"},{"location":"herramientas-it/terminal/03-administraci%C3%B3n_del_sistema/#instalacion-automatica-apt","text":"El gestor de paquetes apt nos permite instalar de forma muy sencilla aplicaciones y programas a trav\u00e9s del comando apt ( o apt-get si queremos usar el comando de bajo nivel ). Una vez dicho esto, veamos cuales son los par\u00e1metros m\u00e1s frecuentes de apt : Comando Descripci\u00f3n apt update Actualiza la lista de paquetes disponibles desde los repositorios oficiales. apt search <palabra> Busca una o varias palabras en la lista de paquetes disponibles. apt list Lista todos los paquetes disponibles para instalar o instalados en el sistema. apt install <paquete> Instala el paquete indicado en el sistema. apt remove <paquete> Desinstala el paquete indicado del sistema. apt purge <paquete> Desinstala el paquete indicado y elimina sus archivos de configuraci\u00f3n. En primer lugar, debemos diferenciar bien un paquete ( aplicaci\u00f3n o programa ), de la lista de paquetes disponibles , que es un \u00edndice donde se encuentran todos los paquetes instalables desde apt. Esta lista se suele actualizar ( para tener la \u00faltima disponible ) mediante apt update , como veremos a continuaci\u00f3n.","title":"Instalaci\u00f3n autom\u00e1tica (apt)"},{"location":"herramientas-it/terminal/03-administraci%C3%B3n_del_sistema/#actualizar-lista-de-paquetes","text":"Lo primero que se debe hacer es ejecutar la l\u00ednea de comandos apt update . Este comando lo que har\u00e1 es actualizar la lista de paquetes disponibles para instalar , que puede estar obsoleta si han pasado varios d\u00edas desde la \u00faltima vez que lo hicimos, o incluso puede estar vac\u00eda si no lo hemos hecho nunca. Consejo Por defecto ( sobre todo si usas Docker ), las distribuciones suelen venir con esta lista ( \u00edndice de paquetes ) vac\u00eda, por lo que si hacemos un apt install o apt search es probable que no nos encuentre nada. Hay que hacer un apt update antes. Si nos aparece un mensaje como el siguiente, es que no tenemos permisos para actualizar listas o instalar paquetes. Lo correcto ser\u00eda hacerlo con privilegios de root, utilizando sudo antes del comando apt update : $ apt update Reading package lists... Done E: Could not open lock file /var/lib/apt/lists/lock - open (13: Permission denied) E: Unable to lock directory /var/lib/apt/lists/ W: Problem unlinking the file /var/cache/apt/pkgcache.bin - RemoveCaches (13: Permission denied) W: Problem unlinking the file /var/cache/apt/srcpkgcache.bin - RemoveCaches (13: Permission denied)","title":"Actualizar lista de paquetes"},{"location":"herramientas-it/terminal/03-administraci%C3%B3n_del_sistema/#buscar-paquetes-con-apt","text":"Para buscar paquetes con apt , solo tenemos que usar el par\u00e1metro apt search seguido de la palabra ( o palabras ) que queramos buscar: $ apt search tint2 Sorting... Done Full Text Search... Done gsimplecal/stable 2.1-1+b1 amd64 lightweight GUI calendar application pnmixer/stable 0.7.2-1 amd64 Simple mixer application for system tray tint2/stable 16.6.1-1 amd64 lightweight taskbar Esto nos muestra una lista de paquetes que coinciden con los t\u00e9rminos que hemos buscado, ya sea porque es el paquete concreto, porque contiene la palabra en su nombre, o porque se cita en la descripci\u00f3n o en alguna palabra clave relacionada. Nota Si lo que queremos es m\u00e1s informaci\u00f3n sobre un paquete en particular, podemos utilizar el comando apt show <paquete> donde se nos mostrar\u00e1n detalles como la versi\u00f3n, el usuario que mantiene el paquete, tama\u00f1o de instalaci\u00f3n, dependencias, etc...","title":"Buscar paquetes con apt"},{"location":"herramientas-it/terminal/03-administraci%C3%B3n_del_sistema/#ver-paquetes-instalados","text":"Un poco m\u00e1s amplio es el objetivo de apt list , el cu\u00e1l nos muestra la lista de paquetes disponibles para instalar , en un formato m\u00e1s compacto, donde cada l\u00ednea es un paquete y no muestra descripci\u00f3n. Esto es \u00fatil si queremos filtrar haciendo un apt list | grep tint2 por ejemplo. En este caso, solo filtraremos por nombre del paquete. Si lo que queremos es ver un listado de los paquetes instalados en nuestro sistema, simplemente hay que escribir: apt list --installed . Por otro lado, apt list --upgradable nos muestra un listado de los paquetes que tienen actualizaci\u00f3n disponible.","title":"Ver paquetes instalados"},{"location":"herramientas-it/terminal/03-administraci%C3%B3n_del_sistema/#instalar-paquetes-con-apt","text":"Probablemente, lo que m\u00e1s nos interese es saber como instalar un paquete con apt . Es algo tan sencillo como escribir apt install seguido del nombre del paquete. En muchas ocasiones, apt nos preguntar\u00e1 si estamos seguros de querer continuar, teniendo que pulsar Y o N. Es posible omitir esta pregunta utilizando el flag -y : $ sudo apt install mp3blaster -y Nota En el caso de querer instalar varios paquetes, puedes establecer una lista de ellos separados por espacio y apt los descargar\u00e1 e instalar\u00e1 uno detr\u00e1s de otro.","title":"Instalar paquetes con apt"},{"location":"herramientas-it/terminal/03-administraci%C3%B3n_del_sistema/#desinstalar-paquetes-con-apt","text":"En el caso de que queramos desinstalar un paquete de nuestro sistema, podremos utilizar apt remove seguido del nombre del paquete. Esto eliminar\u00e1 dicho paquete de nuestro sistema, exceptuando los ficheros de configuraci\u00f3n que pudieramos haber modificado. En el caso de que desinstalemos un programa sin querer, con volverlo a instalar recuperaremos su configuraci\u00f3n habitual. En el caso de que estemos seguros completamente y/o queramos eliminar por completo la aplicaci\u00f3n, incluyendo tambi\u00e9n los archivos de configuraci\u00f3n, podemos utilizar el comando apt purge seguido del nombre del paquete, en lugar de utilizar apt remove .","title":"Desinstalar paquetes con apt"},{"location":"herramientas-it/terminal/03-administraci%C3%B3n_del_sistema/#operaciones-de-mantenimiento","text":"Otra de las ventajas de apt , es que tambi\u00e9n permite realizar tareas de mantenimiento o actualizar nuestro sistema mediante algunos de sus comandos. Los m\u00e1s populares son los siguientes: Comando Descripci\u00f3n apt upgrade Actualiza todos los paquetes instalados que tengan versiones nuevas. apt full-upgrade Actualiza los paquetes importantes del sistema operativo. apt autoremove Elimina paquetes que ya no son necesarios y quedaron en alguna desinstalaci\u00f3n. apt edit-sources Edita los repositorios de donde se obtienen los paquetes (ver m\u00e1s adelante). Por ejemplo, apt upgrade ( no confundir con apt update ) permite actualizar todos los paquetes instalados que no se encuentren en su \u00faltima versi\u00f3n. Es una excelente forma de mantener el software de tu sistema actualizado sin demasiadas complicaciones. El comando apt full-upgrade nos permite realizar una actualizaci\u00f3n completa del sistema. En el caso de apt upgrade , s\u00f3lo nos actualizar\u00e1 paquetes que pasan a una nueva versi\u00f3n, pero en el caso de apt full-upgrade tambi\u00e9n eliminar\u00e1 paquetes instalados en el caso de que sea necesario, como suele serlo en las actualizaciones importantes del sistema. Por \u00faltimo, apt autoremove es un comando que permite eliminar paquetes que, tras una actualizaci\u00f3n, han pasado a ser paquetes hu\u00e9rfanos ( que ya no son utilizados ) y pueden eliminarse de forma segura para hacer espacio en el disco. Del nuevo comando apt edit-sources hablaremos un poco m\u00e1s adelante, en el apartado de Editar los repositorios .","title":"Operaciones de mantenimiento"},{"location":"herramientas-it/terminal/03-administraci%C3%B3n_del_sistema/#equivalencias-de-apt-y-apt-get","text":"Si quieres saber la equivalencia de los comandos entre apt vs apt-get , puedes echar un vistazo a la siguiente tabla: Comando apt Equivalencia a comando apt-get o forma cl\u00e1sica apt update apt-get update apt install <paquete> apt-get install <paquete> apt search <paquete> apt-cache search <paquete> apt list apt-cache search ^ apt list --installed dpkg -l o dpkg --get-selections apt remove apt-get remove <paquete> apt reinstall <paquete> apt-get purge <paquete> && apt-get install <paquete> apt upgrade apt-get upgrade apt full-upgrade apt-get dist-upgrade apt edit-sources sudo vim /etc/apt/sources.list Recuerda que las instalaciones se pueden realizar tanto desde apt como desde el comando de bajo nivel apt-get . Ambos sirven para lo mismo, pero apt est\u00e1 destinado a ser una opci\u00f3n m\u00e1s sencilla y atractiva ( usa colores, barras de progreso, simplifica tareas, etc... ) que apt-get , el cu\u00e1l es un comando m\u00e1s a bajo nivel, que puede ser m\u00e1s interesante para crear scripts o realizar tareas automatizadas.","title":"Equivalencias de apt y apt-get"},{"location":"herramientas-it/terminal/03-administraci%C3%B3n_del_sistema/#editar-los-repositorios","text":"Las listas de paquetes de Debian se actualizan desde los repositorios definidos en el fichero /etc/apt/sources.list . En \u00e9l, se suelen encontrar los repositorios que estamos utilizando, uno por l\u00ednea. Algo similar a lo siguiente: deb http://deb.debian.org/debian stretch main deb http://security.debian.org/debian-security stretch/updates main deb http://deb.debian.org/debian stretch-updates main Observa que donde aparece la palabra clave buster est\u00e1 indicando la versi\u00f3n del sistema operativo. En el caso de Debian, cada versi\u00f3n del sistema operativo es definida por una palabra clave que es un personaje de Toy Story : Debian 7: wheezy (2013) Debian 8: jessie (2015) Debian 9: stretch (2017) Debian 10: buster (2019) Debian 11: bullseye (pr\u00f3xima) Debian 12: bookworm (futuro)","title":"Editar los repositorios"},{"location":"herramientas-it/terminal/03-administraci%C3%B3n_del_sistema/#actualizacion-de-debian","text":"Sabiendo esto, es muy sencillo configurar los repositorios para actualizar nuestro sistema a las futuras versiones. Imaginemos que tenemos un sistema con Debian 9 ( stretch ) como el del ejemplo anterior. Para actualizarlo a Debian 10 ( buster ), podemos hacer lo siguiente: sed s/stretch/buster/g /etc/apt/sources.list >/tmp/sources.list sudo mv /tmp/sources.list /etc/apt/sources.list Con sed y una expresi\u00f3n regular, hemos reemplazado stretch por buster , por lo que nuestro fichero /etc/apt/sources.list deber\u00eda ser ahora el siguiente: deb http://deb.debian.org/debian buster main deb http://security.debian.org/debian-security buster/updates main deb http://deb.debian.org/debian buster-updates main Con un sudo apt update && sudo apt upgrade deber\u00edamos tener la distribuci\u00f3n y todos sus paquetes actualizados.","title":"Actualizaci\u00f3n de Debian"},{"location":"herramientas-it/terminal/03-administraci%C3%B3n_del_sistema/#ampliacion-de-repositorios","text":"Comentar tambi\u00e9n que, por defecto, debian incorpora su repositorio principal ( debian ), su repositorio de actualizaciones de seguridad ( debian-security ) y su repositorio de actualizaciones por versi\u00f3n ( buster-updates en este caso ). Podemos ampliar estos repositorios para tener m\u00e1s paquetes a nuestra disposici\u00f3n. Veamos un fichero /etc/apt/sources.list ampliado: deb http://deb.debian.org/debian buster main contrib non-free deb http://deb.debian.org/debian buster-updates main contrib non-free deb http://security.debian.org/debian-security/ buster/updates main contrib non-free deb http://deb.debian.org/debian buster-backports main contrib non-free Si nos fijamos, cada repositorio ( cada l\u00ednea ) tiene las palabras clave contrib y non-free . Esto hace que dichos repositorios no s\u00f3lo muestren los paquetes generales, sino tambi\u00e9n los que son contribuciones de la comunidad ( contrib ) o los paquetes privativos ( non-free ). La \u00faltima l\u00ednea tiene un repositorio adicional buster-backports . Este es el llamado repositorio de retroimportaciones . Se trata de paquetes considerados inestables, pero mucho m\u00e1s actualizados que otros, por si se quisiera tener versiones m\u00e1s modernas, que las versiones estables consideradas por Debian. En muchos casos, encontrar\u00e1s una carpeta adicional /etc/apt/sources.list.d/ que contiene algunos archivos. Son repositorios adicionales particulares, divididos en archivos separados para ser m\u00e1s f\u00e1cil de gestionar por herramientas autom\u00e1ticas. Muchas aplicaciones como node , docker u otros, utilizan este sistema para a\u00f1adir sus propios repositorios de actualizaciones.","title":"Ampliaci\u00f3n de repositorios"},{"location":"herramientas-it/terminal/03-administraci%C3%B3n_del_sistema/#poderes-de-super-vaca","text":"Si nos fijamos bien, al ejecutar apt nos aparece al final el mensaje This APT has Super Cow Powers ( Este APT tiene poderes de super vaca ). Se trata de un huevo de pascua donde podemos ver a una vaquita escribiendo apt moo , apt moo moo o apt moo moo moo : El mensaje Have you mooed today? es una referencia al eslogan de las campa\u00f1as de Microsoft de los a\u00f1os 90, \u00bfA d\u00f3nde quieres ir hoy? Where do you want to go today? . Fuente: https://terminaldelinux.com/","title":"Poderes de super vaca"},{"location":"herramientas-it/terminal/04-comando_touch/","text":"C\u00f3mo usar el comando touch de Linux \u00b6 El comando touch de Linux se usa principalmente para crear archivos vac\u00edos y cambiar marcas de tiempo de archivos o carpetas. La informaci\u00f3n de marca de tiempo de los archivos consta de tres atributos: tiempo de acceso, tiempo de modificaci\u00f3n y tiempo de cambio. \u00bfQu\u00e9 es una marca de tiempo en Linux? \u00b6 En Linux, cada archivo y carpeta tiene una marca de tiempo asociada que proporciona informaci\u00f3n sobre cu\u00e1ndo se modific\u00f3 el contenido de un archivo o sus atributos. Hay tres tipos de marcas de tiempo: Tiempo de acceso (atime): la \u00faltima vez que se ley\u00f3 un archivo. Tiempo de modificaci\u00f3n (mtime): la \u00faltima vez que se modific\u00f3 el contenido de un archivo. Al igual que el tiempo de acceso, tambi\u00e9n forma parte de los metadatos del estado de los archivos. Tiempo de cambios realizados (ctime): la \u00faltima vez que se modificaron los metadatos de un archivo (por ejemplo, permisos) Debido que atime y mtime son parte de los metadatos de estado de un archivo, cambiar atime o mtime de un archivo da como resultado ctime, en el cual se establece autom\u00e1ticamente la fecha actual. No hay forma de configurar o cambiar el ctime manualmente. El comando touch de Ubuntu \u2013 Linux se usa principalmente para manipular el tiempo de acceso y modificaci\u00f3n de los archivos mediante el uso de varias opciones como se describe a continuaci\u00f3n. \u00a1Recuerda, antes de usar el comando t\u00e1ctil, necesitar\u00e1s acceder a tu VPS usando SSH ! Sintaxis del comando t\u00e1ctil de Linux \u00b6 La sintaxis del comando t\u00e1ctil es: touch [opciones] [nombre_archivo] La siguiente secci\u00f3n lista los usos del comando touch de Linux al incluir las distintas opciones disponibles. Crear un archivo usando Touch \u00b6 El comando touch sin ninguna opci\u00f3n crea un nuevo archivo. Si el archivo existe, el comando actualizar\u00e1 el tiempo de acceso y de modificaci\u00f3n a la hora actual sin cambiar su contenido: touch nombre_archivo.txt Crear m\u00faltiples archivos usando Touch \u00b6 Tambi\u00e9n es posible crear m\u00faltiples archivos usando un solo comando touch. Para hacerlo, especifica los nombres de los archivos con espacios entre ellos. Se ver\u00e1 as\u00ed en la l\u00ednea de comando: touch nombre_archivo1.txt nombre_archivo2.txt nombre_archivo3.txt Puedes generar autom\u00e1ticamente los nombres de los archivos mientras se crean, como en el siguiente ejemplo: touch nombre_archivo{1..3}.txt El comando touch anterior crear\u00e1 tres archivos llamados nombre_archivo1.txt , nombre_archivo2.txt y nombre_archivo3.txt. Cambiar el tiempo de acceso usando el comando touch \u00b6 Para cambiar el tiempo de acceso de un archivo a la hora actual, usa la opci\u00f3n \u2013 a seguida del nombre del archivo con el comando touch, como en el siguiente ejemplo: touch -a nombre_archivo.txt Cambiar el tiempo de modificaci\u00f3n con Touch \u00b6 La opci\u00f3n -m junto con el comando touch cambia la hora de modificaci\u00f3n de un archivo a la hora actual: touch -m nombre_archivo1.txt Cambiar el tiempo de acceso y de modificaci\u00f3n con Touch \u00b6 Para cambiar tanto el tiempo de acceso como el tiempo de modificaci\u00f3n con un solo comando, usa las opciones \u2013 a y \u2013 m juntas: touch -am nombre_archivo1.txt Cambiar el tiempo de acceso sin crear un nuevo archivo \u00b6 Si deseas cambiar el tiempo de acceso y de modificaci\u00f3n de un archivo existente a la hora actual sin crear realmente un nuevo archivo. Usa la opci\u00f3n \u2013 c seguida del nombre del archivo con el comando touch. touch -c nombre_archivo.txt Establecer un tiempo de acceso y de modificaci\u00f3n espec\u00edficos con Touch \u00b6 Tambi\u00e9n es posible establecer el tiempo de acceso y modificaci\u00f3n de un archivo a una fecha en particular usando la opci\u00f3n -t seguida de la fecha a considerar para el cambio. Se ver\u00eda as\u00ed: touch -t 201903081047.30 nombre_archivo.txt El formato de fecha y hora debe estar en CCYYMMDDhhmm.ss donde: CC: los dos primeros d\u00edgitos del a\u00f1o YY: los dos segundos d\u00edgitos del a\u00f1o MM: El mes del a\u00f1o [01-12] DD: El d\u00eda del mes [01-31] hh: La hora del d\u00eda [00-23] Mm: El minuto de la hora [00-59] SS: El segundo del minuto [00-59] Cambiar la marca de tiempo de un archivo vinculado simb\u00f3licamente \u00b6 Cuando utilizas un nombre de archivo vinculado simb\u00f3licamente con el comando touch de Ubuntu, la informaci\u00f3n de marca de tiempo para el archivo original, es decir, el archivo que se\u00f1ala el archivo de enlace, se modifica. Para cambiar la hora de acceso y modificaci\u00f3n a la hora actual para un archivo vinculado simb\u00f3licamente, usa la opci\u00f3n \u2013 h : touch -h archivo_enlace_simb\u00f3lico Establecer la marca de tiempo utilizando otro archivo como referencia \u00b6 El comando touch de Linux tambi\u00e9n puede establecer el tiempo de acceso y modificaci\u00f3n de un archivo leyendo la informaci\u00f3n de marca de tiempo de otro archivo. Por ejemplo, el siguiente comando touch con la opci\u00f3n -r**escanear\u00e1 la informaci\u00f3n de la marca de tiempo del archivo **referencia.txt y establecer\u00e1 estos valores de marca de tiempo en el archivo nombre_archivo.txt . Veamos el ejemplo: touch -r referencia.txt nombre_archivo.txt Especificar la fecha y la hora como una cadena de caracteres usando el comando touch \u00b6 Tambi\u00e9n puedes especificar la fecha y la hora como una cadena de caraceres utilizando la opci\u00f3n -d . El siguiente ejemplo de comando touch de Linux establece la fecha en 8 de marzo y la hora se configura autom\u00e1ticamente en 00:00: touch -d '8 Mar' nombre_archivo.txt En lugar de especificar la fecha como una cadena de caracteres, puedes especificar la hora como una cadena de caracteres. En ese caso, la fecha pasar\u00e1 a ser la fecha actual autom\u00e1ticamente: touch -d '20:10 'nombre_archivo.txt Conclusi\u00f3n \u00b6 Este tutorial cubre los usos del comando touch de Linux incluyendo las opciones m\u00e1s comunes. Si tienes alg\u00fan problema asociado al uso del comando touch de Linux puedes preguntarnos en los comentarios o leer el manual usando el terminal. Fuente: https://www.hostinger.com.ar/tutoriales/usar-comando-touch-linux-ejemplos/ - Autor: Deyimar A. / @deyimar","title":"Comando Touch"},{"location":"herramientas-it/terminal/04-comando_touch/#como-usar-el-comando-touch-de-linux","text":"El comando touch de Linux se usa principalmente para crear archivos vac\u00edos y cambiar marcas de tiempo de archivos o carpetas. La informaci\u00f3n de marca de tiempo de los archivos consta de tres atributos: tiempo de acceso, tiempo de modificaci\u00f3n y tiempo de cambio.","title":"C\u00f3mo usar el comando touch de Linux"},{"location":"herramientas-it/terminal/04-comando_touch/#que-es-una-marca-de-tiempo-en-linux","text":"En Linux, cada archivo y carpeta tiene una marca de tiempo asociada que proporciona informaci\u00f3n sobre cu\u00e1ndo se modific\u00f3 el contenido de un archivo o sus atributos. Hay tres tipos de marcas de tiempo: Tiempo de acceso (atime): la \u00faltima vez que se ley\u00f3 un archivo. Tiempo de modificaci\u00f3n (mtime): la \u00faltima vez que se modific\u00f3 el contenido de un archivo. Al igual que el tiempo de acceso, tambi\u00e9n forma parte de los metadatos del estado de los archivos. Tiempo de cambios realizados (ctime): la \u00faltima vez que se modificaron los metadatos de un archivo (por ejemplo, permisos) Debido que atime y mtime son parte de los metadatos de estado de un archivo, cambiar atime o mtime de un archivo da como resultado ctime, en el cual se establece autom\u00e1ticamente la fecha actual. No hay forma de configurar o cambiar el ctime manualmente. El comando touch de Ubuntu \u2013 Linux se usa principalmente para manipular el tiempo de acceso y modificaci\u00f3n de los archivos mediante el uso de varias opciones como se describe a continuaci\u00f3n. \u00a1Recuerda, antes de usar el comando t\u00e1ctil, necesitar\u00e1s acceder a tu VPS usando SSH !","title":"\u00bfQu\u00e9 es una marca de tiempo en Linux?"},{"location":"herramientas-it/terminal/04-comando_touch/#sintaxis-del-comando-tactil-de-linux","text":"La sintaxis del comando t\u00e1ctil es: touch [opciones] [nombre_archivo] La siguiente secci\u00f3n lista los usos del comando touch de Linux al incluir las distintas opciones disponibles.","title":"Sintaxis del comando t\u00e1ctil de Linux"},{"location":"herramientas-it/terminal/04-comando_touch/#crear-un-archivo-usando-touch","text":"El comando touch sin ninguna opci\u00f3n crea un nuevo archivo. Si el archivo existe, el comando actualizar\u00e1 el tiempo de acceso y de modificaci\u00f3n a la hora actual sin cambiar su contenido: touch nombre_archivo.txt","title":"Crear un archivo usando Touch"},{"location":"herramientas-it/terminal/04-comando_touch/#crear-multiples-archivos-usando-touch","text":"Tambi\u00e9n es posible crear m\u00faltiples archivos usando un solo comando touch. Para hacerlo, especifica los nombres de los archivos con espacios entre ellos. Se ver\u00e1 as\u00ed en la l\u00ednea de comando: touch nombre_archivo1.txt nombre_archivo2.txt nombre_archivo3.txt Puedes generar autom\u00e1ticamente los nombres de los archivos mientras se crean, como en el siguiente ejemplo: touch nombre_archivo{1..3}.txt El comando touch anterior crear\u00e1 tres archivos llamados nombre_archivo1.txt , nombre_archivo2.txt y nombre_archivo3.txt.","title":"Crear m\u00faltiples archivos usando Touch"},{"location":"herramientas-it/terminal/04-comando_touch/#cambiar-el-tiempo-de-acceso-usando-el-comando-touch","text":"Para cambiar el tiempo de acceso de un archivo a la hora actual, usa la opci\u00f3n \u2013 a seguida del nombre del archivo con el comando touch, como en el siguiente ejemplo: touch -a nombre_archivo.txt","title":"Cambiar el tiempo de acceso usando el comando touch"},{"location":"herramientas-it/terminal/04-comando_touch/#cambiar-el-tiempo-de-modificacion-con-touch","text":"La opci\u00f3n -m junto con el comando touch cambia la hora de modificaci\u00f3n de un archivo a la hora actual: touch -m nombre_archivo1.txt","title":"Cambiar el tiempo de modificaci\u00f3n con Touch"},{"location":"herramientas-it/terminal/04-comando_touch/#cambiar-el-tiempo-de-acceso-y-de-modificacion-con-touch","text":"Para cambiar tanto el tiempo de acceso como el tiempo de modificaci\u00f3n con un solo comando, usa las opciones \u2013 a y \u2013 m juntas: touch -am nombre_archivo1.txt","title":"Cambiar el tiempo de acceso y de modificaci\u00f3n con Touch"},{"location":"herramientas-it/terminal/04-comando_touch/#cambiar-el-tiempo-de-acceso-sin-crear-un-nuevo-archivo","text":"Si deseas cambiar el tiempo de acceso y de modificaci\u00f3n de un archivo existente a la hora actual sin crear realmente un nuevo archivo. Usa la opci\u00f3n \u2013 c seguida del nombre del archivo con el comando touch. touch -c nombre_archivo.txt","title":"Cambiar el tiempo de acceso sin crear un nuevo archivo"},{"location":"herramientas-it/terminal/04-comando_touch/#establecer-un-tiempo-de-acceso-y-de-modificacion-especificos-con-touch","text":"Tambi\u00e9n es posible establecer el tiempo de acceso y modificaci\u00f3n de un archivo a una fecha en particular usando la opci\u00f3n -t seguida de la fecha a considerar para el cambio. Se ver\u00eda as\u00ed: touch -t 201903081047.30 nombre_archivo.txt El formato de fecha y hora debe estar en CCYYMMDDhhmm.ss donde: CC: los dos primeros d\u00edgitos del a\u00f1o YY: los dos segundos d\u00edgitos del a\u00f1o MM: El mes del a\u00f1o [01-12] DD: El d\u00eda del mes [01-31] hh: La hora del d\u00eda [00-23] Mm: El minuto de la hora [00-59] SS: El segundo del minuto [00-59]","title":"Establecer un tiempo de acceso y de modificaci\u00f3n espec\u00edficos con Touch"},{"location":"herramientas-it/terminal/04-comando_touch/#cambiar-la-marca-de-tiempo-de-un-archivo-vinculado-simbolicamente","text":"Cuando utilizas un nombre de archivo vinculado simb\u00f3licamente con el comando touch de Ubuntu, la informaci\u00f3n de marca de tiempo para el archivo original, es decir, el archivo que se\u00f1ala el archivo de enlace, se modifica. Para cambiar la hora de acceso y modificaci\u00f3n a la hora actual para un archivo vinculado simb\u00f3licamente, usa la opci\u00f3n \u2013 h : touch -h archivo_enlace_simb\u00f3lico","title":"Cambiar la marca de tiempo de un archivo vinculado simb\u00f3licamente"},{"location":"herramientas-it/terminal/04-comando_touch/#establecer-la-marca-de-tiempo-utilizando-otro-archivo-como-referencia","text":"El comando touch de Linux tambi\u00e9n puede establecer el tiempo de acceso y modificaci\u00f3n de un archivo leyendo la informaci\u00f3n de marca de tiempo de otro archivo. Por ejemplo, el siguiente comando touch con la opci\u00f3n -r**escanear\u00e1 la informaci\u00f3n de la marca de tiempo del archivo **referencia.txt y establecer\u00e1 estos valores de marca de tiempo en el archivo nombre_archivo.txt . Veamos el ejemplo: touch -r referencia.txt nombre_archivo.txt","title":"Establecer la marca de tiempo utilizando otro archivo como referencia"},{"location":"herramientas-it/terminal/04-comando_touch/#especificar-la-fecha-y-la-hora-como-una-cadena-de-caracteres-usando-el-comando-touch","text":"Tambi\u00e9n puedes especificar la fecha y la hora como una cadena de caraceres utilizando la opci\u00f3n -d . El siguiente ejemplo de comando touch de Linux establece la fecha en 8 de marzo y la hora se configura autom\u00e1ticamente en 00:00: touch -d '8 Mar' nombre_archivo.txt En lugar de especificar la fecha como una cadena de caracteres, puedes especificar la hora como una cadena de caracteres. En ese caso, la fecha pasar\u00e1 a ser la fecha actual autom\u00e1ticamente: touch -d '20:10 'nombre_archivo.txt","title":"Especificar la fecha y la hora como una cadena de caracteres usando el comando touch"},{"location":"herramientas-it/terminal/04-comando_touch/#conclusion","text":"Este tutorial cubre los usos del comando touch de Linux incluyendo las opciones m\u00e1s comunes. Si tienes alg\u00fan problema asociado al uso del comando touch de Linux puedes preguntarnos en los comentarios o leer el manual usando el terminal. Fuente: https://www.hostinger.com.ar/tutoriales/usar-comando-touch-linux-ejemplos/ - Autor: Deyimar A. / @deyimar","title":"Conclusi\u00f3n"},{"location":"herramientas-it/vim/01-funcionamiento_basico_de_Vim/","text":"VIM \u00b6 Introducci\u00f3n \u00b6 Este peque\u00f1o tutorial pretende ser una introducci\u00f3n y a la vez una referencia r\u00e1pida al editor Vim (Vi IMproved) tanto para aquellos que quieren empezar a utilizarlo como para aquellos que ya lo utilizan de una forma b\u00e1sica (abrir fichero, modificar, guardar y salir) y desean ampliar sus conocimientos sobre este fant\u00e1stico editor. El tutorial puede ser algo largo, pero est\u00e1 organizado de forma que puedas empezar a leerlo desde el principio y parar en el momento en que lo que se explica est\u00e1 por encima de tus necesidades. Es m\u00e1s, puedes dejarlo en un punto concreto que cubra tus necesidades y volver a leerlo pasado un tiempo, y volver a aprender cosas nuevas. La idea es que no sea necesario leerlo entero para que te sea \u00fatil. Si eres novato y te abruma ver tantas combinaciones de teclado o explicaciones, t\u00f3matelo con calma. Lee un cap\u00edtulo, y prueba todos los comandos u opciones editando un fichero de texto. Apl\u00edca esos comandos cada vez que puedas, utilizando vim para hacer tus tareas de edici\u00f3n de textos, y ver\u00e1s como pasado un tiempo, lo que le\u00edste la anterior vez te parece b\u00e1sico y puedes avanzar algo m\u00e1s en el tutorial. La parte inicial del tutorial contiene bastante texto, porque se corresponde con el momento en que no estamos familiarizados con los comandos de Vim y las explicaciones necesitan ser m\u00e1s profundas, pero conforme avanzamos en el texto, las descripciones ser\u00e1n m\u00e1s someras, ya que si hemos llegado hasta all\u00ed, directamente estaremos asimilando los comandos y conceptos sin necesidad de explicaciones complejas. Para seguir el tutorial simplemente os recomiendo que teng\u00e1is instalada alguna versi\u00f3n nueva de Vim (que pod\u00e9is descargar en http://www.vim.org o bien utilizando el sistema de paquetes de vuestra distribuci\u00f3n Linux) y sobre todo que teng\u00e1is ganas de aprender a utilizarlo. Adem\u00e1s del t\u00edpico VIM de l\u00ednea de comandos, existen compilaciones de Vim con un Interfaz Gr\u00e1fico ( GUI ), como gvim o la propia de Windows. Y es que recordad que existen versiones de Vim no s\u00f3lo para UNIX / Linux, sino tambi\u00e9n para Windows, por ejemplo, de forma que las ventajas de utilizar Vim las pod\u00e9is aprovechar tambi\u00e9n en ordenadores Windows que os obliguen a utilizar en Universidades, o en el trabajo, por ejemplo. As\u00ed que armados con Vim instalado para nuestro sistema operativo favorito y algo de tiempo para leer, entremos en materia. Funcionamiento b\u00e1sico de Vim \u00b6 Vim es un editor de textos, en contraposici\u00f3n a lo que se conoce como procesador de textos. En un procesador de textos es muy importante el formato del texto : cursivas, negritas, t\u00edtulos, centrado o justificado, color y tama\u00f1o de la fuente, etc. Vim, en cambio, se utiliza para editar texto . Lo importante no es el formato del texto sino el texto en s\u00ed mismo. As\u00ed, Vim se utiliza para programar, para escribir emails, para editar textos, c\u00f3digo HTML , ficheros de configuraci\u00f3n del sistema, etc. Los procesadores de texto est\u00e1n centrados en ofrecer muchas cosas para el formateado del documento, mientras que Vim est\u00e1 pensado para facilitar la labor de introducci\u00f3n y edici\u00f3n del texto. No es muy \u00fatil editar un fichero de configuraci\u00f3n o programar con LibreOffice o Word al igual que no tiene mucho sentido utilizar Vim para editar un documento donde lo que prima es el formato (pese a que gracias al lenguaje de programaci\u00f3n LATEX, esto se puede hacer en Vim). Por eso, cuando quieras programar, editar ficheros de configuraci\u00f3n, o simplemente, hacer tu trabajo con texto de una forma m\u00e1s r\u00e1pida, lo mejor es utilizar un editor de texto. Y como veremos, Vim es especial para hacer esta labor, por encima de muchos otros editores. El editor Vim es una evoluci\u00f3n del cl\u00e1sico editor VI . VI es un editor que encontraremos presente en casi el 100% de los sistemas UNIX (y si no est\u00e1 presente por defecto se puede instalar), por lo que conocer su uso es pr\u00e1cticamente una obligaci\u00f3n para los Administradores de Sistemas. Por suerte, Vim se dise\u00f1\u00f3 heredando casi todas las teclas y opciones de VI, de modo que siguiendo este tutorial nos aseguramos los conocimientos necesarios para manejar VI a nivel b\u00e1sico y medio. Pod\u00e9is pensar en VIM como un VI mejorado, al cual podr\u00e9is aplicar la mayor\u00eda de conocimientos de movimiento y edici\u00f3n que veremos aqu\u00ed. Instalaci\u00f3n y ejecuci\u00f3n de Vim \u00b6 Si usas una plataforma Linux, lo m\u00e1s probable es que Vim ya est\u00e9 instalado en tu sistema. En cualquier caso, puedes instalarlo con: Variante Sistema Comando Vim (modo texto) CentOS / RedHat / Fedora yum install vim-enhanced vim-minimal gVim (modo gr\u00e1fico) CentOS / RedHat / Fedora yum install vim-X11 Vim (modo texto) Ubuntu / Debian / Mint apt-get install vim-nox gVim (modo gr\u00e1fico) Ubuntu / Debian / Mint apt-get install vim-gtk He separado la instalaci\u00f3n de paquetes modo texto y modo gr\u00e1fico por si alguien desea instalar \u015bolo una de las 2 variantes, pero lo normal es tener ambas instaladas. Por ejemplo, podemos usar vim en terminales de texto para editar ficheros de configuraci\u00f3n (cuando cambiamos a root en una consola) y gvim en proyectos de programaci\u00f3n. Para lanzar vim, basta con ejecutar vim en una terminal de texto (lo que crear\u00e1 un buffer vac\u00edo en vim), o bien vim fichero (que partir\u00e1 con el contenido del fichero en el buffer). Tambi\u00e9n podemos irnos con el cursor directamente a una l\u00ednea N contra del fichero editado si hacemos vim +NUMERO fichero (especialmente util si estamos editando un fichero tras un error de compilaci\u00f3n de un programa, por ejemplo, y conocemos el n\u00famero de l\u00ednea del error). Una vez dentro de Vim, podemos salir sin grabar el contenido ejecutando en modo comando :q! y grabando con :x! . En breve veremos qu\u00e9 quiere decir eso de \"en modo comando\". Modo inserci\u00f3n y modo comando \u00b6 Como muchos ya sab\u00e9is, a la hora de editar textos, Vim trabaja en varios modos: modo comando, modo inserci\u00f3n, modo visual... Se dice pues que es un editor modal (con varios modos de trabajo). En todo momento sabremos en cu\u00e1l de los modos estamos gracias a la informaci\u00f3n que aparece en la barra de estado del editor (la \u00faltima l\u00ednea de la pantalla). Los 2 principales modos de trabajo son modo comando y modo inserci\u00f3n . Para selecci\u00f3n de texto con los cursores, tambi\u00e9n disponemos del modo visual . En modo comando (el modo en que est\u00e1 Vim tras ejecutarlo) las teclas que pulsamos, en lugar de aparecer escritas en el documento, son interpretadas por Vim como comandos y nos permiten realizar acciones como grabar, salir, copiar, pegar, etc. Por ejemplo, pulsando ZZ en modo comando, no vamos a escribir dos zetas may\u00fasculas en el documento, sino que vamos a salir de vim grabando el fichero que estamos editando. El modo inserci\u00f3n s\u00ed que nos permite introducir caracteres en el fichero, en la posici\u00f3n actual del cursor, al estilo de los editores b\u00e1sicos a los que estamos acostumbrados. Estando en modo inserci\u00f3n, si pulsamos ZZ , se insertar\u00e1n dos zetas may\u00fasculas en la posici\u00f3n actual del cursor, tal y como cabr\u00eda esperar en un editor normal. Cuando estamos en modo inserci\u00f3n aparece la cadena \u2013INSERTAR\u2013 en la barra de estado del editor (la \u00faltima l\u00ednea de pantalla). Para pasar al modo inserci\u00f3n desde el modo comando se utiliza la tecla/comando i , y para volver al modo comando se utiliza la tecla ESC. La siguiente imagen ilustra los diferentes modos y las teclas que cambian entre ellos: El hecho de disponer de 3 modos y tener que pasar de uno a otro puede parecer algo confuso o incluso un engorro, pero es justo la mejor baza de vim; es lo que le proporciona su potencia, lo que los dem\u00e1s editores no pueden hacer: aplicar comandos al texto. Es mucho m\u00e1s c\u00f3modo borrar una l\u00ednea completa con el comando dd en vim que seleccionar la l\u00ednea con el teclado o rat\u00f3n y borrarla con la tecla DEL o SUPR en otro editor. Alguien podr\u00eda decir: \"\"\"bueno, seguro que cualquier otro editor tambi\u00e9n tiene un atajo de teclado para borrar la l\u00ednea actual completa.\"\"\" Bien, imaginemos que la tiene (suele ser CTRL+Y), pero ... \u00bfy si quieres borrar las 30 l\u00edneas siguientes a la del cursor (inclu\u00edda esta)? \u00bfVas a pulsar 30 veces el atajo de teclado? \u00bfVas a seleccionar con el rat\u00f3n o el teclado las 30 l\u00edneas? \u00bfY si te digo que en modo comando de Vim, lo puedes hacer simplemente tecleando 30dd ? Y es que 30dd para vim significa 30 x dd , o sea, ejecuta 30 veces el comando dd , es decir, borra 30 l\u00edneas . Esto s\u00f3lo se puede hacer gracias a la potencia del modo comando. Cuando se es un novato en vim, y uno est\u00e1 acostumbrado a otros editores que cree m\u00e1s potentes, puede pensar que vim es un editor arcaico y obsoleto s\u00f3lo por el hecho de que se utiliza integramente con el teclado y es modal. La realidad es toda la contraria: es precisamente eso lo que permite que Vim sea mucho m\u00e1s potente que el resto de editores. Vim es muy muy muy potente, no es un simple editor. La clave de Vim es estar el mayor tiempo que se pueda en modo comando, pasando a modo inserci\u00f3n s\u00f3lo cuando se requiera introducir texto en el documento. Cuando estemos escribiendo emails o documentos de texto es muy probable que estemos casi todo el tiempo en modo inserci\u00f3n (a menos que queramos corregir algo que hayamos escrito), pero programando o editando ficheros de configuraci\u00f3n ocurrir\u00e1 justo lo contrario. Los atajos de teclado del modo comando se hacen algo complicados de entender al principio, pero tras el uso continuado de Vim se desarrolla en nuestra mente la forma de utilizar esos comandos de forma totalmente intuitiva, sin pararnos a pensar en ellos. Cuando empieza a utilizarse vim s\u00f3lo se conoce el funcionamiento b\u00e1sico, pero con el tiempo uno comienza a descubrir toda la potencia de este genial editor y empieza a cambiar la concepci\u00f3n de tiene de \u00e9l: Vim no es s\u00f3lo un editor, es una forma de vida en UNIX. El fichero .vimrc \u00b6 En vim podemos modificar muchos par\u00e1metros del editor mientras editamos los ficheros. Por ejemplo, tecleando en modo comando :set number (dos puntos, set number, intro), Vim activar\u00e1 la numeraci\u00f3n de l\u00edneas (no dentro del fichero en s\u00ed, sino visualmente), algo que puede ser \u00fatil para programar. Otro ejemplo, tecleando :syntax on , activaremos para el fichero actual el coloreado de sintaxis, es decir, que las palabras especiales que el editor entienda como que tienen un significado concreto aparecer\u00e1n en diferentes colores. Si estamos programando en C, por ejemplo, las palabras claves aparecer\u00e1n de un color, las cadenas de otro, etc (algo realmente \u00fatil a la hora de programar). Pues bien, cualquier tipo de opci\u00f3n, macro, comando o funci\u00f3n que vim entienda puede ser inclu\u00edda en el fichero .vimrc en el directorio $HOME de nuestro usuario (o en un fichero _vimrc en el directorio de instalaci\u00f3n de Vim o en el padre del Escritorio del usuario en Windows) de forma que se aplique como opci\u00f3n por defecto cuando lancemos Vim. As\u00ed, podemos crear un fichero .vimrc (por defecto normalmente no existir\u00e1), que contenga algo como lo siguiente: set nocompatible set number set ruler syntax on Esto har\u00e1 que siempre que editemos un fichero, aparezca numeraci\u00f3n de l\u00edneas (set number), un indicador de fila y columna en la barra de estado (set ruler) y resaltado de sintaxis (si est\u00e1 definida para el tipo de fichero que estamos editando) activado. Es algo as\u00ed como el fichero de opciones de vim para nuestro usuario (y s\u00f3lo para nuestro usuario). Existe un fichero de opciones general /etc/vimrc (normalmente) cuyos cambios afectan a todos los usuarios cuando arrancan vim, pero lo que incluyamos en nuestro .vimrc s\u00f3lo afectar\u00e1 a vim cuando lo ejecutemos con nuestro usuario del sistema. As\u00ed, podemos utilizar dicho fichero para indicar aquellas configuraciones con las que estemos m\u00e1s c\u00f3modos, de forma que podamos adaptar vim a nuestras necesidades. Es normal que en estos momentos iniciales no conozcamos vim lo suficiente como para hacernos un .vimrc decente, pero para empezar os recomiendo algo como lo que sigue: \" Fichero .vimrc de mi usuario \" Los comentarios se ponen con comillas dobles set nobackup set ruler \" nocompatible permite funciones que VI no soporta set nocompatible set tabstop=4 set sw=4 set expandtab set vb set noerrorbells syntax on Las posibilidades del fichero .vimrc son muy grandes, ya que no s\u00f3lo soporta comandos simples de configuraci\u00f3n sino que tiene un lenguaje propio que nos permite hacer casi cualquier tipo de cosa. Poco a poco podr\u00e9is ampliar este fichero con m\u00e1s opciones, macros, etc, que iremos viendo a lo largo del tutorial. De momento os recomiendo que cre\u00e9is uno con, como m\u00ednimo, las opciones que acabamos de mostrar en el ejemplo anterior. Comandos b\u00e1sicos: movimiento, inserci\u00f3n y borrado \u00b6 Un primer contacto con Vim puede ser tan simple como editar un fichero con vim fichero , pasar a modo inserci\u00f3n pulsando i (i min\u00fascula), moverse por el documento, cambiar e introducir texto, volver a modo comando (pulsando ESC ), y salir del editor grabando los cambios en el fichero pulsando ZZ (2 zetas may\u00fasculas) o con :x! . Como toma de contacto inicial es suficiente y puede servir para perder el miedo al hecho de que Vim tenga 2 modos principales de funcionamiento (comando e inserci\u00f3n). Lo siguiente que debemos hacer con nuestro editor es aprender a movernos por el texto. Supongamos que hemos creado/editado un documento con Vim, y tenemos que movernos por \u00e9l (y a\u00f1adir/cambiar cosas). Como siempre, en modo inserci\u00f3n (si tenemos bien configurada la variable $TERM del sistema) podremos movernos con las teclas cl\u00e1sicas de los dem\u00e1s editores: cursores, Inicio, Fin, ReP\u00e1g, AvP\u00e1g, etc. No obstante, la potencia real de Vim la encontramos con las posibilidades de movimiento definidas en el modo comando. Aparte de que en modo inserci\u00f3n estamos muy limitados (movimiento en las 4 direcciones, principio y fin de l\u00ednea, y anterior y siguiente p\u00e1gina), algunas combinaciones de teclado no tienen por qu\u00e9 funcionar en ciertas m\u00e1quinas, Sistemas Operativos o configuraciones de teclado (en Solaris, AIX, HPUX, o utilizando telnet/ssh contra otra m\u00e1quina). El movimiento en modo comando es mucho m\u00e1s est\u00e1ndar (al utilizar teclas b\u00e1sicas del teclado y no teclas extendidas) y nos permite mucho m\u00e1s juego. La regla general de Vim es moverse y trabajar siempre en modo comando y s\u00f3lo pasar a modo inserci\u00f3n para introducir, borrar o modificar texto de nuestro documento (volviendo a modo comando al acabar el cambio), ya que el modo comando es el lugar donde podremos usar todas las opciones que en otros editores no se pueden realizar. Veamos los diferentes comandos b\u00e1sicos de movimiento, inserci\u00f3n y borrado (siempre en modo comando): Comando Significado h Mover el cursor a la izquierda. j Mover el cursor hacia abajo. k Mover el cursor hacia arriba. l Mover el cursor hacia la derecha. i Insertar texto en la posici\u00f3n actual del cursor (Insert), pasando a Modo Inserci\u00f3n. Se permanece en modo inserci\u00f3n hasta que se sale expl\u00edcitamente de \u00e9l. ESC Salir del modo inserci\u00f3n y volver a modo comando. En modo comando, permite cancelar muchos de los comandos que se est\u00e1n ejecutando. x Borrar el caracter bajo el cursor (equivale a la tecla Del/Supr). X Borrar el caracter a la izquierda del cursor (equivale a la tecla Borrar/Backspace). J Juntar la l\u00ednea actual con la siguiente (Join), eliminando el retorno de carro entre ellas. u Deshacer la \u00faltima acci\u00f3n (Undo). Si lo pulsamos m\u00e1s veces desharemos acciones anteriores. CTRL+R Rehacer la \u00faltima acci\u00f3n (Redo). Si lo pulsamos m\u00e1s veces reharemos acciones posteriores deshechas. a Insertar texto en la siguiente posici\u00f3n tras el cursor (Append). Es similar a i , salvo que el texto no se inserta en la posici\u00f3n actual del cursor sino a su derecha. A Poner el cursor al final de la l\u00ednea y pasar a modo inserci\u00f3n (a\u00f1adir texto al final). o Crear una l\u00ednea vac\u00eda, en blanco, bajo la l\u00ednea actual, y pasar a modo inserci\u00f3n con el cursor posicionado en dicha l\u00ednea. Es mucho m\u00e1s c\u00f3modo que (como en otros editores) tener que pulsar FIN y ENTER para crear una l\u00ednea en blanco. O Crear una l\u00ednea vac\u00eda, en blanco, sobre la l\u00ednea actual. Ser\u00eda el equivalente en otros editores a ARRIBA, ARRIBA, FIN, ENTER. dd Borrar la l\u00ednea actual (sobre la que est\u00e1 el cursor). D Borrar desde la posici\u00f3n actual del cursor hasta el final de la l\u00ednea. Como pod\u00e9is ver, la existencia de ciertos comandos (como o , O , o dd ) est\u00e1 pensada para evitar la mayor cantidad de pulsaciones de teclas/rat\u00f3n posible. Borrar l\u00edneas con dd es mucho m\u00e1s r\u00e1pido y sencillo que llevar la mano al rat\u00f3n o a SHIFT+cursores en otros editores, e induce a muchos menos errores. Tambi\u00e9n, pulsar J (jota may\u00fascula) para juntar (Join) una l\u00ednea con la l\u00ednea siguiente es mucho m\u00e1s r\u00e1pido que bajar a la siguiente l\u00ednea, irse al principio de la misma, y pulsar borrar para subirla a la l\u00ednea anterior. Counts o repetidores \u00b6 En la mayor\u00eda de comandos de Vim podemos a\u00f1adir counts , que es como se conoce a los repetidores del comando. El count es un n\u00famero que se teclea antes del comando para que se repita varias veces. Unido a la potencia del modo comando nos da mucho juego para la edici\u00f3n. Veamos unos cuantos ejemplos: Comando Significado 10dd Repetir 10 veces el comando dd , es decir borrar 10 l\u00edneas empezando desde la l\u00ednea actual. Es el equivalente a teclear manualmente 10 veces dd , y mucho m\u00e1s r\u00e1pido que seleccionar 10 l\u00edneas a mano con rat\u00f3n o cursores. 5x Repetir 5 veces el comando x , es decir, borrar 5 caracteres empezando desde el car\u00e1cter actual. Equivale a pulsar manualmente 5 veces el comando x . 60i- Insertar 60 guiones consecutivos. Este comando se teclea en modo comando pulsando 6, 0, i, gui\u00f3n, y pulsando la tecla ESCAPE y luego pulsar ENTER para validar el comando. Al hacerlo, estamos diciendo que se repita 60 veces la secuencia i gui\u00f3n ESCAPE , es decir, pasar a modo inserci\u00f3n, escribir un gui\u00f3n, y volver al modo comando pulsando ESCAPE. El 60 que hay delante lo repite 60 veces, con lo cual tenemos 60 guiones en pantalla. \u00bfNo es mucho m\u00e1s c\u00f3modo al programar, para introducir separadores de comentarios, que pulsar el gui\u00f3n 60 veces o durante varios segundos mientras miramos la columna en la que estamos? 10iHola (pulsar ESC y ENTER como las teclas ESC y ENTER, no tecleando la cadena) Aparece la palabra Hola 10 veces en pantalla, cada vez en una l\u00ednea propia. Su significado, al igual que en el ejemplo anterior, ser\u00eda repite 10 veces la secuencia i, Hola, ENTER, ESC , que pasa a modo inserci\u00f3n, escribe Hola, pasa a la siguiente l\u00ednea con ENTER, y vuelve a modo comando. Los 2 \u00faltimos ejemplos son bastante ilustrativos de la potencia de Vim en modo comando. Lo que en otros editores requiere varios segundos de presi\u00f3n de la tecla - para poner una raya horizontal (por ejemplo, en comentarios en C o C++ para separar funciones o clarificar los comentarios), en Vim se puede hacer con un simple comando, y sin miedo a poner guiones de m\u00e1s ni de menos o estar fij\u00e1ndose en la columna mientras los a\u00f1adimos. Le pedimos a Vim que a\u00f1ada 60 guiones y lo har\u00e1 directamente y sin posibilidad de error. El \u00faltimo ejemplo nos muestra c\u00f3mo repetir N veces una determinada frase en nuestro documento. No es necesario escribir, seleccionar, y pegar, pegar, pegar y pegar mientras contamos las frases que llevamos hasta tener nuestras 10 frases escritas como en otros editores. A Vim le decimos que repita la inserci\u00f3n 10 veces y lo hace sin necesidad de intervenci\u00f3n extra por nuestra parte. Los multiplicadores de comandos son muy \u00fatiles y pueden aplicarse a muchos de los comandos que veremos en este tutorial, aunque no lo digamos expl\u00edcitamente aqu\u00ed. La manipulaci\u00f3n del fichero (abrir, guardar, salir) \u00b6 Los comandos b\u00e1sicos a la hora de editar ficheros son: Comando Significado :w Grabar los cambios del fichero actual. :w nombre Grabar el contenido actual del buffer en un fichero de nombre nombre . :q! Salir del editor sin grabar ning\u00fan cambio en el fichero actual (descartando cualquier cosa que hayamos hecho desde su apertura o \u00faltima vez que grabamos). ZZ Salir del editor grabando los cambios en el fichero actual. Tambi\u00e9n sirve :x o :wq! . CTRL+G Obtener informaci\u00f3n en la barra de estado del nombre del fichero que estamos editando, l\u00ednea actual, n\u00famero de l\u00edneas, en qu\u00e9 porcentaje del fichero estamos, y n\u00famero de columna. :e fichero Abrir un fichero en el buffer actual (si est\u00e1 vac\u00edo) o en uno nuevo (si tenemos el buffer actual en uso) En el caso de que hayamos abierto con :e m\u00e1s de un fichero, podemos movernos entre ellos con: Comando Significado :bn Siguiente buffer (fichero). :bp Anterior buffer (fichero). :bd Cerrar buffer (fichero) actual. Hablaremos m\u00e1s sobre los buffers en un cap\u00edtulo posterior, pero resulta interesante saber moverse entre m\u00faltiples ficheros abiertos. Fuente : Guia de vim por : Santiago Romero","title":"Funcionamiento b\u00e1sico de Vim"},{"location":"herramientas-it/vim/01-funcionamiento_basico_de_Vim/#vim","text":"","title":"VIM"},{"location":"herramientas-it/vim/01-funcionamiento_basico_de_Vim/#introduccion","text":"Este peque\u00f1o tutorial pretende ser una introducci\u00f3n y a la vez una referencia r\u00e1pida al editor Vim (Vi IMproved) tanto para aquellos que quieren empezar a utilizarlo como para aquellos que ya lo utilizan de una forma b\u00e1sica (abrir fichero, modificar, guardar y salir) y desean ampliar sus conocimientos sobre este fant\u00e1stico editor. El tutorial puede ser algo largo, pero est\u00e1 organizado de forma que puedas empezar a leerlo desde el principio y parar en el momento en que lo que se explica est\u00e1 por encima de tus necesidades. Es m\u00e1s, puedes dejarlo en un punto concreto que cubra tus necesidades y volver a leerlo pasado un tiempo, y volver a aprender cosas nuevas. La idea es que no sea necesario leerlo entero para que te sea \u00fatil. Si eres novato y te abruma ver tantas combinaciones de teclado o explicaciones, t\u00f3matelo con calma. Lee un cap\u00edtulo, y prueba todos los comandos u opciones editando un fichero de texto. Apl\u00edca esos comandos cada vez que puedas, utilizando vim para hacer tus tareas de edici\u00f3n de textos, y ver\u00e1s como pasado un tiempo, lo que le\u00edste la anterior vez te parece b\u00e1sico y puedes avanzar algo m\u00e1s en el tutorial. La parte inicial del tutorial contiene bastante texto, porque se corresponde con el momento en que no estamos familiarizados con los comandos de Vim y las explicaciones necesitan ser m\u00e1s profundas, pero conforme avanzamos en el texto, las descripciones ser\u00e1n m\u00e1s someras, ya que si hemos llegado hasta all\u00ed, directamente estaremos asimilando los comandos y conceptos sin necesidad de explicaciones complejas. Para seguir el tutorial simplemente os recomiendo que teng\u00e1is instalada alguna versi\u00f3n nueva de Vim (que pod\u00e9is descargar en http://www.vim.org o bien utilizando el sistema de paquetes de vuestra distribuci\u00f3n Linux) y sobre todo que teng\u00e1is ganas de aprender a utilizarlo. Adem\u00e1s del t\u00edpico VIM de l\u00ednea de comandos, existen compilaciones de Vim con un Interfaz Gr\u00e1fico ( GUI ), como gvim o la propia de Windows. Y es que recordad que existen versiones de Vim no s\u00f3lo para UNIX / Linux, sino tambi\u00e9n para Windows, por ejemplo, de forma que las ventajas de utilizar Vim las pod\u00e9is aprovechar tambi\u00e9n en ordenadores Windows que os obliguen a utilizar en Universidades, o en el trabajo, por ejemplo. As\u00ed que armados con Vim instalado para nuestro sistema operativo favorito y algo de tiempo para leer, entremos en materia.","title":"Introducci\u00f3n"},{"location":"herramientas-it/vim/01-funcionamiento_basico_de_Vim/#funcionamiento-basico-de-vim","text":"Vim es un editor de textos, en contraposici\u00f3n a lo que se conoce como procesador de textos. En un procesador de textos es muy importante el formato del texto : cursivas, negritas, t\u00edtulos, centrado o justificado, color y tama\u00f1o de la fuente, etc. Vim, en cambio, se utiliza para editar texto . Lo importante no es el formato del texto sino el texto en s\u00ed mismo. As\u00ed, Vim se utiliza para programar, para escribir emails, para editar textos, c\u00f3digo HTML , ficheros de configuraci\u00f3n del sistema, etc. Los procesadores de texto est\u00e1n centrados en ofrecer muchas cosas para el formateado del documento, mientras que Vim est\u00e1 pensado para facilitar la labor de introducci\u00f3n y edici\u00f3n del texto. No es muy \u00fatil editar un fichero de configuraci\u00f3n o programar con LibreOffice o Word al igual que no tiene mucho sentido utilizar Vim para editar un documento donde lo que prima es el formato (pese a que gracias al lenguaje de programaci\u00f3n LATEX, esto se puede hacer en Vim). Por eso, cuando quieras programar, editar ficheros de configuraci\u00f3n, o simplemente, hacer tu trabajo con texto de una forma m\u00e1s r\u00e1pida, lo mejor es utilizar un editor de texto. Y como veremos, Vim es especial para hacer esta labor, por encima de muchos otros editores. El editor Vim es una evoluci\u00f3n del cl\u00e1sico editor VI . VI es un editor que encontraremos presente en casi el 100% de los sistemas UNIX (y si no est\u00e1 presente por defecto se puede instalar), por lo que conocer su uso es pr\u00e1cticamente una obligaci\u00f3n para los Administradores de Sistemas. Por suerte, Vim se dise\u00f1\u00f3 heredando casi todas las teclas y opciones de VI, de modo que siguiendo este tutorial nos aseguramos los conocimientos necesarios para manejar VI a nivel b\u00e1sico y medio. Pod\u00e9is pensar en VIM como un VI mejorado, al cual podr\u00e9is aplicar la mayor\u00eda de conocimientos de movimiento y edici\u00f3n que veremos aqu\u00ed.","title":"Funcionamiento b\u00e1sico de Vim"},{"location":"herramientas-it/vim/01-funcionamiento_basico_de_Vim/#instalacion-y-ejecucion-de-vim","text":"Si usas una plataforma Linux, lo m\u00e1s probable es que Vim ya est\u00e9 instalado en tu sistema. En cualquier caso, puedes instalarlo con: Variante Sistema Comando Vim (modo texto) CentOS / RedHat / Fedora yum install vim-enhanced vim-minimal gVim (modo gr\u00e1fico) CentOS / RedHat / Fedora yum install vim-X11 Vim (modo texto) Ubuntu / Debian / Mint apt-get install vim-nox gVim (modo gr\u00e1fico) Ubuntu / Debian / Mint apt-get install vim-gtk He separado la instalaci\u00f3n de paquetes modo texto y modo gr\u00e1fico por si alguien desea instalar \u015bolo una de las 2 variantes, pero lo normal es tener ambas instaladas. Por ejemplo, podemos usar vim en terminales de texto para editar ficheros de configuraci\u00f3n (cuando cambiamos a root en una consola) y gvim en proyectos de programaci\u00f3n. Para lanzar vim, basta con ejecutar vim en una terminal de texto (lo que crear\u00e1 un buffer vac\u00edo en vim), o bien vim fichero (que partir\u00e1 con el contenido del fichero en el buffer). Tambi\u00e9n podemos irnos con el cursor directamente a una l\u00ednea N contra del fichero editado si hacemos vim +NUMERO fichero (especialmente util si estamos editando un fichero tras un error de compilaci\u00f3n de un programa, por ejemplo, y conocemos el n\u00famero de l\u00ednea del error). Una vez dentro de Vim, podemos salir sin grabar el contenido ejecutando en modo comando :q! y grabando con :x! . En breve veremos qu\u00e9 quiere decir eso de \"en modo comando\".","title":"Instalaci\u00f3n y ejecuci\u00f3n de Vim"},{"location":"herramientas-it/vim/01-funcionamiento_basico_de_Vim/#modo-insercion-y-modo-comando","text":"Como muchos ya sab\u00e9is, a la hora de editar textos, Vim trabaja en varios modos: modo comando, modo inserci\u00f3n, modo visual... Se dice pues que es un editor modal (con varios modos de trabajo). En todo momento sabremos en cu\u00e1l de los modos estamos gracias a la informaci\u00f3n que aparece en la barra de estado del editor (la \u00faltima l\u00ednea de la pantalla). Los 2 principales modos de trabajo son modo comando y modo inserci\u00f3n . Para selecci\u00f3n de texto con los cursores, tambi\u00e9n disponemos del modo visual . En modo comando (el modo en que est\u00e1 Vim tras ejecutarlo) las teclas que pulsamos, en lugar de aparecer escritas en el documento, son interpretadas por Vim como comandos y nos permiten realizar acciones como grabar, salir, copiar, pegar, etc. Por ejemplo, pulsando ZZ en modo comando, no vamos a escribir dos zetas may\u00fasculas en el documento, sino que vamos a salir de vim grabando el fichero que estamos editando. El modo inserci\u00f3n s\u00ed que nos permite introducir caracteres en el fichero, en la posici\u00f3n actual del cursor, al estilo de los editores b\u00e1sicos a los que estamos acostumbrados. Estando en modo inserci\u00f3n, si pulsamos ZZ , se insertar\u00e1n dos zetas may\u00fasculas en la posici\u00f3n actual del cursor, tal y como cabr\u00eda esperar en un editor normal. Cuando estamos en modo inserci\u00f3n aparece la cadena \u2013INSERTAR\u2013 en la barra de estado del editor (la \u00faltima l\u00ednea de pantalla). Para pasar al modo inserci\u00f3n desde el modo comando se utiliza la tecla/comando i , y para volver al modo comando se utiliza la tecla ESC. La siguiente imagen ilustra los diferentes modos y las teclas que cambian entre ellos: El hecho de disponer de 3 modos y tener que pasar de uno a otro puede parecer algo confuso o incluso un engorro, pero es justo la mejor baza de vim; es lo que le proporciona su potencia, lo que los dem\u00e1s editores no pueden hacer: aplicar comandos al texto. Es mucho m\u00e1s c\u00f3modo borrar una l\u00ednea completa con el comando dd en vim que seleccionar la l\u00ednea con el teclado o rat\u00f3n y borrarla con la tecla DEL o SUPR en otro editor. Alguien podr\u00eda decir: \"\"\"bueno, seguro que cualquier otro editor tambi\u00e9n tiene un atajo de teclado para borrar la l\u00ednea actual completa.\"\"\" Bien, imaginemos que la tiene (suele ser CTRL+Y), pero ... \u00bfy si quieres borrar las 30 l\u00edneas siguientes a la del cursor (inclu\u00edda esta)? \u00bfVas a pulsar 30 veces el atajo de teclado? \u00bfVas a seleccionar con el rat\u00f3n o el teclado las 30 l\u00edneas? \u00bfY si te digo que en modo comando de Vim, lo puedes hacer simplemente tecleando 30dd ? Y es que 30dd para vim significa 30 x dd , o sea, ejecuta 30 veces el comando dd , es decir, borra 30 l\u00edneas . Esto s\u00f3lo se puede hacer gracias a la potencia del modo comando. Cuando se es un novato en vim, y uno est\u00e1 acostumbrado a otros editores que cree m\u00e1s potentes, puede pensar que vim es un editor arcaico y obsoleto s\u00f3lo por el hecho de que se utiliza integramente con el teclado y es modal. La realidad es toda la contraria: es precisamente eso lo que permite que Vim sea mucho m\u00e1s potente que el resto de editores. Vim es muy muy muy potente, no es un simple editor. La clave de Vim es estar el mayor tiempo que se pueda en modo comando, pasando a modo inserci\u00f3n s\u00f3lo cuando se requiera introducir texto en el documento. Cuando estemos escribiendo emails o documentos de texto es muy probable que estemos casi todo el tiempo en modo inserci\u00f3n (a menos que queramos corregir algo que hayamos escrito), pero programando o editando ficheros de configuraci\u00f3n ocurrir\u00e1 justo lo contrario. Los atajos de teclado del modo comando se hacen algo complicados de entender al principio, pero tras el uso continuado de Vim se desarrolla en nuestra mente la forma de utilizar esos comandos de forma totalmente intuitiva, sin pararnos a pensar en ellos. Cuando empieza a utilizarse vim s\u00f3lo se conoce el funcionamiento b\u00e1sico, pero con el tiempo uno comienza a descubrir toda la potencia de este genial editor y empieza a cambiar la concepci\u00f3n de tiene de \u00e9l: Vim no es s\u00f3lo un editor, es una forma de vida en UNIX.","title":"Modo inserci\u00f3n y modo comando"},{"location":"herramientas-it/vim/01-funcionamiento_basico_de_Vim/#el-fichero-vimrc","text":"En vim podemos modificar muchos par\u00e1metros del editor mientras editamos los ficheros. Por ejemplo, tecleando en modo comando :set number (dos puntos, set number, intro), Vim activar\u00e1 la numeraci\u00f3n de l\u00edneas (no dentro del fichero en s\u00ed, sino visualmente), algo que puede ser \u00fatil para programar. Otro ejemplo, tecleando :syntax on , activaremos para el fichero actual el coloreado de sintaxis, es decir, que las palabras especiales que el editor entienda como que tienen un significado concreto aparecer\u00e1n en diferentes colores. Si estamos programando en C, por ejemplo, las palabras claves aparecer\u00e1n de un color, las cadenas de otro, etc (algo realmente \u00fatil a la hora de programar). Pues bien, cualquier tipo de opci\u00f3n, macro, comando o funci\u00f3n que vim entienda puede ser inclu\u00edda en el fichero .vimrc en el directorio $HOME de nuestro usuario (o en un fichero _vimrc en el directorio de instalaci\u00f3n de Vim o en el padre del Escritorio del usuario en Windows) de forma que se aplique como opci\u00f3n por defecto cuando lancemos Vim. As\u00ed, podemos crear un fichero .vimrc (por defecto normalmente no existir\u00e1), que contenga algo como lo siguiente: set nocompatible set number set ruler syntax on Esto har\u00e1 que siempre que editemos un fichero, aparezca numeraci\u00f3n de l\u00edneas (set number), un indicador de fila y columna en la barra de estado (set ruler) y resaltado de sintaxis (si est\u00e1 definida para el tipo de fichero que estamos editando) activado. Es algo as\u00ed como el fichero de opciones de vim para nuestro usuario (y s\u00f3lo para nuestro usuario). Existe un fichero de opciones general /etc/vimrc (normalmente) cuyos cambios afectan a todos los usuarios cuando arrancan vim, pero lo que incluyamos en nuestro .vimrc s\u00f3lo afectar\u00e1 a vim cuando lo ejecutemos con nuestro usuario del sistema. As\u00ed, podemos utilizar dicho fichero para indicar aquellas configuraciones con las que estemos m\u00e1s c\u00f3modos, de forma que podamos adaptar vim a nuestras necesidades. Es normal que en estos momentos iniciales no conozcamos vim lo suficiente como para hacernos un .vimrc decente, pero para empezar os recomiendo algo como lo que sigue: \" Fichero .vimrc de mi usuario \" Los comentarios se ponen con comillas dobles set nobackup set ruler \" nocompatible permite funciones que VI no soporta set nocompatible set tabstop=4 set sw=4 set expandtab set vb set noerrorbells syntax on Las posibilidades del fichero .vimrc son muy grandes, ya que no s\u00f3lo soporta comandos simples de configuraci\u00f3n sino que tiene un lenguaje propio que nos permite hacer casi cualquier tipo de cosa. Poco a poco podr\u00e9is ampliar este fichero con m\u00e1s opciones, macros, etc, que iremos viendo a lo largo del tutorial. De momento os recomiendo que cre\u00e9is uno con, como m\u00ednimo, las opciones que acabamos de mostrar en el ejemplo anterior.","title":"El fichero .vimrc"},{"location":"herramientas-it/vim/01-funcionamiento_basico_de_Vim/#comandos-basicos-movimiento-insercion-y-borrado","text":"Un primer contacto con Vim puede ser tan simple como editar un fichero con vim fichero , pasar a modo inserci\u00f3n pulsando i (i min\u00fascula), moverse por el documento, cambiar e introducir texto, volver a modo comando (pulsando ESC ), y salir del editor grabando los cambios en el fichero pulsando ZZ (2 zetas may\u00fasculas) o con :x! . Como toma de contacto inicial es suficiente y puede servir para perder el miedo al hecho de que Vim tenga 2 modos principales de funcionamiento (comando e inserci\u00f3n). Lo siguiente que debemos hacer con nuestro editor es aprender a movernos por el texto. Supongamos que hemos creado/editado un documento con Vim, y tenemos que movernos por \u00e9l (y a\u00f1adir/cambiar cosas). Como siempre, en modo inserci\u00f3n (si tenemos bien configurada la variable $TERM del sistema) podremos movernos con las teclas cl\u00e1sicas de los dem\u00e1s editores: cursores, Inicio, Fin, ReP\u00e1g, AvP\u00e1g, etc. No obstante, la potencia real de Vim la encontramos con las posibilidades de movimiento definidas en el modo comando. Aparte de que en modo inserci\u00f3n estamos muy limitados (movimiento en las 4 direcciones, principio y fin de l\u00ednea, y anterior y siguiente p\u00e1gina), algunas combinaciones de teclado no tienen por qu\u00e9 funcionar en ciertas m\u00e1quinas, Sistemas Operativos o configuraciones de teclado (en Solaris, AIX, HPUX, o utilizando telnet/ssh contra otra m\u00e1quina). El movimiento en modo comando es mucho m\u00e1s est\u00e1ndar (al utilizar teclas b\u00e1sicas del teclado y no teclas extendidas) y nos permite mucho m\u00e1s juego. La regla general de Vim es moverse y trabajar siempre en modo comando y s\u00f3lo pasar a modo inserci\u00f3n para introducir, borrar o modificar texto de nuestro documento (volviendo a modo comando al acabar el cambio), ya que el modo comando es el lugar donde podremos usar todas las opciones que en otros editores no se pueden realizar. Veamos los diferentes comandos b\u00e1sicos de movimiento, inserci\u00f3n y borrado (siempre en modo comando): Comando Significado h Mover el cursor a la izquierda. j Mover el cursor hacia abajo. k Mover el cursor hacia arriba. l Mover el cursor hacia la derecha. i Insertar texto en la posici\u00f3n actual del cursor (Insert), pasando a Modo Inserci\u00f3n. Se permanece en modo inserci\u00f3n hasta que se sale expl\u00edcitamente de \u00e9l. ESC Salir del modo inserci\u00f3n y volver a modo comando. En modo comando, permite cancelar muchos de los comandos que se est\u00e1n ejecutando. x Borrar el caracter bajo el cursor (equivale a la tecla Del/Supr). X Borrar el caracter a la izquierda del cursor (equivale a la tecla Borrar/Backspace). J Juntar la l\u00ednea actual con la siguiente (Join), eliminando el retorno de carro entre ellas. u Deshacer la \u00faltima acci\u00f3n (Undo). Si lo pulsamos m\u00e1s veces desharemos acciones anteriores. CTRL+R Rehacer la \u00faltima acci\u00f3n (Redo). Si lo pulsamos m\u00e1s veces reharemos acciones posteriores deshechas. a Insertar texto en la siguiente posici\u00f3n tras el cursor (Append). Es similar a i , salvo que el texto no se inserta en la posici\u00f3n actual del cursor sino a su derecha. A Poner el cursor al final de la l\u00ednea y pasar a modo inserci\u00f3n (a\u00f1adir texto al final). o Crear una l\u00ednea vac\u00eda, en blanco, bajo la l\u00ednea actual, y pasar a modo inserci\u00f3n con el cursor posicionado en dicha l\u00ednea. Es mucho m\u00e1s c\u00f3modo que (como en otros editores) tener que pulsar FIN y ENTER para crear una l\u00ednea en blanco. O Crear una l\u00ednea vac\u00eda, en blanco, sobre la l\u00ednea actual. Ser\u00eda el equivalente en otros editores a ARRIBA, ARRIBA, FIN, ENTER. dd Borrar la l\u00ednea actual (sobre la que est\u00e1 el cursor). D Borrar desde la posici\u00f3n actual del cursor hasta el final de la l\u00ednea. Como pod\u00e9is ver, la existencia de ciertos comandos (como o , O , o dd ) est\u00e1 pensada para evitar la mayor cantidad de pulsaciones de teclas/rat\u00f3n posible. Borrar l\u00edneas con dd es mucho m\u00e1s r\u00e1pido y sencillo que llevar la mano al rat\u00f3n o a SHIFT+cursores en otros editores, e induce a muchos menos errores. Tambi\u00e9n, pulsar J (jota may\u00fascula) para juntar (Join) una l\u00ednea con la l\u00ednea siguiente es mucho m\u00e1s r\u00e1pido que bajar a la siguiente l\u00ednea, irse al principio de la misma, y pulsar borrar para subirla a la l\u00ednea anterior.","title":"Comandos b\u00e1sicos: movimiento, inserci\u00f3n y borrado"},{"location":"herramientas-it/vim/01-funcionamiento_basico_de_Vim/#counts-o-repetidores","text":"En la mayor\u00eda de comandos de Vim podemos a\u00f1adir counts , que es como se conoce a los repetidores del comando. El count es un n\u00famero que se teclea antes del comando para que se repita varias veces. Unido a la potencia del modo comando nos da mucho juego para la edici\u00f3n. Veamos unos cuantos ejemplos: Comando Significado 10dd Repetir 10 veces el comando dd , es decir borrar 10 l\u00edneas empezando desde la l\u00ednea actual. Es el equivalente a teclear manualmente 10 veces dd , y mucho m\u00e1s r\u00e1pido que seleccionar 10 l\u00edneas a mano con rat\u00f3n o cursores. 5x Repetir 5 veces el comando x , es decir, borrar 5 caracteres empezando desde el car\u00e1cter actual. Equivale a pulsar manualmente 5 veces el comando x . 60i- Insertar 60 guiones consecutivos. Este comando se teclea en modo comando pulsando 6, 0, i, gui\u00f3n, y pulsando la tecla ESCAPE y luego pulsar ENTER para validar el comando. Al hacerlo, estamos diciendo que se repita 60 veces la secuencia i gui\u00f3n ESCAPE , es decir, pasar a modo inserci\u00f3n, escribir un gui\u00f3n, y volver al modo comando pulsando ESCAPE. El 60 que hay delante lo repite 60 veces, con lo cual tenemos 60 guiones en pantalla. \u00bfNo es mucho m\u00e1s c\u00f3modo al programar, para introducir separadores de comentarios, que pulsar el gui\u00f3n 60 veces o durante varios segundos mientras miramos la columna en la que estamos? 10iHola (pulsar ESC y ENTER como las teclas ESC y ENTER, no tecleando la cadena) Aparece la palabra Hola 10 veces en pantalla, cada vez en una l\u00ednea propia. Su significado, al igual que en el ejemplo anterior, ser\u00eda repite 10 veces la secuencia i, Hola, ENTER, ESC , que pasa a modo inserci\u00f3n, escribe Hola, pasa a la siguiente l\u00ednea con ENTER, y vuelve a modo comando. Los 2 \u00faltimos ejemplos son bastante ilustrativos de la potencia de Vim en modo comando. Lo que en otros editores requiere varios segundos de presi\u00f3n de la tecla - para poner una raya horizontal (por ejemplo, en comentarios en C o C++ para separar funciones o clarificar los comentarios), en Vim se puede hacer con un simple comando, y sin miedo a poner guiones de m\u00e1s ni de menos o estar fij\u00e1ndose en la columna mientras los a\u00f1adimos. Le pedimos a Vim que a\u00f1ada 60 guiones y lo har\u00e1 directamente y sin posibilidad de error. El \u00faltimo ejemplo nos muestra c\u00f3mo repetir N veces una determinada frase en nuestro documento. No es necesario escribir, seleccionar, y pegar, pegar, pegar y pegar mientras contamos las frases que llevamos hasta tener nuestras 10 frases escritas como en otros editores. A Vim le decimos que repita la inserci\u00f3n 10 veces y lo hace sin necesidad de intervenci\u00f3n extra por nuestra parte. Los multiplicadores de comandos son muy \u00fatiles y pueden aplicarse a muchos de los comandos que veremos en este tutorial, aunque no lo digamos expl\u00edcitamente aqu\u00ed.","title":"Counts o repetidores"},{"location":"herramientas-it/vim/01-funcionamiento_basico_de_Vim/#la-manipulacion-del-fichero-abrir-guardar-salir","text":"Los comandos b\u00e1sicos a la hora de editar ficheros son: Comando Significado :w Grabar los cambios del fichero actual. :w nombre Grabar el contenido actual del buffer en un fichero de nombre nombre . :q! Salir del editor sin grabar ning\u00fan cambio en el fichero actual (descartando cualquier cosa que hayamos hecho desde su apertura o \u00faltima vez que grabamos). ZZ Salir del editor grabando los cambios en el fichero actual. Tambi\u00e9n sirve :x o :wq! . CTRL+G Obtener informaci\u00f3n en la barra de estado del nombre del fichero que estamos editando, l\u00ednea actual, n\u00famero de l\u00edneas, en qu\u00e9 porcentaje del fichero estamos, y n\u00famero de columna. :e fichero Abrir un fichero en el buffer actual (si est\u00e1 vac\u00edo) o en uno nuevo (si tenemos el buffer actual en uso) En el caso de que hayamos abierto con :e m\u00e1s de un fichero, podemos movernos entre ellos con: Comando Significado :bn Siguiente buffer (fichero). :bp Anterior buffer (fichero). :bd Cerrar buffer (fichero) actual. Hablaremos m\u00e1s sobre los buffers en un cap\u00edtulo posterior, pero resulta interesante saber moverse entre m\u00faltiples ficheros abiertos. Fuente : Guia de vim por : Santiago Romero","title":"La manipulaci\u00f3n del fichero (abrir, guardar, salir)"},{"location":"herramientas-it/vim/02-movimientos_y_cambios/","text":"M\u00e1s sobre movimiento y cambios \u00b6 Una vez hemos digerido lo b\u00e1sico sobre Vim (b\u00e1sico pero que ya nos permite hacer gran cantidad de cosas), vamos a ver m\u00e1s opciones de edici\u00f3n con respecto a la modificaci\u00f3n del texto. Soy consciente de que hemos visto muchos comandos y atajos, pero ten\u00e9is que tener en cuenta que se aprenden con el uso (no por memorizaci\u00f3n) y que probablemente usando el 33% de lo que veremos ya seremos mucho m\u00e1s productivos que con un editor normal. Modo reemplazar \u00b6 Si estando en modo inserci\u00f3n pulsamos la tecla INSERT, pasaremos a modo REEMPLAZAR, donde el texto que introduzcamos modificar\u00e1 el texto bajo el cursor en lugar de a\u00f1adirlo o insertarlo. Pulsando INSERT de nuevo volveremos a modo inserci\u00f3n (en realidad, INSERT sirve para conmutar entre ambos modos), y pulsando ESC volveremos a modo comando. Si en modo comando queremos reemplazar un s\u00f3lo car\u00e1cter, podemos hacerlo mediante el comando r . Nos posicionamos sobre el car\u00e1cter que queremos modificar, pulsamos r seguido del car\u00e1cter correcto, y cambiaremos el car\u00e1cter bajo el cursor por aquel que hemos tecleado tras la r. Por ejemplo, ra reemplazar\u00e1 el c\u00e1racter bajo el cursor por una a , sin salir del modo comando. Es ligeramente m\u00e1s r\u00e1pido que pasar a modo inserci\u00f3n, borrar el car\u00e1cter, introducir el nuevo y pulsar ESC para volver a modo comando. Obviamente, podemos aplicar modificadores para repetir el comando m\u00e1s veces. De esta forma, 10ra cambiar\u00e1 los 10 car\u00e1cteres a partir de la posici\u00f3n actual del cursor por car\u00e1cteres a . Finalmente, R (may\u00fascula) permite reemplazar todos los caracteres hasta el final de la l\u00ednea actual. Deshacer cambios \u00b6 En vim, podemos deshacer m\u00faltiples pasos con la tecla u , y rehacer pasos de nuevo con Ctrl-R . Esto es diferente del v\u00ed cl\u00e1sico, donde s\u00f3lo pod\u00edas deshacer un paso, y volviendo a dar a \"u\" deshac\u00edas lo deshecho, es decir, hac\u00edas un undo del undo. Para rizar m\u00e1s el rizo, vim dispone incluso de funcionalidad de undo especificando el tiempo. Podemos volver el documento atr\u00e1s en el tiempo con el comando :earlier , y volver de nuevo adelante el tiempo necesario con :later : :earlier 1h <-- Volvemos el documento a como estaba hace 1 hora :later 10m <-- Ahora avanzamos 30 minutos (a como estaba hace 60-10=50m) Especificando rangos de texto \u00b6 En Vim podemos aplicar las b\u00fasquedas, borrados y modificaciones no s\u00f3lo a la l\u00ednea actual o a la totalidad del documento, sino que tambi\u00e9n podemos hacer referencia a porciones del texto: Rango definido con... Significado % Todo el documento. n,M Bloque de l\u00edneas desde la n a la M. 'a,'b Bloque de l\u00edneas entre las marcas a y b. '<,'> Bloque de texto seleccionado en modo visual. Por ejemplo: :17,20d -> Borrar l\u00edneas de la 17 a la 20 :'a,'b s/hola/adios/g -> Cambiar cadena en el bloque entre las marcas 'a y 'b El rango \"Bloque de texto seleccionado\" ('<,'>) aparece autom\u00e1ticamente cuando tenemos seleccionado texto en modo visual y pulsamos \":\" para teclear un comando. Movimiento m\u00e1s avanzado \u00b6 Hemos dicho que con el modo comando de Vim tenemos muchas m\u00e1s opciones que con el modo inserci\u00f3n (o que en otros editores), pero hasta ahora s\u00f3lo hemos visto una \u00ednfima parte de las posibilidades de Vim. Como veremos ahora, no tenemos porqu\u00e9 movernos car\u00e1cter a car\u00e1cter, l\u00ednea a l\u00ednea o p\u00e1gina a p\u00e1gina. Vamos a poder movernos a la palabra anterior y la siguiente, a cualquier parte del fichero, etc. Comando Significado w Mueve el cursor al principio de la siguiente palabra de la l\u00ednea actual, o de la siguiente l\u00ednea si estamos en la \u00faltima palabra de la l\u00ednea. b Mueve el cursor al principio de la anterior palabra de la l\u00ednea actual, o de la anterior l\u00ednea si estamos en la primera palabra de la l\u00ednea. e Igual que w , pero coloca el cursor en el \u00faltimo car\u00e1cter de la siguiente palabra (al final de la palabra en lugar de al principio). ge Igual que b , pero coloca el cursor en el \u00faltimo car\u00e1cter de la anterior palabra. W, B, E y gE Iguales que w , b , e y ge , pero con una peculiaridad. En may\u00fasculas, nos movemos de palabra en palabra considerando como separador de palabra s\u00f3lo los espacios en blanco y retornos de carro, mientras que en min\u00fasculas, Vim utiliza un modo inteligente con m\u00e1s separadores de palabras, como el gui\u00f3n o la barra. Por ejemplo, en el caso de tener la frase cadena1-cadena2 cadena3 o cadena1/cadena2 cadena3 con el cursor sobre el primer car\u00e1cter, w avanzar\u00eda el cursor hasta primera letra de cadena2 , mientras que W lo avanzar\u00eda hasta la primera letra de cadena3 . $ Mueve el cursor al final de la l\u00ednea (equivalente a la tecla Fin). 0 Mueve el cursor al principio de la l\u00ednea (equivalente a la tecla Inicio). ^ Mueve el cursor al primer car\u00e1cter no blanco de la l\u00ednea. Perfecto a la hora de programar, cuando queremos corregir cosas en el c\u00f3digo, normalmente indentado con espacios o tabuladores al principio de las l\u00edneas. { Mueve el cursor al anterior p\u00e1rrafo (o bloque de c\u00f3digo). } Mueve el cursor al siguiente p\u00e1rrafo (o bloque de c\u00f3digo). f Realiza una b\u00fasqueda en la l\u00ednea actual del car\u00e1cter indicado. Por ejemplo, fx mueve el cursor a la primera aparici\u00f3n del car\u00e1cter x desde la posici\u00f3n actual. Muy \u00fatil para ir r\u00e1pidamente a partes concretas de una l\u00ednea sin llevar la mano al rat\u00f3n (por ejemplo, para corregir una h que sea un error ortogr\u00e1fico, pulsando fh . F Igual que el comando anterior, pero realizando la b\u00fasqueda hacia atr\u00e1s en la l\u00ednea actual (empezando desde la posici\u00f3n actual del cursor). t y T Similares a f y F salvo que posicionan el cursor en el car\u00e1cter anterior a la letra buscada. ; y , Repiten la ejecuci\u00f3n del \u00faltimo comando f, F, t o T hacia adelante (;) o hacia atr\u00e1s (,). ESC En el caso de b\u00fasquedas f, F, t o T , permite cancelar la b\u00fasqueda. % Al pulsarlo sobre un par\u00e9ntesis abierto o cerrado (, ) , corchete abierto o cerrado [, ] , o llave abierta o cerrada {, } , mueve el cursor a la pareja de dicho elemento. Por ejemplo, si estamos programando y queremos saber cu\u00e1l es el par\u00e9ntesis que cierra el par\u00e9ntesis sobre el cual est\u00e1 el cursor, pulsamos % y vim nos lleva directamente a \u00e9l. Como tambi\u00e9n funciona con corchetes y llaves, podemos encontrar f\u00e1cilmente qu\u00e9 llave cierra un bloque de c\u00f3digo, o qu\u00e9 if/for/while/loquesea es el que ha abierto una determinada llave de cierre en un programa en C que estemos depurando. G Ir a la l\u00ednea n\u00famero NUMERO del documento. Por ejemplo, 100G nos llevar\u00eda a la l\u00ednea n\u00famero 100. Es especialmente \u00fatil a la hora de programar, cuando tenemos que ir a l\u00edneas concretas del programa donde el compilador nos ha reportado errores. Si no estamos programando pero queremos utilizar n\u00fameros de l\u00edneas (porque nos parece m\u00e1s c\u00f3modo), podemos hacer uso de las siguientes opciones de modo comando: Comando Significado :set number Activa la numeraci\u00f3n de l\u00edneas. :set nonumber Desactiva la numeraci\u00f3n de l\u00edneas. :set ruler Activa en la barra de estado una indicaci\u00f3n de la columna y fila actual. Cualquiera de estas opciones las podemos poner en nuestro fichero .vimrc para que se apliquen a todos los documentos que editemos, o cambiarlas en cualquier momento en modo comando. Comando Significado gg Ir a la primera l\u00ednea del documento (equivale a 1G ) G Sin n\u00famero delante, G nos lleva a la \u00faltima l\u00ednea del documento. % Nos lleva a un porcentaje concreto del fichero. Por ejemplo 50% nos lleva a la mitad del fichero, y 95% , casi al final del mismo. CTRL+F Scrollea una pantalla completa hacia adelanta (F de Forward). CTRL+B Scrollea una pantalla completa hacia atr\u00e1s (B de Backward). CTRL+E Scrollea la pantalla en una s\u00f3la l\u00ednea hacia arriba. CTRL+Y Scrollea la pantalla en una s\u00f3la l\u00ednea hacia abajo. CTRL+U Scrollea media pantalla de texto hacia abajo (el equivalente a hacer medio ReP\u00e1g). Puede sonar raro el hecho de scrollear medias pantallas , pero en determinadas situaciones puede ser \u00fatil (si no queremos perder de vista texto ya le\u00eddo cuando avanzamos, por ejemplo). CTRL+D Scrollea media pantalla de texto hacia arriba (como hacer medio AvP\u00e1g). Permite as\u00ed avanzar el documento media p\u00e1gina sin perder de vista el texto donde est\u00e1 el cursor. zz Sin modificar la posici\u00f3n actual del cursor, modifica la ventana de visualizaci\u00f3n del fichero de forma que la l\u00ednea actual acabe centrada en pantalla y podamos ver el contexto. Por ejemplo, supongamos que estamos en la parte de abajo de la pantalla con el cursor en la \u00faltima l\u00ednea y necesitamos ver con facilidad y claridad qu\u00e9 l\u00edneas hay sobre y bajo ella. En otros editores usar\u00edamos la tecla de Abajo hasta centrar un poco la l\u00ednea en pantalla y luego subir\u00edamos hacia arriba para volver a la l\u00ednea en que est\u00e1bamos. En Vim basta con pulsar zz para centrar la l\u00ednea actual en pantalla sin mover la posici\u00f3n del cursor para nada. zt Igual que zz pero posicionando la l\u00ednea en la parte superior de la pantalla (t viene de top) lo que nos permite ver con claridad la l\u00ednea actual y muchas l\u00edneas posteriores. zb Igual que zt, pero posicionando la l\u00ednea en la \u00faltima posici\u00f3n de la ventana de pantalla, lo que nos permite ver la l\u00ednea actual y muchas l\u00edneas anteriores. En ambos 3 comandos no se modifica la posici\u00f3n del cursor en el documento, s\u00f3lo la manera de verlo en pantalla. De nuevo podemos utilizar multiplicadores en todos los comandos anteriores para evitarnos pulsaciones innecesarias de teclas: Comando Significado 20w Avanzar 20 palabras. 3fx Avanzar el cursor a la tercera aparici\u00f3n de la letra x en la l\u00ednea actual, desde la posici\u00f3n del cursor. Por \u00faltimo, respecto a comandos de movimiento, existen 3 comandos muy especiales que nos permiten posicionar el cursor al principio, medio y final de la pantalla. Ojo, no principio, medio y final del fichero, sino de la pantalla, de lo que vemos en nuestro monitor: Comando Significado H Posiciona el cursor al principio de la pantalla (sin hacer scroll de ella). M Posiciona el cursor en el centro de la pantalla. L Posiciona el cursor en la parte baja de la pantalla. N\u00f3tese lo \u00fatil que puede ser los comandos w , W , b y B para moverse a derecha e izquierda en un p\u00e1rrafo palabra a palabra, a una velocidad mucho m\u00e1s r\u00e1pida que utilizando los cursores. Y adem\u00e1s podemos agregar multiplicadores, de modo que 6w nos mover\u00e1 el cursor 6 palabras a la derecha, que puede equivaler a ahorrarse 40-50 pulsaciones de cursor o levantar la mano del teclado para llevarla al rat\u00f3n. El concepto de \"palabra\" de Vim es [a-zA-Z0-9_] , es decir, que forma parte de una misma palabra todos los car\u00e1cteres alfanum\u00e9ricos (a-z y 0-9) adem\u00e1s del car\u00e1cter de subrayado (underscore) \"_\". Si queremos excluir el subrayado de la consideraci\u00f3n de palabra, podemos hacerlo con esta opci\u00f3n del vimrc: set iskeyword-=_ Operadores \u00b6 Existen una serie de comandos en Vim que se comportan como operadores, actuando sobre los comandos de movimiento. Por ejemplo, el operador de borrado d (delete), se puede anteponer a comandos de Vim para modificar su comportamiento. As\u00ed, si el comando w se mueve hasta la siguiente palabra, el comando dw , borra desde la posici\u00f3n del cursor hasta el final la palabra actual y se mueve hasta la siguiente palabra (recordemos que podr\u00edamos utilizar dW para borrar la palabra completa hasta el siguiente espacio sin contar separadores especiales). De igual forma, 4dw realiza 4 veces dw, es decir, borra 4 palabras. N\u00f3tese que adem\u00e1s de 4dw tambi\u00e9n podr\u00edamos haber escrito d4w , que hubiera tenido el mismo efecto. Resumiendo, los 2 comandos siguientes son 2 formas diferentes de hacer lo mismo: Comando Significado 4dw Repetir 4 veces dw , es decir, borrar 4 palabras. d4w Borrar el resultado de 4w , es decir, borrar el resultado de moverse 4 palabras. As\u00ed, si el comando ** nos mueve hasta el final de la l\u00ednea actual, el comando **d ** nos mueve hasta el final de la l\u00ednea actual, el comando **d borra desde la posici\u00f3n actual del cursor hasta el final de la l\u00ednea. O, por ejemplo, si el comando 100G nos lleva a la l\u00ednea 100, el comando d100G borra desde la l\u00ednea actual hasta la l\u00ednea 100. Del mismo modo, podemos utilizar db o DB para borrar la palabra a la izquierda del cursor, o d^ para borrar desde la posici\u00f3n actual hasta el principio de la l\u00ednea. Otro operador interesante es c . El operador c significa cambio. Se comporta ex\u00e1ctamente igual que d , pero al acabar pone el cursor en modo inserci\u00f3n. El sentido es el siguiente: si con dw (o dW ) borramos la palabra actual, con cw hacemos lo mismo pero adem\u00e1s se pone el editor en modo inserci\u00f3n para que introduzcamos texto, lo que efectivamente resulta en que hemos cambiado la palabra actual. Se le pueden aplicar los mismos modificadores y opciones (como 4cw , c100G , etc). El equivalente de cambio de dd (borrar l\u00ednea completa) es cc (cambiar l\u00ednea completa). Como algunos modificaciones y operadores se utilizan tanto, Vim nos proporciona unos atajos de una sola letra para ejecutarlos: Atajo Equivalente Significado x dl Borrar el car\u00e1cter bajo el cursor. X dh Borrar el car\u00e1cter a la izquierda del cursor. D d$ Borrar hasta el final de la l\u00ednea. C c$ Cambiar el texto hasta el final de la l\u00ednea. s cl Cambiar un car\u00e1cter. S cc Cambiar la l\u00ednea completa. Gracias a la potencia de Vim, entre operadores y multiplicadores podemos hacer la edici\u00f3n much\u00edsimo m\u00e1s r\u00e1pida. Veamos algunos comandos m\u00e1s avanzados: Comando Significado dw Borrar desde el cursor hasta el final de la palabra actual. Por ejemplo, si estamos encima de la letra m de la palabra autom\u00f3vil , ejecutando dw quedar\u00eda tan s\u00f3lo la palabra auto . Recuerda que w avanza hasta el siguiente separador de palabra y W hasta el siguiente espacio entre palabras, de modo que tambi\u00e9n podemos usar dW si es lo que nos interesa. db Borrar desde el cursor hasta el principio de la palabra actual. Por ejemplo, si estamos encima de la letra m de la palabra autom\u00f3vil , ejecutando db quedar\u00eda tan s\u00f3lo la palabra m\u00f3vil . diw Borrar la palabra bajo el cursor (completa), desde su principio hasta su final, estemos donde estemos dentro de la palabra. daw Borrar la palabra bajo el cursor, igual que diw , pero en este caso si existe un espacio tras la palabra tambi\u00e9n lo borra. dis Borrar la frase (no l\u00ednea, sino frase hasta el pr\u00f3ximo punto) sobre la que est\u00e1 el cursor. das Igual que dis, pero si existe un espacio tras la frase tambi\u00e9n lo elimina. dG Borrar desde la posici\u00f3n actual del cursor hasta el final del fichero. dgg Borrar desde la posici\u00f3n actual del cursor hasta el principio del fichero. Cambiando la letra d por una c , los comandos anteriores se transforman en comandos de cambio, pasando a modo inserci\u00f3n tras ser ejecutados. Soy consciente de que habr\u00e1 gente que en este punto dir\u00e1 \"\"\" bueno, yo para borrar una palabra no me voy a 'aprender' un comando, para eso la borro a mano \"\"\". As\u00ed pens\u00e9 yo tambi\u00e9n al leer por primera vez el manual de Vim. Lo que ocurre despu\u00e9s es que las primeras semanas que usas Vim, para borrar una palabra entras en modo edici\u00f3n y usas Supr o la tecla de borrar. Pasado un tiempo, te das cuenta de lo c\u00f3modo que es usar x directamente en modo comando (pudiendo deshacer as\u00ed cualquier borrado parcial con u ). En alg\u00fan momento tras algo m\u00e1s de tiempo, usar\u00e1s dw y borrar\u00e1s la palabra completa, y finalmente cuando te sientes ante cualquier otro editor te sentiras totalmente limitado de no poder hacer un 4dw para borrar cuatro palabras de golpe. \u00bfQu\u00e9 tal borrar desde la posici\u00f3n actual del cursor hasta el final del p\u00e1rrafo o bloque de c\u00f3digo con d} ? \u00bfO borrar desde la posici\u00f3n del cursor hasta la aparici\u00f3n de la cadena XYZ con d/XYZ ? Las posibilidades son infinitas. El comando punto \".\" \u00b6 Este comando sirve para repetir el \u00faltimo comando que haya producido un cambio en el documento . Es decir, si lo \u00faltimo que ejecutamos fue un comando dd (borrar l\u00ednea), con el comando . lo repetimos. Si fue un comando dw (borrar palabra), con el punto repetimos la ejecuci\u00f3n (pero esta vez sobre la palabra actual). El operador punto es extremadamente \u00fatil, y podemos verlo con un ejemplo (presente en el manual de Vim). Supongamos que estamos editando HTML y queremos borrar algunas im\u00e1genes de la p\u00e1gina (no todas, s\u00f3lo algunas). Habr\u00eda que buscar algunos y borrarlos. Supongamos que buscamos con / la cadena /<img y con ello ponemos el cursor sobre el s\u00edmbolo < de <img . En un editor normal tendr\u00edamos que movernos con los cursores (o el rat\u00f3n) para seleccionar el tag html completo o borrarlo con la tecla de borrar o de suprimir. En Vim la cosa se resume en: /<img <--- Buscar <img y poner el cursor sobre el \"<\" df> <--- Borrar desde el cursor hasta el primer \">\", inclu\u00eddos ambos Recordemos que el comando fCARACTER busca la primera aparici\u00f3n del car\u00e1cter indicado a partir de la posici\u00f3n actual del cursor, de modo que en si estamos posicionados en el < de , la b\u00fasqueda f> buscar\u00e1 la primera aparici\u00f3n de > , es decir, el s\u00edmbolo del final del tag HTML de img. Con el modificador d que le hemos puesto delante, le estamos diciendo que borre ese texto desde la posici\u00f3n actual del cursor hasta el final del tag. As\u00ed, df> elimina el tag completo, tenga la cantidad de letras y texto que tenga. Lo hace vim s\u00f3lo, de forma autom\u00e1tica, porque nosotros le hemos dicho borra desde la posici\u00f3n actual hasta el primer > que encuentres . Pues bien, una vez borrado este primer tag IMG con 2 simples comandos (buscar y borrar), si pulsamos n nos iremos al siguiente tag img . Si nos interesa borrar ese tag que hemos encontrado, le damos al punto . , y repetimos la \u00faltima operaci\u00f3n anterior que modifica el documento, es decir, el df< . Si no nos interesa, le damos a n de nuevo y pasamos al siguiente. \u00bfEs o no es \u00fatil? As\u00ed, podemos saltar de un tag img a otro con \"n\" y, o bien borrarlo con \".\" si nos interesa borrarlo, o saltarlo pulsando de nuevo \"n\" para ir al siguiente match de la b\u00fasqueda. Esto es infinitamente m\u00e1s r\u00e1pido y seguro (a prueba de errores) que realizar la operaci\u00f3n manualmente. Ahora como segundo ejemplo, supongamos que no queremos borrar un tag <img> sino un enlace <a> . El ejemplo anterior no nos vale ex\u00e1ctamente para <a> porque el tag completo no tiene un s\u00edmbolo > sino dos , y df> s\u00f3lo borrar\u00eda hasta el primero: <a href=\"http://enlace\"> texto del enlace </a> En este caso s\u00f3lo tenemos que aprovecharnos de los multiplicadores: Si no estamos buscando el primer s\u00edmbolo > , sino en segundo, todo se reduce a: /<a href <--- Buscar la cadena \"<a href\" y posicionar el cursor en \"<\" d2f> <--- Borrar desde la posici\u00f3n actual hasta el segundo \">\" encontrado Es decir, en lugar de borrar el resultado de f> ejecutamos el borrado de 2f> , que es repetir 2 veces el f> con lo que encontramos el segundo cierre de tag. Tambi\u00e9n, en lugar de 'f', podemos utilizar 't' para realizar la misma b\u00fasqueda pero hasta la posici\u00f3n anterior al car\u00e1cter buscado. De esta forma, supongamos que queremos borrar en el siguiente ejemplo todo desde la posici\u00f3n actual del cursor (en la \"M\" en nuestro ejemplo) hasta el par\u00e9ntesis: void MiFuncion_larga( int x ); En ese caso, bastar\u00e1 con pulsar dt( para borrar hasta la \"a\" anterior al par\u00e9ntesis, dejando el nombre de la funci\u00f3n listo para ser tecleado de nuevo. Pensad por un momento la diferencia entre un editor convencional y vim con lo que hemos visto hasta ahora. Alguien podr\u00eda pensar es que es complicado tanto comando . Piensa que no los aprendes de memoria, sino con el uso (y casi por l\u00f3gica, por ejemplo, dw = delete word). Fuente : Guia de vim por : Santiago Romero","title":"M\u00e1s sobre movimiento y cambios"},{"location":"herramientas-it/vim/02-movimientos_y_cambios/#mas-sobre-movimiento-y-cambios","text":"Una vez hemos digerido lo b\u00e1sico sobre Vim (b\u00e1sico pero que ya nos permite hacer gran cantidad de cosas), vamos a ver m\u00e1s opciones de edici\u00f3n con respecto a la modificaci\u00f3n del texto. Soy consciente de que hemos visto muchos comandos y atajos, pero ten\u00e9is que tener en cuenta que se aprenden con el uso (no por memorizaci\u00f3n) y que probablemente usando el 33% de lo que veremos ya seremos mucho m\u00e1s productivos que con un editor normal.","title":"M\u00e1s sobre movimiento y cambios"},{"location":"herramientas-it/vim/02-movimientos_y_cambios/#modo-reemplazar","text":"Si estando en modo inserci\u00f3n pulsamos la tecla INSERT, pasaremos a modo REEMPLAZAR, donde el texto que introduzcamos modificar\u00e1 el texto bajo el cursor en lugar de a\u00f1adirlo o insertarlo. Pulsando INSERT de nuevo volveremos a modo inserci\u00f3n (en realidad, INSERT sirve para conmutar entre ambos modos), y pulsando ESC volveremos a modo comando. Si en modo comando queremos reemplazar un s\u00f3lo car\u00e1cter, podemos hacerlo mediante el comando r . Nos posicionamos sobre el car\u00e1cter que queremos modificar, pulsamos r seguido del car\u00e1cter correcto, y cambiaremos el car\u00e1cter bajo el cursor por aquel que hemos tecleado tras la r. Por ejemplo, ra reemplazar\u00e1 el c\u00e1racter bajo el cursor por una a , sin salir del modo comando. Es ligeramente m\u00e1s r\u00e1pido que pasar a modo inserci\u00f3n, borrar el car\u00e1cter, introducir el nuevo y pulsar ESC para volver a modo comando. Obviamente, podemos aplicar modificadores para repetir el comando m\u00e1s veces. De esta forma, 10ra cambiar\u00e1 los 10 car\u00e1cteres a partir de la posici\u00f3n actual del cursor por car\u00e1cteres a . Finalmente, R (may\u00fascula) permite reemplazar todos los caracteres hasta el final de la l\u00ednea actual.","title":"Modo reemplazar"},{"location":"herramientas-it/vim/02-movimientos_y_cambios/#deshacer-cambios","text":"En vim, podemos deshacer m\u00faltiples pasos con la tecla u , y rehacer pasos de nuevo con Ctrl-R . Esto es diferente del v\u00ed cl\u00e1sico, donde s\u00f3lo pod\u00edas deshacer un paso, y volviendo a dar a \"u\" deshac\u00edas lo deshecho, es decir, hac\u00edas un undo del undo. Para rizar m\u00e1s el rizo, vim dispone incluso de funcionalidad de undo especificando el tiempo. Podemos volver el documento atr\u00e1s en el tiempo con el comando :earlier , y volver de nuevo adelante el tiempo necesario con :later : :earlier 1h <-- Volvemos el documento a como estaba hace 1 hora :later 10m <-- Ahora avanzamos 30 minutos (a como estaba hace 60-10=50m)","title":"Deshacer cambios"},{"location":"herramientas-it/vim/02-movimientos_y_cambios/#especificando-rangos-de-texto","text":"En Vim podemos aplicar las b\u00fasquedas, borrados y modificaciones no s\u00f3lo a la l\u00ednea actual o a la totalidad del documento, sino que tambi\u00e9n podemos hacer referencia a porciones del texto: Rango definido con... Significado % Todo el documento. n,M Bloque de l\u00edneas desde la n a la M. 'a,'b Bloque de l\u00edneas entre las marcas a y b. '<,'> Bloque de texto seleccionado en modo visual. Por ejemplo: :17,20d -> Borrar l\u00edneas de la 17 a la 20 :'a,'b s/hola/adios/g -> Cambiar cadena en el bloque entre las marcas 'a y 'b El rango \"Bloque de texto seleccionado\" ('<,'>) aparece autom\u00e1ticamente cuando tenemos seleccionado texto en modo visual y pulsamos \":\" para teclear un comando.","title":"Especificando rangos de texto"},{"location":"herramientas-it/vim/02-movimientos_y_cambios/#movimiento-mas-avanzado","text":"Hemos dicho que con el modo comando de Vim tenemos muchas m\u00e1s opciones que con el modo inserci\u00f3n (o que en otros editores), pero hasta ahora s\u00f3lo hemos visto una \u00ednfima parte de las posibilidades de Vim. Como veremos ahora, no tenemos porqu\u00e9 movernos car\u00e1cter a car\u00e1cter, l\u00ednea a l\u00ednea o p\u00e1gina a p\u00e1gina. Vamos a poder movernos a la palabra anterior y la siguiente, a cualquier parte del fichero, etc. Comando Significado w Mueve el cursor al principio de la siguiente palabra de la l\u00ednea actual, o de la siguiente l\u00ednea si estamos en la \u00faltima palabra de la l\u00ednea. b Mueve el cursor al principio de la anterior palabra de la l\u00ednea actual, o de la anterior l\u00ednea si estamos en la primera palabra de la l\u00ednea. e Igual que w , pero coloca el cursor en el \u00faltimo car\u00e1cter de la siguiente palabra (al final de la palabra en lugar de al principio). ge Igual que b , pero coloca el cursor en el \u00faltimo car\u00e1cter de la anterior palabra. W, B, E y gE Iguales que w , b , e y ge , pero con una peculiaridad. En may\u00fasculas, nos movemos de palabra en palabra considerando como separador de palabra s\u00f3lo los espacios en blanco y retornos de carro, mientras que en min\u00fasculas, Vim utiliza un modo inteligente con m\u00e1s separadores de palabras, como el gui\u00f3n o la barra. Por ejemplo, en el caso de tener la frase cadena1-cadena2 cadena3 o cadena1/cadena2 cadena3 con el cursor sobre el primer car\u00e1cter, w avanzar\u00eda el cursor hasta primera letra de cadena2 , mientras que W lo avanzar\u00eda hasta la primera letra de cadena3 . $ Mueve el cursor al final de la l\u00ednea (equivalente a la tecla Fin). 0 Mueve el cursor al principio de la l\u00ednea (equivalente a la tecla Inicio). ^ Mueve el cursor al primer car\u00e1cter no blanco de la l\u00ednea. Perfecto a la hora de programar, cuando queremos corregir cosas en el c\u00f3digo, normalmente indentado con espacios o tabuladores al principio de las l\u00edneas. { Mueve el cursor al anterior p\u00e1rrafo (o bloque de c\u00f3digo). } Mueve el cursor al siguiente p\u00e1rrafo (o bloque de c\u00f3digo). f Realiza una b\u00fasqueda en la l\u00ednea actual del car\u00e1cter indicado. Por ejemplo, fx mueve el cursor a la primera aparici\u00f3n del car\u00e1cter x desde la posici\u00f3n actual. Muy \u00fatil para ir r\u00e1pidamente a partes concretas de una l\u00ednea sin llevar la mano al rat\u00f3n (por ejemplo, para corregir una h que sea un error ortogr\u00e1fico, pulsando fh . F Igual que el comando anterior, pero realizando la b\u00fasqueda hacia atr\u00e1s en la l\u00ednea actual (empezando desde la posici\u00f3n actual del cursor). t y T Similares a f y F salvo que posicionan el cursor en el car\u00e1cter anterior a la letra buscada. ; y , Repiten la ejecuci\u00f3n del \u00faltimo comando f, F, t o T hacia adelante (;) o hacia atr\u00e1s (,). ESC En el caso de b\u00fasquedas f, F, t o T , permite cancelar la b\u00fasqueda. % Al pulsarlo sobre un par\u00e9ntesis abierto o cerrado (, ) , corchete abierto o cerrado [, ] , o llave abierta o cerrada {, } , mueve el cursor a la pareja de dicho elemento. Por ejemplo, si estamos programando y queremos saber cu\u00e1l es el par\u00e9ntesis que cierra el par\u00e9ntesis sobre el cual est\u00e1 el cursor, pulsamos % y vim nos lleva directamente a \u00e9l. Como tambi\u00e9n funciona con corchetes y llaves, podemos encontrar f\u00e1cilmente qu\u00e9 llave cierra un bloque de c\u00f3digo, o qu\u00e9 if/for/while/loquesea es el que ha abierto una determinada llave de cierre en un programa en C que estemos depurando. G Ir a la l\u00ednea n\u00famero NUMERO del documento. Por ejemplo, 100G nos llevar\u00eda a la l\u00ednea n\u00famero 100. Es especialmente \u00fatil a la hora de programar, cuando tenemos que ir a l\u00edneas concretas del programa donde el compilador nos ha reportado errores. Si no estamos programando pero queremos utilizar n\u00fameros de l\u00edneas (porque nos parece m\u00e1s c\u00f3modo), podemos hacer uso de las siguientes opciones de modo comando: Comando Significado :set number Activa la numeraci\u00f3n de l\u00edneas. :set nonumber Desactiva la numeraci\u00f3n de l\u00edneas. :set ruler Activa en la barra de estado una indicaci\u00f3n de la columna y fila actual. Cualquiera de estas opciones las podemos poner en nuestro fichero .vimrc para que se apliquen a todos los documentos que editemos, o cambiarlas en cualquier momento en modo comando. Comando Significado gg Ir a la primera l\u00ednea del documento (equivale a 1G ) G Sin n\u00famero delante, G nos lleva a la \u00faltima l\u00ednea del documento. % Nos lleva a un porcentaje concreto del fichero. Por ejemplo 50% nos lleva a la mitad del fichero, y 95% , casi al final del mismo. CTRL+F Scrollea una pantalla completa hacia adelanta (F de Forward). CTRL+B Scrollea una pantalla completa hacia atr\u00e1s (B de Backward). CTRL+E Scrollea la pantalla en una s\u00f3la l\u00ednea hacia arriba. CTRL+Y Scrollea la pantalla en una s\u00f3la l\u00ednea hacia abajo. CTRL+U Scrollea media pantalla de texto hacia abajo (el equivalente a hacer medio ReP\u00e1g). Puede sonar raro el hecho de scrollear medias pantallas , pero en determinadas situaciones puede ser \u00fatil (si no queremos perder de vista texto ya le\u00eddo cuando avanzamos, por ejemplo). CTRL+D Scrollea media pantalla de texto hacia arriba (como hacer medio AvP\u00e1g). Permite as\u00ed avanzar el documento media p\u00e1gina sin perder de vista el texto donde est\u00e1 el cursor. zz Sin modificar la posici\u00f3n actual del cursor, modifica la ventana de visualizaci\u00f3n del fichero de forma que la l\u00ednea actual acabe centrada en pantalla y podamos ver el contexto. Por ejemplo, supongamos que estamos en la parte de abajo de la pantalla con el cursor en la \u00faltima l\u00ednea y necesitamos ver con facilidad y claridad qu\u00e9 l\u00edneas hay sobre y bajo ella. En otros editores usar\u00edamos la tecla de Abajo hasta centrar un poco la l\u00ednea en pantalla y luego subir\u00edamos hacia arriba para volver a la l\u00ednea en que est\u00e1bamos. En Vim basta con pulsar zz para centrar la l\u00ednea actual en pantalla sin mover la posici\u00f3n del cursor para nada. zt Igual que zz pero posicionando la l\u00ednea en la parte superior de la pantalla (t viene de top) lo que nos permite ver con claridad la l\u00ednea actual y muchas l\u00edneas posteriores. zb Igual que zt, pero posicionando la l\u00ednea en la \u00faltima posici\u00f3n de la ventana de pantalla, lo que nos permite ver la l\u00ednea actual y muchas l\u00edneas anteriores. En ambos 3 comandos no se modifica la posici\u00f3n del cursor en el documento, s\u00f3lo la manera de verlo en pantalla. De nuevo podemos utilizar multiplicadores en todos los comandos anteriores para evitarnos pulsaciones innecesarias de teclas: Comando Significado 20w Avanzar 20 palabras. 3fx Avanzar el cursor a la tercera aparici\u00f3n de la letra x en la l\u00ednea actual, desde la posici\u00f3n del cursor. Por \u00faltimo, respecto a comandos de movimiento, existen 3 comandos muy especiales que nos permiten posicionar el cursor al principio, medio y final de la pantalla. Ojo, no principio, medio y final del fichero, sino de la pantalla, de lo que vemos en nuestro monitor: Comando Significado H Posiciona el cursor al principio de la pantalla (sin hacer scroll de ella). M Posiciona el cursor en el centro de la pantalla. L Posiciona el cursor en la parte baja de la pantalla. N\u00f3tese lo \u00fatil que puede ser los comandos w , W , b y B para moverse a derecha e izquierda en un p\u00e1rrafo palabra a palabra, a una velocidad mucho m\u00e1s r\u00e1pida que utilizando los cursores. Y adem\u00e1s podemos agregar multiplicadores, de modo que 6w nos mover\u00e1 el cursor 6 palabras a la derecha, que puede equivaler a ahorrarse 40-50 pulsaciones de cursor o levantar la mano del teclado para llevarla al rat\u00f3n. El concepto de \"palabra\" de Vim es [a-zA-Z0-9_] , es decir, que forma parte de una misma palabra todos los car\u00e1cteres alfanum\u00e9ricos (a-z y 0-9) adem\u00e1s del car\u00e1cter de subrayado (underscore) \"_\". Si queremos excluir el subrayado de la consideraci\u00f3n de palabra, podemos hacerlo con esta opci\u00f3n del vimrc: set iskeyword-=_","title":"Movimiento m\u00e1s avanzado"},{"location":"herramientas-it/vim/02-movimientos_y_cambios/#operadores","text":"Existen una serie de comandos en Vim que se comportan como operadores, actuando sobre los comandos de movimiento. Por ejemplo, el operador de borrado d (delete), se puede anteponer a comandos de Vim para modificar su comportamiento. As\u00ed, si el comando w se mueve hasta la siguiente palabra, el comando dw , borra desde la posici\u00f3n del cursor hasta el final la palabra actual y se mueve hasta la siguiente palabra (recordemos que podr\u00edamos utilizar dW para borrar la palabra completa hasta el siguiente espacio sin contar separadores especiales). De igual forma, 4dw realiza 4 veces dw, es decir, borra 4 palabras. N\u00f3tese que adem\u00e1s de 4dw tambi\u00e9n podr\u00edamos haber escrito d4w , que hubiera tenido el mismo efecto. Resumiendo, los 2 comandos siguientes son 2 formas diferentes de hacer lo mismo: Comando Significado 4dw Repetir 4 veces dw , es decir, borrar 4 palabras. d4w Borrar el resultado de 4w , es decir, borrar el resultado de moverse 4 palabras. As\u00ed, si el comando ** nos mueve hasta el final de la l\u00ednea actual, el comando **d ** nos mueve hasta el final de la l\u00ednea actual, el comando **d borra desde la posici\u00f3n actual del cursor hasta el final de la l\u00ednea. O, por ejemplo, si el comando 100G nos lleva a la l\u00ednea 100, el comando d100G borra desde la l\u00ednea actual hasta la l\u00ednea 100. Del mismo modo, podemos utilizar db o DB para borrar la palabra a la izquierda del cursor, o d^ para borrar desde la posici\u00f3n actual hasta el principio de la l\u00ednea. Otro operador interesante es c . El operador c significa cambio. Se comporta ex\u00e1ctamente igual que d , pero al acabar pone el cursor en modo inserci\u00f3n. El sentido es el siguiente: si con dw (o dW ) borramos la palabra actual, con cw hacemos lo mismo pero adem\u00e1s se pone el editor en modo inserci\u00f3n para que introduzcamos texto, lo que efectivamente resulta en que hemos cambiado la palabra actual. Se le pueden aplicar los mismos modificadores y opciones (como 4cw , c100G , etc). El equivalente de cambio de dd (borrar l\u00ednea completa) es cc (cambiar l\u00ednea completa). Como algunos modificaciones y operadores se utilizan tanto, Vim nos proporciona unos atajos de una sola letra para ejecutarlos: Atajo Equivalente Significado x dl Borrar el car\u00e1cter bajo el cursor. X dh Borrar el car\u00e1cter a la izquierda del cursor. D d$ Borrar hasta el final de la l\u00ednea. C c$ Cambiar el texto hasta el final de la l\u00ednea. s cl Cambiar un car\u00e1cter. S cc Cambiar la l\u00ednea completa. Gracias a la potencia de Vim, entre operadores y multiplicadores podemos hacer la edici\u00f3n much\u00edsimo m\u00e1s r\u00e1pida. Veamos algunos comandos m\u00e1s avanzados: Comando Significado dw Borrar desde el cursor hasta el final de la palabra actual. Por ejemplo, si estamos encima de la letra m de la palabra autom\u00f3vil , ejecutando dw quedar\u00eda tan s\u00f3lo la palabra auto . Recuerda que w avanza hasta el siguiente separador de palabra y W hasta el siguiente espacio entre palabras, de modo que tambi\u00e9n podemos usar dW si es lo que nos interesa. db Borrar desde el cursor hasta el principio de la palabra actual. Por ejemplo, si estamos encima de la letra m de la palabra autom\u00f3vil , ejecutando db quedar\u00eda tan s\u00f3lo la palabra m\u00f3vil . diw Borrar la palabra bajo el cursor (completa), desde su principio hasta su final, estemos donde estemos dentro de la palabra. daw Borrar la palabra bajo el cursor, igual que diw , pero en este caso si existe un espacio tras la palabra tambi\u00e9n lo borra. dis Borrar la frase (no l\u00ednea, sino frase hasta el pr\u00f3ximo punto) sobre la que est\u00e1 el cursor. das Igual que dis, pero si existe un espacio tras la frase tambi\u00e9n lo elimina. dG Borrar desde la posici\u00f3n actual del cursor hasta el final del fichero. dgg Borrar desde la posici\u00f3n actual del cursor hasta el principio del fichero. Cambiando la letra d por una c , los comandos anteriores se transforman en comandos de cambio, pasando a modo inserci\u00f3n tras ser ejecutados. Soy consciente de que habr\u00e1 gente que en este punto dir\u00e1 \"\"\" bueno, yo para borrar una palabra no me voy a 'aprender' un comando, para eso la borro a mano \"\"\". As\u00ed pens\u00e9 yo tambi\u00e9n al leer por primera vez el manual de Vim. Lo que ocurre despu\u00e9s es que las primeras semanas que usas Vim, para borrar una palabra entras en modo edici\u00f3n y usas Supr o la tecla de borrar. Pasado un tiempo, te das cuenta de lo c\u00f3modo que es usar x directamente en modo comando (pudiendo deshacer as\u00ed cualquier borrado parcial con u ). En alg\u00fan momento tras algo m\u00e1s de tiempo, usar\u00e1s dw y borrar\u00e1s la palabra completa, y finalmente cuando te sientes ante cualquier otro editor te sentiras totalmente limitado de no poder hacer un 4dw para borrar cuatro palabras de golpe. \u00bfQu\u00e9 tal borrar desde la posici\u00f3n actual del cursor hasta el final del p\u00e1rrafo o bloque de c\u00f3digo con d} ? \u00bfO borrar desde la posici\u00f3n del cursor hasta la aparici\u00f3n de la cadena XYZ con d/XYZ ? Las posibilidades son infinitas.","title":"Operadores"},{"location":"herramientas-it/vim/02-movimientos_y_cambios/#el-comando-punto","text":"Este comando sirve para repetir el \u00faltimo comando que haya producido un cambio en el documento . Es decir, si lo \u00faltimo que ejecutamos fue un comando dd (borrar l\u00ednea), con el comando . lo repetimos. Si fue un comando dw (borrar palabra), con el punto repetimos la ejecuci\u00f3n (pero esta vez sobre la palabra actual). El operador punto es extremadamente \u00fatil, y podemos verlo con un ejemplo (presente en el manual de Vim). Supongamos que estamos editando HTML y queremos borrar algunas im\u00e1genes de la p\u00e1gina (no todas, s\u00f3lo algunas). Habr\u00eda que buscar algunos y borrarlos. Supongamos que buscamos con / la cadena /<img y con ello ponemos el cursor sobre el s\u00edmbolo < de <img . En un editor normal tendr\u00edamos que movernos con los cursores (o el rat\u00f3n) para seleccionar el tag html completo o borrarlo con la tecla de borrar o de suprimir. En Vim la cosa se resume en: /<img <--- Buscar <img y poner el cursor sobre el \"<\" df> <--- Borrar desde el cursor hasta el primer \">\", inclu\u00eddos ambos Recordemos que el comando fCARACTER busca la primera aparici\u00f3n del car\u00e1cter indicado a partir de la posici\u00f3n actual del cursor, de modo que en si estamos posicionados en el < de , la b\u00fasqueda f> buscar\u00e1 la primera aparici\u00f3n de > , es decir, el s\u00edmbolo del final del tag HTML de img. Con el modificador d que le hemos puesto delante, le estamos diciendo que borre ese texto desde la posici\u00f3n actual del cursor hasta el final del tag. As\u00ed, df> elimina el tag completo, tenga la cantidad de letras y texto que tenga. Lo hace vim s\u00f3lo, de forma autom\u00e1tica, porque nosotros le hemos dicho borra desde la posici\u00f3n actual hasta el primer > que encuentres . Pues bien, una vez borrado este primer tag IMG con 2 simples comandos (buscar y borrar), si pulsamos n nos iremos al siguiente tag img . Si nos interesa borrar ese tag que hemos encontrado, le damos al punto . , y repetimos la \u00faltima operaci\u00f3n anterior que modifica el documento, es decir, el df< . Si no nos interesa, le damos a n de nuevo y pasamos al siguiente. \u00bfEs o no es \u00fatil? As\u00ed, podemos saltar de un tag img a otro con \"n\" y, o bien borrarlo con \".\" si nos interesa borrarlo, o saltarlo pulsando de nuevo \"n\" para ir al siguiente match de la b\u00fasqueda. Esto es infinitamente m\u00e1s r\u00e1pido y seguro (a prueba de errores) que realizar la operaci\u00f3n manualmente. Ahora como segundo ejemplo, supongamos que no queremos borrar un tag <img> sino un enlace <a> . El ejemplo anterior no nos vale ex\u00e1ctamente para <a> porque el tag completo no tiene un s\u00edmbolo > sino dos , y df> s\u00f3lo borrar\u00eda hasta el primero: <a href=\"http://enlace\"> texto del enlace </a> En este caso s\u00f3lo tenemos que aprovecharnos de los multiplicadores: Si no estamos buscando el primer s\u00edmbolo > , sino en segundo, todo se reduce a: /<a href <--- Buscar la cadena \"<a href\" y posicionar el cursor en \"<\" d2f> <--- Borrar desde la posici\u00f3n actual hasta el segundo \">\" encontrado Es decir, en lugar de borrar el resultado de f> ejecutamos el borrado de 2f> , que es repetir 2 veces el f> con lo que encontramos el segundo cierre de tag. Tambi\u00e9n, en lugar de 'f', podemos utilizar 't' para realizar la misma b\u00fasqueda pero hasta la posici\u00f3n anterior al car\u00e1cter buscado. De esta forma, supongamos que queremos borrar en el siguiente ejemplo todo desde la posici\u00f3n actual del cursor (en la \"M\" en nuestro ejemplo) hasta el par\u00e9ntesis: void MiFuncion_larga( int x ); En ese caso, bastar\u00e1 con pulsar dt( para borrar hasta la \"a\" anterior al par\u00e9ntesis, dejando el nombre de la funci\u00f3n listo para ser tecleado de nuevo. Pensad por un momento la diferencia entre un editor convencional y vim con lo que hemos visto hasta ahora. Alguien podr\u00eda pensar es que es complicado tanto comando . Piensa que no los aprendes de memoria, sino con el uso (y casi por l\u00f3gica, por ejemplo, dw = delete word). Fuente : Guia de vim por : Santiago Romero","title":"El comando punto \".\""},{"location":"herramientas-it/vim/03-copiar_y_pegar/","text":"Copiar y pegar \u00b6 Cuando borramos texto (con dd , dw , x o similares), dicho texto (l\u00edneas, palabras o incluso un simple car\u00e1cter) se almacena en un buffer interno. Digamos que no se borra sino que se corta . Podemos pegar el \u00faltimo texto borrado utilizando el comando p . Esta es la primera lecci\u00f3n de este cap\u00edtulo: p = paste = pegar. Cabe destacar que una l\u00ednea cortada con dd , al ser pegada con p ser\u00e1 insertada debajo de la l\u00ednea actual del cursor. Si lo que pegamos no es una l\u00ednea completa sino una porci\u00f3n de texto, entonces ser\u00e1 insertado a la derecha de la posici\u00f3n actual del cursor. Existe una variante de p que es P , cuya diferencia es que pega el texto a la izquierda de la posici\u00f3n actual del cursor para porciones de texto, o en la l\u00ednea sobre el cursor para l\u00edneas completas. Como siempre, podemos aprovechar los multiplicadores para ahorrarnos trabajo: Con dd podemos cortar una l\u00ednea y con, por ejemplo, 10p podemos pegar 10 copias de la linea cortada. En general, dd y p (para una s\u00f3la l\u00ednea) o dd y p (para m\u00faltiples l\u00edneas) pueden ser utilizados para mover bloques de texto de un lugar a otro (copi\u00e1ndolos y peg\u00e1ndolos). Finalmente, comentar que existe un comando especial llamado ]p que a la hora de pegar tiene en cuenta la indentaci\u00f3n del c\u00f3digo por lo que permite pegar c\u00f3digo en diferentes niveles de indentaci\u00f3n del que lo hemos cortado, sin tener que reajustar todas las l\u00edneas. Seleccionar: el modo visual \u00b6 Aparte de poder pegar texto cortado con comandos, en Vim podemos seleccionar texto al estilo de lo que se puede hacer en otros editores. Si pulsamos la tecla v pasaremos a modo visual, donde con los cursores (o las teclas de movimiento de vim) extendemos el \u00e1rea de selecci\u00f3n para despu\u00e9s operar con ella. Nos posicionamos en la primera letra de lo que queremos seleccionar (o la \u00faltima), y usamos arriba, abajo, izquierda y derecha para hacerlo, y podemos cancelar la selecci\u00f3n en cualquier momento pulsando ESCAPE. Existen 2 variantes m\u00e1s del modo visual para seleccionar texto: la primera es V (v may\u00fascula), que trabaja s\u00f3lo con selecci\u00f3n de l\u00edneas completas (usando las teclas de arriba y abajo). Es decir, si pulsamos v (min\u00fascula) en medio de una frase, podremos mover la selecci\u00f3n a derecha o izquierda para coger palabras sueltas (y tambi\u00e9n frases con arriba y abajo), mientras que V (may\u00fascula) s\u00f3lo trabaja con frases completas. La segunda variante son las selecciones de bloques o selecciones verticales. Supongamos que tenemos una tabla como la siguiente: Nombre Telefono Direccion Juan 12345112 C/. Brasa Pepe 78678112 C/. Nada Andres 87894563 C/. Casa Pues bien, si quisieramos borrar la columna tel\u00e9fono completa, en muchos editores que no disponen de selecciones verticales tendr\u00edamos que ir l\u00ednea a l\u00ednea borrando Telefono , 12345112 , 7867811 y 87894563 . En Vim podemos hacer una selecci\u00f3n vertical de un bloque que comprenda justo esa columna y trabajar sobre ella: nos posicionamos sobre la T de Tel\u00e9fono y pulsamos CTRL+V , con lo que pasamos a modo de edici\u00f3n de bloques. Usando los cursores o las teclas de movimiento seleccionamos la columna, y ya podemos trabajar sobre ella (cortarla, copiarla, etc). N\u00f3tese que Ctrl+V es, en Vim para Windows, el atajo para pegar texto desde el portapapeles, por lo que en Windows puede ser necesario remapear esta tecla a otro atajo de teclado (con map , como veremos m\u00e1s adelante). Algo muy interesante de cuando estamos en modo visual es que podemos usar las teclas de movimiento especiales. Si por ejemplo pulsamos w , la selecci\u00f3n avanza una palabra completa. Si pulsamos as (a sentence), la selecci\u00f3n avanza una frase entera (hasta el pr\u00f3ximo punto o separador), y podemos repetir los comandos que deseemos y combinarlos hasta seleccionar el texto deseado. Es decir, que lo bueno del modo visual es que podemos usar los mismos \"verbos\" de movimiento que usa Vim en modo comando: 0, $, G, gg, fCHAR, /string, etc. Adem\u00e1s, podemos usar verbos espaciales para seleccionar bloques delimitados por comillas, par\u00e9ntesis, corchetes, etc: Comando Resultado de la secci\u00f3n iX Seleccionar un bloque entero de texto basado en X, donde X puede ser: w o W palabra completa s \u21d2 sentence (frase) p \u21d2 p\u00e1rrafo b or ( \u21d2 bloque de par\u00e9ntesis (contenido entre ( y ) ). B o { \u21d2 bloque de { llaves } t \u21d2 contenido de un y < \u21d2 un bloque < y > block [ \u21d2 un bloque [ y ] \" o ' \u21d2 una cadena (bloque entre delimitador de cadenas) NOTA: Los caracteres de cierre tambi\u00e9n funcionan, como ), ], etc. Un peque\u00f1o apunte (no muy utilizado) sobre la selecci\u00f3n de texto: si estamos seleccionando texto y vemos que queremos modificar el INICIO de la selecci\u00f3n, podemos pulsar o para cambiar entre los 2 l\u00edmites de la selecci\u00f3n y cambiar uno u otro. La versi\u00f3n may\u00fascula, O se utiliza para alternar entre las 4 esquinas de las selecciones verticales de CTRL+V. Copiar, cortar y pegar \u00b6 Una vez tenemos el texto seleccionado (de cualquiera de las 3 formas descritas), podemos borrarlo, cortarlo y copiarlo. Estando en modo visual, con el texto sobre el que queremos actuar marcado, podemos copiarlo pulsando y (de yank) y cortarlo, ya sea con d , x y c . La diferencia entre estos 3 modos de copiar est\u00e1 en que d y x se mantienen en modo comando tras cortar el texto, mientras que c (que recordemos que es modificar), se pasa a modo inserci\u00f3n tras hacerlo. Por supuesto, si nos arrepentimos del cortado podemos pulsar u (undo) para deshacerlo. Recordemos que en cualquier momento podemos volver a pegar un texto copiado o borrado usando p . As\u00ed pues, mediante v , y , d y p se realizan todas las operaciones de selecci\u00f3n, copiado, borrado/cortado y pegado, respectivamente. En el caso concreto de y , dado que es un operador podemos anteponerlo a otros comandos de Vim. Por ejemplo, yw copia una palabra completa, y y5w copia las siguientes 5 palabras completas en el buffer de memoria. Y, para finalizar, igual que ocurre con d y dd , duplicando la y como yy copiamos a memoria la l\u00ednea actual completa (sin necesidad de seleccionarla). Utilizando multiplicadores, podemos por ejemplo copiar la l\u00ednea actual y 3 m\u00e1s mediante 4yy . Pegar texto con autoindent activado \u00b6 Si tenemos activado el modo de autoindentaci\u00f3n ( set ai o set autoindent ), cada vez que pulsamos ENTER, el cursor se indenta de forma autom\u00e1tica al nivel (columna) de la l\u00ednea en que lo hemos pulsado. Esto, que resulta muy \u00fatil programando, puede ser problem\u00e1tico para pegar texto con m\u00faltiples l\u00edneas, ya que cada retorno de carro del texto pegado provocar\u00e1 que la l\u00ednea empiece al nivel de la anterior, y que adem\u00e1s se sumen los espacios y tabuladores de lo que estamos pegando. El resultado es el siguiente: Copiamos el siguiente texto (con el rat\u00f3n): result = dlg.ShowModal() dlg.Destroy() if result == wx.ID_YES: del frame_1.macros[index] frame_1.Save_Data_To_File() elif result == wx.ID_NO: pass dlg.Destroy() Y lo pegamos en otra parte del documento en modo inserci\u00f3n con el bot\u00f3n central del rat\u00f3n y lo que obtenemos es lo siguiente: result = dlg.ShowModal() dlg.Destroy() if result == wx.ID_YES: del frame_1.macros[index] frame_1.Save_Data_To_File() elif result == wx.ID_NO: pass dlg.Destroy() Como puede verse, cada enter recibido ha indentado la l\u00ednea al nivel de la l\u00ednea actual, sumando adem\u00e1s los espacios que ya ten\u00eda el texto que se est\u00e1 pegando, resultando en ese horror. Esto s\u00f3lo sucede si pegamos texto \"con el rat\u00f3n\", sin usar los comandos de copiado y pegado de Vim. Para pegar texto \"con el rat\u00f3n\" y que esto no suceda, es recomendable desactivar el modo autoindent bien con \" set paste \" o \" set noai \". Tuber\u00edas (pipes) para filtrar texto \u00b6 Cuando tenemos texto seleccionado tanto en modo normal como en modo visual, podemos pasar ese texto a trav\u00e9s de cualquier programa externo para filtrarlo. Por ejemplo, supongamos que tenemos un programa que acepta cualquier texto por entrada est\u00e1ndar y nos saca el texto modificado (ordenado alfab\u00e9ticamente, cifrado, o cualquier otra operaci\u00f3n) por la salida est\u00e1ndar. En ese caso, si queremos manipular un p\u00e1rrafo de nuestro fichero podemos seleccionarlo (con 'v' en modo visual, por ejemplo), y mientras est\u00e1 el p\u00e1rrafo seleccionado, pulsamos: :!programa Por ejemplo, supongamos que queremos utilizar el comando sort de UNIX para ordenar alfab\u00e9ticamente las diferentes l\u00edneas de un p\u00e1rrafo. Seleccionamos el p\u00e1rrafo en cuesti\u00f3n con 'v' y los cursores y pulsamos: :!sort El texto seleccionado ser\u00e1 enviado al comando sort por entrada est\u00e1ndar y ser\u00e1 reemplazado por la salida de la ejecuci\u00f3n de sort. De la misma forma podemos ordenar alfab\u00e9ticamente el fichero entero, seleccion\u00e1ndolo todo: 1G v gg :!sort O, lo que es lo mismo: 1G = ir a la primera l\u00ednea del fichero v = ir a modo visual gg = llevar al cursor al final del fichero (seleccionando todo el fichero) *:!sort = pasar el texto seleccionado (todo el fichero) al comando sort, y reemplazarlo por la salida de la ejecuci\u00f3n del mismo. O, m\u00e1s sencillo a\u00fan: :%!sort (% representa a una selecci\u00f3n del fichero completo) El filtrado (pipe a programa externo) nos permite muchas cosas: cifrar texto (llamando a pgp/gpg), pas\u00e1rselo a programas externos que lo manipulen, etc. Otro ejemplo de uso de los filtros es el formateo y justificaci\u00f3n de texto. Si tenemos instalado el comando par (un programa de Linux para formatear p\u00e1rrafos), podemos seleccionar texto en modo visual y filtrarlo a trav\u00e9s de par mediante, por ejemplo: :!par 72 La salida de par 72 (si tenemos instalado par en el sistema, claro) consiste en justificar el texto a 72 columnas, cosa que nos puede ser \u00fatil en determinadas circunstancias de edici\u00f3n de textos. N\u00f3tese que tambi\u00e9n podemos aplicar filtros a rangos de l\u00edneas y al texto delimitado por 2 marcas (posteriormente veremos c\u00f3mo establecerlas): :'<,'> !sort -> Sobre la selecci\u00f3n :'t,'b !sort -> Sobre el texto entre 2 marcas :N,M !sort -> Entre 2 rangos de l\u00edneas (N a M) Insertar ficheros y salida de comandos \u00b6 Podemos insertar el contenido de un fichero de texto en la posici\u00f3n actual del cursor mediante el comando :r . Tan s\u00f3lo deberemos especificar el fichero a insertar (con su ruta si es necesario): :r fichero El comando :r nos permite tambi\u00e9n insertar la salida (el resultado de la ejecuci\u00f3n) de comandos del sistema en nuestro documento. Por ejemplo, si queremos insertar la salida del comando uptime en la posici\u00f3n actual del cursor, pasamos a modo comando (ESC) y ejecutamos: :r !uptime La diferencia entre este comando y el anterior es el s\u00edmbolo de admiraci\u00f3n cerrada '!', que indica ejecuci\u00f3n . M\u00faltiples \"portapapeles\": los registros de borrado \u00b6 Como ya hemos visto, en Vim podemos seleccionar texto con el modo visual usando v para movimiento car\u00e1cter a car\u00e1cter o bien V para l\u00edneas completas. Una vez seleccionado, lo podemos copiar con y , cortar con c y borrar con d . De la misma forma, fuera del modo visual (en modo comando) con dd borramos una l\u00ednea entera, con 3dd 3 l\u00edneas enteras, con dw una palabra entera, con x un c\u00e1racter, con d0 desde el cursor al principio de l\u00ednea, con d$ desde el cursor al final de l\u00ednea, con d/cadena desde el cursor hasta la aparici\u00f3n de \"cadena\", etc. Todo ellos son combinaciones de repetidores, el comando de borrado d y destinos (w=word, $=end of line, /cadena=primer resultado de la b\u00fasqueda, etc). Por otra parte, los comandos b\u00e1sicos para pegar en Vim son p para pegar en justo detras de la posici\u00f3n del cursor, y P para pegar antes de la posici\u00f3n del cursor. Vim autodetecta si el texto que tenemos en su buffer interno, el que estamos pegando, lo hab\u00edamos copiado car\u00e1cter a car\u00e1cter o bien mediante l\u00edneas completas y utiliza esto para pegar dicho texto bien a la derecha/izquierda del cursor, o bien arriba/abajo de la l\u00ednea actual. Si copiamos una porci\u00f3n de c\u00f3digo, la pegar\u00e1 \"dentro\" de la l\u00ednea actual mientras que si copiamos l\u00edneas completas la pegar\u00e1 arriba/abajo de la l\u00ednea actual. Adem\u00e1s de pegar antes o despu\u00e9s del cursor, tambi\u00e9n podemos usar p cuando tenemos realizada una selecci\u00f3n visual, de forma que nuestro texto pegado reemplazar\u00e1 al texto seleccionado. Ahora bien: estos copiados y pegados tienen como destino y origen un buffer interno de Vim, y no el portapapeles del sistema que usan t\u00edpicamente otras aplicaciones. Existen 26 registros (26 portapapeles diferentes) donde podemos copiar texto y pegar desde ellos. S\u00ed, en lugar de tener un \u00fanico \"portapapeles\", tenemos 26 diferentes (de la a a la z ) donde podemos copiar texto para usarlo despu\u00e9s. Esto es extremadamente \u00fatil cuando queremos cortar varias porciones de texto de un fichero para agruparlos en una posici\u00f3n final, ya que podr\u00edamos usar los registros a, b, c y d (por ejemplo) para almacenar 4 bloques de texto y despu\u00e9s pegarlos juntos, evitando subir y bajar continuamente en el fichero para ir llevando cada bloque a su lugar destino. Esto es extremadamente \u00fatil porque tenemos 26 buffers donde copiar y pegar texto y de esta forma podemos copiar varios bloques de texto sin perder copias anteriores. Cuando no indicamos un buffer espec\u00edfico (cuando usamos yy o dd , por ejemplo), estamos usando el Unnamed Buffer (el buffer sin nombre), pero podemos hacer referencia a cualquiera de los 26 registros disponibles. Los registros se referencian con las comillas dobles, de forma que tenemos desde \"a hasta \"z . Usando el nombre del registro como prefijo, hacemos que y , yy , d , dd , p , etc utilicen dicho registro: \"ayy \u2013> Copiar l\u00ednea de texto actual en el registro a. \"add \u2013> Borrar l\u00ednea de texto actual y poner su contenido en el registro a. \"ap \u2013> Pegar el contenido del registro a. Resumiendo: \"x \u2013> Realizar con registro x. Esto tambi\u00e9n funciona con selecciones visuales. Si seleccionamos texto en modo visual y pulsamos \"ac , cortaremos el texto seleccionado al registro a. As\u00ed pues, tenemos 26 posibles registros los cuales, adem\u00e1s, no se pierden al cerrar la sesi\u00f3n de Vim siempre y cuando tengamos Vim en modo \"nocompatible\" en el vimrc. Existen tambi\u00e9n una serie de registros \"especiales\": Registro \"_ \u2013> El registro _ (subrayado) es el registro \"black hole\" (agujero negro). Lo que escribamos en \u00e9l no se guarda, permite borrar de verdad texto. Es muy \u00fatil porque nos permite borrar texto sin eliminar lo que tengamos en el buffer de copiado y pegado. Si tenemos algo en el portapapeles (seleccionado y copiado con y ) y queremos borrar una l\u00ednea con dd sin perder el contenido actual del buffer, podemos hacer \"_dd . Registro \"0 \u2013> Contiene el texto del comando y (yank) m\u00e1s reciente, de modo que \"0p pegar\u00e1 el \u00faltimo texto copiado incluso si hemos utilizado un comando de borrado despu\u00e9s del \"y\". Registros \"1 a \"9 \u2013> Guardan de forma rotatoria los \u00faltimos 9 borrados (siendo el 1 el m\u00e1s reciente). Registros \" * y \"+ \u2013> Se refieren al portapapeles del sistema Windows (*) y X11 (+) (s\u00ed, es posible copiar y pegar en el portapapeles del S.O. desde comandos de Vim). Registro \"\" \u2013> El \"Unnamed Register\" (registro sin nombre). Es el registro en el que acaba el texto que acabamos de copiar o cortar. Un apunte sobre el registro \"0 (y su hermano el registro \"- ): cuando copiamos, cortamos, o incluso cuando borramos (ya sean caracteres o l\u00edneas completas), Vim guarda el texto en estos 2 buffers de forma que incluso si hemos borrado despu\u00e9s algo con d , seguimos teniendo acceso al \"yank\" anterior. Si el texto es menor de una l\u00ednea, se guarda en un registro llamado \"- . Para m\u00e1s de una l\u00ednea, se almacena en \"0 . En otras palabras, un \"delete\" borrar\u00e1 el texto pero no afectar\u00e1 a \"0 . Podemos ver el contenido de los diferentes \"registros\" temporales con el comando :registers y recuperar el contenido de cualquiera de ellos en el documento con \" p , como: \"6p . De esta forma, podemos acceder a contenidos anteriormente borrados sin tener que deshacer m\u00faltiples pasos (que puede implicar deshacer tambi\u00e9n cambios correctos que hicimos entre esos pasos). Finalmente, como si los registros de Vim no fueran ya de por si suficientemente potentes, podemos a\u00f1adir texto al contenido de un registro us\u00e1ndolo en may\u00fasculas: \"Bdd \u2013> Delete current line and append it to the content of the register \"b . Es muy importante entender c\u00f3mo funcionan los registros de copiado y pegado no s\u00f3lo por la potencia que dan, sino porque nos podamos encontrar con situaciones extra\u00f1as (con explicaci\u00f3n l\u00f3gica, como veremos): Supongamos que queremos copiar una l\u00ednea, ir a otra parte del documento, borrar una l\u00ednea y pegar el texto copiado. Supongamos que hacemos lo siguiente: Vamos a la l\u00ednea que queremos copiar y ejecutamos yy para copiarla (en el Unnamed Buffer). Vamos a la parte del documento donde est\u00e1 la l\u00ednea a borrar y pulsamos dd para borrarla. Pulsamos p para pegar la l\u00ednea que copiamos. De repente, en vez de aparecer la l\u00ednea que hab\u00edamos copiado, se pega la que acabamos de borrar. Esto ocurre porque el comando dd borra la l\u00ednea actual y la copia en el Unnamed Buffer, con lo que perdemos el contenido que hab\u00eda antes en dicho buffer (la l\u00ednea que copiamos inicialmente). Para empezar, si nos acaba de ocurrir, simplemente basta con pegar nuestra l\u00ednea copiada original con \"0p , porque como ya dijimos, el registro 0 contiene el \u00faltimo copiado realizado con Comandos Yank \"y\" (y dicho buffer 0 no es sobreescrito por el dd ). Una vez esto nos ha ocurrido y ya sabemos por qu\u00e9 es, basta para la pr\u00f3xima vez con borrar la l\u00ednea a eliminar usando el black-hole register como destino, con \"_dd . As\u00ed borramos la l\u00ednea pero no la guardamos en el Unnamed Register (no perdemos lo que hab\u00edamos copiado). Finalmente, destacar que podemos especificar valores para alguno de los registros tanto en el fichero .vimrc como en comando de Vim con: let @a = \"My custom buffer content\" E incluso podemos utilizar el contenido de los registros en operaciones de sustituci\u00f3n u otros comandos mediante =@a : :%s/PATTERN/\\=@a/g (Cambiar\u00eda todas las apariciones de PATTERN por el contenido del registro a ). Aunque todo esto pueda parecer complicado, todo se resume en: Existen 26 registros que se referencian con comida doble seguido de a-z: Ej: \"a . Podemos aplicar las operaciones de yank, cut, delete y paste a un registro escribiendolo delante de la operaci\u00f3n: Ej: \"ap o \"bdd . Existen registros especiales como un agujero negro (_), la \u00faltima copia realizada (0), el portapapeles del sistema (*)... Usar un registro en may\u00fasculas permite AGREGAR texto al registro, sin sobreescribirlo. El portapapeles del sistema \u00b6 En determinados sistemas existe un portapapeles del sistema que es independiente del que usa Vim internamente. Si Vim est\u00e1 compilado para soportar el acceso al portapapeles del sistema podemos, como ya hemos visto, copiar cosas en \u00e9l y pegar cosas desde \u00e9l. Los comandos son los mismos, y y p , pero anteponiendo unas comillas dobles y un s\u00edmbolo asterisco: \"* . As\u00ed, quedar\u00eda \"*y para copiar una selecci\u00f3n de texto (o yy para la l\u00ednea actual) y \"*p para pegarlo. En otras palabras, el portapapeles del sistema es uno de los registros internos que acabamos de ver, concretamente, \"* . Fuente : Guia de vim por : Santiago Romero","title":"Copiar y pegar"},{"location":"herramientas-it/vim/03-copiar_y_pegar/#copiar-y-pegar","text":"Cuando borramos texto (con dd , dw , x o similares), dicho texto (l\u00edneas, palabras o incluso un simple car\u00e1cter) se almacena en un buffer interno. Digamos que no se borra sino que se corta . Podemos pegar el \u00faltimo texto borrado utilizando el comando p . Esta es la primera lecci\u00f3n de este cap\u00edtulo: p = paste = pegar. Cabe destacar que una l\u00ednea cortada con dd , al ser pegada con p ser\u00e1 insertada debajo de la l\u00ednea actual del cursor. Si lo que pegamos no es una l\u00ednea completa sino una porci\u00f3n de texto, entonces ser\u00e1 insertado a la derecha de la posici\u00f3n actual del cursor. Existe una variante de p que es P , cuya diferencia es que pega el texto a la izquierda de la posici\u00f3n actual del cursor para porciones de texto, o en la l\u00ednea sobre el cursor para l\u00edneas completas. Como siempre, podemos aprovechar los multiplicadores para ahorrarnos trabajo: Con dd podemos cortar una l\u00ednea y con, por ejemplo, 10p podemos pegar 10 copias de la linea cortada. En general, dd y p (para una s\u00f3la l\u00ednea) o dd y p (para m\u00faltiples l\u00edneas) pueden ser utilizados para mover bloques de texto de un lugar a otro (copi\u00e1ndolos y peg\u00e1ndolos). Finalmente, comentar que existe un comando especial llamado ]p que a la hora de pegar tiene en cuenta la indentaci\u00f3n del c\u00f3digo por lo que permite pegar c\u00f3digo en diferentes niveles de indentaci\u00f3n del que lo hemos cortado, sin tener que reajustar todas las l\u00edneas.","title":"Copiar y pegar"},{"location":"herramientas-it/vim/03-copiar_y_pegar/#seleccionar-el-modo-visual","text":"Aparte de poder pegar texto cortado con comandos, en Vim podemos seleccionar texto al estilo de lo que se puede hacer en otros editores. Si pulsamos la tecla v pasaremos a modo visual, donde con los cursores (o las teclas de movimiento de vim) extendemos el \u00e1rea de selecci\u00f3n para despu\u00e9s operar con ella. Nos posicionamos en la primera letra de lo que queremos seleccionar (o la \u00faltima), y usamos arriba, abajo, izquierda y derecha para hacerlo, y podemos cancelar la selecci\u00f3n en cualquier momento pulsando ESCAPE. Existen 2 variantes m\u00e1s del modo visual para seleccionar texto: la primera es V (v may\u00fascula), que trabaja s\u00f3lo con selecci\u00f3n de l\u00edneas completas (usando las teclas de arriba y abajo). Es decir, si pulsamos v (min\u00fascula) en medio de una frase, podremos mover la selecci\u00f3n a derecha o izquierda para coger palabras sueltas (y tambi\u00e9n frases con arriba y abajo), mientras que V (may\u00fascula) s\u00f3lo trabaja con frases completas. La segunda variante son las selecciones de bloques o selecciones verticales. Supongamos que tenemos una tabla como la siguiente: Nombre Telefono Direccion Juan 12345112 C/. Brasa Pepe 78678112 C/. Nada Andres 87894563 C/. Casa Pues bien, si quisieramos borrar la columna tel\u00e9fono completa, en muchos editores que no disponen de selecciones verticales tendr\u00edamos que ir l\u00ednea a l\u00ednea borrando Telefono , 12345112 , 7867811 y 87894563 . En Vim podemos hacer una selecci\u00f3n vertical de un bloque que comprenda justo esa columna y trabajar sobre ella: nos posicionamos sobre la T de Tel\u00e9fono y pulsamos CTRL+V , con lo que pasamos a modo de edici\u00f3n de bloques. Usando los cursores o las teclas de movimiento seleccionamos la columna, y ya podemos trabajar sobre ella (cortarla, copiarla, etc). N\u00f3tese que Ctrl+V es, en Vim para Windows, el atajo para pegar texto desde el portapapeles, por lo que en Windows puede ser necesario remapear esta tecla a otro atajo de teclado (con map , como veremos m\u00e1s adelante). Algo muy interesante de cuando estamos en modo visual es que podemos usar las teclas de movimiento especiales. Si por ejemplo pulsamos w , la selecci\u00f3n avanza una palabra completa. Si pulsamos as (a sentence), la selecci\u00f3n avanza una frase entera (hasta el pr\u00f3ximo punto o separador), y podemos repetir los comandos que deseemos y combinarlos hasta seleccionar el texto deseado. Es decir, que lo bueno del modo visual es que podemos usar los mismos \"verbos\" de movimiento que usa Vim en modo comando: 0, $, G, gg, fCHAR, /string, etc. Adem\u00e1s, podemos usar verbos espaciales para seleccionar bloques delimitados por comillas, par\u00e9ntesis, corchetes, etc: Comando Resultado de la secci\u00f3n iX Seleccionar un bloque entero de texto basado en X, donde X puede ser: w o W palabra completa s \u21d2 sentence (frase) p \u21d2 p\u00e1rrafo b or ( \u21d2 bloque de par\u00e9ntesis (contenido entre ( y ) ). B o { \u21d2 bloque de { llaves } t \u21d2 contenido de un y < \u21d2 un bloque < y > block [ \u21d2 un bloque [ y ] \" o ' \u21d2 una cadena (bloque entre delimitador de cadenas) NOTA: Los caracteres de cierre tambi\u00e9n funcionan, como ), ], etc. Un peque\u00f1o apunte (no muy utilizado) sobre la selecci\u00f3n de texto: si estamos seleccionando texto y vemos que queremos modificar el INICIO de la selecci\u00f3n, podemos pulsar o para cambiar entre los 2 l\u00edmites de la selecci\u00f3n y cambiar uno u otro. La versi\u00f3n may\u00fascula, O se utiliza para alternar entre las 4 esquinas de las selecciones verticales de CTRL+V.","title":"Seleccionar: el modo visual"},{"location":"herramientas-it/vim/03-copiar_y_pegar/#copiar-cortar-y-pegar","text":"Una vez tenemos el texto seleccionado (de cualquiera de las 3 formas descritas), podemos borrarlo, cortarlo y copiarlo. Estando en modo visual, con el texto sobre el que queremos actuar marcado, podemos copiarlo pulsando y (de yank) y cortarlo, ya sea con d , x y c . La diferencia entre estos 3 modos de copiar est\u00e1 en que d y x se mantienen en modo comando tras cortar el texto, mientras que c (que recordemos que es modificar), se pasa a modo inserci\u00f3n tras hacerlo. Por supuesto, si nos arrepentimos del cortado podemos pulsar u (undo) para deshacerlo. Recordemos que en cualquier momento podemos volver a pegar un texto copiado o borrado usando p . As\u00ed pues, mediante v , y , d y p se realizan todas las operaciones de selecci\u00f3n, copiado, borrado/cortado y pegado, respectivamente. En el caso concreto de y , dado que es un operador podemos anteponerlo a otros comandos de Vim. Por ejemplo, yw copia una palabra completa, y y5w copia las siguientes 5 palabras completas en el buffer de memoria. Y, para finalizar, igual que ocurre con d y dd , duplicando la y como yy copiamos a memoria la l\u00ednea actual completa (sin necesidad de seleccionarla). Utilizando multiplicadores, podemos por ejemplo copiar la l\u00ednea actual y 3 m\u00e1s mediante 4yy .","title":"Copiar, cortar y pegar"},{"location":"herramientas-it/vim/03-copiar_y_pegar/#pegar-texto-con-autoindent-activado","text":"Si tenemos activado el modo de autoindentaci\u00f3n ( set ai o set autoindent ), cada vez que pulsamos ENTER, el cursor se indenta de forma autom\u00e1tica al nivel (columna) de la l\u00ednea en que lo hemos pulsado. Esto, que resulta muy \u00fatil programando, puede ser problem\u00e1tico para pegar texto con m\u00faltiples l\u00edneas, ya que cada retorno de carro del texto pegado provocar\u00e1 que la l\u00ednea empiece al nivel de la anterior, y que adem\u00e1s se sumen los espacios y tabuladores de lo que estamos pegando. El resultado es el siguiente: Copiamos el siguiente texto (con el rat\u00f3n): result = dlg.ShowModal() dlg.Destroy() if result == wx.ID_YES: del frame_1.macros[index] frame_1.Save_Data_To_File() elif result == wx.ID_NO: pass dlg.Destroy() Y lo pegamos en otra parte del documento en modo inserci\u00f3n con el bot\u00f3n central del rat\u00f3n y lo que obtenemos es lo siguiente: result = dlg.ShowModal() dlg.Destroy() if result == wx.ID_YES: del frame_1.macros[index] frame_1.Save_Data_To_File() elif result == wx.ID_NO: pass dlg.Destroy() Como puede verse, cada enter recibido ha indentado la l\u00ednea al nivel de la l\u00ednea actual, sumando adem\u00e1s los espacios que ya ten\u00eda el texto que se est\u00e1 pegando, resultando en ese horror. Esto s\u00f3lo sucede si pegamos texto \"con el rat\u00f3n\", sin usar los comandos de copiado y pegado de Vim. Para pegar texto \"con el rat\u00f3n\" y que esto no suceda, es recomendable desactivar el modo autoindent bien con \" set paste \" o \" set noai \".","title":"Pegar texto con autoindent activado"},{"location":"herramientas-it/vim/03-copiar_y_pegar/#tuberias-pipes-para-filtrar-texto","text":"Cuando tenemos texto seleccionado tanto en modo normal como en modo visual, podemos pasar ese texto a trav\u00e9s de cualquier programa externo para filtrarlo. Por ejemplo, supongamos que tenemos un programa que acepta cualquier texto por entrada est\u00e1ndar y nos saca el texto modificado (ordenado alfab\u00e9ticamente, cifrado, o cualquier otra operaci\u00f3n) por la salida est\u00e1ndar. En ese caso, si queremos manipular un p\u00e1rrafo de nuestro fichero podemos seleccionarlo (con 'v' en modo visual, por ejemplo), y mientras est\u00e1 el p\u00e1rrafo seleccionado, pulsamos: :!programa Por ejemplo, supongamos que queremos utilizar el comando sort de UNIX para ordenar alfab\u00e9ticamente las diferentes l\u00edneas de un p\u00e1rrafo. Seleccionamos el p\u00e1rrafo en cuesti\u00f3n con 'v' y los cursores y pulsamos: :!sort El texto seleccionado ser\u00e1 enviado al comando sort por entrada est\u00e1ndar y ser\u00e1 reemplazado por la salida de la ejecuci\u00f3n de sort. De la misma forma podemos ordenar alfab\u00e9ticamente el fichero entero, seleccion\u00e1ndolo todo: 1G v gg :!sort O, lo que es lo mismo: 1G = ir a la primera l\u00ednea del fichero v = ir a modo visual gg = llevar al cursor al final del fichero (seleccionando todo el fichero) *:!sort = pasar el texto seleccionado (todo el fichero) al comando sort, y reemplazarlo por la salida de la ejecuci\u00f3n del mismo. O, m\u00e1s sencillo a\u00fan: :%!sort (% representa a una selecci\u00f3n del fichero completo) El filtrado (pipe a programa externo) nos permite muchas cosas: cifrar texto (llamando a pgp/gpg), pas\u00e1rselo a programas externos que lo manipulen, etc. Otro ejemplo de uso de los filtros es el formateo y justificaci\u00f3n de texto. Si tenemos instalado el comando par (un programa de Linux para formatear p\u00e1rrafos), podemos seleccionar texto en modo visual y filtrarlo a trav\u00e9s de par mediante, por ejemplo: :!par 72 La salida de par 72 (si tenemos instalado par en el sistema, claro) consiste en justificar el texto a 72 columnas, cosa que nos puede ser \u00fatil en determinadas circunstancias de edici\u00f3n de textos. N\u00f3tese que tambi\u00e9n podemos aplicar filtros a rangos de l\u00edneas y al texto delimitado por 2 marcas (posteriormente veremos c\u00f3mo establecerlas): :'<,'> !sort -> Sobre la selecci\u00f3n :'t,'b !sort -> Sobre el texto entre 2 marcas :N,M !sort -> Entre 2 rangos de l\u00edneas (N a M)","title":"Tuber\u00edas (pipes) para filtrar texto"},{"location":"herramientas-it/vim/03-copiar_y_pegar/#insertar-ficheros-y-salida-de-comandos","text":"Podemos insertar el contenido de un fichero de texto en la posici\u00f3n actual del cursor mediante el comando :r . Tan s\u00f3lo deberemos especificar el fichero a insertar (con su ruta si es necesario): :r fichero El comando :r nos permite tambi\u00e9n insertar la salida (el resultado de la ejecuci\u00f3n) de comandos del sistema en nuestro documento. Por ejemplo, si queremos insertar la salida del comando uptime en la posici\u00f3n actual del cursor, pasamos a modo comando (ESC) y ejecutamos: :r !uptime La diferencia entre este comando y el anterior es el s\u00edmbolo de admiraci\u00f3n cerrada '!', que indica ejecuci\u00f3n .","title":"Insertar ficheros y salida de comandos"},{"location":"herramientas-it/vim/03-copiar_y_pegar/#multiples-portapapeles-los-registros-de-borrado","text":"Como ya hemos visto, en Vim podemos seleccionar texto con el modo visual usando v para movimiento car\u00e1cter a car\u00e1cter o bien V para l\u00edneas completas. Una vez seleccionado, lo podemos copiar con y , cortar con c y borrar con d . De la misma forma, fuera del modo visual (en modo comando) con dd borramos una l\u00ednea entera, con 3dd 3 l\u00edneas enteras, con dw una palabra entera, con x un c\u00e1racter, con d0 desde el cursor al principio de l\u00ednea, con d$ desde el cursor al final de l\u00ednea, con d/cadena desde el cursor hasta la aparici\u00f3n de \"cadena\", etc. Todo ellos son combinaciones de repetidores, el comando de borrado d y destinos (w=word, $=end of line, /cadena=primer resultado de la b\u00fasqueda, etc). Por otra parte, los comandos b\u00e1sicos para pegar en Vim son p para pegar en justo detras de la posici\u00f3n del cursor, y P para pegar antes de la posici\u00f3n del cursor. Vim autodetecta si el texto que tenemos en su buffer interno, el que estamos pegando, lo hab\u00edamos copiado car\u00e1cter a car\u00e1cter o bien mediante l\u00edneas completas y utiliza esto para pegar dicho texto bien a la derecha/izquierda del cursor, o bien arriba/abajo de la l\u00ednea actual. Si copiamos una porci\u00f3n de c\u00f3digo, la pegar\u00e1 \"dentro\" de la l\u00ednea actual mientras que si copiamos l\u00edneas completas la pegar\u00e1 arriba/abajo de la l\u00ednea actual. Adem\u00e1s de pegar antes o despu\u00e9s del cursor, tambi\u00e9n podemos usar p cuando tenemos realizada una selecci\u00f3n visual, de forma que nuestro texto pegado reemplazar\u00e1 al texto seleccionado. Ahora bien: estos copiados y pegados tienen como destino y origen un buffer interno de Vim, y no el portapapeles del sistema que usan t\u00edpicamente otras aplicaciones. Existen 26 registros (26 portapapeles diferentes) donde podemos copiar texto y pegar desde ellos. S\u00ed, en lugar de tener un \u00fanico \"portapapeles\", tenemos 26 diferentes (de la a a la z ) donde podemos copiar texto para usarlo despu\u00e9s. Esto es extremadamente \u00fatil cuando queremos cortar varias porciones de texto de un fichero para agruparlos en una posici\u00f3n final, ya que podr\u00edamos usar los registros a, b, c y d (por ejemplo) para almacenar 4 bloques de texto y despu\u00e9s pegarlos juntos, evitando subir y bajar continuamente en el fichero para ir llevando cada bloque a su lugar destino. Esto es extremadamente \u00fatil porque tenemos 26 buffers donde copiar y pegar texto y de esta forma podemos copiar varios bloques de texto sin perder copias anteriores. Cuando no indicamos un buffer espec\u00edfico (cuando usamos yy o dd , por ejemplo), estamos usando el Unnamed Buffer (el buffer sin nombre), pero podemos hacer referencia a cualquiera de los 26 registros disponibles. Los registros se referencian con las comillas dobles, de forma que tenemos desde \"a hasta \"z . Usando el nombre del registro como prefijo, hacemos que y , yy , d , dd , p , etc utilicen dicho registro: \"ayy \u2013> Copiar l\u00ednea de texto actual en el registro a. \"add \u2013> Borrar l\u00ednea de texto actual y poner su contenido en el registro a. \"ap \u2013> Pegar el contenido del registro a. Resumiendo: \"x \u2013> Realizar con registro x. Esto tambi\u00e9n funciona con selecciones visuales. Si seleccionamos texto en modo visual y pulsamos \"ac , cortaremos el texto seleccionado al registro a. As\u00ed pues, tenemos 26 posibles registros los cuales, adem\u00e1s, no se pierden al cerrar la sesi\u00f3n de Vim siempre y cuando tengamos Vim en modo \"nocompatible\" en el vimrc. Existen tambi\u00e9n una serie de registros \"especiales\": Registro \"_ \u2013> El registro _ (subrayado) es el registro \"black hole\" (agujero negro). Lo que escribamos en \u00e9l no se guarda, permite borrar de verdad texto. Es muy \u00fatil porque nos permite borrar texto sin eliminar lo que tengamos en el buffer de copiado y pegado. Si tenemos algo en el portapapeles (seleccionado y copiado con y ) y queremos borrar una l\u00ednea con dd sin perder el contenido actual del buffer, podemos hacer \"_dd . Registro \"0 \u2013> Contiene el texto del comando y (yank) m\u00e1s reciente, de modo que \"0p pegar\u00e1 el \u00faltimo texto copiado incluso si hemos utilizado un comando de borrado despu\u00e9s del \"y\". Registros \"1 a \"9 \u2013> Guardan de forma rotatoria los \u00faltimos 9 borrados (siendo el 1 el m\u00e1s reciente). Registros \" * y \"+ \u2013> Se refieren al portapapeles del sistema Windows (*) y X11 (+) (s\u00ed, es posible copiar y pegar en el portapapeles del S.O. desde comandos de Vim). Registro \"\" \u2013> El \"Unnamed Register\" (registro sin nombre). Es el registro en el que acaba el texto que acabamos de copiar o cortar. Un apunte sobre el registro \"0 (y su hermano el registro \"- ): cuando copiamos, cortamos, o incluso cuando borramos (ya sean caracteres o l\u00edneas completas), Vim guarda el texto en estos 2 buffers de forma que incluso si hemos borrado despu\u00e9s algo con d , seguimos teniendo acceso al \"yank\" anterior. Si el texto es menor de una l\u00ednea, se guarda en un registro llamado \"- . Para m\u00e1s de una l\u00ednea, se almacena en \"0 . En otras palabras, un \"delete\" borrar\u00e1 el texto pero no afectar\u00e1 a \"0 . Podemos ver el contenido de los diferentes \"registros\" temporales con el comando :registers y recuperar el contenido de cualquiera de ellos en el documento con \" p , como: \"6p . De esta forma, podemos acceder a contenidos anteriormente borrados sin tener que deshacer m\u00faltiples pasos (que puede implicar deshacer tambi\u00e9n cambios correctos que hicimos entre esos pasos). Finalmente, como si los registros de Vim no fueran ya de por si suficientemente potentes, podemos a\u00f1adir texto al contenido de un registro us\u00e1ndolo en may\u00fasculas: \"Bdd \u2013> Delete current line and append it to the content of the register \"b . Es muy importante entender c\u00f3mo funcionan los registros de copiado y pegado no s\u00f3lo por la potencia que dan, sino porque nos podamos encontrar con situaciones extra\u00f1as (con explicaci\u00f3n l\u00f3gica, como veremos): Supongamos que queremos copiar una l\u00ednea, ir a otra parte del documento, borrar una l\u00ednea y pegar el texto copiado. Supongamos que hacemos lo siguiente: Vamos a la l\u00ednea que queremos copiar y ejecutamos yy para copiarla (en el Unnamed Buffer). Vamos a la parte del documento donde est\u00e1 la l\u00ednea a borrar y pulsamos dd para borrarla. Pulsamos p para pegar la l\u00ednea que copiamos. De repente, en vez de aparecer la l\u00ednea que hab\u00edamos copiado, se pega la que acabamos de borrar. Esto ocurre porque el comando dd borra la l\u00ednea actual y la copia en el Unnamed Buffer, con lo que perdemos el contenido que hab\u00eda antes en dicho buffer (la l\u00ednea que copiamos inicialmente). Para empezar, si nos acaba de ocurrir, simplemente basta con pegar nuestra l\u00ednea copiada original con \"0p , porque como ya dijimos, el registro 0 contiene el \u00faltimo copiado realizado con Comandos Yank \"y\" (y dicho buffer 0 no es sobreescrito por el dd ). Una vez esto nos ha ocurrido y ya sabemos por qu\u00e9 es, basta para la pr\u00f3xima vez con borrar la l\u00ednea a eliminar usando el black-hole register como destino, con \"_dd . As\u00ed borramos la l\u00ednea pero no la guardamos en el Unnamed Register (no perdemos lo que hab\u00edamos copiado). Finalmente, destacar que podemos especificar valores para alguno de los registros tanto en el fichero .vimrc como en comando de Vim con: let @a = \"My custom buffer content\" E incluso podemos utilizar el contenido de los registros en operaciones de sustituci\u00f3n u otros comandos mediante =@a : :%s/PATTERN/\\=@a/g (Cambiar\u00eda todas las apariciones de PATTERN por el contenido del registro a ). Aunque todo esto pueda parecer complicado, todo se resume en: Existen 26 registros que se referencian con comida doble seguido de a-z: Ej: \"a . Podemos aplicar las operaciones de yank, cut, delete y paste a un registro escribiendolo delante de la operaci\u00f3n: Ej: \"ap o \"bdd . Existen registros especiales como un agujero negro (_), la \u00faltima copia realizada (0), el portapapeles del sistema (*)... Usar un registro en may\u00fasculas permite AGREGAR texto al registro, sin sobreescribirlo.","title":"M\u00faltiples \"portapapeles\": los registros de borrado"},{"location":"herramientas-it/vim/03-copiar_y_pegar/#el-portapapeles-del-sistema","text":"En determinados sistemas existe un portapapeles del sistema que es independiente del que usa Vim internamente. Si Vim est\u00e1 compilado para soportar el acceso al portapapeles del sistema podemos, como ya hemos visto, copiar cosas en \u00e9l y pegar cosas desde \u00e9l. Los comandos son los mismos, y y p , pero anteponiendo unas comillas dobles y un s\u00edmbolo asterisco: \"* . As\u00ed, quedar\u00eda \"*y para copiar una selecci\u00f3n de texto (o yy para la l\u00ednea actual) y \"*p para pegarlo. En otras palabras, el portapapeles del sistema es uno de los registros internos que acabamos de ver, concretamente, \"* . Fuente : Guia de vim por : Santiago Romero","title":"El portapapeles del sistema"},{"location":"herramientas-it/vim/04-busquedas_y_reemplazos/","text":"B\u00fasquedas y reemplazos \u00b6 Ahora que ya nos manejamos en la inserci\u00f3n y modificaci\u00f3n de texto toca tratar el tema de las b\u00fasquedas de texto. Buscar texto en un editor de textos significa que queremos llevar el cursor desde la palabra en que estemos hacia la primera ocurrencia de una determinada cadena de texto o palabra que est\u00e9 por debajo de nuestra posici\u00f3n actual cuando buscamos hacia adelante, y por encima de nuestra posicio actual cuando buscamos hacia atr\u00e1s. En Vim existen 2 comandos espec\u00edficos para buscar hacia adelante y hacia atr\u00e1s en el documento: Comando Resultado /CADENA Buscar la primera apaci\u00f3n de CADENA por debajo de la posici\u00f3n actual del cursor (b\u00fasqueda hacia adelante). La barra / es la que aparece sobre la tecla 7 del teclado (no la barra inversa), y que se introduce mediante SHIFT+7. ?CADENA Buscar la primera aparici\u00f3n de CADENA por encima de la posici\u00f3n actual del cursor (b\u00fasqueda hacia atr\u00e1s). As\u00ed, si ejecutamos el comando /prueba , el cursor se posicionar\u00e1 en la primera ocurrencia de prueba en el texto que aparezca tras la posici\u00f3n actual del cursor, mientras que si utilizamos el comando ?prueba estaremos buscando hacia arriba en el documento. Una vez realizamos una b\u00fasqueda, podemos repetir la misma utilizando los comandos n y N, de forma que: Comando Significado n Buscar la siguiente aparici\u00f3n de la cadena hacia adelante (sin tener que repetir el comando /CADENA ). N Buscar la anterior aparici\u00f3n de la cadena hacia atr\u00e1s (sin tener que repetir el comando ?CADENA ). Una cosa muy interesante de las b\u00fasquedas en Vim es que tenemos un historial de las mismas. Si hemos ejecutado varios comandos de b\u00fasqueda, si tecleamos la / en modo comando y usamos los cursores arriba y abajo, podemos acceder a las \u00faltimas b\u00fasquedas realizadas, y volver a ejecutarlas pulsando Enter. Si adem\u00e1s de escribir la / a\u00f1adimos alg\u00fan car\u00e1cter m\u00e1s antes de pulsar arriba o abajo, los cursores s\u00f3lo har\u00e1n historial entre aquellas b\u00fasquedas que comiencen exactamente por los caracteres que hemos introducido. Como un ejemplo, supongamos que mientras editabamos un fichero hemos realizado las siguientes b\u00fasquedas: /casa /cami\u00f3n /moto Si pulsamos / y usamos la tecla de cursor arriba varias veces, iremos scrolleando entre /moto, /cami\u00f3n y /casa. Por contra, si hubieramos tecleado /ca antes de pulsar arriba, s\u00f3lo se nos ofrecer\u00edan las opciones de /cami\u00f3n y /casa. De esta forma, repetir b\u00fasquedas anteriores largas o complejas es muy sencillo, no como en otros editores que s\u00f3lo recuerdan la \u00faltima b\u00fasqueda realizada. Cabe decir que no s\u00f3lo las b\u00fasquedas tienen un historial: los comandos que comienzan por el car\u00e1cter : tambi\u00e9n tienen su propio historial que se maneja con los cursores arriba y abajo, y que es independiente del de b\u00fasquedas. Es m\u00e1s, Vim se acordar\u00e1 de la \u00faltima b\u00fasqueda o comando : realizado en una sesi\u00f3n anterior de vim (por ejemplo, \u00a1una b\u00fasqueda que realizamos ayer!). Existe otra manera sencilla de realizar b\u00fasquedas sin tener que teclear pr\u00e1cticamente nada: Comando Significado * Realizar una b\u00fasqueda hacia adelante de la palabra sobre la cual est\u00e1 el cursor. # Realizar una b\u00fasqueda hacia atr\u00e1s de la palabra sobre la cual est\u00e1 el cursor. Diferenciar May\u00fasculas y min\u00fasculas \u00b6 Vim distingue las may\u00fasculas de las min\u00fasculas al realizar b\u00fasquedas. Si estamos buscando la palabra casa pero en el texto aparece como Casa , Vim no encontrar\u00e1 esa ocurrencia. Al igual que en otros editores y procesadores de texto, podemos decirle a Vim que ignore si las letras son may\u00fasculas o m\u00ednusculas en las b\u00fasquedas: Comando Significado :set ignorecase Para que se ignoren las diferencias entre may\u00fasculas y min\u00fasculas. :set_noignorecase Para que no se ignoren las diferencias entre letras. Si tenemos activo set_noignorecase , podemos usar \\c en una b\u00fasqueda para que se ignoren may\u00fasculas y min\u00fasculas en esa b\u00fasqueda: /\\c **?\\c * Resaltado de las b\u00fasquedas \u00b6 Cuando realizamos la b\u00fasqueda de una palabra, podemos hacer que los resultados de la b\u00fasqueda queda resaltados en un color diferente o no. Esto se hace mediante los siguientes comandos: Comando Significado :set hlsearch Todas las ocurrencias de la b\u00fasqueda se resaltan. :set nohlsearch Desactivar el modo de resaltado de ocurrencias. :nohlsearch Desactivar el resaltado de ocurrencias para la \u00faltima b\u00fasqueda (pero no para las pr\u00f3ximas que se hagan). As\u00edmismo, otras 2 opciones interesantes son: Comando Significado :set incsearch B\u00fasqueda incremental: Vim ir\u00e1 buscando cadenas conforme la vayamos tecleando (puede sernos interesante). :set nowrapscan Cuando Vim busca, si llega al final del fichero contin\u00faa por el principio (y viceversa en b\u00fasquedas hacia arriba). Con esta opci\u00f3n le decimos a Vim que cuando llegue al final o principio del fichero pare la b\u00fasqueda. Si alguna de estas opciones nos parece interesante como opci\u00f3n por defecto la podemos a\u00f1adir a nuestro .vimrc personal. Por ejemplo, si nos gusta que todas las b\u00fasquedas sean resaltadas e incrementales, editamos nuestro .vimrc y le a\u00f1adimos: set hlsearch set incsearch N\u00f3tese como en el fichero .vimrc no es necesario poner los dos puntos : antes del set . Expresiones regulares \u00b6 Es cierto que cuando utilizamos la b\u00fasqueda con la barra o el interrogante (/ o ?) basta con escribir una palabra o frase para buscarla en el texto, pero la realidad es que Vim nos ofrece mucho m\u00e1s. La cadena de b\u00fasqueda que le podemos pasar a Vim es en realidad una expresi\u00f3n regular, es decir, permite que especifiquemos en la cadena ciertas expresiones con un significado especial diferente del literal que hemos escrito. Por ejemplo, cuando utilizamos el car\u00e1cter punto ( . ) en una cadena b\u00fasqueda (como por ejemplo /cas. ) , para Vim dicho car\u00e1cter tiene un significado especial, que en este caso es cualquier car\u00e1cter . As\u00ed, buscando /cas. (barra, c, a, s, punto), vim encontrar\u00e1 ocurrencias como casa , caso , case , etc. Es decir, el punto es un comod\u00edn que significa cualquier car\u00e1cter . Esto nos da mucho juego a la hora de buscar palabras determinadas en el texto si no sabemos ex\u00e1ctamente que puede haber en una posici\u00f3n concreta de la palabra. Obviamente, podemos poner m\u00e1s de un punto en nuestra expresi\u00f3n regular. Tambi\u00e9n podemos usar .* para matchear una cantidad indeterminada de caracteres, como en /c.*a , que matchear\u00e1 tanto \"casa\" como \"cuchara\". Veamos otro ejemplo: los caracteres ^ y $ , que significan principio de l\u00ednea y fin de l\u00ednea respectivamente. Seg\u00fan la b\u00fasqueda que realicemos obtendremos los siguientes resultados: B\u00fasqueda Resultado / ^ vaca Vim encontrar\u00e1 todas aquellas palabras que comiencen por vaca y que est\u00e9n al principio de la l\u00ednea. Literalmente le hemos dicho a Vim que busque una cadena que sea principio de l\u00ednea seguido de la palabra vaca . /vaca$ Vim encontrar\u00e1 todas aquellas palabras que contengan la cadena vaca seguida de un fin de l\u00ednea. Es decir. encontrar\u00eda vaca o Caravaca si alguna de ellas es la \u00faltima palabra de la l\u00ednea. / ^ vaca$ Vim encontrar\u00e1 s\u00f3lo ocurrencias en l\u00edneas que s\u00f3lo contengan la palabra vaca. Es decir, una l\u00ednea que sea principio de l\u00ednea, vaca, fin de l\u00ednea . Como puede verse, ^ y $ son muy \u00fatiles a la hora de hacer b\u00fasquedas. Caracteres especiales a escapar \u00b6 Debido a que lo que buscamos son expresiones regulares y no simples cadenas, hay caracteres que tienen un significado especial y que no pueden ser buscados directamente. Por ejemplo, el car\u00e1cter ** significa **fin de l\u00ednea**, y si ejecutamos **/ ** significa **fin de l\u00ednea**, y si ejecutamos **/ , no encontraremos la primera ocurrencia del car\u00e1cter $ sino que nos posicionar\u00e1 el cursor en el primer fin de l\u00ednea a partir de la posici\u00f3n actual del cursor. Si queremos realizar b\u00fasquedas que incluyan los caracteres especiales \". * ^ $\" tenemos que escaparlos con la barra inversa ( **), que para Vim es un indicador de **el pr\u00f3ximo car\u00e1cter que voy a introducir interpr\u00e9talo como un caracter normal y no como un car\u00e1cter especial . As\u00ed, para buscar la cadena Yo tengo 1$ en el banco hacia adelante en Vim, ejecutaremos: /Yo tengo 1\\$ en el banco Del mismo modo, si necesitamos buscar la cadena /prueba. pero no queremos que Vim encuentre /pruebas (recordad que el punto es un car\u00e1cter especial que se sustituye por cualquier car\u00e1cter a la hora de buscar), sino que queremos, literalmente, encontrar las apariciones de la cadena prueba seguida de un punto, debemos escapar el punto, mediante: /prueba. (barra prueba barra_inversa punto). La barra inversa le quita al punto el significado especial y Vim entiende que debe buscar el car\u00e1cter punto. Los caracteres especiales son los siguientes: .*[]^/\\?~$ . Curiosamente, otros caracteres especiales en expresiones regulares se tratan en las b\u00fasquedas y sustituciones de Vim como caracteres literales (al contrario que sucede en las expresiones regulares), por lo que es necesario escaparlos para que funcionen con su significado especial. Un ejemplo de esto son los caracteres de inicio y fin de palabra \"<\" y \">\". Por defecto, si los buscamos literalmente, Vim los buscar\u00e1 como dichos caracteres. Es decir, si buscamos \"/ \", buscar\u00e1 literalmente \" \". Si los escapamos con (como /\\<vaca> ) entonces buscar\u00e1 todas las cadenas vaca que empiecen (<) y acaben (>) como palabra completa. Lo mismo ocurre con otros caracteres como los par\u00e9ntesis, +, etc, como en la siguiente expresi\u00f3n que busca todos los n\u00fameros enteros (\\d+ encerrado entre < y >): /\\<\\(\\d\\+\\)\\> Explicar expresiones regulares a fondo queda fuera del \u00e1mbito de este documento (donde s\u00f3lo tratamos lo b\u00e1sico para trabajar con Vim), pero puedes aprender mucho m\u00e1s sobre el tema en Internet mediante cualquier buscador (por ejemplo, buscando en Google por vim regular expressions , en condiciones normales os debe llevar a p\u00e1ginas que tratan las expresiones regulares en Vim con m\u00e1s detalle). URLs de inter\u00e9s: http://vim.wikia.com/wiki/Search_patterns http://vimregex.com/ Tambi\u00e9n tenemos la posibilidad de a\u00f1adir al principio de una b\u00fasqueda en flag \\V el cual trata la string a continuaci\u00f3n como una \"raw string\", donde no se interpretan los caracteres especiales de las expresiones regulares: **/\\VYo tengo 1$ en el banco* Esto tambi\u00e9n sirve para las sustituciones: **:%s/\\VYo tengo 1$ en el banco/No tengo dinero en el banco/g* B\u00fasqueda de palabras completas y OR en b\u00fasquedas \u00b6 En ocasiones cuando realizamos b\u00fasquedas nos interesa encontrar palabras completas y no porciones de palabras. Por ejemplo, si buscamos casa , nos interesar\u00e1 encontrar vaca , pero no vacaciones o Caravaca . En ese caso podemos hacer uso de los identificadores de inicio y fin de palabra en las expresiones regulares de Vim, que son \\< y > respectivamente (barra inversa seguida del s\u00edmbolo de menor que para inicio de palabra, y barra inversa seguida del s\u00edmbolo de mayor que para fin de palabra) As\u00ed, si en un texto tenemos las 3 palabras anteriores, seg\u00fan la b\u00fasqueda que realicemos obtendremos unos u otros resultados: B\u00fasqueda Resultado /vaca Encontraremos las 3 palabras: vaca , vacaciones y Caravaca . /\\<vaca Encontraremos aquellas palabras que empiecen por la cadena vaca, como vaca y vacaciones . /vaca> Encontraremos aquellas palabras que acaben en vaca, como vaca y Caravaca . /\\<vaca> Encontraremos s\u00f3lo la palabra vaca . Para Vim, los s\u00edmbolos \\< y \\> se corresponden con aquellos caracteres que comienzan o acaban una palabra, como espacios, retornos de carros, comas, puntos y comas o puntos. De la misma forma, si queremos buscar apariciones de una cadena u otra, podemos usar el operador de las expresiones regulares \"|\" (OR). No obstante, igual que en el caso de < y >, hay que escaparlo con : /red\\|green\\|blue Sustituir (reemplazar) cadenas en el texto \u00b6 Otra de las operaciones b\u00e1sicas de b\u00fasqueda es el reemplazo de cadenas, es decir, cambiar en todo el fichero (o en una parte del mismo) una cadena por otra. Esto se hace con el comando de sustituci\u00f3n :s . Por ejemplo, para cambiar todas las apariciones de la cadena hola por adios , haremos: :%s/hola/adios/g Este comando viene a decirle a Vim que sustituya (s), en todo el fichero (%), la cadena hola por adios , y que si en una l\u00ednea encuentra m\u00e1s de una aparici\u00f3n de hola , que cambie todas (g). Si quitamos la g , s\u00f3lo cambiaremos la primera aparici\u00f3n de hola en cada frase. Si adem\u00e1s de la g a\u00f1adimos una i , se har\u00e1 una comparaci\u00f3n que no distingue may\u00fasculas de min\u00fasculas. Recordad que en el caso de usar expresiones regulares tendremos que escapar ciertos caracteres especiales, como los puntos, las barras, etc, en la parte de b\u00fasqueda. Por ejemplo: :%s/hola\\.hola/adios.adios/g Reemplazo en texto seleccionado con 'v' \u00b6 No estamos obligados a trabajar con la totalidad de un fichero, podemos realizar sustituciones tambi\u00e9n en bloques del fichero. Por ejemplo, supongamos que entramos en modo visual (v) y seleccionamos un bloque de texto. Mientras est\u00e1 seleccionado pulsamos ':' (dos puntos) y tecleamos: s/hola/adios/g En pantalla aparecer\u00e1: :'<,'>s/hola/adios/g Y el resultado efectivo de la sustituci\u00f3n ser\u00e1 que s\u00f3lo reemplazaremos la cadena hola por adios en el texto seleccionado. Reemplazo en rangos de l\u00edneas \u00b6 Tambi\u00e9n podemos aplicar s\u00f3lo la sustituci\u00f3n a las l\u00edneas situadas entre 2 l\u00edneas dadas. Si por ejemplo queremos cambiar todas las apariciones de hola entre la l\u00ednea 100 y la l\u00ednea 200, podemos hacerlo tecleando: :100,200s/hola/adios/g La sintaxis general es: :n,Ncomando Como ya hemos visto, utilizar :% equivale a poner un rango de l\u00edneas entre 1 y el m\u00e1ximo de l\u00edneas del fichero. Utilizar un separador diferente entre expresi\u00f3n de b\u00fasqueda y sustituci\u00f3n \u00b6 En una b\u00fasqueda como %s/cad1/cad2/g , el car\u00e1cter separado de campos de la sustituci\u00f3n no tiene por qu\u00e9 ser \"/\". En algunos casos (por ejemplo, trabajando con paths de UNIX) nos puede interesar utilizar cualquier otro car\u00e1cter. Vim utilizar\u00e1 como separador el caracter que siga a la \"s\": As\u00ed, podemos usar por ejemplo \"#\": Con barra (necesita escapar el path) Con otro car\u00e1cter (#) :s/\\/usr\\/local\\/\\/opt _\\/opt_ :s#/usr/local/opt/#/opt/# Uso de expresiones regulares en los reemplazos \u00b6 Podemos usar expresiones regulares (con el mismo formato que las de b\u00fasqueda) en la porci\u00f3n de b\u00fasqueda de %s: # Cambiar apariciones de red O green O blue por purple :%s/red\\|green\\|blue/purple/g # Lo mismo que lo anterior, pero s\u00f3lo cuando no sean subcadenas, es decir # cuando sean palabras completas: :%s/\\<\\(red\\|green\\|blue\\)\\>/purple/g Es m\u00e1s, podemos utilizar los par\u00e9ntesis escapados \\( y \\) para reutilizar porciones de la cadena de b\u00fasqueda en los reemplazos (usando \\1, \\2, \\N ... en el orden de aparici\u00f3n en la b\u00fasqueda). Por ejemplo, si queremos buscar todos los n\u00fameros entre signos de = par\u00e9ntesis (como =123=, =11=, etc) y reemplazarlos por versiones sin par\u00e9ntesis, podemos usar como b\u00fasqueda =\\(\\d\\+\\)= (uno o m\u00e1s d\u00edgitos \\d+ entre iguales) y reemplazarlo por \\1 : %s/=\\(\\d\\+\\)=/\\1/g Reutilizar la \u00faltima b\u00fasqueda para un reemplazo \u00b6 Si acabamos de realizar una b\u00fasqueda y queremos utilizar su resultado para un reemplazo, basta con dejar en blanco el campo de b\u00fasqueda de %s: :%s//purple/g Resumen sobre sustituci\u00f3n en Vim \u00b6 El resumen del uso b\u00e1sico de la sustituci\u00f3n en Vim es: Comando Significado :%s/cad1/cad2/ Reemplazar en cada l\u00ednea del fichero la primera aparici\u00f3n de cad1 (sea cadena o expresi\u00f3n regular) por cad2. :%s/cad1/cad2/g Reemplazar en cada l\u00ednea del fichero todas las apariciones de cad1 por cad2. :%s/cad1/cad2/gi Reemplazar en cada l\u00ednea del fichero todas las apariciones de cad1 por cad2, sin distinguir may\u00fasculas y min\u00fasculas :%s/cad1/cad2/gc Reemplazar en cada l\u00ednea del fichero todas las apariciones de cad1 por cad2 pidiendo confirmaci\u00f3n en cada reemplazo. :%s/cad regexp regexp ena/cad\\1ena2/gc Utilizar en la sustituci\u00f3n parte de la b\u00fasqueda por expresi\u00f3n regular :n,Ncomando Cualquiera de los 3 ejemplos anteriores, sobre un rango de l\u00edneas. :'<,'>comando Cualquiera de los ejemplos anteriores, sobre la selecci\u00f3n \"visual\" actual. '<,'> aparece cuando tenemos un texto seleccionado y pulsamos \":\". :'a,'bs/cad1/cad2/g Realizar la sustituci\u00f3n en el texto entre 2 marcas (a y b en el ejemplo). :%s//CAD2/g Reutilizar la \u00faltima b\u00fasqueda realizada para el reemplazo (b\u00fasqueda vac\u00eda en %s) Si investigas m\u00e1s acerca de las expresiones regulares y las usas a menudo, debes recordar que: La sintaxis de expresiones de regulares de Vim es especial, no es como la de Perl. Hay car\u00e1cteres especiales cuando no los escapas (^, $, ., *) y hay otros que necesitan ser escapados para ser especiales (<, >, |, (, ), +...). Los grupos de captura realizados con par\u00e9ntesis escapados se referencian luego como \\N en lugar de con $N (\\1 en lugar de $1). Vim no soporta el \"non-greedy modifier\" ( ? ) a continuaci\u00f3n de .* . , en lugar de .* utiliza .\\{-}. , como en: %s/style=\".\\{-}\"//g . Es decir: \\{-} es lo mismo que .*? . No necesitas escapar nada en la cadena de sustituci\u00f3n salvo las barras inversas (para que no se confunda con \\1, \\2 ...). Resumen de caracteres especiales y reemplazos \u00b6 Veamos alguna de las tablas de vimregex.com tanto para las expresiones regulares como para los reemplazos. Primero, los caracteres especiales al ser escapados, y su significado: # Matching # Matching -------------------------------------------------------------------------------------------- . any character except new line \\s whitespace character \\S non-whitespace character \\d digit \\D non-digit \\x hex digit \\X non-hex digit \\o octal digit \\O non-octal digit \\h head of word character (a,b,c...z,A,B,C...Z and _) \\H non-head of word character \\p printable character \\P like \\p, but excluding digits \\w word character \\W non-word character \\a alphabetic character \\A non-alphabetic character \\l lowercase character \\L non-lowercase character \\u uppercase character \\U non-uppercase character Segundo, los cuantificadores: Quantifier Description -------------------------------------------------------------------------------------------- * matches 0 or more of the preceding characters, ranges or metacharacters .* matches everything including empty line \\+ matches 1 or more of the preceding characters... \\= matches 0 or 1 more of the preceding characters... \\{n,m} matches from n to m of the preceding characters... \\{n} matches exactly n times of the preceding characters... \\{,m} matches at most m (from 0 to m) of the preceding characters... \\{n,} matches at least n of of the preceding characters... \\{-} matches 0 or more of the preceding atom, as few as possible (non greedy) (where n and m are positive integers n>0 ) Finalmente, estos son los c\u00f3digos especiales que podemos usar en las sustituciones con %s en la parte de sustituci\u00f3n (la segunda): # Meaning # Meaning ------------------------------------------------------------------------------------------------------ & the whole matched pattern \\L the following characters are made lowercase \\0 the whole matched pattern \\U the following characters are made uppercase \\1 the matched pattern in the 1st pair of \\(\\) \\X the matched pattern in the Xnd pair of \\(\\) \\r split line in two at this point \\l next character made lowercase ~ the previous substitute string \\u next character made uppercase Fuente : Guia de vim por : Santiago Romero","title":"B\u00fasquedas y reemplazos"},{"location":"herramientas-it/vim/04-busquedas_y_reemplazos/#busquedas-y-reemplazos","text":"Ahora que ya nos manejamos en la inserci\u00f3n y modificaci\u00f3n de texto toca tratar el tema de las b\u00fasquedas de texto. Buscar texto en un editor de textos significa que queremos llevar el cursor desde la palabra en que estemos hacia la primera ocurrencia de una determinada cadena de texto o palabra que est\u00e9 por debajo de nuestra posici\u00f3n actual cuando buscamos hacia adelante, y por encima de nuestra posicio actual cuando buscamos hacia atr\u00e1s. En Vim existen 2 comandos espec\u00edficos para buscar hacia adelante y hacia atr\u00e1s en el documento: Comando Resultado /CADENA Buscar la primera apaci\u00f3n de CADENA por debajo de la posici\u00f3n actual del cursor (b\u00fasqueda hacia adelante). La barra / es la que aparece sobre la tecla 7 del teclado (no la barra inversa), y que se introduce mediante SHIFT+7. ?CADENA Buscar la primera aparici\u00f3n de CADENA por encima de la posici\u00f3n actual del cursor (b\u00fasqueda hacia atr\u00e1s). As\u00ed, si ejecutamos el comando /prueba , el cursor se posicionar\u00e1 en la primera ocurrencia de prueba en el texto que aparezca tras la posici\u00f3n actual del cursor, mientras que si utilizamos el comando ?prueba estaremos buscando hacia arriba en el documento. Una vez realizamos una b\u00fasqueda, podemos repetir la misma utilizando los comandos n y N, de forma que: Comando Significado n Buscar la siguiente aparici\u00f3n de la cadena hacia adelante (sin tener que repetir el comando /CADENA ). N Buscar la anterior aparici\u00f3n de la cadena hacia atr\u00e1s (sin tener que repetir el comando ?CADENA ). Una cosa muy interesante de las b\u00fasquedas en Vim es que tenemos un historial de las mismas. Si hemos ejecutado varios comandos de b\u00fasqueda, si tecleamos la / en modo comando y usamos los cursores arriba y abajo, podemos acceder a las \u00faltimas b\u00fasquedas realizadas, y volver a ejecutarlas pulsando Enter. Si adem\u00e1s de escribir la / a\u00f1adimos alg\u00fan car\u00e1cter m\u00e1s antes de pulsar arriba o abajo, los cursores s\u00f3lo har\u00e1n historial entre aquellas b\u00fasquedas que comiencen exactamente por los caracteres que hemos introducido. Como un ejemplo, supongamos que mientras editabamos un fichero hemos realizado las siguientes b\u00fasquedas: /casa /cami\u00f3n /moto Si pulsamos / y usamos la tecla de cursor arriba varias veces, iremos scrolleando entre /moto, /cami\u00f3n y /casa. Por contra, si hubieramos tecleado /ca antes de pulsar arriba, s\u00f3lo se nos ofrecer\u00edan las opciones de /cami\u00f3n y /casa. De esta forma, repetir b\u00fasquedas anteriores largas o complejas es muy sencillo, no como en otros editores que s\u00f3lo recuerdan la \u00faltima b\u00fasqueda realizada. Cabe decir que no s\u00f3lo las b\u00fasquedas tienen un historial: los comandos que comienzan por el car\u00e1cter : tambi\u00e9n tienen su propio historial que se maneja con los cursores arriba y abajo, y que es independiente del de b\u00fasquedas. Es m\u00e1s, Vim se acordar\u00e1 de la \u00faltima b\u00fasqueda o comando : realizado en una sesi\u00f3n anterior de vim (por ejemplo, \u00a1una b\u00fasqueda que realizamos ayer!). Existe otra manera sencilla de realizar b\u00fasquedas sin tener que teclear pr\u00e1cticamente nada: Comando Significado * Realizar una b\u00fasqueda hacia adelante de la palabra sobre la cual est\u00e1 el cursor. # Realizar una b\u00fasqueda hacia atr\u00e1s de la palabra sobre la cual est\u00e1 el cursor.","title":"B\u00fasquedas y reemplazos"},{"location":"herramientas-it/vim/04-busquedas_y_reemplazos/#diferenciar-mayusculas-y-minusculas","text":"Vim distingue las may\u00fasculas de las min\u00fasculas al realizar b\u00fasquedas. Si estamos buscando la palabra casa pero en el texto aparece como Casa , Vim no encontrar\u00e1 esa ocurrencia. Al igual que en otros editores y procesadores de texto, podemos decirle a Vim que ignore si las letras son may\u00fasculas o m\u00ednusculas en las b\u00fasquedas: Comando Significado :set ignorecase Para que se ignoren las diferencias entre may\u00fasculas y min\u00fasculas. :set_noignorecase Para que no se ignoren las diferencias entre letras. Si tenemos activo set_noignorecase , podemos usar \\c en una b\u00fasqueda para que se ignoren may\u00fasculas y min\u00fasculas en esa b\u00fasqueda: /\\c **?\\c *","title":"Diferenciar May\u00fasculas y min\u00fasculas"},{"location":"herramientas-it/vim/04-busquedas_y_reemplazos/#resaltado-de-las-busquedas","text":"Cuando realizamos la b\u00fasqueda de una palabra, podemos hacer que los resultados de la b\u00fasqueda queda resaltados en un color diferente o no. Esto se hace mediante los siguientes comandos: Comando Significado :set hlsearch Todas las ocurrencias de la b\u00fasqueda se resaltan. :set nohlsearch Desactivar el modo de resaltado de ocurrencias. :nohlsearch Desactivar el resaltado de ocurrencias para la \u00faltima b\u00fasqueda (pero no para las pr\u00f3ximas que se hagan). As\u00edmismo, otras 2 opciones interesantes son: Comando Significado :set incsearch B\u00fasqueda incremental: Vim ir\u00e1 buscando cadenas conforme la vayamos tecleando (puede sernos interesante). :set nowrapscan Cuando Vim busca, si llega al final del fichero contin\u00faa por el principio (y viceversa en b\u00fasquedas hacia arriba). Con esta opci\u00f3n le decimos a Vim que cuando llegue al final o principio del fichero pare la b\u00fasqueda. Si alguna de estas opciones nos parece interesante como opci\u00f3n por defecto la podemos a\u00f1adir a nuestro .vimrc personal. Por ejemplo, si nos gusta que todas las b\u00fasquedas sean resaltadas e incrementales, editamos nuestro .vimrc y le a\u00f1adimos: set hlsearch set incsearch N\u00f3tese como en el fichero .vimrc no es necesario poner los dos puntos : antes del set .","title":"Resaltado de las b\u00fasquedas"},{"location":"herramientas-it/vim/04-busquedas_y_reemplazos/#expresiones-regulares","text":"Es cierto que cuando utilizamos la b\u00fasqueda con la barra o el interrogante (/ o ?) basta con escribir una palabra o frase para buscarla en el texto, pero la realidad es que Vim nos ofrece mucho m\u00e1s. La cadena de b\u00fasqueda que le podemos pasar a Vim es en realidad una expresi\u00f3n regular, es decir, permite que especifiquemos en la cadena ciertas expresiones con un significado especial diferente del literal que hemos escrito. Por ejemplo, cuando utilizamos el car\u00e1cter punto ( . ) en una cadena b\u00fasqueda (como por ejemplo /cas. ) , para Vim dicho car\u00e1cter tiene un significado especial, que en este caso es cualquier car\u00e1cter . As\u00ed, buscando /cas. (barra, c, a, s, punto), vim encontrar\u00e1 ocurrencias como casa , caso , case , etc. Es decir, el punto es un comod\u00edn que significa cualquier car\u00e1cter . Esto nos da mucho juego a la hora de buscar palabras determinadas en el texto si no sabemos ex\u00e1ctamente que puede haber en una posici\u00f3n concreta de la palabra. Obviamente, podemos poner m\u00e1s de un punto en nuestra expresi\u00f3n regular. Tambi\u00e9n podemos usar .* para matchear una cantidad indeterminada de caracteres, como en /c.*a , que matchear\u00e1 tanto \"casa\" como \"cuchara\". Veamos otro ejemplo: los caracteres ^ y $ , que significan principio de l\u00ednea y fin de l\u00ednea respectivamente. Seg\u00fan la b\u00fasqueda que realicemos obtendremos los siguientes resultados: B\u00fasqueda Resultado / ^ vaca Vim encontrar\u00e1 todas aquellas palabras que comiencen por vaca y que est\u00e9n al principio de la l\u00ednea. Literalmente le hemos dicho a Vim que busque una cadena que sea principio de l\u00ednea seguido de la palabra vaca . /vaca$ Vim encontrar\u00e1 todas aquellas palabras que contengan la cadena vaca seguida de un fin de l\u00ednea. Es decir. encontrar\u00eda vaca o Caravaca si alguna de ellas es la \u00faltima palabra de la l\u00ednea. / ^ vaca$ Vim encontrar\u00e1 s\u00f3lo ocurrencias en l\u00edneas que s\u00f3lo contengan la palabra vaca. Es decir, una l\u00ednea que sea principio de l\u00ednea, vaca, fin de l\u00ednea . Como puede verse, ^ y $ son muy \u00fatiles a la hora de hacer b\u00fasquedas.","title":"Expresiones regulares"},{"location":"herramientas-it/vim/04-busquedas_y_reemplazos/#caracteres-especiales-a-escapar","text":"Debido a que lo que buscamos son expresiones regulares y no simples cadenas, hay caracteres que tienen un significado especial y que no pueden ser buscados directamente. Por ejemplo, el car\u00e1cter ** significa **fin de l\u00ednea**, y si ejecutamos **/ ** significa **fin de l\u00ednea**, y si ejecutamos **/ , no encontraremos la primera ocurrencia del car\u00e1cter $ sino que nos posicionar\u00e1 el cursor en el primer fin de l\u00ednea a partir de la posici\u00f3n actual del cursor. Si queremos realizar b\u00fasquedas que incluyan los caracteres especiales \". * ^ $\" tenemos que escaparlos con la barra inversa ( **), que para Vim es un indicador de **el pr\u00f3ximo car\u00e1cter que voy a introducir interpr\u00e9talo como un caracter normal y no como un car\u00e1cter especial . As\u00ed, para buscar la cadena Yo tengo 1$ en el banco hacia adelante en Vim, ejecutaremos: /Yo tengo 1\\$ en el banco Del mismo modo, si necesitamos buscar la cadena /prueba. pero no queremos que Vim encuentre /pruebas (recordad que el punto es un car\u00e1cter especial que se sustituye por cualquier car\u00e1cter a la hora de buscar), sino que queremos, literalmente, encontrar las apariciones de la cadena prueba seguida de un punto, debemos escapar el punto, mediante: /prueba. (barra prueba barra_inversa punto). La barra inversa le quita al punto el significado especial y Vim entiende que debe buscar el car\u00e1cter punto. Los caracteres especiales son los siguientes: .*[]^/\\?~$ . Curiosamente, otros caracteres especiales en expresiones regulares se tratan en las b\u00fasquedas y sustituciones de Vim como caracteres literales (al contrario que sucede en las expresiones regulares), por lo que es necesario escaparlos para que funcionen con su significado especial. Un ejemplo de esto son los caracteres de inicio y fin de palabra \"<\" y \">\". Por defecto, si los buscamos literalmente, Vim los buscar\u00e1 como dichos caracteres. Es decir, si buscamos \"/ \", buscar\u00e1 literalmente \" \". Si los escapamos con (como /\\<vaca> ) entonces buscar\u00e1 todas las cadenas vaca que empiecen (<) y acaben (>) como palabra completa. Lo mismo ocurre con otros caracteres como los par\u00e9ntesis, +, etc, como en la siguiente expresi\u00f3n que busca todos los n\u00fameros enteros (\\d+ encerrado entre < y >): /\\<\\(\\d\\+\\)\\> Explicar expresiones regulares a fondo queda fuera del \u00e1mbito de este documento (donde s\u00f3lo tratamos lo b\u00e1sico para trabajar con Vim), pero puedes aprender mucho m\u00e1s sobre el tema en Internet mediante cualquier buscador (por ejemplo, buscando en Google por vim regular expressions , en condiciones normales os debe llevar a p\u00e1ginas que tratan las expresiones regulares en Vim con m\u00e1s detalle). URLs de inter\u00e9s: http://vim.wikia.com/wiki/Search_patterns http://vimregex.com/ Tambi\u00e9n tenemos la posibilidad de a\u00f1adir al principio de una b\u00fasqueda en flag \\V el cual trata la string a continuaci\u00f3n como una \"raw string\", donde no se interpretan los caracteres especiales de las expresiones regulares: **/\\VYo tengo 1$ en el banco* Esto tambi\u00e9n sirve para las sustituciones: **:%s/\\VYo tengo 1$ en el banco/No tengo dinero en el banco/g*","title":"Caracteres especiales a escapar"},{"location":"herramientas-it/vim/04-busquedas_y_reemplazos/#busqueda-de-palabras-completas-y-or-en-busquedas","text":"En ocasiones cuando realizamos b\u00fasquedas nos interesa encontrar palabras completas y no porciones de palabras. Por ejemplo, si buscamos casa , nos interesar\u00e1 encontrar vaca , pero no vacaciones o Caravaca . En ese caso podemos hacer uso de los identificadores de inicio y fin de palabra en las expresiones regulares de Vim, que son \\< y > respectivamente (barra inversa seguida del s\u00edmbolo de menor que para inicio de palabra, y barra inversa seguida del s\u00edmbolo de mayor que para fin de palabra) As\u00ed, si en un texto tenemos las 3 palabras anteriores, seg\u00fan la b\u00fasqueda que realicemos obtendremos unos u otros resultados: B\u00fasqueda Resultado /vaca Encontraremos las 3 palabras: vaca , vacaciones y Caravaca . /\\<vaca Encontraremos aquellas palabras que empiecen por la cadena vaca, como vaca y vacaciones . /vaca> Encontraremos aquellas palabras que acaben en vaca, como vaca y Caravaca . /\\<vaca> Encontraremos s\u00f3lo la palabra vaca . Para Vim, los s\u00edmbolos \\< y \\> se corresponden con aquellos caracteres que comienzan o acaban una palabra, como espacios, retornos de carros, comas, puntos y comas o puntos. De la misma forma, si queremos buscar apariciones de una cadena u otra, podemos usar el operador de las expresiones regulares \"|\" (OR). No obstante, igual que en el caso de < y >, hay que escaparlo con : /red\\|green\\|blue","title":"B\u00fasqueda de palabras completas y OR en b\u00fasquedas"},{"location":"herramientas-it/vim/04-busquedas_y_reemplazos/#sustituir-reemplazar-cadenas-en-el-texto","text":"Otra de las operaciones b\u00e1sicas de b\u00fasqueda es el reemplazo de cadenas, es decir, cambiar en todo el fichero (o en una parte del mismo) una cadena por otra. Esto se hace con el comando de sustituci\u00f3n :s . Por ejemplo, para cambiar todas las apariciones de la cadena hola por adios , haremos: :%s/hola/adios/g Este comando viene a decirle a Vim que sustituya (s), en todo el fichero (%), la cadena hola por adios , y que si en una l\u00ednea encuentra m\u00e1s de una aparici\u00f3n de hola , que cambie todas (g). Si quitamos la g , s\u00f3lo cambiaremos la primera aparici\u00f3n de hola en cada frase. Si adem\u00e1s de la g a\u00f1adimos una i , se har\u00e1 una comparaci\u00f3n que no distingue may\u00fasculas de min\u00fasculas. Recordad que en el caso de usar expresiones regulares tendremos que escapar ciertos caracteres especiales, como los puntos, las barras, etc, en la parte de b\u00fasqueda. Por ejemplo: :%s/hola\\.hola/adios.adios/g","title":"Sustituir (reemplazar) cadenas en el texto"},{"location":"herramientas-it/vim/04-busquedas_y_reemplazos/#reemplazo-en-texto-seleccionado-con-v","text":"No estamos obligados a trabajar con la totalidad de un fichero, podemos realizar sustituciones tambi\u00e9n en bloques del fichero. Por ejemplo, supongamos que entramos en modo visual (v) y seleccionamos un bloque de texto. Mientras est\u00e1 seleccionado pulsamos ':' (dos puntos) y tecleamos: s/hola/adios/g En pantalla aparecer\u00e1: :'<,'>s/hola/adios/g Y el resultado efectivo de la sustituci\u00f3n ser\u00e1 que s\u00f3lo reemplazaremos la cadena hola por adios en el texto seleccionado.","title":"Reemplazo en texto seleccionado con 'v'"},{"location":"herramientas-it/vim/04-busquedas_y_reemplazos/#reemplazo-en-rangos-de-lineas","text":"Tambi\u00e9n podemos aplicar s\u00f3lo la sustituci\u00f3n a las l\u00edneas situadas entre 2 l\u00edneas dadas. Si por ejemplo queremos cambiar todas las apariciones de hola entre la l\u00ednea 100 y la l\u00ednea 200, podemos hacerlo tecleando: :100,200s/hola/adios/g La sintaxis general es: :n,Ncomando Como ya hemos visto, utilizar :% equivale a poner un rango de l\u00edneas entre 1 y el m\u00e1ximo de l\u00edneas del fichero.","title":"Reemplazo en rangos de l\u00edneas"},{"location":"herramientas-it/vim/04-busquedas_y_reemplazos/#utilizar-un-separador-diferente-entre-expresion-de-busqueda-y-sustitucion","text":"En una b\u00fasqueda como %s/cad1/cad2/g , el car\u00e1cter separado de campos de la sustituci\u00f3n no tiene por qu\u00e9 ser \"/\". En algunos casos (por ejemplo, trabajando con paths de UNIX) nos puede interesar utilizar cualquier otro car\u00e1cter. Vim utilizar\u00e1 como separador el caracter que siga a la \"s\": As\u00ed, podemos usar por ejemplo \"#\": Con barra (necesita escapar el path) Con otro car\u00e1cter (#) :s/\\/usr\\/local\\/\\/opt _\\/opt_ :s#/usr/local/opt/#/opt/#","title":"Utilizar un separador diferente entre expresi\u00f3n de b\u00fasqueda y sustituci\u00f3n"},{"location":"herramientas-it/vim/04-busquedas_y_reemplazos/#uso-de-expresiones-regulares-en-los-reemplazos","text":"Podemos usar expresiones regulares (con el mismo formato que las de b\u00fasqueda) en la porci\u00f3n de b\u00fasqueda de %s: # Cambiar apariciones de red O green O blue por purple :%s/red\\|green\\|blue/purple/g # Lo mismo que lo anterior, pero s\u00f3lo cuando no sean subcadenas, es decir # cuando sean palabras completas: :%s/\\<\\(red\\|green\\|blue\\)\\>/purple/g Es m\u00e1s, podemos utilizar los par\u00e9ntesis escapados \\( y \\) para reutilizar porciones de la cadena de b\u00fasqueda en los reemplazos (usando \\1, \\2, \\N ... en el orden de aparici\u00f3n en la b\u00fasqueda). Por ejemplo, si queremos buscar todos los n\u00fameros entre signos de = par\u00e9ntesis (como =123=, =11=, etc) y reemplazarlos por versiones sin par\u00e9ntesis, podemos usar como b\u00fasqueda =\\(\\d\\+\\)= (uno o m\u00e1s d\u00edgitos \\d+ entre iguales) y reemplazarlo por \\1 : %s/=\\(\\d\\+\\)=/\\1/g","title":"Uso de expresiones regulares en los reemplazos"},{"location":"herramientas-it/vim/04-busquedas_y_reemplazos/#reutilizar-la-ultima-busqueda-para-un-reemplazo","text":"Si acabamos de realizar una b\u00fasqueda y queremos utilizar su resultado para un reemplazo, basta con dejar en blanco el campo de b\u00fasqueda de %s: :%s//purple/g","title":"Reutilizar la \u00faltima b\u00fasqueda para un reemplazo"},{"location":"herramientas-it/vim/04-busquedas_y_reemplazos/#resumen-sobre-sustitucion-en-vim","text":"El resumen del uso b\u00e1sico de la sustituci\u00f3n en Vim es: Comando Significado :%s/cad1/cad2/ Reemplazar en cada l\u00ednea del fichero la primera aparici\u00f3n de cad1 (sea cadena o expresi\u00f3n regular) por cad2. :%s/cad1/cad2/g Reemplazar en cada l\u00ednea del fichero todas las apariciones de cad1 por cad2. :%s/cad1/cad2/gi Reemplazar en cada l\u00ednea del fichero todas las apariciones de cad1 por cad2, sin distinguir may\u00fasculas y min\u00fasculas :%s/cad1/cad2/gc Reemplazar en cada l\u00ednea del fichero todas las apariciones de cad1 por cad2 pidiendo confirmaci\u00f3n en cada reemplazo. :%s/cad regexp regexp ena/cad\\1ena2/gc Utilizar en la sustituci\u00f3n parte de la b\u00fasqueda por expresi\u00f3n regular :n,Ncomando Cualquiera de los 3 ejemplos anteriores, sobre un rango de l\u00edneas. :'<,'>comando Cualquiera de los ejemplos anteriores, sobre la selecci\u00f3n \"visual\" actual. '<,'> aparece cuando tenemos un texto seleccionado y pulsamos \":\". :'a,'bs/cad1/cad2/g Realizar la sustituci\u00f3n en el texto entre 2 marcas (a y b en el ejemplo). :%s//CAD2/g Reutilizar la \u00faltima b\u00fasqueda realizada para el reemplazo (b\u00fasqueda vac\u00eda en %s) Si investigas m\u00e1s acerca de las expresiones regulares y las usas a menudo, debes recordar que: La sintaxis de expresiones de regulares de Vim es especial, no es como la de Perl. Hay car\u00e1cteres especiales cuando no los escapas (^, $, ., *) y hay otros que necesitan ser escapados para ser especiales (<, >, |, (, ), +...). Los grupos de captura realizados con par\u00e9ntesis escapados se referencian luego como \\N en lugar de con $N (\\1 en lugar de $1). Vim no soporta el \"non-greedy modifier\" ( ? ) a continuaci\u00f3n de .* . , en lugar de .* utiliza .\\{-}. , como en: %s/style=\".\\{-}\"//g . Es decir: \\{-} es lo mismo que .*? . No necesitas escapar nada en la cadena de sustituci\u00f3n salvo las barras inversas (para que no se confunda con \\1, \\2 ...).","title":"Resumen sobre sustituci\u00f3n en Vim"},{"location":"herramientas-it/vim/04-busquedas_y_reemplazos/#resumen-de-caracteres-especiales-y-reemplazos","text":"Veamos alguna de las tablas de vimregex.com tanto para las expresiones regulares como para los reemplazos. Primero, los caracteres especiales al ser escapados, y su significado: # Matching # Matching -------------------------------------------------------------------------------------------- . any character except new line \\s whitespace character \\S non-whitespace character \\d digit \\D non-digit \\x hex digit \\X non-hex digit \\o octal digit \\O non-octal digit \\h head of word character (a,b,c...z,A,B,C...Z and _) \\H non-head of word character \\p printable character \\P like \\p, but excluding digits \\w word character \\W non-word character \\a alphabetic character \\A non-alphabetic character \\l lowercase character \\L non-lowercase character \\u uppercase character \\U non-uppercase character Segundo, los cuantificadores: Quantifier Description -------------------------------------------------------------------------------------------- * matches 0 or more of the preceding characters, ranges or metacharacters .* matches everything including empty line \\+ matches 1 or more of the preceding characters... \\= matches 0 or 1 more of the preceding characters... \\{n,m} matches from n to m of the preceding characters... \\{n} matches exactly n times of the preceding characters... \\{,m} matches at most m (from 0 to m) of the preceding characters... \\{n,} matches at least n of of the preceding characters... \\{-} matches 0 or more of the preceding atom, as few as possible (non greedy) (where n and m are positive integers n>0 ) Finalmente, estos son los c\u00f3digos especiales que podemos usar en las sustituciones con %s en la parte de sustituci\u00f3n (la segunda): # Meaning # Meaning ------------------------------------------------------------------------------------------------------ & the whole matched pattern \\L the following characters are made lowercase \\0 the whole matched pattern \\U the following characters are made uppercase \\1 the matched pattern in the 1st pair of \\(\\) \\X the matched pattern in the Xnd pair of \\(\\) \\r split line in two at this point \\l next character made lowercase ~ the previous substitute string \\u next character made uppercase Fuente : Guia de vim por : Santiago Romero","title":"Resumen de caracteres especiales y reemplazos"},{"location":"herramientas-it/vim/05-el_fichero_vimrc/","text":"El fichero .vimrc \u00b6 Antes de continuar con la parte avanzada del tutorial de vim, pasemos a examinar su principal fichero de configuraci\u00f3n. Ya hemos hablado del fichero .vimrc (o _vimrc en Windows). En \u00e9l podemos poner nuestras configuraciones espec\u00edficas y concretas, s\u00f3lo para nuestro usuario (o para todos en /etc/vimrc). En este tutorial de introducci\u00f3n a VIM s\u00f3lo vamos a ver algunas opciones \u00fatiles e interesantes que podemos definir en el fichero .vimrc. En el manual de VIM (y en la gran cantidad de documentaci\u00f3n que ten\u00e9is disponible en Internet) pod\u00e9is encontrar muchas m\u00e1s opciones, variables e incluso ejemplos de c\u00f3digo para programar (s\u00ed, programar) vuestras propias funciones para el editor. El fichero .vimrc no s\u00f3lo permite especificar par\u00e1metros y opciones de arranque para Vim: es mucho m\u00e1s que eso. En \u00e9l pod\u00e9is programar en el lenguaje interno propio de Vim (lenguaje de comandos) para realizaros vuestras propias funciones, pudiendo hacer cualquier cosa que os pod\u00e1is imaginar: macros, comandos, filtros para el texto, llamadas a programas externos, etc. Si quer\u00e9is conocer la totalidad de opciones de Vim y una explicaci\u00f3n de cada una de ellas, pod\u00e9is hacerlo mediante la ayuda inclu\u00edda al respecto en Vim, que se despliega tecleando :options (en modo comando). Opciones \u00b6 Las opciones que veremos a continuaci\u00f3n para el fichero .vimrc no s\u00f3lo est\u00e1n pensadas para ser utilizadas en el arranque del editor: podr\u00e1n ser utilizadas en cualquier momento en modo comando durante la ejecuci\u00f3n de VIM. Veamos algunos ejemplos de opciones: set nocompatible : A\u00f1adiendo en nuestro fichero vimrc la opci\u00f3n set nocompatible , hacemos que VIM nos permita utiliza funciones extras que no est\u00e1n disponibles en el VI cl\u00e1sico y tradicional. Os recomiendo que teng\u00e1is esta opci\u00f3n definida en el .vimrc. Utilizar set compatible u omitir esta opci\u00f3n har\u00e1 que algunas de las mejores funcionalidades de VIM no est\u00e9n disponibles, para preservar la compatibilidad con VI. set autoindent : Esta funci\u00f3n (tambi\u00e9n puede utilizarse set ai ), hace que cuando pulsemos enter en un fichero de texto, la nueva l\u00ednea que insertamos sea indentada autom\u00e1ticamente (es decir, se inserten espacios al principio de la misma y el cursor se posicione en una determinada posici\u00f3n). Esto puede servir, por ejemplo, para programar: si estamos escribiendo un bloque de c\u00f3digo indentado a 3 espacios (por ejemplo), al pulsar enter no empezaremos en el primer car\u00e1cter sino que autom\u00e1ticamente se nos situar\u00e1 el cursor en la columna 3. Literalmente, lo que hace VIM es que cuando pulsamos Enter, indenta la nueva l\u00ednea a la misma profundidad que la anterior. set noai : Esta funci\u00f3n hace lo contrario de set autoindent , es decir, cuando pulsemos Enter iremos directamente al primer car\u00e1cter de la siguiente l\u00ednea. Esta funci\u00f3n resulta muy \u00fatil cuando estamos editando c\u00f3digo indentado y queremos, por ejemplo, pegar texto o c\u00f3digo desde una selecci\u00f3n de texto externa (copiar y pegar desde un navegador, otro editor, etc.). Como el texto que pegamos ya est\u00e1 indentado, no necesitamos que Vim lo indente a\u00f1adiendo espacios. Si lo peg\u00e1ramos tal cual, ver\u00edamos como la indentaci\u00f3n original sumada a la identaci\u00f3n autom\u00e1tica de Vim har\u00eda que no se respetara el indentado real del texto. Para evitar esto, podemos pulsar ESC (pasar a modo comando), y teclear :set noai , y pegar el texto externo (que se pegar\u00e1 bien). Despu\u00e9s podemos volver al modo de identaci\u00f3n con ESC y :set ai . set backup : Si est\u00e1 activada esta opci\u00f3n, cada vez que grabemos el fichero se almacenar\u00e1 una copia de la versi\u00f3n anterior como fichero~ (con el car\u00e1cter '~' detr\u00e1s). set nobackup : Esto sirve para lo contrario que set backup , es decir, para deshabilitar la generaci\u00f3n de ficheros de backup. set ruler : Con set ruler , VIM muestra la posici\u00f3n X,Y actual del cursor en la barra de estado. set wrap : Activa el cortado de l\u00edneas largas en pantalla: si tenemos activada esta opci\u00f3n y una l\u00ednea es m\u00e1s larga (de ancho) que lo que podemos ver en nuestra ventana del editor, VIM la partir\u00e1 (visualmente). Si no la tenemos activada, simplemente s\u00f3lo podremos ver desde el inicio de la l\u00ednea hasta lo que nos permita la ventana del editor o la terminal (pero no partir\u00e1 la l\u00ednea). set nowrap : Las l\u00edneas que no caben en pantalla no ser\u00e1n visualmente partidas (lo contrario de set wrap). set incsearch : Habilita la b\u00fasqueda incremental: esto implica que cuando hacemos b\u00fasquedas con el comando / , Vim no esperar\u00e1 a que pulsemos ENTER para comenzar la b\u00fasqueda. VIM ir\u00e1 buscando las palabras conforme vayamos tecleando sus diferentes letras. set hlsearch : Habilita el coloreado de las palabras encontradas en las b\u00fasquedas, en un color diferente del color del texto. set ignorecase : No diferenciar entre may\u00fasculas o min\u00fasculas en las b\u00fasquedas. set tabstop : Esta opci\u00f3n permite definir el tama\u00f1o (en espacios) de los tabuladores (por defecto suelen ser 8). Un ejemplo de uso ser\u00eda set tabstop=4 . set sw : Esta opci\u00f3n permite especificar el ancho en caracteres que se desplazar\u00e1 una l\u00ednea a la izquierda o a la derecha cuando usemos << y >> para indentar la l\u00ednea actual o un bloque de texto seleccionado. set expandtab : Convertir todos los tabuladores en espacios: ideal para los que, como yo, odi\u00e9is los tabuladores y prefir\u00e1is los espacios para tabular. Junto a las 2 opciones anteriores, cuando puls\u00e9is TAB no se introducir\u00e1 un car\u00e1cter tabulador sino el n\u00famero de espacios prefijados. set list (y set nolist ): Si est\u00e1 activada esta opci\u00f3n, veremos de forma visual los finales de l\u00ednea y tabuladores. set noerrobells : Evitar que Vim \"pite\" en caso de error. set ff : Permite especificar el formato del fichero que vamos a editar, para utilizar los retornos de l\u00ednea adecuados, entre \"=dos\", \"=unix\" y \"=mac\". syntax on : Como ya hemos visto, activa el coloreado de sintaxis (si VIM entiende el formato del fichero que editamos). La orden que lo desactiva ser\u00eda syntax off . set mouse=a : Habilitar soporte para rat\u00f3n en la consola (en Vim, puesto que gVim lo soporta por defecto). source fichero : Carga el fichero especificado como fichero de opciones adicionales. set guifont= : Establecer una fuente concreta para gVim, como por ejemplo: \" You can also specify a different font, overriding the default font if has('gui_gtk2') set guifont=Bitstream\\ Vera\\ Sans\\ Mono\\ 12 else set guifont=-misc-fixed-medium-r-normal--14-130-75-75-c-70-iso8859-1 endif set cursorline : Remarcar en pantalla la l\u00ednea actual (se desactiva con :set nocursorline ). set cursorcolumn : Remarcar en pantalla la columna actual (se desactiva con :set nocursorcolumn ). El efecto con ambas activadas es el siguiente (quiz\u00e1 la columna pueda resultar molesta a algunos, pero la marca de l\u00ednea puede ser muy \u00fatil): No obstante, podemos especificar los colores del marcador de l\u00ednea y columna actuales a voluntad: highlight CursorLine ctermfg=Black ctermbg=Gray guifg=Black guibg=Gray highlight CursorColumn ctermfg=Black ctermbg=Gray guifg=Black guibg=Gray Opciones aplicables a un fichero espec\u00edfico \u00b6 Vim tiene una opci\u00f3n muy interesante que es la permitirnos establecer opciones espec\u00edficas de tipo \" set \" que difieran de las generales para un fichero concreto. Para ello, basta con establecerlas en la \u00faltima l\u00ednea del documento (para ficheros en diferentes lenguajes de programaci\u00f3n, con un comentario delante), en un formato como el siguiente: // vim:tw=80:num:sw=4:ts=8 Al abrir dicho fichero, vim encontrar\u00e1 que la \u00faltima l\u00ednea es una selecci\u00f3n de opciones personalizadas y las aplicar\u00e1 con mayor prioridad que las del fichero .vimrc. El anterior ejemplo, con un comentario de tipo doble barra, servir\u00eda para un fichero .C o .PHP, por ejemplo. Para un fichero Python ser\u00eda con el comentario de python (#) en lugar de con doble barra. Sustituciones o Abreviaciones \u00b6 Un comando muy \u00fatil para nuestro .vimrc es el comando de abreviaci\u00f3n o sustituci\u00f3n. Este comando nos permite definir abreviaturas que despu\u00e9s ser\u00e1n expandidas a sus versiones largas . Por ejemplo, supongamos que utilizamos VIM como editor para nuestro cliente de correo o de news y habitualmente tenemos que escribir la direcci\u00f3n de nuestra p\u00e1gina Web: http://www.sromero.org Pues bien, podemos declarar lo siguiente en nuestro .vimrc: iab _miweb http://www.sromero.org/ Con esto, cuando en cualquier momento tecleemos las letras que componen la palabra _miweb seguido de un espacio, autom\u00e1ticamente VIM expandir\u00e1 la palabra _miweb y la reemplazar\u00e1 por la susodicha URL . El espacio que tecleamos provoca la sustituci\u00f3n: sin \u00e9l, podr\u00edamos seguir tecleando m\u00e1s letras para poder teclear, por ejemplo, _miwebpersonal sin que se produzca dicho reemplazo. As\u00ed, podemos definirnos muchos y util\u00edsimos aliases o abreviaturas en nuestro .vimrc: iab _miweb http://www.sromero.org/ iab _saludos Muchas gracias y saludos. iab _email miemail@dominio.com iab _comment #-------------------------------- \"\"\" Correciones para errores tipicos iab Saludso Saludos Con los reemplazos se pueden utilizar cadenas especiales como , , etc: iab _firma Santiago Romero<CR>GNU/Linux<CR>sromero arroba sromero punto org Incluso podemos llamar a funciones internas de vim: iab _hora <C-R>=strftime(\"%H:%M\")<CR> iab _fecha <C-R>=strftime(\"%a %b %d %T %Z %Y\")<CR> N\u00f3tese c\u00f3mo personalmente suelo anteponer un car\u00e1cter _ a todas mis abreviaturas . Hago esto para evitar que palabras comunes (hora, fecha) sean expandidas, cuando mi objetivo es simplemente tener definidas abreviaturas como _hora y _fecha . Podemos eliminar estando dentro de Vim una abreviatura definida mediante el comando :unabbreviate (por ejemplo, :unabbreviate _hora ). Si queremos eliminar todas las abreviaturas definidas podemos usar :abclear . Mapeados (Macros) \u00b6 Si os pareci\u00f3 \u00fatil la opci\u00f3n iab , el comando map y sus variantes (nmap, imap, vmap) no se quedan atr\u00e1s: map permite mapear teclas a acciones, de forma que cuando pulsemos una determinada tecla o combinaci\u00f3n de teclas se ejecuten las acciones correspondientes. Veamos algunos ejemplos para el .vimrc. Comencemos con un ejemplo sencillo: que cada vez que pulsemos la tecla F1 se inserte la cadena prueba en el texto, mediante la inclusi\u00f3n de lo siguiente en nuestro .vimrc: map! <F1> <ESC>iprueba<CR> Si en modo comando o inserci\u00f3n pulsamos F1, se insertar\u00e1 la cadena prueba dentro del texto. Lo que hace el comando map es sustituir la pulsaci\u00f3n de F1 por la serie de comandos definida. Veamos m\u00e1s ejemplos: map! <F2> <ESC>:r !uptime<CR> -> Insertar uptime al pulsar F2 map <C-J> <ESC>{!}sort<CR>} -> Odenar texto seleccionado con Ctrl+J La diferencia entre map!, imap, cmap, y vmap es que imap realiza mapeados en modo inserci\u00f3n (el mapeado s\u00f3lo ser\u00e1 efectivo si estamos en modo inserci\u00f3n, y no surtir\u00e1 efecto si pulsamos la tecla, por ejemplo, en modo comando o visual), vmap realiza mapeados para el modo visual (cuando hemos pulsado 'v'), cmap s\u00f3lo act\u00faal en modo comando, mientras que map! se aplica tanto a modo comando como a modo inserci\u00f3n. Cabe destacar que podemos eliminar cualquier mapeado realizado con el comando unmap . Como apunte, se recomienda utilizar para el mapeo las teclas de a y sus variantes (ej; - ) ya que no est\u00e1n utilizadas por Vim (salvo F1 que puede estar mapeada como :help). .vimrc vs .gvimrc vs common \u00b6 El fichero .vimrc es el fichero de configuraci\u00f3n por defecto de vim, pero no de gvim, el cual usa su propio fichero .gvimrc para opciones espec\u00edficas de este editor. Si usamos tanto vim como gvim, es posible que acabemos utilizando y mantenido opciones duplicadas en ambos ficheros. Para evitar esto, podemos crear un fichero ~/.vimrc.common donde pongamos las opciones comunes a ambos de forma que en .vimrc y .gvimrc s\u00f3lo especificaremos opciones espec\u00edficas para cuando estemos usando uno u otro (por ejemplo, con gvim podemos querer usar ciertos colores o tama\u00f1o de pantalla pero con vim no). Dentro del fichero .vimrc y .gvimrc podemos \"cargar\" la configuraci\u00f3n de .vimrc.common utilizando el comando source . Veamos un ejemplo: .vimrc : $ cat .vimrc \"\"\" Source a global configuration file if available if filereadable(\"/etc/vim/vimrc.local\") source /etc/vim/vimrc.local endif \"\"\" Cargamos las opciones generales. if filereadable(\"/home/sromero/.vimrc.common\") source /home/sromero/.vimrc.common endif \"\"\" En el vim de terminal no quiero numeros set nonumber .gvimrc : sromero@compiler ~ $ cat .gvimrc \"\"\" Source a global configuration file if available if filereadable(\"/etc/vim/gvimrc.local\") source /etc/vim/gvimrc.local endif \"\"\" Cargar opciones comunes a .vimrc y .gvimrc if filereadable(\"/home/sromero/.vimrc.common\") source /home/sromero/.vimrc.common endif \"\"\" Activamos numeros, esquema de colores y dimensiones deseadas set number colorscheme torte-mod set lines=50 set columns=120 .vimrc.common : $ cat .vimrc.common \"\"\" Common options for .vimrc and .gvimrc filetype plugin on set tabstop=4 set nobackup set sw=4 set ai set sm set ruler set nocompatible set vb set novisualbell set noerrorbells set ttyfast set expandtab set wrap syntax on iab _hora <C-R>=strftime(\"%H:%M\")<CR> iab _fecha <C-R>=strftime(\"%a %b %d %T %Z %Y\")<CR> \"\"\" Autoguardar los pliegues del fichero actual \"set viewoptions=folds \"autocmd BufWinLeave ?* mkview \"autocmd BufWinEnter ?* silent loadview \"\"\" Solo mostrar las marcas a-z y A-Z en un color concreto (plugin ShowMarks): \"let g:showmarks_include=\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\" \"highlight ShowMarksHLl guifg=#40FF40 guibg=Black \"highlight ShowMarksHLu guifg=#40FF40 guibg=Black \"\"\" Ocultar la columna de signos de Showmarks quitando todos los simbolos \"nmap <F9> <ESC>:sign unplace *<CR> \"\"\" Ctrl+N 2 veces seguidas alterna numeros de linea nmap <C-N><C-n> :set invnumber<CR> imap <C-N><C-n> :set invnumber<CR> \"\"\" Abrir ficheros en la ultima posicion utilizada if has(\"autocmd\") autocmd BufReadPost * \\ if line(\"'\\\"\") > 0 && line(\"'\\\"\") <= line(\"$\") | \\ exe \"normal g`\\\"\" | \\ endif endif \"\"\" Usar espacio para pliegues en modo visual y normal vmap <space> zf nmap <space> za \"\"\" Establecer el color para los pliegues highlight Folded ctermfg=black ctermbg=gray guifg=black guibg=gray \"\"\" Eliminar informacion de los pliegues (numero de lineas) \"set foldtext=getline(v:foldstart) (etc...) De esta forma, las opciones comunes a vim y gvim est\u00e1n en un fichero y no por duplicado en los 2 ficheros de configuraci\u00f3n, evitandonos el tener que mantenerlas en ambos sitios. Fuente : Guia de vim por : Santiago Romero","title":"El fichero .vimrc"},{"location":"herramientas-it/vim/05-el_fichero_vimrc/#el-fichero-vimrc","text":"Antes de continuar con la parte avanzada del tutorial de vim, pasemos a examinar su principal fichero de configuraci\u00f3n. Ya hemos hablado del fichero .vimrc (o _vimrc en Windows). En \u00e9l podemos poner nuestras configuraciones espec\u00edficas y concretas, s\u00f3lo para nuestro usuario (o para todos en /etc/vimrc). En este tutorial de introducci\u00f3n a VIM s\u00f3lo vamos a ver algunas opciones \u00fatiles e interesantes que podemos definir en el fichero .vimrc. En el manual de VIM (y en la gran cantidad de documentaci\u00f3n que ten\u00e9is disponible en Internet) pod\u00e9is encontrar muchas m\u00e1s opciones, variables e incluso ejemplos de c\u00f3digo para programar (s\u00ed, programar) vuestras propias funciones para el editor. El fichero .vimrc no s\u00f3lo permite especificar par\u00e1metros y opciones de arranque para Vim: es mucho m\u00e1s que eso. En \u00e9l pod\u00e9is programar en el lenguaje interno propio de Vim (lenguaje de comandos) para realizaros vuestras propias funciones, pudiendo hacer cualquier cosa que os pod\u00e1is imaginar: macros, comandos, filtros para el texto, llamadas a programas externos, etc. Si quer\u00e9is conocer la totalidad de opciones de Vim y una explicaci\u00f3n de cada una de ellas, pod\u00e9is hacerlo mediante la ayuda inclu\u00edda al respecto en Vim, que se despliega tecleando :options (en modo comando).","title":"El fichero .vimrc"},{"location":"herramientas-it/vim/05-el_fichero_vimrc/#opciones","text":"Las opciones que veremos a continuaci\u00f3n para el fichero .vimrc no s\u00f3lo est\u00e1n pensadas para ser utilizadas en el arranque del editor: podr\u00e1n ser utilizadas en cualquier momento en modo comando durante la ejecuci\u00f3n de VIM. Veamos algunos ejemplos de opciones: set nocompatible : A\u00f1adiendo en nuestro fichero vimrc la opci\u00f3n set nocompatible , hacemos que VIM nos permita utiliza funciones extras que no est\u00e1n disponibles en el VI cl\u00e1sico y tradicional. Os recomiendo que teng\u00e1is esta opci\u00f3n definida en el .vimrc. Utilizar set compatible u omitir esta opci\u00f3n har\u00e1 que algunas de las mejores funcionalidades de VIM no est\u00e9n disponibles, para preservar la compatibilidad con VI. set autoindent : Esta funci\u00f3n (tambi\u00e9n puede utilizarse set ai ), hace que cuando pulsemos enter en un fichero de texto, la nueva l\u00ednea que insertamos sea indentada autom\u00e1ticamente (es decir, se inserten espacios al principio de la misma y el cursor se posicione en una determinada posici\u00f3n). Esto puede servir, por ejemplo, para programar: si estamos escribiendo un bloque de c\u00f3digo indentado a 3 espacios (por ejemplo), al pulsar enter no empezaremos en el primer car\u00e1cter sino que autom\u00e1ticamente se nos situar\u00e1 el cursor en la columna 3. Literalmente, lo que hace VIM es que cuando pulsamos Enter, indenta la nueva l\u00ednea a la misma profundidad que la anterior. set noai : Esta funci\u00f3n hace lo contrario de set autoindent , es decir, cuando pulsemos Enter iremos directamente al primer car\u00e1cter de la siguiente l\u00ednea. Esta funci\u00f3n resulta muy \u00fatil cuando estamos editando c\u00f3digo indentado y queremos, por ejemplo, pegar texto o c\u00f3digo desde una selecci\u00f3n de texto externa (copiar y pegar desde un navegador, otro editor, etc.). Como el texto que pegamos ya est\u00e1 indentado, no necesitamos que Vim lo indente a\u00f1adiendo espacios. Si lo peg\u00e1ramos tal cual, ver\u00edamos como la indentaci\u00f3n original sumada a la identaci\u00f3n autom\u00e1tica de Vim har\u00eda que no se respetara el indentado real del texto. Para evitar esto, podemos pulsar ESC (pasar a modo comando), y teclear :set noai , y pegar el texto externo (que se pegar\u00e1 bien). Despu\u00e9s podemos volver al modo de identaci\u00f3n con ESC y :set ai . set backup : Si est\u00e1 activada esta opci\u00f3n, cada vez que grabemos el fichero se almacenar\u00e1 una copia de la versi\u00f3n anterior como fichero~ (con el car\u00e1cter '~' detr\u00e1s). set nobackup : Esto sirve para lo contrario que set backup , es decir, para deshabilitar la generaci\u00f3n de ficheros de backup. set ruler : Con set ruler , VIM muestra la posici\u00f3n X,Y actual del cursor en la barra de estado. set wrap : Activa el cortado de l\u00edneas largas en pantalla: si tenemos activada esta opci\u00f3n y una l\u00ednea es m\u00e1s larga (de ancho) que lo que podemos ver en nuestra ventana del editor, VIM la partir\u00e1 (visualmente). Si no la tenemos activada, simplemente s\u00f3lo podremos ver desde el inicio de la l\u00ednea hasta lo que nos permita la ventana del editor o la terminal (pero no partir\u00e1 la l\u00ednea). set nowrap : Las l\u00edneas que no caben en pantalla no ser\u00e1n visualmente partidas (lo contrario de set wrap). set incsearch : Habilita la b\u00fasqueda incremental: esto implica que cuando hacemos b\u00fasquedas con el comando / , Vim no esperar\u00e1 a que pulsemos ENTER para comenzar la b\u00fasqueda. VIM ir\u00e1 buscando las palabras conforme vayamos tecleando sus diferentes letras. set hlsearch : Habilita el coloreado de las palabras encontradas en las b\u00fasquedas, en un color diferente del color del texto. set ignorecase : No diferenciar entre may\u00fasculas o min\u00fasculas en las b\u00fasquedas. set tabstop : Esta opci\u00f3n permite definir el tama\u00f1o (en espacios) de los tabuladores (por defecto suelen ser 8). Un ejemplo de uso ser\u00eda set tabstop=4 . set sw : Esta opci\u00f3n permite especificar el ancho en caracteres que se desplazar\u00e1 una l\u00ednea a la izquierda o a la derecha cuando usemos << y >> para indentar la l\u00ednea actual o un bloque de texto seleccionado. set expandtab : Convertir todos los tabuladores en espacios: ideal para los que, como yo, odi\u00e9is los tabuladores y prefir\u00e1is los espacios para tabular. Junto a las 2 opciones anteriores, cuando puls\u00e9is TAB no se introducir\u00e1 un car\u00e1cter tabulador sino el n\u00famero de espacios prefijados. set list (y set nolist ): Si est\u00e1 activada esta opci\u00f3n, veremos de forma visual los finales de l\u00ednea y tabuladores. set noerrobells : Evitar que Vim \"pite\" en caso de error. set ff : Permite especificar el formato del fichero que vamos a editar, para utilizar los retornos de l\u00ednea adecuados, entre \"=dos\", \"=unix\" y \"=mac\". syntax on : Como ya hemos visto, activa el coloreado de sintaxis (si VIM entiende el formato del fichero que editamos). La orden que lo desactiva ser\u00eda syntax off . set mouse=a : Habilitar soporte para rat\u00f3n en la consola (en Vim, puesto que gVim lo soporta por defecto). source fichero : Carga el fichero especificado como fichero de opciones adicionales. set guifont= : Establecer una fuente concreta para gVim, como por ejemplo: \" You can also specify a different font, overriding the default font if has('gui_gtk2') set guifont=Bitstream\\ Vera\\ Sans\\ Mono\\ 12 else set guifont=-misc-fixed-medium-r-normal--14-130-75-75-c-70-iso8859-1 endif set cursorline : Remarcar en pantalla la l\u00ednea actual (se desactiva con :set nocursorline ). set cursorcolumn : Remarcar en pantalla la columna actual (se desactiva con :set nocursorcolumn ). El efecto con ambas activadas es el siguiente (quiz\u00e1 la columna pueda resultar molesta a algunos, pero la marca de l\u00ednea puede ser muy \u00fatil): No obstante, podemos especificar los colores del marcador de l\u00ednea y columna actuales a voluntad: highlight CursorLine ctermfg=Black ctermbg=Gray guifg=Black guibg=Gray highlight CursorColumn ctermfg=Black ctermbg=Gray guifg=Black guibg=Gray","title":"Opciones"},{"location":"herramientas-it/vim/05-el_fichero_vimrc/#opciones-aplicables-a-un-fichero-especifico","text":"Vim tiene una opci\u00f3n muy interesante que es la permitirnos establecer opciones espec\u00edficas de tipo \" set \" que difieran de las generales para un fichero concreto. Para ello, basta con establecerlas en la \u00faltima l\u00ednea del documento (para ficheros en diferentes lenguajes de programaci\u00f3n, con un comentario delante), en un formato como el siguiente: // vim:tw=80:num:sw=4:ts=8 Al abrir dicho fichero, vim encontrar\u00e1 que la \u00faltima l\u00ednea es una selecci\u00f3n de opciones personalizadas y las aplicar\u00e1 con mayor prioridad que las del fichero .vimrc. El anterior ejemplo, con un comentario de tipo doble barra, servir\u00eda para un fichero .C o .PHP, por ejemplo. Para un fichero Python ser\u00eda con el comentario de python (#) en lugar de con doble barra.","title":"Opciones aplicables a un fichero espec\u00edfico"},{"location":"herramientas-it/vim/05-el_fichero_vimrc/#sustituciones-o-abreviaciones","text":"Un comando muy \u00fatil para nuestro .vimrc es el comando de abreviaci\u00f3n o sustituci\u00f3n. Este comando nos permite definir abreviaturas que despu\u00e9s ser\u00e1n expandidas a sus versiones largas . Por ejemplo, supongamos que utilizamos VIM como editor para nuestro cliente de correo o de news y habitualmente tenemos que escribir la direcci\u00f3n de nuestra p\u00e1gina Web: http://www.sromero.org Pues bien, podemos declarar lo siguiente en nuestro .vimrc: iab _miweb http://www.sromero.org/ Con esto, cuando en cualquier momento tecleemos las letras que componen la palabra _miweb seguido de un espacio, autom\u00e1ticamente VIM expandir\u00e1 la palabra _miweb y la reemplazar\u00e1 por la susodicha URL . El espacio que tecleamos provoca la sustituci\u00f3n: sin \u00e9l, podr\u00edamos seguir tecleando m\u00e1s letras para poder teclear, por ejemplo, _miwebpersonal sin que se produzca dicho reemplazo. As\u00ed, podemos definirnos muchos y util\u00edsimos aliases o abreviaturas en nuestro .vimrc: iab _miweb http://www.sromero.org/ iab _saludos Muchas gracias y saludos. iab _email miemail@dominio.com iab _comment #-------------------------------- \"\"\" Correciones para errores tipicos iab Saludso Saludos Con los reemplazos se pueden utilizar cadenas especiales como , , etc: iab _firma Santiago Romero<CR>GNU/Linux<CR>sromero arroba sromero punto org Incluso podemos llamar a funciones internas de vim: iab _hora <C-R>=strftime(\"%H:%M\")<CR> iab _fecha <C-R>=strftime(\"%a %b %d %T %Z %Y\")<CR> N\u00f3tese c\u00f3mo personalmente suelo anteponer un car\u00e1cter _ a todas mis abreviaturas . Hago esto para evitar que palabras comunes (hora, fecha) sean expandidas, cuando mi objetivo es simplemente tener definidas abreviaturas como _hora y _fecha . Podemos eliminar estando dentro de Vim una abreviatura definida mediante el comando :unabbreviate (por ejemplo, :unabbreviate _hora ). Si queremos eliminar todas las abreviaturas definidas podemos usar :abclear .","title":"Sustituciones o Abreviaciones"},{"location":"herramientas-it/vim/05-el_fichero_vimrc/#mapeados-macros","text":"Si os pareci\u00f3 \u00fatil la opci\u00f3n iab , el comando map y sus variantes (nmap, imap, vmap) no se quedan atr\u00e1s: map permite mapear teclas a acciones, de forma que cuando pulsemos una determinada tecla o combinaci\u00f3n de teclas se ejecuten las acciones correspondientes. Veamos algunos ejemplos para el .vimrc. Comencemos con un ejemplo sencillo: que cada vez que pulsemos la tecla F1 se inserte la cadena prueba en el texto, mediante la inclusi\u00f3n de lo siguiente en nuestro .vimrc: map! <F1> <ESC>iprueba<CR> Si en modo comando o inserci\u00f3n pulsamos F1, se insertar\u00e1 la cadena prueba dentro del texto. Lo que hace el comando map es sustituir la pulsaci\u00f3n de F1 por la serie de comandos definida. Veamos m\u00e1s ejemplos: map! <F2> <ESC>:r !uptime<CR> -> Insertar uptime al pulsar F2 map <C-J> <ESC>{!}sort<CR>} -> Odenar texto seleccionado con Ctrl+J La diferencia entre map!, imap, cmap, y vmap es que imap realiza mapeados en modo inserci\u00f3n (el mapeado s\u00f3lo ser\u00e1 efectivo si estamos en modo inserci\u00f3n, y no surtir\u00e1 efecto si pulsamos la tecla, por ejemplo, en modo comando o visual), vmap realiza mapeados para el modo visual (cuando hemos pulsado 'v'), cmap s\u00f3lo act\u00faal en modo comando, mientras que map! se aplica tanto a modo comando como a modo inserci\u00f3n. Cabe destacar que podemos eliminar cualquier mapeado realizado con el comando unmap . Como apunte, se recomienda utilizar para el mapeo las teclas de a y sus variantes (ej; - ) ya que no est\u00e1n utilizadas por Vim (salvo F1 que puede estar mapeada como :help).","title":"Mapeados (Macros)"},{"location":"herramientas-it/vim/05-el_fichero_vimrc/#vimrc-vs-gvimrc-vs-common","text":"El fichero .vimrc es el fichero de configuraci\u00f3n por defecto de vim, pero no de gvim, el cual usa su propio fichero .gvimrc para opciones espec\u00edficas de este editor. Si usamos tanto vim como gvim, es posible que acabemos utilizando y mantenido opciones duplicadas en ambos ficheros. Para evitar esto, podemos crear un fichero ~/.vimrc.common donde pongamos las opciones comunes a ambos de forma que en .vimrc y .gvimrc s\u00f3lo especificaremos opciones espec\u00edficas para cuando estemos usando uno u otro (por ejemplo, con gvim podemos querer usar ciertos colores o tama\u00f1o de pantalla pero con vim no). Dentro del fichero .vimrc y .gvimrc podemos \"cargar\" la configuraci\u00f3n de .vimrc.common utilizando el comando source . Veamos un ejemplo: .vimrc : $ cat .vimrc \"\"\" Source a global configuration file if available if filereadable(\"/etc/vim/vimrc.local\") source /etc/vim/vimrc.local endif \"\"\" Cargamos las opciones generales. if filereadable(\"/home/sromero/.vimrc.common\") source /home/sromero/.vimrc.common endif \"\"\" En el vim de terminal no quiero numeros set nonumber .gvimrc : sromero@compiler ~ $ cat .gvimrc \"\"\" Source a global configuration file if available if filereadable(\"/etc/vim/gvimrc.local\") source /etc/vim/gvimrc.local endif \"\"\" Cargar opciones comunes a .vimrc y .gvimrc if filereadable(\"/home/sromero/.vimrc.common\") source /home/sromero/.vimrc.common endif \"\"\" Activamos numeros, esquema de colores y dimensiones deseadas set number colorscheme torte-mod set lines=50 set columns=120 .vimrc.common : $ cat .vimrc.common \"\"\" Common options for .vimrc and .gvimrc filetype plugin on set tabstop=4 set nobackup set sw=4 set ai set sm set ruler set nocompatible set vb set novisualbell set noerrorbells set ttyfast set expandtab set wrap syntax on iab _hora <C-R>=strftime(\"%H:%M\")<CR> iab _fecha <C-R>=strftime(\"%a %b %d %T %Z %Y\")<CR> \"\"\" Autoguardar los pliegues del fichero actual \"set viewoptions=folds \"autocmd BufWinLeave ?* mkview \"autocmd BufWinEnter ?* silent loadview \"\"\" Solo mostrar las marcas a-z y A-Z en un color concreto (plugin ShowMarks): \"let g:showmarks_include=\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\" \"highlight ShowMarksHLl guifg=#40FF40 guibg=Black \"highlight ShowMarksHLu guifg=#40FF40 guibg=Black \"\"\" Ocultar la columna de signos de Showmarks quitando todos los simbolos \"nmap <F9> <ESC>:sign unplace *<CR> \"\"\" Ctrl+N 2 veces seguidas alterna numeros de linea nmap <C-N><C-n> :set invnumber<CR> imap <C-N><C-n> :set invnumber<CR> \"\"\" Abrir ficheros en la ultima posicion utilizada if has(\"autocmd\") autocmd BufReadPost * \\ if line(\"'\\\"\") > 0 && line(\"'\\\"\") <= line(\"$\") | \\ exe \"normal g`\\\"\" | \\ endif endif \"\"\" Usar espacio para pliegues en modo visual y normal vmap <space> zf nmap <space> za \"\"\" Establecer el color para los pliegues highlight Folded ctermfg=black ctermbg=gray guifg=black guibg=gray \"\"\" Eliminar informacion de los pliegues (numero de lineas) \"set foldtext=getline(v:foldstart) (etc...) De esta forma, las opciones comunes a vim y gvim est\u00e1n en un fichero y no por duplicado en los 2 ficheros de configuraci\u00f3n, evitandonos el tener que mantenerlas en ambos sitios. Fuente : Guia de vim por : Santiago Romero","title":".vimrc vs .gvimrc vs common"},{"location":"herramientas-it/vim/06-pestanas_ventanas_buffers/","text":"Pesta\u00f1as, Ventanas y Buffers \u00b6 Vim permite trabajar de forma simult\u00e1nea con m\u00faltiples ficheros. Para eso dispone de varios mecanismos: Tabs (pesta\u00f1as): Si utilizamos vim bajo un entorno gr\u00e1fico con gvim, podemos disponer de m\u00faltiples pesta\u00f1as visibles en la parte superior de la ventana, con un fichero abierto en cada pesta\u00f1a. En modo texto, desde Vim 7, tambi\u00e9n se soportan pesta\u00f1as (aparecer\u00e1n los nombres en la l\u00ednea superior del editor). Windows (ventanas): En la ventana de vim o en una pesta\u00f1a de gvim podemos dividir el \u00e1rea de pantalla en m\u00faltiples ventanas (con divisiones horizontales o verticales), para trabajar con m\u00faltiples ficheros y alternar entre las ventanas con atajos de teclado. Buffers : Vim puede trabajar con m\u00faltiples \"pantallas\" virtuales (buffers), pero en lugar de estar visibles como las ventanas, s\u00f3lo uno de ellos ser\u00e1 visible en cada momento. Veamos un resumen con los distintos atajos de teclado que permiten la utilizaci\u00f3n de los diferentes modos de multiedici\u00f3n. Tabs (pesta\u00f1as) \u00b6 Todos los comandos de gesti\u00f3n de pesta\u00f1as comienzan como \":tab\", y permiten crear, cerrar y movernos entre las pesta\u00f1as. Estas acciones tambi\u00e9n pueden ser llevadas a cabo desde los propios men\u00faes de Gvim. Comando Significado :tabnew Crea una nueva pesta\u00f1a vac\u00eda. :tabedit fichero Abre el fichero especificado en una nueva pesta\u00f1a. :tabclose Cerrar la pesta\u00f1a actual (tambi\u00e9n con :q!). :tabnext [n] Saltar a la siguiente pesta\u00f1a (o a la enesima siguiente). :tabprev [n] Saltar a la anterior pesta\u00f1a (o a la enesima anterior). gt (En modo comando) Saltar a la siguiente pesta\u00f1a. En gvim tambi\u00e9n sirve Ctrl+AvPag. gT (En modo comando) Saltar a la anterior pesta\u00f1a. En gvim tambi\u00e9n sirve Ctrl+RePag. Ngt (En modo comando) Saltar a la pesta\u00f1a n\u00famero N. :tabs Mostrar una lista de pesta\u00f1as abiertas. :tabdo comando Ejecuta el comando en todas las pesta\u00f1as abiertas, abortando en caso de error. Para abrir desde la l\u00ednea de comandos m\u00faltiples ficheros en diferentes pesta\u00f1as, se utiliza el flag -p: vim -p *.txt Los siguientes mapeos pueden ser interesantes en el .gvimrc (s\u00f3lo para gVim): nnoremap <C-Left> :tabprevious<CR> nnoremap <C-Right> :tabnext<CR> nnoremap <silent> <A-Left> :execute 'silent! tabmove ' . (tabpagenr()-2)<CR> nnoremap <silent> <A-Right> :execute 'silent! tabmove ' . tabpagenr()<CR> Con Ctrl+Izquierda y Ctrl*Derecha nos moveremos entre las pesta\u00f1as y con Alt+Izquierda y Alt+Derecha cambiaremos la pesta\u00f1a actual de posici\u00f3n. Windows (ventanas) \u00b6 Si no utilizamos GVim, lo normal ser\u00e1 trabajar con ventanas y con buffers. Si nuestra terminal de trabajo es grande (no simplemente 80x25), podremos utilizar c\u00f3modamente ventanas para alternar entre diferentes ficheros (normalmente 2 \u00f3 3 es un l\u00edmite razonable en cuanto a tama\u00f1o resultante de ventana). Para gestionar las ventanas existen tanto comandos \":\" como atajos de teclado, todos ellos precedidos por la combinaci\u00f3n de teclas Ctrl-W. Comando Atajo Significado :split [fichero] Ctrl-W s Partir la pantalla horizontalmente, en blanco o con el contenido del fichero. :vsplit [fichero] Ctrl-W v Partir la pantalla verticalmente, en blanco o con el contenido del fichero. :close Ctrl-W c Cerrar la ventana actual. :q! Ctrl-W q Salir de la ventana actual (la cierra y se pierden los buffers). :only Ctrl-W o Hacer la ventana actual la \u00fanica (cerrar todas las dem\u00e1s). :wincmd j/k/l/h Ctrl-W direccion Moverse a la ventana de la izquierda/arriba/abajo/derecha. Con el atajo de teclado se pueden usar los cursores. \u2013 Ctrl-W w Moverse c\u00edclicamente entre ventanas. \u2014 Ctrl-W r Rotar el orden de las ventanas. \u2014 Ctrl-W x Intercambiar la ventana actual con la siguiente. :resize +1 Ctrl-W + Aumentar en 1 l\u00ednea el tama\u00f1o de la ventana actual en las divisiones horizontales. :resize -1 Ctrl-W - Reducir en 1 l\u00ednea el tama\u00f1o de la ventana actual en las divisiones horizontales. \u2014 Ctrl-W = Igualar el tama\u00f1o de todas las ventanas horizontales :vertical resize +1 Ctrl-W > Aumentar en 1 l\u00ednea el tama\u00f1o de la ventana actual en las divisiones verticales. :vertical resize -1 Ctrl-W < Reducir en 1 l\u00ednea el tama\u00f1o de la ventana actual en las divisiones verticales. \u2013 Ctrl-W _ Maximiza la ventana actual, dejando el resto a tama\u00f1o 1. Podemos hacer uso de las ventanas para, por ejemplo, copiar una porci\u00f3n de texto de un fichero en otro , sin el uso del rat\u00f3n en UNIX ni del portapapeles del sistema en Windows. El procedimiento ser\u00eda el siguiente: Seleccionar texto en modo visual. Copiar el texto con y (yank). Abrir el fichero destino con :split fichero . Pegar el texto en la posici\u00f3n deseada con p . Cerrar la ventana del segundo fichero con Ctrl-W + c. Todas estas acciones se realizan de forma r\u00e1pida y sin necesidad de levantar las manos del teclado o de cambiar de ventana o programa (por lo que podr\u00edan valer, perfectamente, en una consola de modo texto UNIX). Buffers \u00b6 Finalmente, tenemos los buffers. Nos permite abrir m\u00faltiples ficheros pero viendo s\u00f3lo uno cada vez. Con comandos de vim de apenas 2 letras podemos saltar de uno a otro, ocultando en el cambio el que tuvieramos actualmente en pantalla. Si editamos m\u00faltiples ficheros desde l\u00ednea de comandos con \"vim *.c\", cada fichero .c acaba en un buffer. Comando Significado :buffers Ver el listado de buffers junto a sus n\u00fameros identificativos. :buffer N Abrir buffer n\u00famero N. :bn[ext] Ir al siguiente buffer. :bp[revious] Ir al anterior buffer. :bf[irst] Ir al primer buffer. :bl[ast] Ir al \u00faltimo buffer. :bd[elete] Cerrar el buffer actual. Por ejemplo: $ vim *.txt :buffers 1 %a \"documentacion.txt\" l\u00ednea 1 2 \"manual-certificados.txt\" l\u00ednea 0 Pulse INTRO o escriba una orden para continuar El buffer activo est\u00e1 indicado como %a. Fuente : Guia de vim por : Santiago Romero","title":"Pesta\u00f1as, Ventanas y Buffers"},{"location":"herramientas-it/vim/06-pestanas_ventanas_buffers/#pestanas-ventanas-y-buffers","text":"Vim permite trabajar de forma simult\u00e1nea con m\u00faltiples ficheros. Para eso dispone de varios mecanismos: Tabs (pesta\u00f1as): Si utilizamos vim bajo un entorno gr\u00e1fico con gvim, podemos disponer de m\u00faltiples pesta\u00f1as visibles en la parte superior de la ventana, con un fichero abierto en cada pesta\u00f1a. En modo texto, desde Vim 7, tambi\u00e9n se soportan pesta\u00f1as (aparecer\u00e1n los nombres en la l\u00ednea superior del editor). Windows (ventanas): En la ventana de vim o en una pesta\u00f1a de gvim podemos dividir el \u00e1rea de pantalla en m\u00faltiples ventanas (con divisiones horizontales o verticales), para trabajar con m\u00faltiples ficheros y alternar entre las ventanas con atajos de teclado. Buffers : Vim puede trabajar con m\u00faltiples \"pantallas\" virtuales (buffers), pero en lugar de estar visibles como las ventanas, s\u00f3lo uno de ellos ser\u00e1 visible en cada momento. Veamos un resumen con los distintos atajos de teclado que permiten la utilizaci\u00f3n de los diferentes modos de multiedici\u00f3n.","title":"Pesta\u00f1as, Ventanas y Buffers"},{"location":"herramientas-it/vim/06-pestanas_ventanas_buffers/#tabs-pestanas","text":"Todos los comandos de gesti\u00f3n de pesta\u00f1as comienzan como \":tab\", y permiten crear, cerrar y movernos entre las pesta\u00f1as. Estas acciones tambi\u00e9n pueden ser llevadas a cabo desde los propios men\u00faes de Gvim. Comando Significado :tabnew Crea una nueva pesta\u00f1a vac\u00eda. :tabedit fichero Abre el fichero especificado en una nueva pesta\u00f1a. :tabclose Cerrar la pesta\u00f1a actual (tambi\u00e9n con :q!). :tabnext [n] Saltar a la siguiente pesta\u00f1a (o a la enesima siguiente). :tabprev [n] Saltar a la anterior pesta\u00f1a (o a la enesima anterior). gt (En modo comando) Saltar a la siguiente pesta\u00f1a. En gvim tambi\u00e9n sirve Ctrl+AvPag. gT (En modo comando) Saltar a la anterior pesta\u00f1a. En gvim tambi\u00e9n sirve Ctrl+RePag. Ngt (En modo comando) Saltar a la pesta\u00f1a n\u00famero N. :tabs Mostrar una lista de pesta\u00f1as abiertas. :tabdo comando Ejecuta el comando en todas las pesta\u00f1as abiertas, abortando en caso de error. Para abrir desde la l\u00ednea de comandos m\u00faltiples ficheros en diferentes pesta\u00f1as, se utiliza el flag -p: vim -p *.txt Los siguientes mapeos pueden ser interesantes en el .gvimrc (s\u00f3lo para gVim): nnoremap <C-Left> :tabprevious<CR> nnoremap <C-Right> :tabnext<CR> nnoremap <silent> <A-Left> :execute 'silent! tabmove ' . (tabpagenr()-2)<CR> nnoremap <silent> <A-Right> :execute 'silent! tabmove ' . tabpagenr()<CR> Con Ctrl+Izquierda y Ctrl*Derecha nos moveremos entre las pesta\u00f1as y con Alt+Izquierda y Alt+Derecha cambiaremos la pesta\u00f1a actual de posici\u00f3n.","title":"Tabs (pesta\u00f1as)"},{"location":"herramientas-it/vim/06-pestanas_ventanas_buffers/#windows-ventanas","text":"Si no utilizamos GVim, lo normal ser\u00e1 trabajar con ventanas y con buffers. Si nuestra terminal de trabajo es grande (no simplemente 80x25), podremos utilizar c\u00f3modamente ventanas para alternar entre diferentes ficheros (normalmente 2 \u00f3 3 es un l\u00edmite razonable en cuanto a tama\u00f1o resultante de ventana). Para gestionar las ventanas existen tanto comandos \":\" como atajos de teclado, todos ellos precedidos por la combinaci\u00f3n de teclas Ctrl-W. Comando Atajo Significado :split [fichero] Ctrl-W s Partir la pantalla horizontalmente, en blanco o con el contenido del fichero. :vsplit [fichero] Ctrl-W v Partir la pantalla verticalmente, en blanco o con el contenido del fichero. :close Ctrl-W c Cerrar la ventana actual. :q! Ctrl-W q Salir de la ventana actual (la cierra y se pierden los buffers). :only Ctrl-W o Hacer la ventana actual la \u00fanica (cerrar todas las dem\u00e1s). :wincmd j/k/l/h Ctrl-W direccion Moverse a la ventana de la izquierda/arriba/abajo/derecha. Con el atajo de teclado se pueden usar los cursores. \u2013 Ctrl-W w Moverse c\u00edclicamente entre ventanas. \u2014 Ctrl-W r Rotar el orden de las ventanas. \u2014 Ctrl-W x Intercambiar la ventana actual con la siguiente. :resize +1 Ctrl-W + Aumentar en 1 l\u00ednea el tama\u00f1o de la ventana actual en las divisiones horizontales. :resize -1 Ctrl-W - Reducir en 1 l\u00ednea el tama\u00f1o de la ventana actual en las divisiones horizontales. \u2014 Ctrl-W = Igualar el tama\u00f1o de todas las ventanas horizontales :vertical resize +1 Ctrl-W > Aumentar en 1 l\u00ednea el tama\u00f1o de la ventana actual en las divisiones verticales. :vertical resize -1 Ctrl-W < Reducir en 1 l\u00ednea el tama\u00f1o de la ventana actual en las divisiones verticales. \u2013 Ctrl-W _ Maximiza la ventana actual, dejando el resto a tama\u00f1o 1. Podemos hacer uso de las ventanas para, por ejemplo, copiar una porci\u00f3n de texto de un fichero en otro , sin el uso del rat\u00f3n en UNIX ni del portapapeles del sistema en Windows. El procedimiento ser\u00eda el siguiente: Seleccionar texto en modo visual. Copiar el texto con y (yank). Abrir el fichero destino con :split fichero . Pegar el texto en la posici\u00f3n deseada con p . Cerrar la ventana del segundo fichero con Ctrl-W + c. Todas estas acciones se realizan de forma r\u00e1pida y sin necesidad de levantar las manos del teclado o de cambiar de ventana o programa (por lo que podr\u00edan valer, perfectamente, en una consola de modo texto UNIX).","title":"Windows (ventanas)"},{"location":"herramientas-it/vim/06-pestanas_ventanas_buffers/#buffers","text":"Finalmente, tenemos los buffers. Nos permite abrir m\u00faltiples ficheros pero viendo s\u00f3lo uno cada vez. Con comandos de vim de apenas 2 letras podemos saltar de uno a otro, ocultando en el cambio el que tuvieramos actualmente en pantalla. Si editamos m\u00faltiples ficheros desde l\u00ednea de comandos con \"vim *.c\", cada fichero .c acaba en un buffer. Comando Significado :buffers Ver el listado de buffers junto a sus n\u00fameros identificativos. :buffer N Abrir buffer n\u00famero N. :bn[ext] Ir al siguiente buffer. :bp[revious] Ir al anterior buffer. :bf[irst] Ir al primer buffer. :bl[ast] Ir al \u00faltimo buffer. :bd[elete] Cerrar el buffer actual. Por ejemplo: $ vim *.txt :buffers 1 %a \"documentacion.txt\" l\u00ednea 1 2 \"manual-certificados.txt\" l\u00ednea 0 Pulse INTRO o escriba una orden para continuar El buffer activo est\u00e1 indicado como %a. Fuente : Guia de vim por : Santiago Romero","title":"Buffers"},{"location":"herramientas-it/vim/07-marcas_en_el_texto/","text":"Marcas en el texto \u00b6 Vim tiene una funcionalidad bastante \u00fatil conocida como marcas, que consiste en que podemos establecer hasta 26 marcas (desde la a hasta la z) en el texto para volver a esa posici\u00f3n del texto en cualquier momento. Estas marcas son invisibles, y son simplemente una referencia para nosotros. Comando Significado m seguido de min\u00fascula Pulsando una tecla a-z, ponemos una marca en el documento (ej: ma). ' seguido de marca Saltamos a la l\u00ednea de la marca solicitada (ej: 'a). Es ap\u00f3strofe, no acento (la tecla a la derecha del 0). seguido de marca | Saltamos a la l\u00ednea y columna exacta de la marca solicitada (ej: a). ' ' (2 ap\u00f3strofes) Volvemos a la l\u00ednea anterior al salto. `` (2 comillas invertidas) Volvemos a la posici\u00f3n exacta anterior al salto. En teclado espa\u00f1ol, pulsar + espacio + + espacio. m seguido de may\u00fascula Establecer una marca global (m\u00e1s adelante veremos qu\u00e9 es). Por ejemplo, supongamos que estamos programando y estamos modificando el bucle principal de nuestro programa, pero estamos cambiando bastante a otra funci\u00f3n que tambi\u00e9n estamos modificando. Cuando tenemos que ir de una parte del documento a otra const\u00e1ntemente es bastante molesto, sobre todo con los editores convencionales, donde se hace todo a base de barra de scroll o bien de ReP\u00e1g/AvP\u00e1g y cursores. Estar todo el rato hacia arriba y hacia abajo s\u00f3lo porque tenemos que movernos entre 2 porciones del documento no es algo especialmente agradable ni c\u00f3modo. En Vim, hasta ahora tenemos la opci\u00f3n de activar los n\u00fameros de l\u00ednea (:set number), mirar y recordar los 2 n\u00fameros de l\u00ednea en que est\u00e1n las 2 partes del documento entre las que vamos a ir cambiando, y cambiar entre ellos con el comando G (por ejemplo, alternar entre 100G y 500G ). Es cierto que esto es much\u00edsimo m\u00e1s c\u00f3modo que moverse mediante teclas de movimiento, pero Vim a\u00fan puede ir m\u00e1s all\u00e1 gracias a las marcas. Simplemente basta con poner 2 marcas (invisibles, recordemos) en esos 2 puntos del documento, y podremos alternar entre ellos sin ninguna dificultad. No es que podamos alternar, es que podemos seguir movi\u00e9ndonos libremente por el documento e ir a cualquiera de los dos puntos en cualquier momento. Y no estamos limitados a 2 marcas, sino que tenemos a nivel del fichero actual todas las letras posibles entre la a y la z para poner marcas. Establecer y recuperar marcas \u00b6 En Vim las marcas se ponen con el comando m seguido de una letra min\u00fascula (a-z) identificador de la marca. As\u00ed, cuando estamos en una parte concreta del documento que nos interesa, pulsamos ma (letra m, letra a), y establecemos una marca en la l\u00ednea actual del documento que se llamar\u00e1 ma. Del mismo modo, nos podemos ir a la segunda parte del documento que vamos a frecuentar y establecer una marca con mb (recordad que ten\u00e9is disponibles 26 marcas, de la 'a' a la 'z'). Ahora podemos ir a cualquiera de esas 2 marcas de forma inmediata con el comando ' (comilla simple, la que est\u00e1 a la derecha del cero en los teclados espa\u00f1oles) seguido de la letra de la marca a la que queremos ir. Por ejemplo, pulsando 'a iremos al principio de la l\u00ednea que marcamos con ma y pulsando 'b iremos al principio de la l\u00ednea que marcamos con mb . \u00bfSe os ocurre alguna manera m\u00e1s c\u00f3moda de moverse entre 2 partes diferentes del documento? Si eres programador no hay nada m\u00e1s \u00fatil: una marca en el main(), otra en el bloque en que estamos trabajando, y otra por ejemplo en una funci\u00f3n a la que estamos yendo mucho para hacer cambios, y se acab\u00f3 el moverse con las teclas de movimiento de un sitio para otro. Y si no eres programador, tambi\u00e9n: puedes poner una marca al principio del fichero y otra al final: pulsas gg para ir al principio del fichero, pulsas mi (la i de inicio, para que sea f\u00e1cil de recordar), pulsas G para ir al final del fichero, pulsas mf (la f de fin), y ya tienes 2 marcas de forma que desde cualquier punto del documento puedes ir al principio o final del fichero usando marcas. O, por ejemplo, si estamos escribiendo algo y necesitamos ir a otro punto del documento a consultar algo, podemos poner una marca y desplazarmos, para despu\u00e9s volver de forma inmediata recuperando la marca. Las posibilidades son infinitas. Hemos dicho que la comilla simple nos devuelve a una marca posicionando el cursor al principio de la l\u00ednea. Vim permite mucho m\u00e1s, ya que el comando ` (comilla inversa, la tecla que tenemos a la derecha de la 'p' en los teclados espa\u00f1oles) seguido de la letra de la marca a la que ir nos devuelve exactamente a la l\u00ednea y columna en la que realizamos la marca con el comando m : no s\u00f3lo a la misma l\u00ednea, sino en la misma posici\u00f3n exacta del cursor. Marcas especiales \u00b6 Cabe destacar que si nos olvidamos de las marcas que hemos puesto, podemos obtener un listado de marcas ejecutando el comando :marks seguido de Enter. Al visualizar este listado veremos que hay una serie de marcas especiales que no hemos definido nosotros, y que son: Marca Especial Significado ' (comilla simple) Posici\u00f3n del cursor en el momento en que realizamos el \u00faltimo salto que hayamos hecho. \" (comillas dobles) Posici\u00f3n del cursor la \u00faltima vez que editamos el fichero. Esto quiere decir que cuando abrimos un fichero, yendo a la marca comillas dobles mediante comilla simple seguido de comilla doble nos posicionaremos en el lugar en que est\u00e1bamos la \u00faltima vez que editamos este fichero. Esto es especialmente \u00fatil a la hora de programar. [ (corchete abierto) Posici\u00f3n del principio del \u00faltimo cambio que hayamos realizado. ] (corchete cerrado) Posici\u00f3n final del \u00faltimo cambio que hayamos realizado. ^ (circunflejo) Posici\u00f3n del \u00faltimo lugar en que hayamos estado en modo Inserci\u00f3n realizando cambios. Merecen menci\u00f3n especial las 2 primeras marcas especiales de la tabla. La comilla simple permite volver a la posici\u00f3n del \u00faltimo salto, y esto incluye los saltos realizados con G y gg . Es decir, si estamos en una posici\u00f3n del documento y hacemos 100G para ir a la l\u00ednea 100, pulsando comilla simple seguido de comilla simple de nuevo (es decir: ' ' ) volveremos a la posici\u00f3n en que est\u00e1bamos antes de realizar el cambio de l\u00ednea. Por si fuera poco, las dos comillas simples tambi\u00e9n nos permitir\u00e1n volver al punto original del salto en el caso de b\u00fasquedas, por ejemplo. Vim guarda un historial de saltos, al cual contribuyen las b\u00fasquedas, las marcas y los cambios de l\u00ednea, y podemos movernos por ese historial mediante CTRL+O (anterior) y CTRL+I (siguiente). Esto quiere decir, que podemos circular entre todas las posiciones del documento entre las que hemos saltado o buscado mediante estas 2 teclas. Yo personalmente tengo bastante con el uso de marcas y no suelo necesitar usar esta pila de saltos , pero es una posibilidad m\u00e1s que Vim nos ofrece. Por \u00faltimo, las comillas dobles guardan la \u00faltima posici\u00f3n en que estabamos la \u00faltima vez que editamos el fichero: por ejemplo, si programamos y solemos salir del editor para compilar, tal vez al terminar de hacerlo nos interese recuperar la edici\u00f3n del fichero en el punto exacto en que est\u00e1bamos y no al principio del mismo. Con la marca de comillas dobles podemos hacer esto f\u00e1cilmente. Si queremos que autom\u00e1ticamente se posicione el cursor en el lugar en que editamos el fichero por \u00faltima vez sin necesidad de que nosotros lo hagamos manualmente podemos incluir las siguientes opciones en nuestro fichero .vimrc: autocmd BufReadPost * \\ if line(\"'\\\"\") > 0 && line(\"'\\\"\") <= line(\"$\") | \\ exe \"normal g`\\\"\" | \\ endif Este comando de Vim simplemente comprueba que existe una marca comillas dobles en el fichero y si es as\u00ed la llama (puede verse en el comando exe en el que se hace un comilla invertida seguido de una comilla doble (escapada, para que Vim no la interprete), lo que nos lleva a la posici\u00f3n exacta de fila y columna a la que apunte la comilla doble. Marcas globales \u00b6 Cabe destacar que las letras A-Z (en may\u00fascula) son marcas globales, es decir, que se establecen a nivel de fichero y que nos permiten volver a la edici\u00f3n de un fichero que no es el actual. Por ejemplo, supongamos que establecemos una marca \"A\" con mA en un fichero y salimos de vim. Si en otro momento editamos otro fichero diferente y saltamos a la marca A (con 'A ), vim cargar\u00e1 al primer fichero y saltar\u00e1 a la marca solicitada. Vim guarda la informaci\u00f3n de las marcas incluso despu\u00e9s de haber salido del documento (siempre que pueda guardar en el directorio home del usuario el archivo .viminfo) por lo que las marcas son permanentes a menos que las borremos manualmente, borremos la l\u00ednea que marcan, o que las reasignemos a una nueva l\u00ednea. Este funcionamiento es ideal para \"marcar\" aquellos puntos del documento a los que acudamos repetidamente. Por ejemplo, si estamos programando, podemos marcar con una \"v\" de \"variables\" la zona en la que est\u00e1n definidas las variables y con una \"t\" de trabajo la zona de trabajo actual, y saltar de una zona a otra r\u00e1pidamente. Tambi\u00e9n podemos referenciar las marcas. Por ejemplo, con d'a borraremos todo el texto desde la posici\u00f3n actual del cursor hasta la marca \"a\" (ya estemos arriba o debajo de la misma) , poniendo dicho texto en el buffer interno para pegado. C\u00f3mo ver las marcas \u00b6 Como hemos comentado, las marcas son invisibles, pero podemos hacerlas visibles si instalamos el plugin ShowMarks y a\u00f1adimos lo siguiente en nuestro fichero .vimrc: \"\"\" Mostrar las marcas a-z y A-Z en un color concreto: let g:showmarks_include=\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\" highlight ShowMarksHLl ctermfg=LightCyan ctermbg=NONE guifg=#40FF40 guibg=Black highlight ShowMarksHLu ctermfg=LightCyan ctermbg=NONE guifg=#40FF40 guibg=Black highlight SignColumn ctermfg=Blue ctermbg=NONE guifg=Blue guibg=Black Una vez hecho esto, veremos las marcas en nuestro c\u00f3digo en la columna especial de Vim llamada \"SignColumn\" (a la izquierda del texto), en el color que hemos indicado (verde clarito para gVim y LightCyan para modo texto): M\u00e1s adelante veremos el procedimiento para descargar e instalar Plugins, de forma que podremos instalar este y otros plugins interesantes. Fuente : Guia de vim por : Santiago Romero","title":"Marcas en el texto"},{"location":"herramientas-it/vim/07-marcas_en_el_texto/#marcas-en-el-texto","text":"Vim tiene una funcionalidad bastante \u00fatil conocida como marcas, que consiste en que podemos establecer hasta 26 marcas (desde la a hasta la z) en el texto para volver a esa posici\u00f3n del texto en cualquier momento. Estas marcas son invisibles, y son simplemente una referencia para nosotros. Comando Significado m seguido de min\u00fascula Pulsando una tecla a-z, ponemos una marca en el documento (ej: ma). ' seguido de marca Saltamos a la l\u00ednea de la marca solicitada (ej: 'a). Es ap\u00f3strofe, no acento (la tecla a la derecha del 0). seguido de marca | Saltamos a la l\u00ednea y columna exacta de la marca solicitada (ej: a). ' ' (2 ap\u00f3strofes) Volvemos a la l\u00ednea anterior al salto. `` (2 comillas invertidas) Volvemos a la posici\u00f3n exacta anterior al salto. En teclado espa\u00f1ol, pulsar + espacio + + espacio. m seguido de may\u00fascula Establecer una marca global (m\u00e1s adelante veremos qu\u00e9 es). Por ejemplo, supongamos que estamos programando y estamos modificando el bucle principal de nuestro programa, pero estamos cambiando bastante a otra funci\u00f3n que tambi\u00e9n estamos modificando. Cuando tenemos que ir de una parte del documento a otra const\u00e1ntemente es bastante molesto, sobre todo con los editores convencionales, donde se hace todo a base de barra de scroll o bien de ReP\u00e1g/AvP\u00e1g y cursores. Estar todo el rato hacia arriba y hacia abajo s\u00f3lo porque tenemos que movernos entre 2 porciones del documento no es algo especialmente agradable ni c\u00f3modo. En Vim, hasta ahora tenemos la opci\u00f3n de activar los n\u00fameros de l\u00ednea (:set number), mirar y recordar los 2 n\u00fameros de l\u00ednea en que est\u00e1n las 2 partes del documento entre las que vamos a ir cambiando, y cambiar entre ellos con el comando G (por ejemplo, alternar entre 100G y 500G ). Es cierto que esto es much\u00edsimo m\u00e1s c\u00f3modo que moverse mediante teclas de movimiento, pero Vim a\u00fan puede ir m\u00e1s all\u00e1 gracias a las marcas. Simplemente basta con poner 2 marcas (invisibles, recordemos) en esos 2 puntos del documento, y podremos alternar entre ellos sin ninguna dificultad. No es que podamos alternar, es que podemos seguir movi\u00e9ndonos libremente por el documento e ir a cualquiera de los dos puntos en cualquier momento. Y no estamos limitados a 2 marcas, sino que tenemos a nivel del fichero actual todas las letras posibles entre la a y la z para poner marcas.","title":"Marcas en el texto"},{"location":"herramientas-it/vim/07-marcas_en_el_texto/#establecer-y-recuperar-marcas","text":"En Vim las marcas se ponen con el comando m seguido de una letra min\u00fascula (a-z) identificador de la marca. As\u00ed, cuando estamos en una parte concreta del documento que nos interesa, pulsamos ma (letra m, letra a), y establecemos una marca en la l\u00ednea actual del documento que se llamar\u00e1 ma. Del mismo modo, nos podemos ir a la segunda parte del documento que vamos a frecuentar y establecer una marca con mb (recordad que ten\u00e9is disponibles 26 marcas, de la 'a' a la 'z'). Ahora podemos ir a cualquiera de esas 2 marcas de forma inmediata con el comando ' (comilla simple, la que est\u00e1 a la derecha del cero en los teclados espa\u00f1oles) seguido de la letra de la marca a la que queremos ir. Por ejemplo, pulsando 'a iremos al principio de la l\u00ednea que marcamos con ma y pulsando 'b iremos al principio de la l\u00ednea que marcamos con mb . \u00bfSe os ocurre alguna manera m\u00e1s c\u00f3moda de moverse entre 2 partes diferentes del documento? Si eres programador no hay nada m\u00e1s \u00fatil: una marca en el main(), otra en el bloque en que estamos trabajando, y otra por ejemplo en una funci\u00f3n a la que estamos yendo mucho para hacer cambios, y se acab\u00f3 el moverse con las teclas de movimiento de un sitio para otro. Y si no eres programador, tambi\u00e9n: puedes poner una marca al principio del fichero y otra al final: pulsas gg para ir al principio del fichero, pulsas mi (la i de inicio, para que sea f\u00e1cil de recordar), pulsas G para ir al final del fichero, pulsas mf (la f de fin), y ya tienes 2 marcas de forma que desde cualquier punto del documento puedes ir al principio o final del fichero usando marcas. O, por ejemplo, si estamos escribiendo algo y necesitamos ir a otro punto del documento a consultar algo, podemos poner una marca y desplazarmos, para despu\u00e9s volver de forma inmediata recuperando la marca. Las posibilidades son infinitas. Hemos dicho que la comilla simple nos devuelve a una marca posicionando el cursor al principio de la l\u00ednea. Vim permite mucho m\u00e1s, ya que el comando ` (comilla inversa, la tecla que tenemos a la derecha de la 'p' en los teclados espa\u00f1oles) seguido de la letra de la marca a la que ir nos devuelve exactamente a la l\u00ednea y columna en la que realizamos la marca con el comando m : no s\u00f3lo a la misma l\u00ednea, sino en la misma posici\u00f3n exacta del cursor.","title":"Establecer y recuperar marcas"},{"location":"herramientas-it/vim/07-marcas_en_el_texto/#marcas-especiales","text":"Cabe destacar que si nos olvidamos de las marcas que hemos puesto, podemos obtener un listado de marcas ejecutando el comando :marks seguido de Enter. Al visualizar este listado veremos que hay una serie de marcas especiales que no hemos definido nosotros, y que son: Marca Especial Significado ' (comilla simple) Posici\u00f3n del cursor en el momento en que realizamos el \u00faltimo salto que hayamos hecho. \" (comillas dobles) Posici\u00f3n del cursor la \u00faltima vez que editamos el fichero. Esto quiere decir que cuando abrimos un fichero, yendo a la marca comillas dobles mediante comilla simple seguido de comilla doble nos posicionaremos en el lugar en que est\u00e1bamos la \u00faltima vez que editamos este fichero. Esto es especialmente \u00fatil a la hora de programar. [ (corchete abierto) Posici\u00f3n del principio del \u00faltimo cambio que hayamos realizado. ] (corchete cerrado) Posici\u00f3n final del \u00faltimo cambio que hayamos realizado. ^ (circunflejo) Posici\u00f3n del \u00faltimo lugar en que hayamos estado en modo Inserci\u00f3n realizando cambios. Merecen menci\u00f3n especial las 2 primeras marcas especiales de la tabla. La comilla simple permite volver a la posici\u00f3n del \u00faltimo salto, y esto incluye los saltos realizados con G y gg . Es decir, si estamos en una posici\u00f3n del documento y hacemos 100G para ir a la l\u00ednea 100, pulsando comilla simple seguido de comilla simple de nuevo (es decir: ' ' ) volveremos a la posici\u00f3n en que est\u00e1bamos antes de realizar el cambio de l\u00ednea. Por si fuera poco, las dos comillas simples tambi\u00e9n nos permitir\u00e1n volver al punto original del salto en el caso de b\u00fasquedas, por ejemplo. Vim guarda un historial de saltos, al cual contribuyen las b\u00fasquedas, las marcas y los cambios de l\u00ednea, y podemos movernos por ese historial mediante CTRL+O (anterior) y CTRL+I (siguiente). Esto quiere decir, que podemos circular entre todas las posiciones del documento entre las que hemos saltado o buscado mediante estas 2 teclas. Yo personalmente tengo bastante con el uso de marcas y no suelo necesitar usar esta pila de saltos , pero es una posibilidad m\u00e1s que Vim nos ofrece. Por \u00faltimo, las comillas dobles guardan la \u00faltima posici\u00f3n en que estabamos la \u00faltima vez que editamos el fichero: por ejemplo, si programamos y solemos salir del editor para compilar, tal vez al terminar de hacerlo nos interese recuperar la edici\u00f3n del fichero en el punto exacto en que est\u00e1bamos y no al principio del mismo. Con la marca de comillas dobles podemos hacer esto f\u00e1cilmente. Si queremos que autom\u00e1ticamente se posicione el cursor en el lugar en que editamos el fichero por \u00faltima vez sin necesidad de que nosotros lo hagamos manualmente podemos incluir las siguientes opciones en nuestro fichero .vimrc: autocmd BufReadPost * \\ if line(\"'\\\"\") > 0 && line(\"'\\\"\") <= line(\"$\") | \\ exe \"normal g`\\\"\" | \\ endif Este comando de Vim simplemente comprueba que existe una marca comillas dobles en el fichero y si es as\u00ed la llama (puede verse en el comando exe en el que se hace un comilla invertida seguido de una comilla doble (escapada, para que Vim no la interprete), lo que nos lleva a la posici\u00f3n exacta de fila y columna a la que apunte la comilla doble.","title":"Marcas especiales"},{"location":"herramientas-it/vim/07-marcas_en_el_texto/#marcas-globales","text":"Cabe destacar que las letras A-Z (en may\u00fascula) son marcas globales, es decir, que se establecen a nivel de fichero y que nos permiten volver a la edici\u00f3n de un fichero que no es el actual. Por ejemplo, supongamos que establecemos una marca \"A\" con mA en un fichero y salimos de vim. Si en otro momento editamos otro fichero diferente y saltamos a la marca A (con 'A ), vim cargar\u00e1 al primer fichero y saltar\u00e1 a la marca solicitada. Vim guarda la informaci\u00f3n de las marcas incluso despu\u00e9s de haber salido del documento (siempre que pueda guardar en el directorio home del usuario el archivo .viminfo) por lo que las marcas son permanentes a menos que las borremos manualmente, borremos la l\u00ednea que marcan, o que las reasignemos a una nueva l\u00ednea. Este funcionamiento es ideal para \"marcar\" aquellos puntos del documento a los que acudamos repetidamente. Por ejemplo, si estamos programando, podemos marcar con una \"v\" de \"variables\" la zona en la que est\u00e1n definidas las variables y con una \"t\" de trabajo la zona de trabajo actual, y saltar de una zona a otra r\u00e1pidamente. Tambi\u00e9n podemos referenciar las marcas. Por ejemplo, con d'a borraremos todo el texto desde la posici\u00f3n actual del cursor hasta la marca \"a\" (ya estemos arriba o debajo de la misma) , poniendo dicho texto en el buffer interno para pegado.","title":"Marcas globales"},{"location":"herramientas-it/vim/07-marcas_en_el_texto/#como-ver-las-marcas","text":"Como hemos comentado, las marcas son invisibles, pero podemos hacerlas visibles si instalamos el plugin ShowMarks y a\u00f1adimos lo siguiente en nuestro fichero .vimrc: \"\"\" Mostrar las marcas a-z y A-Z en un color concreto: let g:showmarks_include=\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\" highlight ShowMarksHLl ctermfg=LightCyan ctermbg=NONE guifg=#40FF40 guibg=Black highlight ShowMarksHLu ctermfg=LightCyan ctermbg=NONE guifg=#40FF40 guibg=Black highlight SignColumn ctermfg=Blue ctermbg=NONE guifg=Blue guibg=Black Una vez hecho esto, veremos las marcas en nuestro c\u00f3digo en la columna especial de Vim llamada \"SignColumn\" (a la izquierda del texto), en el color que hemos indicado (verde clarito para gVim y LightCyan para modo texto): M\u00e1s adelante veremos el procedimiento para descargar e instalar Plugins, de forma que podremos instalar este y otros plugins interesantes. Fuente : Guia de vim por : Santiago Romero","title":"C\u00f3mo ver las marcas"},{"location":"herramientas-it/vim/08-funcionalidadees_para_programadores/","text":"Funcionalidades para programadores \u00b6 Sin olvidarnos de las interesant\u00edsimas Marcas y de las Macros (map) y Sustituciones (iab), Vim ofrece una serie de funcionalidades especialmente interesantes para programadores. Moverse entre bloques de c\u00f3digo \u00b6 Vim nos proporciona atajos para movernos al principio o al final de la funci\u00f3n en la que estamos (o del bloque if/else, etc): Comando Significado [{ Ir al inicio del bloque de c\u00f3digo en que nos encontremos (inicio de funci\u00f3n/m\u00e9todo, if, etc). ]} Ir al final del bloque de c\u00f3digo en que nos encontremos (fin de funci\u00f3n/m\u00e9todo, if, etc). [[ Ir al anterior bloque de c\u00f3digo (anterior funci\u00f3n/m\u00e9todo, if(), etc). ]] Ir al siguiente bloque de c\u00f3digo (siguiente funci\u00f3n/m\u00e9todo, if(), etc). Pongamos un ejemplo en C o PHP. Sabemos que si tenemos el cursor en la llave \"{\" de: function my_function() { Si en ese momento (sobre {) pulsamos '%', Vim mover\u00e1 el cursor al car\u00e1cter \"}\" de cierre de esta funci\u00f3n (tambi\u00e9n vale para ifs, elses, whiles, fors, etc). Con los 4 atajos que acabamos de ver vamos m\u00e1s all\u00e1, y podemos ir al inicio o fin de la funci\u00f3n o bloque de c\u00f3digo sin tener que estar encima de la llave que lo abre o cierra. Recordar \u00faltima posici\u00f3n en el fichero \u00b6 Si queremos, al abrir cualquier fichero, que el cursor se coloque en la posici\u00f3n exacta en que est\u00e1bamos en \u00e9l cuando lo cerramos la \u00faltima vez (muy \u00fatil para programadores o si vamos a editar repetidamente una misma zona de un fichero de configuraci\u00f3n), podemos a\u00f1adir (como ya hemos visto en el apartado sobre las Marcas) lo siguiente en nuestro .vimrc: if has(\"autocmd\") autocmd BufReadPost * \\ if line(\"'\\\"\") > 0 && line(\"'\\\"\") <= line(\"$\") | \\ exe \"normal g`\\\"\" | \\ endif endif Con el anterior \"comando\", cada vez que abre un fichero se verifica si existe la \"marca\" especial doble comilla, y si est\u00e1, se salta a la l\u00ednea que contiene la marca. De forma efectiva, esto quiere decir que cuando abramos cualquier fichero, el cursor se posicionar\u00e1 en las coordenadas exactas en que estuviera cuando lo abandonamos (o al principio del fichero si es la primera vez que lo abrimos). No hace falta decir lo extremadamente \u00fatil que puede ser esto. Para que vim pueda hacer esto, es necesario que nuestro usuario del sistema tenga permisos de escritura en el home ya que guardar\u00e1 esta informaci\u00f3n en un fichero .viminfo (o _viminfo en los sistemas Windows). Por defecto este suele ser el caso y se genera y usa el .viminfo sin problemas. Expansi\u00f3n de tabuladores \u00b6 Por norma general, los programadores hu\u00edmos de los tabuladores, especialmente en lenguajes donde la indentaci\u00f3n es importante como en python. Esto es as\u00ed porque un fichero generado con tabuladores puede acabar causando problemas cuando \u00e9stos (invisibles) se mezclan con espacios. Para evitar esto, podemos hacer que vim expanda los tabuladores como \"espacios consecutivos\" (espacios reales). Eso implica que cuando pulsemos tabulador, \u00e9ste no se insertar\u00e1 sino que se insertar\u00e1n N espacios. Las opciones adecuadas del .vimrc son las siguientes: \"\"\" Establecer ancho de tabulador y de indentaci\u00f3n a 4 set tabstop=4 set shiftwidth=4 \"\"\" Expandir los tabuladores set expandtab \"\"\" Mostrar los tabuladores y fines de l\u00ednea (no es imprescindible pero ayuda): set list Tampoco olvidemos que cuando editamos en Vim un fichero que ha sido creado con otros editores, podemos \"convertir\" todos sus \"tabuladores\" a nuestra configuraci\u00f3n de tabulado con :retab . Conversi\u00f3n may\u00fasculas/min\u00fasculas \u00b6 Para los programadores puede ser necesario, en ocasiones, cambiar el \"case\" de un texto a min\u00fasculas, may\u00fasculas, o alternarlo. Esto lo podemos hacer (una vez seleccionado el texto en modo visual) con: Comando Significado ~ Cambia el caso del caracter sobre el cursor en modo normal, o del texto seleccionado en modo visual. u En modo visual, pasa todo el texto seleccionado a min\u00fasculas. U En modo visual, pasa todo el texto seleccionado a may\u00fasculas. Un apunte: el comando \"~\" en los teclados espa\u00f1oles se introduce pulsando AltGr + 4, al menos en Linux. Adem\u00e1s de cambiar el \"case\", avanza hasta e lsiguiente car\u00e1cter. Borrar el contenido de un string, bloque, etc \u00b6 Vim nos proporciona herramientas tan \u00fatiles como la posibilidad de \"vaciar\" una cadena o de eliminar todos los par\u00e1metros de una funci\u00f3n (lo que hay entre sus par\u00e9ntesis) con un simple comando: di' o ci' : borrar o cambiar el contenido de un string delimitado por ' con el cursor dentro de ella. di\" o ci\" : borrar o cambiar el contenido de un string delimitado por \" con el cursor dentro de ella. di( o ci( : borrar o cambiar el contenido entre ( y ) estando con el cursor entre ambos caracteres. di[ o ci] : borrar o cambiar el contenido entre [ y ] estando con el cursor entre ambos caracteres. di< o ci< : borrar o cambiar el contenido entre < y > estando con el cursor entre ambos caracteres. di{ o ci} : borrar o cambiar el contenido entre { y } (o un p\u00e1rrafo si no es c\u00f3digo) estando con el cursor entre ambos caracteres. dit o cit : borrar o cambiar el contenido entre tags ( y , y , etc) estando con el cursor entre inicio y fin del tag. diw o ci' : borrar o cambiar el contenido de una palabra con el cursor dentro de ella. Eso quiere decir que en el siguiente ejemplo: void my_function( char arg1, int arg2, char arg3, int arg4, float arg5 ) { Teniendo el cursor en cualquier posici\u00f3n entre ( y ) (dentro del listado de par\u00e1metros), bastar\u00e1 pulsar di( para dejar el texto as\u00ed: void my_function( ) { Si en vez de di( usamos ci( , cambiaremos adem\u00e1s a modo inserci\u00f3n para directamente empezar a teclear par\u00e1metros diferentes. Tambi\u00e9n se puede usar di) (cerrar par\u00e9ntesis) si se desea. El mismo concepto sirve para eliminar el interior de un string con di' o di\" . Coloreado de sintaxis \u00b6 Vim soporta coloreado de sintaxis, que quiere decir que puede resaltar con diferentes colores palabras claves del fichero que estemos utilizando. As\u00ed, si estamos programando y Vim tiene instalado un fichero de sintaxis para el lenguaje de programaci\u00f3n que estamos usando, las palabras clave aparecer\u00e1n en un color, los literales en otro, los n\u00fameros en otro, etc. Esto clarifica enormemente la edici\u00f3n de ficheros y permite encontrar errores m\u00e1s f\u00e1cilmente. No s\u00f3lo sirve para programar, porque gran parte de los ficheros de configuraci\u00f3n t\u00edpicos de UNIX aparecer\u00e1n tambi\u00e9n con resaltado de sintaxis para evitarnos errores. Si nuestra terminal de texto soporta colores y tenemos bien definida la variable $TERM en el sistema, podemos activar el coloreado de sintaxis mediante el comando :syntax on en el editor, o a\u00f1adiendo syntax on en nuestro .vimrc. Si tras hacer esto el fichero que estamos editando no aparece coloreado, puede ser bien porque Vim no ha sabido determinar el formato del fichero que estamos editando (cosa que le podr\u00edamos especificar con, por ejemplo, :set filetype=python en el caso de un fichero en python), o tambi\u00e9n puede ser que el fichero que estamos editando sea de un lenguaje o tipo del cual Vim no tiene una definici\u00f3n del lenguaje. En mi caso, los ficheros de sintaxis se guardan en /usr/share/vim/syntax, y como podr\u00e9is ver en ese directorio, entiende cientos de lenguajes y formatos . Si Vim no entiende el tipo de lenguaje que estamos usando, siempre podemos crear un fichero de sintaxis para \u00e9l e introducirlo en ese directorio o en $HOME/.vim/syntax/. Ese fichero debe de contener reglas para decidir qu\u00e9 es una palabra clave, qu\u00e9 un literal y qu\u00e9 un comentario, por ejemplo. Podemos incluso modificar las reglas de detecci\u00f3n de sintaxis existentes en nuestro propio fichero de nombre \"lenguaje_a_modificar.vim\" ubic\u00e1ndolo en $HOME/.vim/syntax/, donde tendr\u00e1 prioridad sobre el fichero de /usr/share/vim/syntax. Al activar el coloreado de sintaxis, vim utiliza el fichero de sintaxis para decidir qu\u00e9 es una palabra clave, qu\u00e9 un literal o qu\u00e9 un comentario (entre otras cosas) y utiliza un color diferente para cada cosa. Los colores que utilizar\u00e1 Vim los define el esquema de colores actual. Podemos cambiar entre diferentes esquemas de colores de los existentes en /usr/share/vim/colors/ o $HOME/.vim/colors/ poniendo en nuestro .vimrc o .gvimrc el comando colorscheme fichero-de-color . Un fichero de esquema de colores tiene un formato como el siguiente: \" Console highlight Normal ctermfg=LightGrey ctermbg=Black highlight Search ctermfg=Black ctermbg=Red cterm=NONE highlight Visual cterm=reverse highlight Cursor ctermfg=Black ctermbg=Green cterm=bold highlight Special ctermfg=Brown highlight Comment ctermfg=Blue highlight StatusLine ctermfg=Blue ctermbg=White highlight Statement ctermfg=Yellow cterm=NONE highlight Type cterm=NONE highlight ShowMarksHLl ctermfg=Green ctermbg=Black highlight SignColumn ctermfg=Blue ctermbg=Black \" GUI highlight Normal guifg=Grey80 guibg=#080808 highlight Search guifg=Black guibg=Red gui=bold highlight Visual guifg=#404040 gui=bold highlight Cursor guifg=Black guibg=Green gui=bold highlight Special guifg=Orange highlight Constant guifg=Red highlight Comment guifg=#5060ee highlight StatusLine guifg=blue guibg=red highlight Statement guifg=Yellow gui=NONE highlight Type guifg=#118811 highlight LineNr guifg=#505050 guibg=#020202 highlight ShowMarksHLl guifg=LightGreen guibg=Black highlight SignColumn guifg=Blue guibg=Black El formato de un fichero de esquema de colores no es muy complicado aunque no lo trataremos aqu\u00ed. Basta decir que si por ejemplo queremos crear un nuevo esquema de colores a partir de otro ya existente cambiando el color de los comentarios de rojo (por ejemplo) a cyan, podemos copiar el fichero con otro nombre: mkdir ~/.vim/colors cp /usr/share/vim/colors/torte.vim ~/vim/colors/test.vim Despu\u00e9s lo editamos y cambiamos: SynColor Comment term=bold cterm=NONE ctermfg=DarkRed guifg=DarkRed (etc...) por SynColor Comment term=bold cterm=NONE ctermfg=Cyan guifg=Cyan (etc...) Los posibles campos a cambiar son: Campo Significado ctermfg Color del texto en terminal (vim) ctermbg Color de fondo del texto en terminal (vim) guifg Color del texto en GUIs (gvim) guibg Color de fondo del texto en GUIs (gvim) Cabe destacar que Vim tiene 2 juegos de colores diferentes el mismo fichero, seg\u00fan si la terminar que utilizamos tiene un fondo claro o un fondo oscuro. Podemos cambiar el juego de colores utilizados indicando el tipo de fondo de terminal que usamos, entre :set background=dark y :set background=light . Finalmente, tened en cuenta que a veces nos puede dar la impresi\u00f3n de que el coloreado de sintaxis no se realiza bien cuando estamos scrolleando. Esto es as\u00ed porque Vim, para ahorrar tiempo, no colorea todo el fichero, sino s\u00f3lo lo que vemos por pantalla, y conforme lo vamos viendo. Si el scroll hace alguna palabra especial se corte, Vim puede no entenderla como una palabra clave y no ponerle el color apropiado. Pulsando CTRL+L, que redibuja la pantalla, podemos solucionarlo (si es que llega a sucedernos). En cualquier momento podemos desactivar el coloreado de sintaxis con :syntax off . Expandiendo el coloreado de sintaxis \u00b6 Podemos ampliar el fichero de sintaxis con reglas propias que haga match en alg\u00fan tipo de patr\u00f3n concreto, o a\u00f1adir alguna regla adicional en nuestro .vimrc. Por ejemplo, supongamos las siguientes entradas en .vimrc (o con : delante, directamente dentro de Vim): highlight MyPattern ctermbg=grey ctermfg=red guibg=grey guifg=red match MyPattern /pattern/ Donde pattern es una expresi\u00f3n regular, de forma que si queremos resaltar por ejemplo una palabra concreta para nuestra lista TO-DO, podemos hacer: highlight Pendiente ctermbg=grey ctermfg=red guibg=grey guifg=red match Pendiente /\\cPENDIENTE/ As\u00ed, cualquier aparici\u00f3n de la palabra PENDIENTE (ya sea en min\u00fasculas o may\u00fasculas, debido al \\c) lo har\u00e1 en el color indicado. Indentado de c\u00f3digo \u00b6 Podemos indentar texto (tanto la l\u00ednea actual como una selecci\u00f3n de texto realizada en modo visual) usando << y >> (es decir, pulsando en modo comando o visual 2 veces \"menor-que\" y \"mayor-que\", indicando la direcci\u00f3n en la que queremos indentar el c\u00f3digo). El c\u00f3digo o texto se indentar\u00e1 N espacios, siendo N el valor que tengamos especificado en set shiftwidth= o set sw= . Por supuesto, es posible usar modificadores para indentar m\u00e1s niveles el c\u00f3digo. Si sw est\u00e1 especificado a 4, ejecutando 3>> lo indentaremos 3 niveles (12 caracteres). Un apunte importante sobre copiar y pegar y la indentaci\u00f3n: Vim trata de intendar el texto de forma inteligente si estamos en modo \"autoindent\" ( :set ai ), de modo que para pegar texto copiado con el rat\u00f3n podr\u00edamos necesitar cambiar al modo \"no autom\u00e1tico\" ( :set noai o bien :set paste ). Plegado (folding) de texto \u00b6 Vim nos permite \"plegar\" texto (agruparlo) en una s\u00f3la l\u00ednea con un comando, de forma que ese texto no nos moleste a la hora de trabajar con el documento. Por ejemplo, podemos plegar (fold) una funci\u00f3n o clase completa con la que ya hayamos acabado para eliminar su visibilidad del documento y que no sea necesario scrollear a trav\u00e9s de ella para moverse por el c\u00f3digo. Basta con seleccionar un bloque de texto en modo visual y pulsar zf (z es el comando para plegados, porque la z parece un pliegue, seguido de f de fold). El aspecto de los bloques plegados es similar al siguiente: Veamos un ejemplo de plegado. En el c\u00f3digo siguiente, seleccionamos en modo visual todo el m\u00e9todo \"OnBtn_Click_Add_Macros\" y pulsamos zf: El aspecto en pantalla pasar\u00e1 de: return item def OnBtn_Click_Add_Macros(self, event): \"\"\"User clicks on \"Add\"... (macro).\"\"\" dlg = AddEdit_Macro(None, -1, \"\") dlg.action = \"add_macro\" dlg.index = -1 dlg.ShowModal() dlg.Destroy() self.Populate_macros() def OnBtn_Click_Edit_Macros(self, event): a: return item +-- 8 l\u00edneas: def OnBtn_Click_Add_Macros(self, event):---- def OnBtn_Click_Edit_Macros(self, event): De esta forma, esa funci\u00f3n sobre la que no pretendemos trabajar se reduce a nuestra vista y no molesta para el resto de edici\u00f3n del fichero. El pliegue es s\u00f3lo visual, no a nivel del contenido del fichero. Si grabamos el fichero, se estar\u00e1n grabando la totalidad de las l\u00edneas del mismo, y no la l\u00ednea de plegado. Podemos desplegar de nuevo el c\u00f3digo si nos situamos sobre la l\u00ednea de plegado y pulsamos za (a de alternar). Al hacerlo, desaparece la l\u00ednea de plegado (la que empieza por +\u2013) y aparece el c\u00f3digo de nuevo. Y podemos volver a plegarlo poni\u00e9ndonos encima de cualquiera de las l\u00edneas de plegado y pulsando otra vez za . Estos son los comandos para plegado: Comando Significado zf Plegar el texto seleccionado za Abrir / Cerrar (alternar) un grupo de l\u00edneas plegadas. zR Desplegar todas las l\u00edneas plegadas de un fichero. zd Eliminar un pliegue (se recupera el contenido y ya no se puede alternar con za). zE Eliminar todos los pliegues del fichero. zf/cadena Plegar el texto que va desde la l\u00ednea actual a la siguiente aparici\u00f3n de \"cadena\". :n,M fold Plegar el texto desde la l\u00ednea n a la M. zFNj Crear un pliegue desde la l\u00ednea actual hasta N l\u00edneas adelante. zM Vista de p\u00e1jaro del fichero, cuando tenemos pliegues. zc Cerrar un pliegue. Los pliegues pueden anidarse (de hecho, existen comandos para tratar los pliegues recursivamente), aunque por simplificar no he comentado los atajos de teclado para ello. Finalmente, sabed que podemos asignar una tecla en nuestro vimrc para realizar el plegado de forma autom\u00e1tica. Por ejemplo, si queremos que la tecla espacio cree un pliegue con el texto seleccionado cuando estamos en modo visual y que adem\u00e1s permita abrir y cerrar pliegues cuando estamos en modo normal, podemos poner lo siguiente en nuestro fichero .vimrc: vmap <space> zf nmap <space> za De esta forma, podemos alternar el estado de un pliegue pulsando espacio en modo comando, y crear un pliegue nuevo a partir de un texto seleccionado en modo visual pulsando espacio al acabar la selecci\u00f3n. Y todo ello sin necesidad de recordar los comandos. S\u00f3lo necesitamos recordar que el espacio pliega un texto seleccionado y que tambi\u00e9n sirve para desplegar un pliegue. Podemos cambiar el color con el que aparecen los pliegues tanto en el fichero .vimrc como en un fichero de colores/syntaxis mediante: highlight Folded ctermfg=yellow ctermbg=gray guifg=yellow guibg=gray Finalmente, podemos eliminar de pantalla la informaci\u00f3n relativa al n\u00famero de l\u00edneas del pliegue (y dejar s\u00f3lo la primera l\u00ednea, con el color de texto y fondo de los pliegues) mediante: set foldtext=getline(v:foldstart) Quiero hacer notar que los pliegues no tienen por qu\u00e9 partir de selecciones de texto, de rangos de l\u00edneas o de b\u00fasquedas de cadenas. Vim tiene un modo de pliegue autom\u00e1tico que entiende la sintaxis de m\u00faltiples lenguajes y que pliega la estructura sint\u00e1ctica completa simplemente solicitando el pliegue en la primera l\u00ednea. Este modo se activa con set foldmethod , pudiendo asignarse a esta variable los valores manual (a mano), indent (se pliegan las l\u00edneas hijas de la indentaci\u00f3n actual), syntax seg\u00fan indique el coloreado de sintaxis (toda la funci\u00f3n, toda la clase, etc). Yo, particularmente, prefiero la granularidad del modo manual. Persistencia de los pliegues \u00b6 Al contrario que las marcas, cuando salimos de un fichero se pierden los pliegues que hemos creado para \u00e9l. Para evitar esto, podemos utilizar unos comandos en el fichero .vimrc que autom\u00e1ticamente salvan la sesi\u00f3n de \"pliegues\" cuando salimos de Vim, y la cargan al editar de nuevo el mismo fichero. \"\"\" Save only fold in viewoptions set foldmethod=manual set viewoptions=folds \"\"\" Save folds on exit and load them on edit autocmd BufWinLeave ?* mkview autocmd BufWinEnter ?* silent loadview Es necesario crear el directorio ~/.vim/view (con mkdir) previamente para que vim pueda grabar las \"vistas\" en \u00e9l. N\u00f3tese que con esta opci\u00f3n activa, para cada fichero que editemos (tenga o no folds) se generar\u00e1 un peque\u00f1o fichero de 300 bytes en $HOME/.vim/view/ conteniendo la informaci\u00f3n de \"vista\" de dicho fichero. Aunque 300 bytes requerir\u00eda 10.000 ficheros editados para ocupar apenas 3 MB de informaci\u00f3n, podemos querer borrar regularmente el contenido de dicho directorio o tan vez los ficheros de vista m\u00e1s antiguos de, por ejemplo, 3 meses (con un find ~/.vim/view/ -type f -name \"*\" -mtime +90 -exec rm -f {} \\; ). Incluso es posible que s\u00f3lo tengamos intenci\u00f3n de guardar los folds (crear vistas) para ficheros de programaci\u00f3n, por lo que si programamos en C y Python, podemos cambiar la configuraci\u00f3n de \"?*\" por: autocmd BufWinLeave ?*.py mkview autocmd BufWinEnter ?*.py silent loadview autocmd BufWinLeave ?*.[ch] mkview autocmd BufWinEnter ?*.[ch] silent loadview Eso guardar\u00e1 vistas en $HOME/.vim/view s\u00f3lo para ficheros .py, .c y .h (aunque podemos alegremente dejarlo activado para ?* y borrar regularmente los ficheros m\u00e1s antiguos de N d\u00edas sin problemas). Etiquetas (tags) \u00b6 Una de las habilidades de cualquier editor moderno es la de \"etiquetar\" internamente las variables, funciones, clases, m\u00e9todos y atributos de nuestro programa de forma que podamos saltar, desde cualquier punto del documento, a su definici\u00f3n/declaraci\u00f3n, y poder volver al punto inicial del salto. De esta forma, si tenemos duda acerca de un m\u00e9todo o funci\u00f3n, podemos saltar a su definici\u00f3n para ver sus argumentos de entrada o su salida, y volver al punto donde est\u00e1bamos (una vez resuelta la duda) para continuar con la inserci\u00f3n de c\u00f3digo. Las etiquetas tambi\u00e9n pueden permitirnos estudiar c\u00f3digo ya escrito saltando a las declaraciones o definiciones de lo que estamos estudiando en caso de duda. Vim permite utilizar un sistema de etiquetas denominado ctags , que debemos instalar como: Sistema Comando CentOS / RedHat / Fedora yum install ctags Ubuntu / Debian / Mint apt-get install exuberant-ctags Una vez instalado, debemos generar los tags para nuestro programa con el binario de ctags, con alguno de los siguientes comandos: ctags *.c *.h -> Todos los .c o .h del directorio ctags *.py -> Todos los .py del directorio. ctags -R *.py -> Todos los ficheros si el proyecto tiene subdirectorios Una vez hecho esto, se generar\u00e1 en el directorio actual un fichero llamado \"tags\" el cual contiene la informaci\u00f3n que Vim utilizar\u00e1 como etiquetas (se puede cambiar el path de la ubicaci\u00f3n de este fichero, si queremos uno gen\u00e9rico, con :set tags , aunque personalmente prefiero un fichero de tags por proyecto). Ctags soporta m\u00e1s de 30 lenguajes diferentes de programaci\u00f3n. Si ahora editamos un fichero de c\u00f3digo, podremos utilizar los siguientes comandos: Comando Significado :tag subrutina_o_variable Salta a la definici\u00f3n de la variable. Tiene autocompletado con Tabulador. En gVim podemos usar Ctrl + Click izquierdo del rat\u00f3n sobre la palabra. :stag subrutina_o_variableTAB Salta a la definici\u00f3n de la variable en una nueva ventana. Tiene autocompletado con Tabulador. :tags o :ts Muestra la pila / hist\u00f3rico de tags. :tn[ext] Cuando hemos hecho una b\u00fasqueda parcial, saltar al siguiente tag que la cumple. :tp[revious] Cuando hemos hecho una b\u00fasqueda parcial, saltar al anterior tag que la cumple. :tf[irst] Cuando hemos hecho una b\u00fasqueda parcial, saltar al primer tag que la cumple. :tl[ast] Cuando hemos hecho una b\u00fasqueda parcial, saltar al \u00faltimo tag que la cumple. Ctrl+] Saltar al tag de la palabra bajo el cursor. En el teclado espa\u00f1ol, para pulsar ] se necesita pulsar Ctrl+AltGr+]. Ctrl+t o :pop Volver al lugar desde el que se hizo el salto con Ctrl+]. En gVim, podemos usar Ctrl + Click derecho del rat\u00f3n. Ctrl+W+] Saltar al tag de la palabra bajo el cursor en una ventana nueva. :ptag subrutina_o_variable Muestra la definici\u00f3n del tab en una ventana de preview. Para m\u00faltiples matches, podemos movernos con :ptnext y :ptprevious o sus abreviaturas :ptn y :ptp Ctrl+W+} Mostrar el tag en una ventana de preview. :pc Cerrar la ventana de preview. Adicionalmente, podemos hacer que vim busque autom\u00e1ticamente el fichero adecuado con: vim -t tag_a_buscar N\u00f3tese que las combinaciones de teclas para saltar al tag bajo el cursor (Ctrl+]) y para volver (Ctrl+T) son bastante problem\u00e1ticas... la primera, en el teclado espa\u00f1o, implica pulsar Ctrl+AltGr+], y la segunda puede provocar, en algunos gestores de terminales, el lanzar una nueva pesta\u00f1a. Para facilitar el uso de los tags, podemos establecer unas macros para modo comando en nuestro .vimrc: \"\"\" Tags nmap <F5> <C-]> nmap <F6> <C-T> N\u00f3tese que Vim utiliza el fichero \" tags \", creado al ejecutar ctags, como informaci\u00f3n para los saltos y etiquetas. Esta informaci\u00f3n es est\u00e1tica, es decir, no se actualiza hasta que volvemos a ejecutar ctags. Esto implica que si estamos analizando un programa ya finalizado, bastar\u00e1 con la ejecuci\u00f3n inicial de ctags pero para programas \"en crecimiento\" deberemos lanzar ctags regularmente de forma que el fichero de tags est\u00e9 actualizado. En programas compilables, se puede poner la llamada a ctags en el Makefile aunque lo m\u00e1s c\u00f3modo es mapear (map) una tecla contra una llamada del tipo !ctags miprograma.py o similar. Existen tambi\u00e9n plugins (extensiones) dedicados a mantener los ctags (como autotags , easytags , indexer , etc). Existen otros plugins de Vim como taglist o tagbar que regeneran los tags de forma autom\u00e1tica y hacen uso de ellos para proporcionarnos una ventana de navegaci\u00f3n vertical con la estructura del c\u00f3digo, para movernos r\u00e1pidamente entre variables, m\u00e9todos, clases y funciones. Incluso podremos mapear una tecla del teclado para mostrar u ocultar la ventana de tags cuando la necesitemos. M\u00e1s adelante veremos c\u00f3mo instalar plugins para hacer uso de estas interesantes funcionalidades. Personalizando la barra de estado \u00b6 La barra de estado de Vim proporciona informaci\u00f3n sobre el fichero que estamos editando, el modo de trabajo actual y, normalmente, la fila y columna en que est\u00e1 posicionada el cursor. Esta barra de estado puede ser personalizada con m\u00faltiples par\u00e1metros, como por ejemplo: \"\"\" Formato de la barra de estado, y posicion en la penultima linea set statusline=%t\\ %y\\ format:\\ %{&ff};\\ [%c,%l] set laststatus=2 La l\u00ednea de estado tendr\u00eda el siguiente aspecto: .vimrc.common [vim] format: unix; [133,22] Los diferentes par\u00e1metros a utilizar para statusline los podemos obtener dentro de Vim con :help statusline . Dentro de statusline podemos incluso hacer uso de funciones complejas como (ojo, l\u00ednea partida pero debe ir toda en una s\u00f3la l\u00ednea en el vimrc): set statusline=%<%F%h%m%r%h%w%y\\ \\-\\ %{&ff}\\ \\-\\ %{strftime (\\\"%H:%M\\ \\-\\ %d/%m/%Y\\\",getftime(expand(\\\"%:p\\\")))}% =\\ [%c\\,%l]\\ \\(%L\\ lines\\)\\ \\ %P Y el resultado es: Opciones de arranque de Vim \u00b6 Veamos algunas opciones interesantes para lanzar el binario \"vim\" desde la l\u00ednea de comandos: Usando el operador \"+\", podemos lanzar Vim yendo directamente a una determinada l\u00ednea, al final del fichero, o a la primera aparici\u00f3n de un patr\u00f3n. Tambi\u00e9n podemos usar -u NONE para lanzar Vim sin cargar nuestro .vimrc (vim \"vanilla\"). # Abrir fichero y posicionar el cursor en la l\u00ednea 25: $ vim fichero +25 # Abrir fichero y posicionar el cursor en la \u00faltima l\u00ednea: $ vim fichero + # Abrir fichero y posicionar el cursor en la primera aparici\u00f3n de PATTERN $ vim fichero +/PATTERN # Editar en Vim la salida de un comando (luego guardarlo con \":w out.txt\"). $ command | vim - # Lanzar vim sin leer nuestro .vimrc $ vim -u NONE Ejemplos de comandos \u00fatiles varios \u00b6 A continuaci\u00f3n mostramos una serie de ejemplos basicos \u00fatiles que no tienen cabida en otra secci\u00f3n pero que pueden resultar interesantes si el lector no los ha deducido ya para realizar una tarea concreta: :%s/*$/ \u2192 Eliminar espacios en blanco al final de l\u00ednea en todo el documento. :%s/TABULADOR*$// \u2192 Eliminar espacios en blanco y tabuladores al final de l\u00ednea en todo el documento. :g/cadena/d \u2192 Eliminar todas aquellas l\u00edneas que contienen una cadena o patr\u00f3n. :g/^ *#/d \u2192 Eliminar todas las l\u00edneas de comentarios de python (que desde el principo de l\u00ednea haya 0 o m\u00e1s espacios y una almohadilla). Aplicaci\u00f3n del ejemplo anterior. :g!/cadena/d \u2192 Eliminar todas aquellas l\u00edneas que no cumplen un patr\u00f3n indicado. :1,$ s/ V M// \u2192 Eliminar retornos de carro de MSDOS (las teclas ^V y ^M se corresponden con Ctrl+V y Ctrl+M y hay que pulsarlas primero una y despu\u00e9s la otra, no teclear su texto). vim sftp://usuario@destino.com/path/fichero.txt \u2192 Edici\u00f3n remota de ficheros por SCP (u otros protocolos soportados). gf \u2192 Abrir el fichero cuyo nombre est\u00e1 ubicado bajo el cursor (especialmente \u00fatil para #includes, imports, etc). El fichero debe de estar en el mismo directorio que el directorio de trabajo. No obstante, podemos forzar a que Vim lo busque recursivamente en los directorios hijos o padres a\u00f1adiendo en nuestro .vimrc la opci\u00f3n: \" set path +=./** \" . imap ii \u2192 Volver al modo comando desde el modo inserci\u00f3n al teclear 2 \u00edes segu\u00eddas. Es complicado encontrar palabras y expresiones que tengan 2 \u00edes seguidas (si no, podemos usar \"jj\"). Este mapeado permite cambiar entre comando e inserci\u00f3n siempre con la \"i\" (\"ii\" o \"i\"). Abrir la URL presente en la l\u00ednea actual en el navegador: function! Browser () let line = getline (\".\") let line = matchstr (line, \"http[^ ]*\") exec \"!firefox -new-tab \".line endfunction map <F8> :call Browser ()<CR> Insertar una cadena al principio de m\u00faltiples l\u00edneas (por ejemplo, un comentario, un s\u00edmbolo \" +\"...). -En la primera l\u00ednea de las que queremos modificar, en la columna donde queremos agregar el texto (por ejemplo, la primera), pulsar CTRL+V para entrar en modo selecci\u00f3n de bloque. -Pulsar abajo para bajar hasta la \u00faltima l\u00ednea (no importa el ancho de la selecci\u00f3n, puede ser de 1 simple bloque). -Pulsar I (may\u00fasculas + i = insertar al principio de la l\u00ednea, en este caso de la selecci\u00f3n, aunque est\u00e9 a mediados de la l\u00ednea completa). -Escribir el texto. -Pulsar ESC. Pasado 1 segundo veremos c\u00f3mo se a\u00f1ade el texto a todas las l\u00edneas justo en la columna donde agregamos el texto manualmente. Insertar una cadena al final de m\u00faltiples l\u00edneas. -En la primera l\u00ednea de las que queremos modificar, al principio de la l\u00ednea, pulsar CTRL+V para entrar en modo selecci\u00f3n de bloque. -Pulsar abajo para bajar hasta la \u00faltima l\u00ednea (no importa el ancho de la selecci\u00f3n, puede ser de 1 simple bloque). -Pulsar $ (fin de l\u00ednea) para que se seleccione hasta el final de l\u00ednea en todas las l\u00edneas. -Pulsar A (may\u00fasculas + a = insertar al final de la l\u00ednea, en este caso de la selecci\u00f3n). -Escribir el texto. -Pulsar ESC. Pasado 1 segundo veremos c\u00f3mo se a\u00f1ade el texto a todas las l\u00edneas justo al final de cada l\u00ednea, sin importar que no tengan todas el mismo ancho. Macros: Pulsa q[a-z] para empezar a grabar una macro en uno de las 26 macros (de la a a la z). Pulsa q en modo comando para parar la grabaci\u00f3n. Despu\u00e9s, se puede reproducr la macro con @[a-z] . La \u00faltima macro ejecutada se puede lanzar de nuevo con @@ e incluso repetir varias veces con multiplicadores como 3@@ . Hacer que los cursores no funcionen para obligarnos a usar las teclas de movimiento h, j, k, l: noremap <Up> <nop> noremap <Down> <nop> noremap <Left> <nop> noremap <Right> <nop> Este \u00faltimo ejemplo es recomendado por los puristas de Vim para ense\u00f1ar a los usuarios a no utilizar los cursores y acostumbrarse a las teclas de movimiento h, j, k ,l. Estas teclas, en el centro del teclado, requieren cierto tiempo de aprendizaje pero permiten trabajar m\u00e1s r\u00e1pido con Vim al no tener que llevar las manos hasta los cursores para el movimiento. Atajos de teclado con la tecla \"leader\" \u00b6 En Vim, existe una tecla especial llamada \"leader\", la cual es una especie de prefijo para ejecutar atajos de teclado personalizados. Por defecto, la tecla (que es como se la referencia en el fichero rc) es la barra invertida . Ahora que ya conocemos la existencia de , podemos crear atajos de teclado en nuestro .vimrc para utilizarla: \" Leader + C = Introducir una l\u00ednea de comentario y bajar a la siguiente linea noremap <Leader>C i#-----------------------------------<ESC>j Ahora, si en modo comando pulsamos \"barra invertida\", la soltamos, y antes de 1000 milisegundos (1 segundo) pulsamos C, se insertar\u00e1 la l\u00ednea de comentario con los guiones, se volver\u00e1 a modo inserci\u00f3n (con ) y se bajar\u00e1 a la siguiente l\u00ednea (con \"j\"). La tecla es una tecla muy c\u00f3moda de usar en los teclados USA, pero a los Europeos nos resultar\u00e1 probablemente poco c\u00f3moda. Lo que podemos hacer es modificarla en nuestro vimrc para que sea, por ejemplo, la coma (',') o el guion ('-'): let mapleader = \",\" Ahora, usando coma como Leader, podemos definirnos \"macros\" o atajos para cubrir nuestras necesidades. Por ejemplo, veamos uno para guardar el fichero actual como root (por ejemplo, si hemos editado un fichero como usuario y despu\u00e9s de hacer los cambios, no podemos guardar): \" Leader + W = grabar el fichero actual como root noremap <Leader>W :w !sudo tee % > /dev/null Si por alg\u00fan motivo necesitamos modificar el tiempo de 1000 milisegundos que tenemos para pulsar la segunda tecla tras , podemos hacerlo con \":set timeoutlen\". Fuente : Guia de vim por : Santiago Romero","title":"Funcionalidades para programadores"},{"location":"herramientas-it/vim/08-funcionalidadees_para_programadores/#funcionalidades-para-programadores","text":"Sin olvidarnos de las interesant\u00edsimas Marcas y de las Macros (map) y Sustituciones (iab), Vim ofrece una serie de funcionalidades especialmente interesantes para programadores.","title":"Funcionalidades para programadores"},{"location":"herramientas-it/vim/08-funcionalidadees_para_programadores/#moverse-entre-bloques-de-codigo","text":"Vim nos proporciona atajos para movernos al principio o al final de la funci\u00f3n en la que estamos (o del bloque if/else, etc): Comando Significado [{ Ir al inicio del bloque de c\u00f3digo en que nos encontremos (inicio de funci\u00f3n/m\u00e9todo, if, etc). ]} Ir al final del bloque de c\u00f3digo en que nos encontremos (fin de funci\u00f3n/m\u00e9todo, if, etc). [[ Ir al anterior bloque de c\u00f3digo (anterior funci\u00f3n/m\u00e9todo, if(), etc). ]] Ir al siguiente bloque de c\u00f3digo (siguiente funci\u00f3n/m\u00e9todo, if(), etc). Pongamos un ejemplo en C o PHP. Sabemos que si tenemos el cursor en la llave \"{\" de: function my_function() { Si en ese momento (sobre {) pulsamos '%', Vim mover\u00e1 el cursor al car\u00e1cter \"}\" de cierre de esta funci\u00f3n (tambi\u00e9n vale para ifs, elses, whiles, fors, etc). Con los 4 atajos que acabamos de ver vamos m\u00e1s all\u00e1, y podemos ir al inicio o fin de la funci\u00f3n o bloque de c\u00f3digo sin tener que estar encima de la llave que lo abre o cierra.","title":"Moverse entre bloques de c\u00f3digo"},{"location":"herramientas-it/vim/08-funcionalidadees_para_programadores/#recordar-ultima-posicion-en-el-fichero","text":"Si queremos, al abrir cualquier fichero, que el cursor se coloque en la posici\u00f3n exacta en que est\u00e1bamos en \u00e9l cuando lo cerramos la \u00faltima vez (muy \u00fatil para programadores o si vamos a editar repetidamente una misma zona de un fichero de configuraci\u00f3n), podemos a\u00f1adir (como ya hemos visto en el apartado sobre las Marcas) lo siguiente en nuestro .vimrc: if has(\"autocmd\") autocmd BufReadPost * \\ if line(\"'\\\"\") > 0 && line(\"'\\\"\") <= line(\"$\") | \\ exe \"normal g`\\\"\" | \\ endif endif Con el anterior \"comando\", cada vez que abre un fichero se verifica si existe la \"marca\" especial doble comilla, y si est\u00e1, se salta a la l\u00ednea que contiene la marca. De forma efectiva, esto quiere decir que cuando abramos cualquier fichero, el cursor se posicionar\u00e1 en las coordenadas exactas en que estuviera cuando lo abandonamos (o al principio del fichero si es la primera vez que lo abrimos). No hace falta decir lo extremadamente \u00fatil que puede ser esto. Para que vim pueda hacer esto, es necesario que nuestro usuario del sistema tenga permisos de escritura en el home ya que guardar\u00e1 esta informaci\u00f3n en un fichero .viminfo (o _viminfo en los sistemas Windows). Por defecto este suele ser el caso y se genera y usa el .viminfo sin problemas.","title":"Recordar \u00faltima posici\u00f3n en el fichero"},{"location":"herramientas-it/vim/08-funcionalidadees_para_programadores/#expansion-de-tabuladores","text":"Por norma general, los programadores hu\u00edmos de los tabuladores, especialmente en lenguajes donde la indentaci\u00f3n es importante como en python. Esto es as\u00ed porque un fichero generado con tabuladores puede acabar causando problemas cuando \u00e9stos (invisibles) se mezclan con espacios. Para evitar esto, podemos hacer que vim expanda los tabuladores como \"espacios consecutivos\" (espacios reales). Eso implica que cuando pulsemos tabulador, \u00e9ste no se insertar\u00e1 sino que se insertar\u00e1n N espacios. Las opciones adecuadas del .vimrc son las siguientes: \"\"\" Establecer ancho de tabulador y de indentaci\u00f3n a 4 set tabstop=4 set shiftwidth=4 \"\"\" Expandir los tabuladores set expandtab \"\"\" Mostrar los tabuladores y fines de l\u00ednea (no es imprescindible pero ayuda): set list Tampoco olvidemos que cuando editamos en Vim un fichero que ha sido creado con otros editores, podemos \"convertir\" todos sus \"tabuladores\" a nuestra configuraci\u00f3n de tabulado con :retab .","title":"Expansi\u00f3n de tabuladores"},{"location":"herramientas-it/vim/08-funcionalidadees_para_programadores/#conversion-mayusculasminusculas","text":"Para los programadores puede ser necesario, en ocasiones, cambiar el \"case\" de un texto a min\u00fasculas, may\u00fasculas, o alternarlo. Esto lo podemos hacer (una vez seleccionado el texto en modo visual) con: Comando Significado ~ Cambia el caso del caracter sobre el cursor en modo normal, o del texto seleccionado en modo visual. u En modo visual, pasa todo el texto seleccionado a min\u00fasculas. U En modo visual, pasa todo el texto seleccionado a may\u00fasculas. Un apunte: el comando \"~\" en los teclados espa\u00f1oles se introduce pulsando AltGr + 4, al menos en Linux. Adem\u00e1s de cambiar el \"case\", avanza hasta e lsiguiente car\u00e1cter.","title":"Conversi\u00f3n may\u00fasculas/min\u00fasculas"},{"location":"herramientas-it/vim/08-funcionalidadees_para_programadores/#borrar-el-contenido-de-un-string-bloque-etc","text":"Vim nos proporciona herramientas tan \u00fatiles como la posibilidad de \"vaciar\" una cadena o de eliminar todos los par\u00e1metros de una funci\u00f3n (lo que hay entre sus par\u00e9ntesis) con un simple comando: di' o ci' : borrar o cambiar el contenido de un string delimitado por ' con el cursor dentro de ella. di\" o ci\" : borrar o cambiar el contenido de un string delimitado por \" con el cursor dentro de ella. di( o ci( : borrar o cambiar el contenido entre ( y ) estando con el cursor entre ambos caracteres. di[ o ci] : borrar o cambiar el contenido entre [ y ] estando con el cursor entre ambos caracteres. di< o ci< : borrar o cambiar el contenido entre < y > estando con el cursor entre ambos caracteres. di{ o ci} : borrar o cambiar el contenido entre { y } (o un p\u00e1rrafo si no es c\u00f3digo) estando con el cursor entre ambos caracteres. dit o cit : borrar o cambiar el contenido entre tags ( y , y , etc) estando con el cursor entre inicio y fin del tag. diw o ci' : borrar o cambiar el contenido de una palabra con el cursor dentro de ella. Eso quiere decir que en el siguiente ejemplo: void my_function( char arg1, int arg2, char arg3, int arg4, float arg5 ) { Teniendo el cursor en cualquier posici\u00f3n entre ( y ) (dentro del listado de par\u00e1metros), bastar\u00e1 pulsar di( para dejar el texto as\u00ed: void my_function( ) { Si en vez de di( usamos ci( , cambiaremos adem\u00e1s a modo inserci\u00f3n para directamente empezar a teclear par\u00e1metros diferentes. Tambi\u00e9n se puede usar di) (cerrar par\u00e9ntesis) si se desea. El mismo concepto sirve para eliminar el interior de un string con di' o di\" .","title":"Borrar el contenido de un string, bloque, etc"},{"location":"herramientas-it/vim/08-funcionalidadees_para_programadores/#coloreado-de-sintaxis","text":"Vim soporta coloreado de sintaxis, que quiere decir que puede resaltar con diferentes colores palabras claves del fichero que estemos utilizando. As\u00ed, si estamos programando y Vim tiene instalado un fichero de sintaxis para el lenguaje de programaci\u00f3n que estamos usando, las palabras clave aparecer\u00e1n en un color, los literales en otro, los n\u00fameros en otro, etc. Esto clarifica enormemente la edici\u00f3n de ficheros y permite encontrar errores m\u00e1s f\u00e1cilmente. No s\u00f3lo sirve para programar, porque gran parte de los ficheros de configuraci\u00f3n t\u00edpicos de UNIX aparecer\u00e1n tambi\u00e9n con resaltado de sintaxis para evitarnos errores. Si nuestra terminal de texto soporta colores y tenemos bien definida la variable $TERM en el sistema, podemos activar el coloreado de sintaxis mediante el comando :syntax on en el editor, o a\u00f1adiendo syntax on en nuestro .vimrc. Si tras hacer esto el fichero que estamos editando no aparece coloreado, puede ser bien porque Vim no ha sabido determinar el formato del fichero que estamos editando (cosa que le podr\u00edamos especificar con, por ejemplo, :set filetype=python en el caso de un fichero en python), o tambi\u00e9n puede ser que el fichero que estamos editando sea de un lenguaje o tipo del cual Vim no tiene una definici\u00f3n del lenguaje. En mi caso, los ficheros de sintaxis se guardan en /usr/share/vim/syntax, y como podr\u00e9is ver en ese directorio, entiende cientos de lenguajes y formatos . Si Vim no entiende el tipo de lenguaje que estamos usando, siempre podemos crear un fichero de sintaxis para \u00e9l e introducirlo en ese directorio o en $HOME/.vim/syntax/. Ese fichero debe de contener reglas para decidir qu\u00e9 es una palabra clave, qu\u00e9 un literal y qu\u00e9 un comentario, por ejemplo. Podemos incluso modificar las reglas de detecci\u00f3n de sintaxis existentes en nuestro propio fichero de nombre \"lenguaje_a_modificar.vim\" ubic\u00e1ndolo en $HOME/.vim/syntax/, donde tendr\u00e1 prioridad sobre el fichero de /usr/share/vim/syntax. Al activar el coloreado de sintaxis, vim utiliza el fichero de sintaxis para decidir qu\u00e9 es una palabra clave, qu\u00e9 un literal o qu\u00e9 un comentario (entre otras cosas) y utiliza un color diferente para cada cosa. Los colores que utilizar\u00e1 Vim los define el esquema de colores actual. Podemos cambiar entre diferentes esquemas de colores de los existentes en /usr/share/vim/colors/ o $HOME/.vim/colors/ poniendo en nuestro .vimrc o .gvimrc el comando colorscheme fichero-de-color . Un fichero de esquema de colores tiene un formato como el siguiente: \" Console highlight Normal ctermfg=LightGrey ctermbg=Black highlight Search ctermfg=Black ctermbg=Red cterm=NONE highlight Visual cterm=reverse highlight Cursor ctermfg=Black ctermbg=Green cterm=bold highlight Special ctermfg=Brown highlight Comment ctermfg=Blue highlight StatusLine ctermfg=Blue ctermbg=White highlight Statement ctermfg=Yellow cterm=NONE highlight Type cterm=NONE highlight ShowMarksHLl ctermfg=Green ctermbg=Black highlight SignColumn ctermfg=Blue ctermbg=Black \" GUI highlight Normal guifg=Grey80 guibg=#080808 highlight Search guifg=Black guibg=Red gui=bold highlight Visual guifg=#404040 gui=bold highlight Cursor guifg=Black guibg=Green gui=bold highlight Special guifg=Orange highlight Constant guifg=Red highlight Comment guifg=#5060ee highlight StatusLine guifg=blue guibg=red highlight Statement guifg=Yellow gui=NONE highlight Type guifg=#118811 highlight LineNr guifg=#505050 guibg=#020202 highlight ShowMarksHLl guifg=LightGreen guibg=Black highlight SignColumn guifg=Blue guibg=Black El formato de un fichero de esquema de colores no es muy complicado aunque no lo trataremos aqu\u00ed. Basta decir que si por ejemplo queremos crear un nuevo esquema de colores a partir de otro ya existente cambiando el color de los comentarios de rojo (por ejemplo) a cyan, podemos copiar el fichero con otro nombre: mkdir ~/.vim/colors cp /usr/share/vim/colors/torte.vim ~/vim/colors/test.vim Despu\u00e9s lo editamos y cambiamos: SynColor Comment term=bold cterm=NONE ctermfg=DarkRed guifg=DarkRed (etc...) por SynColor Comment term=bold cterm=NONE ctermfg=Cyan guifg=Cyan (etc...) Los posibles campos a cambiar son: Campo Significado ctermfg Color del texto en terminal (vim) ctermbg Color de fondo del texto en terminal (vim) guifg Color del texto en GUIs (gvim) guibg Color de fondo del texto en GUIs (gvim) Cabe destacar que Vim tiene 2 juegos de colores diferentes el mismo fichero, seg\u00fan si la terminar que utilizamos tiene un fondo claro o un fondo oscuro. Podemos cambiar el juego de colores utilizados indicando el tipo de fondo de terminal que usamos, entre :set background=dark y :set background=light . Finalmente, tened en cuenta que a veces nos puede dar la impresi\u00f3n de que el coloreado de sintaxis no se realiza bien cuando estamos scrolleando. Esto es as\u00ed porque Vim, para ahorrar tiempo, no colorea todo el fichero, sino s\u00f3lo lo que vemos por pantalla, y conforme lo vamos viendo. Si el scroll hace alguna palabra especial se corte, Vim puede no entenderla como una palabra clave y no ponerle el color apropiado. Pulsando CTRL+L, que redibuja la pantalla, podemos solucionarlo (si es que llega a sucedernos). En cualquier momento podemos desactivar el coloreado de sintaxis con :syntax off .","title":"Coloreado de sintaxis"},{"location":"herramientas-it/vim/08-funcionalidadees_para_programadores/#expandiendo-el-coloreado-de-sintaxis","text":"Podemos ampliar el fichero de sintaxis con reglas propias que haga match en alg\u00fan tipo de patr\u00f3n concreto, o a\u00f1adir alguna regla adicional en nuestro .vimrc. Por ejemplo, supongamos las siguientes entradas en .vimrc (o con : delante, directamente dentro de Vim): highlight MyPattern ctermbg=grey ctermfg=red guibg=grey guifg=red match MyPattern /pattern/ Donde pattern es una expresi\u00f3n regular, de forma que si queremos resaltar por ejemplo una palabra concreta para nuestra lista TO-DO, podemos hacer: highlight Pendiente ctermbg=grey ctermfg=red guibg=grey guifg=red match Pendiente /\\cPENDIENTE/ As\u00ed, cualquier aparici\u00f3n de la palabra PENDIENTE (ya sea en min\u00fasculas o may\u00fasculas, debido al \\c) lo har\u00e1 en el color indicado.","title":"Expandiendo el coloreado de sintaxis"},{"location":"herramientas-it/vim/08-funcionalidadees_para_programadores/#indentado-de-codigo","text":"Podemos indentar texto (tanto la l\u00ednea actual como una selecci\u00f3n de texto realizada en modo visual) usando << y >> (es decir, pulsando en modo comando o visual 2 veces \"menor-que\" y \"mayor-que\", indicando la direcci\u00f3n en la que queremos indentar el c\u00f3digo). El c\u00f3digo o texto se indentar\u00e1 N espacios, siendo N el valor que tengamos especificado en set shiftwidth= o set sw= . Por supuesto, es posible usar modificadores para indentar m\u00e1s niveles el c\u00f3digo. Si sw est\u00e1 especificado a 4, ejecutando 3>> lo indentaremos 3 niveles (12 caracteres). Un apunte importante sobre copiar y pegar y la indentaci\u00f3n: Vim trata de intendar el texto de forma inteligente si estamos en modo \"autoindent\" ( :set ai ), de modo que para pegar texto copiado con el rat\u00f3n podr\u00edamos necesitar cambiar al modo \"no autom\u00e1tico\" ( :set noai o bien :set paste ).","title":"Indentado de c\u00f3digo"},{"location":"herramientas-it/vim/08-funcionalidadees_para_programadores/#plegado-folding-de-texto","text":"Vim nos permite \"plegar\" texto (agruparlo) en una s\u00f3la l\u00ednea con un comando, de forma que ese texto no nos moleste a la hora de trabajar con el documento. Por ejemplo, podemos plegar (fold) una funci\u00f3n o clase completa con la que ya hayamos acabado para eliminar su visibilidad del documento y que no sea necesario scrollear a trav\u00e9s de ella para moverse por el c\u00f3digo. Basta con seleccionar un bloque de texto en modo visual y pulsar zf (z es el comando para plegados, porque la z parece un pliegue, seguido de f de fold). El aspecto de los bloques plegados es similar al siguiente: Veamos un ejemplo de plegado. En el c\u00f3digo siguiente, seleccionamos en modo visual todo el m\u00e9todo \"OnBtn_Click_Add_Macros\" y pulsamos zf: El aspecto en pantalla pasar\u00e1 de: return item def OnBtn_Click_Add_Macros(self, event): \"\"\"User clicks on \"Add\"... (macro).\"\"\" dlg = AddEdit_Macro(None, -1, \"\") dlg.action = \"add_macro\" dlg.index = -1 dlg.ShowModal() dlg.Destroy() self.Populate_macros() def OnBtn_Click_Edit_Macros(self, event): a: return item +-- 8 l\u00edneas: def OnBtn_Click_Add_Macros(self, event):---- def OnBtn_Click_Edit_Macros(self, event): De esta forma, esa funci\u00f3n sobre la que no pretendemos trabajar se reduce a nuestra vista y no molesta para el resto de edici\u00f3n del fichero. El pliegue es s\u00f3lo visual, no a nivel del contenido del fichero. Si grabamos el fichero, se estar\u00e1n grabando la totalidad de las l\u00edneas del mismo, y no la l\u00ednea de plegado. Podemos desplegar de nuevo el c\u00f3digo si nos situamos sobre la l\u00ednea de plegado y pulsamos za (a de alternar). Al hacerlo, desaparece la l\u00ednea de plegado (la que empieza por +\u2013) y aparece el c\u00f3digo de nuevo. Y podemos volver a plegarlo poni\u00e9ndonos encima de cualquiera de las l\u00edneas de plegado y pulsando otra vez za . Estos son los comandos para plegado: Comando Significado zf Plegar el texto seleccionado za Abrir / Cerrar (alternar) un grupo de l\u00edneas plegadas. zR Desplegar todas las l\u00edneas plegadas de un fichero. zd Eliminar un pliegue (se recupera el contenido y ya no se puede alternar con za). zE Eliminar todos los pliegues del fichero. zf/cadena Plegar el texto que va desde la l\u00ednea actual a la siguiente aparici\u00f3n de \"cadena\". :n,M fold Plegar el texto desde la l\u00ednea n a la M. zFNj Crear un pliegue desde la l\u00ednea actual hasta N l\u00edneas adelante. zM Vista de p\u00e1jaro del fichero, cuando tenemos pliegues. zc Cerrar un pliegue. Los pliegues pueden anidarse (de hecho, existen comandos para tratar los pliegues recursivamente), aunque por simplificar no he comentado los atajos de teclado para ello. Finalmente, sabed que podemos asignar una tecla en nuestro vimrc para realizar el plegado de forma autom\u00e1tica. Por ejemplo, si queremos que la tecla espacio cree un pliegue con el texto seleccionado cuando estamos en modo visual y que adem\u00e1s permita abrir y cerrar pliegues cuando estamos en modo normal, podemos poner lo siguiente en nuestro fichero .vimrc: vmap <space> zf nmap <space> za De esta forma, podemos alternar el estado de un pliegue pulsando espacio en modo comando, y crear un pliegue nuevo a partir de un texto seleccionado en modo visual pulsando espacio al acabar la selecci\u00f3n. Y todo ello sin necesidad de recordar los comandos. S\u00f3lo necesitamos recordar que el espacio pliega un texto seleccionado y que tambi\u00e9n sirve para desplegar un pliegue. Podemos cambiar el color con el que aparecen los pliegues tanto en el fichero .vimrc como en un fichero de colores/syntaxis mediante: highlight Folded ctermfg=yellow ctermbg=gray guifg=yellow guibg=gray Finalmente, podemos eliminar de pantalla la informaci\u00f3n relativa al n\u00famero de l\u00edneas del pliegue (y dejar s\u00f3lo la primera l\u00ednea, con el color de texto y fondo de los pliegues) mediante: set foldtext=getline(v:foldstart) Quiero hacer notar que los pliegues no tienen por qu\u00e9 partir de selecciones de texto, de rangos de l\u00edneas o de b\u00fasquedas de cadenas. Vim tiene un modo de pliegue autom\u00e1tico que entiende la sintaxis de m\u00faltiples lenguajes y que pliega la estructura sint\u00e1ctica completa simplemente solicitando el pliegue en la primera l\u00ednea. Este modo se activa con set foldmethod , pudiendo asignarse a esta variable los valores manual (a mano), indent (se pliegan las l\u00edneas hijas de la indentaci\u00f3n actual), syntax seg\u00fan indique el coloreado de sintaxis (toda la funci\u00f3n, toda la clase, etc). Yo, particularmente, prefiero la granularidad del modo manual.","title":"Plegado (folding) de texto"},{"location":"herramientas-it/vim/08-funcionalidadees_para_programadores/#persistencia-de-los-pliegues","text":"Al contrario que las marcas, cuando salimos de un fichero se pierden los pliegues que hemos creado para \u00e9l. Para evitar esto, podemos utilizar unos comandos en el fichero .vimrc que autom\u00e1ticamente salvan la sesi\u00f3n de \"pliegues\" cuando salimos de Vim, y la cargan al editar de nuevo el mismo fichero. \"\"\" Save only fold in viewoptions set foldmethod=manual set viewoptions=folds \"\"\" Save folds on exit and load them on edit autocmd BufWinLeave ?* mkview autocmd BufWinEnter ?* silent loadview Es necesario crear el directorio ~/.vim/view (con mkdir) previamente para que vim pueda grabar las \"vistas\" en \u00e9l. N\u00f3tese que con esta opci\u00f3n activa, para cada fichero que editemos (tenga o no folds) se generar\u00e1 un peque\u00f1o fichero de 300 bytes en $HOME/.vim/view/ conteniendo la informaci\u00f3n de \"vista\" de dicho fichero. Aunque 300 bytes requerir\u00eda 10.000 ficheros editados para ocupar apenas 3 MB de informaci\u00f3n, podemos querer borrar regularmente el contenido de dicho directorio o tan vez los ficheros de vista m\u00e1s antiguos de, por ejemplo, 3 meses (con un find ~/.vim/view/ -type f -name \"*\" -mtime +90 -exec rm -f {} \\; ). Incluso es posible que s\u00f3lo tengamos intenci\u00f3n de guardar los folds (crear vistas) para ficheros de programaci\u00f3n, por lo que si programamos en C y Python, podemos cambiar la configuraci\u00f3n de \"?*\" por: autocmd BufWinLeave ?*.py mkview autocmd BufWinEnter ?*.py silent loadview autocmd BufWinLeave ?*.[ch] mkview autocmd BufWinEnter ?*.[ch] silent loadview Eso guardar\u00e1 vistas en $HOME/.vim/view s\u00f3lo para ficheros .py, .c y .h (aunque podemos alegremente dejarlo activado para ?* y borrar regularmente los ficheros m\u00e1s antiguos de N d\u00edas sin problemas).","title":"Persistencia de los pliegues"},{"location":"herramientas-it/vim/08-funcionalidadees_para_programadores/#etiquetas-tags","text":"Una de las habilidades de cualquier editor moderno es la de \"etiquetar\" internamente las variables, funciones, clases, m\u00e9todos y atributos de nuestro programa de forma que podamos saltar, desde cualquier punto del documento, a su definici\u00f3n/declaraci\u00f3n, y poder volver al punto inicial del salto. De esta forma, si tenemos duda acerca de un m\u00e9todo o funci\u00f3n, podemos saltar a su definici\u00f3n para ver sus argumentos de entrada o su salida, y volver al punto donde est\u00e1bamos (una vez resuelta la duda) para continuar con la inserci\u00f3n de c\u00f3digo. Las etiquetas tambi\u00e9n pueden permitirnos estudiar c\u00f3digo ya escrito saltando a las declaraciones o definiciones de lo que estamos estudiando en caso de duda. Vim permite utilizar un sistema de etiquetas denominado ctags , que debemos instalar como: Sistema Comando CentOS / RedHat / Fedora yum install ctags Ubuntu / Debian / Mint apt-get install exuberant-ctags Una vez instalado, debemos generar los tags para nuestro programa con el binario de ctags, con alguno de los siguientes comandos: ctags *.c *.h -> Todos los .c o .h del directorio ctags *.py -> Todos los .py del directorio. ctags -R *.py -> Todos los ficheros si el proyecto tiene subdirectorios Una vez hecho esto, se generar\u00e1 en el directorio actual un fichero llamado \"tags\" el cual contiene la informaci\u00f3n que Vim utilizar\u00e1 como etiquetas (se puede cambiar el path de la ubicaci\u00f3n de este fichero, si queremos uno gen\u00e9rico, con :set tags , aunque personalmente prefiero un fichero de tags por proyecto). Ctags soporta m\u00e1s de 30 lenguajes diferentes de programaci\u00f3n. Si ahora editamos un fichero de c\u00f3digo, podremos utilizar los siguientes comandos: Comando Significado :tag subrutina_o_variable Salta a la definici\u00f3n de la variable. Tiene autocompletado con Tabulador. En gVim podemos usar Ctrl + Click izquierdo del rat\u00f3n sobre la palabra. :stag subrutina_o_variableTAB Salta a la definici\u00f3n de la variable en una nueva ventana. Tiene autocompletado con Tabulador. :tags o :ts Muestra la pila / hist\u00f3rico de tags. :tn[ext] Cuando hemos hecho una b\u00fasqueda parcial, saltar al siguiente tag que la cumple. :tp[revious] Cuando hemos hecho una b\u00fasqueda parcial, saltar al anterior tag que la cumple. :tf[irst] Cuando hemos hecho una b\u00fasqueda parcial, saltar al primer tag que la cumple. :tl[ast] Cuando hemos hecho una b\u00fasqueda parcial, saltar al \u00faltimo tag que la cumple. Ctrl+] Saltar al tag de la palabra bajo el cursor. En el teclado espa\u00f1ol, para pulsar ] se necesita pulsar Ctrl+AltGr+]. Ctrl+t o :pop Volver al lugar desde el que se hizo el salto con Ctrl+]. En gVim, podemos usar Ctrl + Click derecho del rat\u00f3n. Ctrl+W+] Saltar al tag de la palabra bajo el cursor en una ventana nueva. :ptag subrutina_o_variable Muestra la definici\u00f3n del tab en una ventana de preview. Para m\u00faltiples matches, podemos movernos con :ptnext y :ptprevious o sus abreviaturas :ptn y :ptp Ctrl+W+} Mostrar el tag en una ventana de preview. :pc Cerrar la ventana de preview. Adicionalmente, podemos hacer que vim busque autom\u00e1ticamente el fichero adecuado con: vim -t tag_a_buscar N\u00f3tese que las combinaciones de teclas para saltar al tag bajo el cursor (Ctrl+]) y para volver (Ctrl+T) son bastante problem\u00e1ticas... la primera, en el teclado espa\u00f1o, implica pulsar Ctrl+AltGr+], y la segunda puede provocar, en algunos gestores de terminales, el lanzar una nueva pesta\u00f1a. Para facilitar el uso de los tags, podemos establecer unas macros para modo comando en nuestro .vimrc: \"\"\" Tags nmap <F5> <C-]> nmap <F6> <C-T> N\u00f3tese que Vim utiliza el fichero \" tags \", creado al ejecutar ctags, como informaci\u00f3n para los saltos y etiquetas. Esta informaci\u00f3n es est\u00e1tica, es decir, no se actualiza hasta que volvemos a ejecutar ctags. Esto implica que si estamos analizando un programa ya finalizado, bastar\u00e1 con la ejecuci\u00f3n inicial de ctags pero para programas \"en crecimiento\" deberemos lanzar ctags regularmente de forma que el fichero de tags est\u00e9 actualizado. En programas compilables, se puede poner la llamada a ctags en el Makefile aunque lo m\u00e1s c\u00f3modo es mapear (map) una tecla contra una llamada del tipo !ctags miprograma.py o similar. Existen tambi\u00e9n plugins (extensiones) dedicados a mantener los ctags (como autotags , easytags , indexer , etc). Existen otros plugins de Vim como taglist o tagbar que regeneran los tags de forma autom\u00e1tica y hacen uso de ellos para proporcionarnos una ventana de navegaci\u00f3n vertical con la estructura del c\u00f3digo, para movernos r\u00e1pidamente entre variables, m\u00e9todos, clases y funciones. Incluso podremos mapear una tecla del teclado para mostrar u ocultar la ventana de tags cuando la necesitemos. M\u00e1s adelante veremos c\u00f3mo instalar plugins para hacer uso de estas interesantes funcionalidades.","title":"Etiquetas (tags)"},{"location":"herramientas-it/vim/08-funcionalidadees_para_programadores/#personalizando-la-barra-de-estado","text":"La barra de estado de Vim proporciona informaci\u00f3n sobre el fichero que estamos editando, el modo de trabajo actual y, normalmente, la fila y columna en que est\u00e1 posicionada el cursor. Esta barra de estado puede ser personalizada con m\u00faltiples par\u00e1metros, como por ejemplo: \"\"\" Formato de la barra de estado, y posicion en la penultima linea set statusline=%t\\ %y\\ format:\\ %{&ff};\\ [%c,%l] set laststatus=2 La l\u00ednea de estado tendr\u00eda el siguiente aspecto: .vimrc.common [vim] format: unix; [133,22] Los diferentes par\u00e1metros a utilizar para statusline los podemos obtener dentro de Vim con :help statusline . Dentro de statusline podemos incluso hacer uso de funciones complejas como (ojo, l\u00ednea partida pero debe ir toda en una s\u00f3la l\u00ednea en el vimrc): set statusline=%<%F%h%m%r%h%w%y\\ \\-\\ %{&ff}\\ \\-\\ %{strftime (\\\"%H:%M\\ \\-\\ %d/%m/%Y\\\",getftime(expand(\\\"%:p\\\")))}% =\\ [%c\\,%l]\\ \\(%L\\ lines\\)\\ \\ %P Y el resultado es:","title":"Personalizando la barra de estado"},{"location":"herramientas-it/vim/08-funcionalidadees_para_programadores/#opciones-de-arranque-de-vim","text":"Veamos algunas opciones interesantes para lanzar el binario \"vim\" desde la l\u00ednea de comandos: Usando el operador \"+\", podemos lanzar Vim yendo directamente a una determinada l\u00ednea, al final del fichero, o a la primera aparici\u00f3n de un patr\u00f3n. Tambi\u00e9n podemos usar -u NONE para lanzar Vim sin cargar nuestro .vimrc (vim \"vanilla\"). # Abrir fichero y posicionar el cursor en la l\u00ednea 25: $ vim fichero +25 # Abrir fichero y posicionar el cursor en la \u00faltima l\u00ednea: $ vim fichero + # Abrir fichero y posicionar el cursor en la primera aparici\u00f3n de PATTERN $ vim fichero +/PATTERN # Editar en Vim la salida de un comando (luego guardarlo con \":w out.txt\"). $ command | vim - # Lanzar vim sin leer nuestro .vimrc $ vim -u NONE","title":"Opciones de arranque de Vim"},{"location":"herramientas-it/vim/08-funcionalidadees_para_programadores/#ejemplos-de-comandos-utiles-varios","text":"A continuaci\u00f3n mostramos una serie de ejemplos basicos \u00fatiles que no tienen cabida en otra secci\u00f3n pero que pueden resultar interesantes si el lector no los ha deducido ya para realizar una tarea concreta: :%s/*$/ \u2192 Eliminar espacios en blanco al final de l\u00ednea en todo el documento. :%s/TABULADOR*$// \u2192 Eliminar espacios en blanco y tabuladores al final de l\u00ednea en todo el documento. :g/cadena/d \u2192 Eliminar todas aquellas l\u00edneas que contienen una cadena o patr\u00f3n. :g/^ *#/d \u2192 Eliminar todas las l\u00edneas de comentarios de python (que desde el principo de l\u00ednea haya 0 o m\u00e1s espacios y una almohadilla). Aplicaci\u00f3n del ejemplo anterior. :g!/cadena/d \u2192 Eliminar todas aquellas l\u00edneas que no cumplen un patr\u00f3n indicado. :1,$ s/ V M// \u2192 Eliminar retornos de carro de MSDOS (las teclas ^V y ^M se corresponden con Ctrl+V y Ctrl+M y hay que pulsarlas primero una y despu\u00e9s la otra, no teclear su texto). vim sftp://usuario@destino.com/path/fichero.txt \u2192 Edici\u00f3n remota de ficheros por SCP (u otros protocolos soportados). gf \u2192 Abrir el fichero cuyo nombre est\u00e1 ubicado bajo el cursor (especialmente \u00fatil para #includes, imports, etc). El fichero debe de estar en el mismo directorio que el directorio de trabajo. No obstante, podemos forzar a que Vim lo busque recursivamente en los directorios hijos o padres a\u00f1adiendo en nuestro .vimrc la opci\u00f3n: \" set path +=./** \" . imap ii \u2192 Volver al modo comando desde el modo inserci\u00f3n al teclear 2 \u00edes segu\u00eddas. Es complicado encontrar palabras y expresiones que tengan 2 \u00edes seguidas (si no, podemos usar \"jj\"). Este mapeado permite cambiar entre comando e inserci\u00f3n siempre con la \"i\" (\"ii\" o \"i\"). Abrir la URL presente en la l\u00ednea actual en el navegador: function! Browser () let line = getline (\".\") let line = matchstr (line, \"http[^ ]*\") exec \"!firefox -new-tab \".line endfunction map <F8> :call Browser ()<CR> Insertar una cadena al principio de m\u00faltiples l\u00edneas (por ejemplo, un comentario, un s\u00edmbolo \" +\"...). -En la primera l\u00ednea de las que queremos modificar, en la columna donde queremos agregar el texto (por ejemplo, la primera), pulsar CTRL+V para entrar en modo selecci\u00f3n de bloque. -Pulsar abajo para bajar hasta la \u00faltima l\u00ednea (no importa el ancho de la selecci\u00f3n, puede ser de 1 simple bloque). -Pulsar I (may\u00fasculas + i = insertar al principio de la l\u00ednea, en este caso de la selecci\u00f3n, aunque est\u00e9 a mediados de la l\u00ednea completa). -Escribir el texto. -Pulsar ESC. Pasado 1 segundo veremos c\u00f3mo se a\u00f1ade el texto a todas las l\u00edneas justo en la columna donde agregamos el texto manualmente. Insertar una cadena al final de m\u00faltiples l\u00edneas. -En la primera l\u00ednea de las que queremos modificar, al principio de la l\u00ednea, pulsar CTRL+V para entrar en modo selecci\u00f3n de bloque. -Pulsar abajo para bajar hasta la \u00faltima l\u00ednea (no importa el ancho de la selecci\u00f3n, puede ser de 1 simple bloque). -Pulsar $ (fin de l\u00ednea) para que se seleccione hasta el final de l\u00ednea en todas las l\u00edneas. -Pulsar A (may\u00fasculas + a = insertar al final de la l\u00ednea, en este caso de la selecci\u00f3n). -Escribir el texto. -Pulsar ESC. Pasado 1 segundo veremos c\u00f3mo se a\u00f1ade el texto a todas las l\u00edneas justo al final de cada l\u00ednea, sin importar que no tengan todas el mismo ancho. Macros: Pulsa q[a-z] para empezar a grabar una macro en uno de las 26 macros (de la a a la z). Pulsa q en modo comando para parar la grabaci\u00f3n. Despu\u00e9s, se puede reproducr la macro con @[a-z] . La \u00faltima macro ejecutada se puede lanzar de nuevo con @@ e incluso repetir varias veces con multiplicadores como 3@@ . Hacer que los cursores no funcionen para obligarnos a usar las teclas de movimiento h, j, k, l: noremap <Up> <nop> noremap <Down> <nop> noremap <Left> <nop> noremap <Right> <nop> Este \u00faltimo ejemplo es recomendado por los puristas de Vim para ense\u00f1ar a los usuarios a no utilizar los cursores y acostumbrarse a las teclas de movimiento h, j, k ,l. Estas teclas, en el centro del teclado, requieren cierto tiempo de aprendizaje pero permiten trabajar m\u00e1s r\u00e1pido con Vim al no tener que llevar las manos hasta los cursores para el movimiento.","title":"Ejemplos de comandos \u00fatiles varios"},{"location":"herramientas-it/vim/08-funcionalidadees_para_programadores/#atajos-de-teclado-con-la-tecla-leader","text":"En Vim, existe una tecla especial llamada \"leader\", la cual es una especie de prefijo para ejecutar atajos de teclado personalizados. Por defecto, la tecla (que es como se la referencia en el fichero rc) es la barra invertida . Ahora que ya conocemos la existencia de , podemos crear atajos de teclado en nuestro .vimrc para utilizarla: \" Leader + C = Introducir una l\u00ednea de comentario y bajar a la siguiente linea noremap <Leader>C i#-----------------------------------<ESC>j Ahora, si en modo comando pulsamos \"barra invertida\", la soltamos, y antes de 1000 milisegundos (1 segundo) pulsamos C, se insertar\u00e1 la l\u00ednea de comentario con los guiones, se volver\u00e1 a modo inserci\u00f3n (con ) y se bajar\u00e1 a la siguiente l\u00ednea (con \"j\"). La tecla es una tecla muy c\u00f3moda de usar en los teclados USA, pero a los Europeos nos resultar\u00e1 probablemente poco c\u00f3moda. Lo que podemos hacer es modificarla en nuestro vimrc para que sea, por ejemplo, la coma (',') o el guion ('-'): let mapleader = \",\" Ahora, usando coma como Leader, podemos definirnos \"macros\" o atajos para cubrir nuestras necesidades. Por ejemplo, veamos uno para guardar el fichero actual como root (por ejemplo, si hemos editado un fichero como usuario y despu\u00e9s de hacer los cambios, no podemos guardar): \" Leader + W = grabar el fichero actual como root noremap <Leader>W :w !sudo tee % > /dev/null Si por alg\u00fan motivo necesitamos modificar el tiempo de 1000 milisegundos que tenemos para pulsar la segunda tecla tras , podemos hacerlo con \":set timeoutlen\". Fuente : Guia de vim por : Santiago Romero","title":"Atajos de teclado con la tecla \"leader\""},{"location":"herramientas-it/vim/09-extendiendo_vim_con_plugins/","text":"Extendiendo Vim con plugins \u00b6 Aunque ya de por s\u00ed Vim es un editor muy completo, resulta que podemos extender sus funcionalidades para hacer cualquier cosa que se nos pueda ocurrir dentro de las posibilidades del \"lenguaje interno\" que utiliza para su configuraci\u00f3n y de los comandos que soporta. En la web de vim podemos encontrar una secci\u00f3n denominada scripts que contiene plugins que extienden Vim con capacidades especiales. La URL concreta es http://www.vim.org/scripts/ y este es el aspecto que tiene: Si pulsamos en [more] (abajo de la p\u00e1gina) y hacemos una b\u00fasqueda por \"Rating\", podemos observar algunos de los scripts m\u00e1s populares (mejor puntuados), como por ejemplo: snipMate \u2192 Implementa en Vim los populares \"snippets\" del editor TextMate. Permite definir en ficheros espec\u00edficos de cada lenguaje de programaci\u00f3n peque\u00f1as porciones de c\u00f3digo que ser\u00e1n insertadas en el fichero cuando las \"lancemos\" mediante palabras clave seguidas del tabulador. Por ejemplo, escribiendo en modo inserci\u00f3n \"class\" seguido del tabulador, se insertar\u00e1 en el documento el snippet (toda una clase con sus comentarios, m\u00e9todos de inicio, etc). tagbar \u2192 Utiliza ctags para generar una ventana vertical (que podemos mostrar u ocultar con un atajo de teclado) con la estructura del c\u00f3digo fuente del proyecto y que permite saltar entre los diferentes m\u00e9todos, funciones y ficheros de una forma sencilla. supertab \u2192 Cuando comenzamos a teclear una palabra en modo inserci\u00f3n, Vim saca un menu contextual con opciones de autocompletado que podemos seleccionar con los cursores y enter, o descartar al continuar escribiendo. The NERD tree \u2192 Este plugin habilita una ventana vertical (que podemos mostrar u ocultar con un atajo de teclado) con la estructura de directorios actual, para poder movernos entre ellos f\u00e1cilmente. Para mostrar c\u00f3mo se instalan y c\u00f3mo funcionan los plugins vamos a instalar snipMate . Instalando snipMate manualmente \u00b6 Primero, descargamos el plugin de esta URL : http://www.vim.org/scripts/script.php?script_id=2540 Normalmente, los plugins son simples ficheros .vim a copiar dentro del directorio $HOME/.vim/plugins. Tambi\u00e9n hay ficheros en formato .zip o .tar.gz que contienen m\u00e1s ficheros y que se deben desempaquetar dentro de $HOME/.vim/ . $ cd $HOME/.vim/ $ unzip $HOME/snipMate.zip Archive: /home/sromero/Escritorio/snipMate.zip inflating: after/plugin/snipMate.vim inflating: autoload/snipMate.vim inflating: doc/snipMate.txt inflating: ftplugin/html_snip_helper.vim inflating: plugin/snipMate.vim inflating: snippets/_.snippets inflating: snippets/autoit.snippets inflating: snippets/c.snippets inflating: snippets/cpp.snippets inflating: snippets/html.snippets (etc...) inflating: snippets/vim.snippets inflating: snippets/zsh.snippets inflating: syntax/snippet.vim Al desempaquetar el plugin, se crean una serie de ficheros: documentaci\u00f3n, el fichero del plugin en s\u00ed mismo, y un directorio con los snippets personalizables. Estos ficheros, dentro de $HOME/.vim/snippets/ contienen (para cada lenguaje) los snippets que podemos utilizar. Por ejemplo, el fichero python.snippets contiene porciones como: snippet docs ''' File: ${1:`Filename('$1.py', 'foo.py')`} Author: ${2:`g:snips_author`} Description: ${3} ''' snippet for for ${1:needle} in ${2:haystack}: ${3:# code...} snippet cl class ${1:ClassName}(${2:object}): \"\"\"${3:docstring for $1}\"\"\" def __init__(self, ${4:arg}): ${5:super($1, self).__init__()} self.$4 = $4 ${6} Para asegurarnos el correcto funcionamiento de este plugin, necesitamos tener esta l\u00ednea en el .vimrc: filetype plugin on Si ahora editamos un fichero en python, y tecleamos \"cl\" y pulsamos el tabulador, aparecer\u00e1 esto en el fichero: Adem\u00e1s, el campo ClassName queda seleccionado con el cursor encima, y si tecleamos modificaremos dicho campo, actualiz\u00e1ndose autom\u00e1ticamente el nombre de la clase en la llamada a super(), m\u00e1s abajo. Usando Tabulador, podemos movernos hacia los siguientes par\u00e1metros y reemplazarlos. Editando y personalizando los ficheros de snippets, podemos hacernos una excelente biblioteca que introduzca por nosotros funciones, clases, getters/setters, docstrings, cabeceras de ficheros est\u00e1ndar con sus licencias, esqueletos de documentos de marcado ( HTML /XML/etc), etc. Como v\u00e9is, es algo parecido a iab pero con las siguientes caracter\u00edsticas avanzadas: Soporta par\u00e1metros y \u00e9stos se pueden referenciar dentro del snippet, podemos movernos entre ellos con el Tabulador y son autoactualizados conforme los cambiamos. Los \"disparadores\" de los snippets pueden ser id\u00e9nticos en 2 lenguajes diferentes. Por ejemplo, el snippet class puede estar en el fichero de configuraci\u00f3n python.snippets y c.snippets y provocar\u00e1 la inserci\u00f3n de un snippet diferente seg\u00fan el tipo de fichero de c\u00f3digo que estamos editando. Es decir, las definiciones de los snippets dependen del lenguaje que estemos utilizando. Por supuesto, podemos editar los ficheros de snippets para extender los snippets de un determinado lenguaje seg\u00fan nos interese. Podemos poner en un mismo fichero varios snippets con el mismo nombre, y al lanzarlo aparecer\u00e1 un men\u00fa para seleccionar cu\u00e1l de las definiciones queremos. En python.snippets tenemos un ejemplo con 4 definiciones de try que permite insertar, v\u00eda menu de teclado, cla\u00fasulas try/except, try/except/else, try/except/finally y try/except/else/finally. Las posibilidades son ilimitadas. Gesti\u00f3n de plugins con Vundle \u00b6 Instalar y mantener plugins a mano es algo que no se suele realizar en Vim. En su lugar, se utilizan herramientas de gesti\u00f3n de Plugins que facilitan mucho la tarea. Con estas herramientas (Pathogen, Vundle, NeoBundle...), no tenemos que descargar manualmente ning\u00fan plugin, ni desempaquetarlo en ~/.vim/, ni estar pendientes de sus actualizaciones. Vamos a ver c\u00f3mo se puede usar Vundle para gestionar nuestros plugins. Lo haremos con un vimrc de ejemplo y con los pasos necesarios para instalar Vundle y los plugins. Vamos a asumir un .vim sin plugins descargados (si tenemos alguno instalado manualmente, podemos mantenerlo, o bien borrarlo y agregarlo despu\u00e9s a los plugins gestionados por Vundle). Lo primero que haremos ser\u00e1 instalar Vundle, que es un plugin en s\u00ed mismo: # cd ~/.vim # mkdir -p bundle # git clone https://github.com/gmarik/Vundle.vim.git bundle/Vundle.vim Una vez instalado Vundle (el plugin), editamos nuestro .vimrc e inclu\u00edmos las l\u00edneas necesarias para inicializar Vundle, para decirle a Vundle qu\u00e9 plugins queremos, y para cerrar la inicializaci\u00f3n: \"\"\" Principio del fichero .vimrc, s\u00f3lo necesitamos que contenga: set nocompatible \"\"\" Inicializamos Vundle (el filetype off es obligatorio filetype off set rtp+=~/.vim/bundle/vundle call vundle#begin() \"\"\" Declaramos los plugins deseados Plugin 'bling/vim-airline' Plugin 'majutsushi/tagbar' Plugin 'godlygeek/tabular' Plugin 'scrooloose/nerdcommenter' Plugin 'mileszs/ack.vim' Plugin 'vim-scripts/Command-T' Plugin 'kien/ctrlp.vim' Plugin 'scrooloose/nerdtree' Plugin 'ervandew/supertab' Plugin 'vim-scripts/TaskList.vim' Plugin 'vim-scripts/ShowMarks' Plugin 'garbas/vim-snipmate' \" tlib_vim and vim-addon-mw-utils are required by vim-snipmate: Plugin 'tomtom/tlib_vim' Plugin 'MarcWeber/vim-addon-mw-utils' \" Vundle gestiona vundle! Plugin 'gmarik/Vundle.vim' \" Colour schemes to install Plugin 'altercation/vim-colors-solarized' Plugin 'tomasr/molokai' Plugin 'benjaminwhite/Benokai' Plugin 'sickill/vim-monokai' \"\"\" Cierre de la inicializaci\u00f3n de Bundle y activamos el filetype call vundle#end() filetype plugin indent on let mapleader=\",\" \"\"\" Ahora, definir nuestras opciones genericas del VIM, \"\"\" asi como las funciones de configuracion especificas \"\"\" de los plugins declarados con Plugin. set nobackup set ruler set novisualbell set noerrorbells set ttyfast set nowrap set autoindent set expandtab set tabstop=4 \"\"\" (etc etc etc...) A la hora de definir los plugins que queremos instalar, las cadenas tras la keyword \"Plugin\", del tipo \"A/B\" se corresponden con \"repositorio/NombrePlugin\" de github, de forma que: Plugin 'scrooloose/nerdcommenter' Se refiere a https://github.com/scrooloose/nerdcommenter . Ahora ya le podemos decir a Vundle que descargue e instale los plugins, saliendo a la terminal y ejecutando: vim +PluginInstall +qall Al hacer esto, veremos c\u00f3mo Vundle se conecta a todos los repositorios de github indicados y descarga todos los plugins dentro de ~/.vim/Bundle/ : \" Installing plugins to /root/.vim/bundle | 1 . Plugin 'bling/vim-airline' |~ . Plugin 'majutsushi/tagbar' |~ . Plugin 'godlygeek/tabular' |~ (...) Ahora ya podemos abrir Vim y veremos c\u00f3mo los diferentes plugins est\u00e1n instalados. Para configurarlos, editamos nuestro fichero .vimrc y debajo de la configuraci\u00f3n \"gen\u00e9rica\" que ten\u00edamos podemos incluir configuraciones espec\u00edficas para los plugins: \" Nerd Tree: abrir en modo comando con ,n (coma seguido de n): let g:NERDTreeWinPos = \"left\" let g:NERDTreeWinSize = 25 nmap <leader>n :NERDTreeToggle<CR> map <F1> <ESC>:NERDTreeToggle<CR> \" Cerrar Vim si NerdTree es la unica ventana abierta autocmd bufenter * if (winnr(\"$\") == 1 && exists(\"b:NERDTreeType\") && \\ b:NERDTreeType == \"primary\") | q! | endif \" Cargar el esquema de colores molokai (instalado con Vundle tambien) colorscheme molokai \" etc... Fuente : Guia de vim por : Santiago Romero","title":"Extendiendo Vim con plugins"},{"location":"herramientas-it/vim/09-extendiendo_vim_con_plugins/#extendiendo-vim-con-plugins","text":"Aunque ya de por s\u00ed Vim es un editor muy completo, resulta que podemos extender sus funcionalidades para hacer cualquier cosa que se nos pueda ocurrir dentro de las posibilidades del \"lenguaje interno\" que utiliza para su configuraci\u00f3n y de los comandos que soporta. En la web de vim podemos encontrar una secci\u00f3n denominada scripts que contiene plugins que extienden Vim con capacidades especiales. La URL concreta es http://www.vim.org/scripts/ y este es el aspecto que tiene: Si pulsamos en [more] (abajo de la p\u00e1gina) y hacemos una b\u00fasqueda por \"Rating\", podemos observar algunos de los scripts m\u00e1s populares (mejor puntuados), como por ejemplo: snipMate \u2192 Implementa en Vim los populares \"snippets\" del editor TextMate. Permite definir en ficheros espec\u00edficos de cada lenguaje de programaci\u00f3n peque\u00f1as porciones de c\u00f3digo que ser\u00e1n insertadas en el fichero cuando las \"lancemos\" mediante palabras clave seguidas del tabulador. Por ejemplo, escribiendo en modo inserci\u00f3n \"class\" seguido del tabulador, se insertar\u00e1 en el documento el snippet (toda una clase con sus comentarios, m\u00e9todos de inicio, etc). tagbar \u2192 Utiliza ctags para generar una ventana vertical (que podemos mostrar u ocultar con un atajo de teclado) con la estructura del c\u00f3digo fuente del proyecto y que permite saltar entre los diferentes m\u00e9todos, funciones y ficheros de una forma sencilla. supertab \u2192 Cuando comenzamos a teclear una palabra en modo inserci\u00f3n, Vim saca un menu contextual con opciones de autocompletado que podemos seleccionar con los cursores y enter, o descartar al continuar escribiendo. The NERD tree \u2192 Este plugin habilita una ventana vertical (que podemos mostrar u ocultar con un atajo de teclado) con la estructura de directorios actual, para poder movernos entre ellos f\u00e1cilmente. Para mostrar c\u00f3mo se instalan y c\u00f3mo funcionan los plugins vamos a instalar snipMate .","title":"Extendiendo Vim con plugins"},{"location":"herramientas-it/vim/09-extendiendo_vim_con_plugins/#instalando-snipmate-manualmente","text":"Primero, descargamos el plugin de esta URL : http://www.vim.org/scripts/script.php?script_id=2540 Normalmente, los plugins son simples ficheros .vim a copiar dentro del directorio $HOME/.vim/plugins. Tambi\u00e9n hay ficheros en formato .zip o .tar.gz que contienen m\u00e1s ficheros y que se deben desempaquetar dentro de $HOME/.vim/ . $ cd $HOME/.vim/ $ unzip $HOME/snipMate.zip Archive: /home/sromero/Escritorio/snipMate.zip inflating: after/plugin/snipMate.vim inflating: autoload/snipMate.vim inflating: doc/snipMate.txt inflating: ftplugin/html_snip_helper.vim inflating: plugin/snipMate.vim inflating: snippets/_.snippets inflating: snippets/autoit.snippets inflating: snippets/c.snippets inflating: snippets/cpp.snippets inflating: snippets/html.snippets (etc...) inflating: snippets/vim.snippets inflating: snippets/zsh.snippets inflating: syntax/snippet.vim Al desempaquetar el plugin, se crean una serie de ficheros: documentaci\u00f3n, el fichero del plugin en s\u00ed mismo, y un directorio con los snippets personalizables. Estos ficheros, dentro de $HOME/.vim/snippets/ contienen (para cada lenguaje) los snippets que podemos utilizar. Por ejemplo, el fichero python.snippets contiene porciones como: snippet docs ''' File: ${1:`Filename('$1.py', 'foo.py')`} Author: ${2:`g:snips_author`} Description: ${3} ''' snippet for for ${1:needle} in ${2:haystack}: ${3:# code...} snippet cl class ${1:ClassName}(${2:object}): \"\"\"${3:docstring for $1}\"\"\" def __init__(self, ${4:arg}): ${5:super($1, self).__init__()} self.$4 = $4 ${6} Para asegurarnos el correcto funcionamiento de este plugin, necesitamos tener esta l\u00ednea en el .vimrc: filetype plugin on Si ahora editamos un fichero en python, y tecleamos \"cl\" y pulsamos el tabulador, aparecer\u00e1 esto en el fichero: Adem\u00e1s, el campo ClassName queda seleccionado con el cursor encima, y si tecleamos modificaremos dicho campo, actualiz\u00e1ndose autom\u00e1ticamente el nombre de la clase en la llamada a super(), m\u00e1s abajo. Usando Tabulador, podemos movernos hacia los siguientes par\u00e1metros y reemplazarlos. Editando y personalizando los ficheros de snippets, podemos hacernos una excelente biblioteca que introduzca por nosotros funciones, clases, getters/setters, docstrings, cabeceras de ficheros est\u00e1ndar con sus licencias, esqueletos de documentos de marcado ( HTML /XML/etc), etc. Como v\u00e9is, es algo parecido a iab pero con las siguientes caracter\u00edsticas avanzadas: Soporta par\u00e1metros y \u00e9stos se pueden referenciar dentro del snippet, podemos movernos entre ellos con el Tabulador y son autoactualizados conforme los cambiamos. Los \"disparadores\" de los snippets pueden ser id\u00e9nticos en 2 lenguajes diferentes. Por ejemplo, el snippet class puede estar en el fichero de configuraci\u00f3n python.snippets y c.snippets y provocar\u00e1 la inserci\u00f3n de un snippet diferente seg\u00fan el tipo de fichero de c\u00f3digo que estamos editando. Es decir, las definiciones de los snippets dependen del lenguaje que estemos utilizando. Por supuesto, podemos editar los ficheros de snippets para extender los snippets de un determinado lenguaje seg\u00fan nos interese. Podemos poner en un mismo fichero varios snippets con el mismo nombre, y al lanzarlo aparecer\u00e1 un men\u00fa para seleccionar cu\u00e1l de las definiciones queremos. En python.snippets tenemos un ejemplo con 4 definiciones de try que permite insertar, v\u00eda menu de teclado, cla\u00fasulas try/except, try/except/else, try/except/finally y try/except/else/finally. Las posibilidades son ilimitadas.","title":"Instalando snipMate manualmente"},{"location":"herramientas-it/vim/09-extendiendo_vim_con_plugins/#gestion-de-plugins-con-vundle","text":"Instalar y mantener plugins a mano es algo que no se suele realizar en Vim. En su lugar, se utilizan herramientas de gesti\u00f3n de Plugins que facilitan mucho la tarea. Con estas herramientas (Pathogen, Vundle, NeoBundle...), no tenemos que descargar manualmente ning\u00fan plugin, ni desempaquetarlo en ~/.vim/, ni estar pendientes de sus actualizaciones. Vamos a ver c\u00f3mo se puede usar Vundle para gestionar nuestros plugins. Lo haremos con un vimrc de ejemplo y con los pasos necesarios para instalar Vundle y los plugins. Vamos a asumir un .vim sin plugins descargados (si tenemos alguno instalado manualmente, podemos mantenerlo, o bien borrarlo y agregarlo despu\u00e9s a los plugins gestionados por Vundle). Lo primero que haremos ser\u00e1 instalar Vundle, que es un plugin en s\u00ed mismo: # cd ~/.vim # mkdir -p bundle # git clone https://github.com/gmarik/Vundle.vim.git bundle/Vundle.vim Una vez instalado Vundle (el plugin), editamos nuestro .vimrc e inclu\u00edmos las l\u00edneas necesarias para inicializar Vundle, para decirle a Vundle qu\u00e9 plugins queremos, y para cerrar la inicializaci\u00f3n: \"\"\" Principio del fichero .vimrc, s\u00f3lo necesitamos que contenga: set nocompatible \"\"\" Inicializamos Vundle (el filetype off es obligatorio filetype off set rtp+=~/.vim/bundle/vundle call vundle#begin() \"\"\" Declaramos los plugins deseados Plugin 'bling/vim-airline' Plugin 'majutsushi/tagbar' Plugin 'godlygeek/tabular' Plugin 'scrooloose/nerdcommenter' Plugin 'mileszs/ack.vim' Plugin 'vim-scripts/Command-T' Plugin 'kien/ctrlp.vim' Plugin 'scrooloose/nerdtree' Plugin 'ervandew/supertab' Plugin 'vim-scripts/TaskList.vim' Plugin 'vim-scripts/ShowMarks' Plugin 'garbas/vim-snipmate' \" tlib_vim and vim-addon-mw-utils are required by vim-snipmate: Plugin 'tomtom/tlib_vim' Plugin 'MarcWeber/vim-addon-mw-utils' \" Vundle gestiona vundle! Plugin 'gmarik/Vundle.vim' \" Colour schemes to install Plugin 'altercation/vim-colors-solarized' Plugin 'tomasr/molokai' Plugin 'benjaminwhite/Benokai' Plugin 'sickill/vim-monokai' \"\"\" Cierre de la inicializaci\u00f3n de Bundle y activamos el filetype call vundle#end() filetype plugin indent on let mapleader=\",\" \"\"\" Ahora, definir nuestras opciones genericas del VIM, \"\"\" asi como las funciones de configuracion especificas \"\"\" de los plugins declarados con Plugin. set nobackup set ruler set novisualbell set noerrorbells set ttyfast set nowrap set autoindent set expandtab set tabstop=4 \"\"\" (etc etc etc...) A la hora de definir los plugins que queremos instalar, las cadenas tras la keyword \"Plugin\", del tipo \"A/B\" se corresponden con \"repositorio/NombrePlugin\" de github, de forma que: Plugin 'scrooloose/nerdcommenter' Se refiere a https://github.com/scrooloose/nerdcommenter . Ahora ya le podemos decir a Vundle que descargue e instale los plugins, saliendo a la terminal y ejecutando: vim +PluginInstall +qall Al hacer esto, veremos c\u00f3mo Vundle se conecta a todos los repositorios de github indicados y descarga todos los plugins dentro de ~/.vim/Bundle/ : \" Installing plugins to /root/.vim/bundle | 1 . Plugin 'bling/vim-airline' |~ . Plugin 'majutsushi/tagbar' |~ . Plugin 'godlygeek/tabular' |~ (...) Ahora ya podemos abrir Vim y veremos c\u00f3mo los diferentes plugins est\u00e1n instalados. Para configurarlos, editamos nuestro fichero .vimrc y debajo de la configuraci\u00f3n \"gen\u00e9rica\" que ten\u00edamos podemos incluir configuraciones espec\u00edficas para los plugins: \" Nerd Tree: abrir en modo comando con ,n (coma seguido de n): let g:NERDTreeWinPos = \"left\" let g:NERDTreeWinSize = 25 nmap <leader>n :NERDTreeToggle<CR> map <F1> <ESC>:NERDTreeToggle<CR> \" Cerrar Vim si NerdTree es la unica ventana abierta autocmd bufenter * if (winnr(\"$\") == 1 && exists(\"b:NERDTreeType\") && \\ b:NERDTreeType == \"primary\") | q! | endif \" Cargar el esquema de colores molokai (instalado con Vundle tambien) colorscheme molokai \" etc... Fuente : Guia de vim por : Santiago Romero","title":"Gesti\u00f3n de plugins con Vundle"},{"location":"herramientas-it/vim/10-modo_vi_en_bash/","text":"Modo vi en bash \u00b6 Si nos hemos hecho expertos en Vim y hemos cogido habilidad con sus atajos de teclado, podemos exprimir esta habilidad para mejorar nuestro uso de la terminal bash . Bash (por medio de readline) funciona por defecto en modo \"emacs\", pero podemos pasarla a \"modo vi\" a\u00f1adiendo lo siguiente a nuestro .bashrc: export EDITOR=\"vim\" export VISUAL=\"vim\" set -o vi (tambi\u00e9n podemos ejecutar los anteriores comandos en una terminal ya abierta para probarlo, y volver a modo emacs despu\u00e9s con set -o emacs ). Una vez en modo vi, podemos utilizar las teclas y atajos de Vim tal y como se explica en esta minireceta en ingl\u00e9s: Vi mode for bash readline [EN] . En resumen \u00b6 Para finalizar, s\u00f3lo recordaros que la documentaci\u00f3n inclu\u00edda con Vim es todo un libro en s\u00ed misma, y que la pod\u00e9is completar con todos los recursos disponibles en Internet. Y para recordar todo el rosario de comandos existentes, lo mejor es practicar usando el editor, que (como me sucedi\u00f3 a m\u00ed) seguramente se os acabar\u00e1 convirtiendo en una herramienta imprescindible. Fuente : Guia de vim por : Santiago Romero","title":"Modo vi en bash"},{"location":"herramientas-it/vim/10-modo_vi_en_bash/#modo-vi-en-bash","text":"Si nos hemos hecho expertos en Vim y hemos cogido habilidad con sus atajos de teclado, podemos exprimir esta habilidad para mejorar nuestro uso de la terminal bash . Bash (por medio de readline) funciona por defecto en modo \"emacs\", pero podemos pasarla a \"modo vi\" a\u00f1adiendo lo siguiente a nuestro .bashrc: export EDITOR=\"vim\" export VISUAL=\"vim\" set -o vi (tambi\u00e9n podemos ejecutar los anteriores comandos en una terminal ya abierta para probarlo, y volver a modo emacs despu\u00e9s con set -o emacs ). Una vez en modo vi, podemos utilizar las teclas y atajos de Vim tal y como se explica en esta minireceta en ingl\u00e9s: Vi mode for bash readline [EN] .","title":"Modo vi en bash"},{"location":"herramientas-it/vim/10-modo_vi_en_bash/#en-resumen","text":"Para finalizar, s\u00f3lo recordaros que la documentaci\u00f3n inclu\u00edda con Vim es todo un libro en s\u00ed misma, y que la pod\u00e9is completar con todos los recursos disponibles en Internet. Y para recordar todo el rosario de comandos existentes, lo mejor es practicar usando el editor, que (como me sucedi\u00f3 a m\u00ed) seguramente se os acabar\u00e1 convirtiendo en una herramienta imprescindible. Fuente : Guia de vim por : Santiago Romero","title":"En resumen"}]}